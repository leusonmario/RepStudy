import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest7 {

    public static boolean debug = false;

    @Test
    public void test3501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3501");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        java.lang.String str26 = indexSettings21.getNodeName();
        java.lang.String str27 = indexSettings21.customDataPath();
        org.elasticsearch.Version version28 = indexSettings21.getversion();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings21.globalCheckpointInterval;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig30 = indexSettings21.getmergePolicyConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(version28);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(mergePolicyConfig30);
    }

    @Test
    public void test3502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3502");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean22 = indexSettings21.isShadowReplicaIndex;
        org.elasticsearch.common.unit.TimeValue timeValue23 = indexSettings21.getsyncInterval();
        org.elasticsearch.index.translog.Translog.Durability durability24 = indexSettings21.getdurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(timeValue23);
        org.junit.Assert.assertTrue("'" + durability24 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability24.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test3503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3503");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings21.getsyncInterval();
        int int36 = indexSettings21.getMaxRescoreWindow();
        int int37 = indexSettings21.numberOfShards;
        java.lang.String str38 = indexSettings21.defaultField;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting39 = indexSettings21.getINDEX_WARMER_ENABLED_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "_all" + "'", str38, "_all");
        org.junit.Assert.assertNotNull(booleanSetting39);
    }

    @Test
    public void test3504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3504");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.nodeSettings;
        indexSettings21.maxRescoreWindow = 0;
        boolean boolean26 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getSettings();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting28 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        int int29 = indexSettings21.numberOfShards;
        indexSettings21.maxResultWindow = 'a';
        java.lang.String str32 = indexSettings21.nodeName;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting33 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(timeValueSetting28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(timeValueSetting33);
    }

    @Test
    public void test3505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3505");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.isPrivateSetting("index.");
        boolean boolean10 = indexScopedSettings6.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray24 = settings12.getAsArray("", strArray22, (java.lang.Boolean) false);
        indexScopedSettings6.validate("index.shadow_replicas", settings12);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings12);
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings26.setTranslogDurability(durability27);
        boolean boolean29 = indexSettings26.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer32 = null;
        indexScopedSettings30.addSettingsUpdateConsumer(settingsSetting31, settingsConsumer32);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting35 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer36 = null;
        indexScopedSettings34.addSettingsUpdateConsumer(settingsSetting35, settingsConsumer36);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings30.get(settingsSetting35);
        org.elasticsearch.common.settings.Settings settings39 = indexSettings26.getValue(settingsSetting35);
        java.lang.String str40 = indexSettings26.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting41 = indexSettings26.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = indexSettings26.indexMetaData;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff43 = indexMetaData0.diff(indexMetaData42);
        int int44 = indexMetaData42.getNumberOfShards();
        int int45 = indexMetaData42.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData42);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder46.putAlias(aliasMetaData47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settingsSetting35);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaDataDiff43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test3506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3506");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue23 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig24 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.nodeSettings;
        org.elasticsearch.Version version26 = indexSettings21.version;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(byteSizeValue23);
        org.junit.Assert.assertNotNull(mergePolicyConfig24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(version26);
    }

    @Test
    public void test3507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3507");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.logging.ESLogger eSLogger30 = indexSettings21.logger;
        boolean boolean31 = indexSettings21.getqueryStringAnalyzeWildcard();
        long long32 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue33 = indexSettings21.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.logging.ESLogger eSLogger34 = indexSettings21.getlogger();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(eSLogger30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1000L + "'", long32 == 1000L);
        org.junit.Assert.assertNotNull(timeValue33);
        org.junit.Assert.assertNotNull(eSLogger34);
    }

    @Test
    public void test3508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3508");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = settings6.getAsStructuredMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.isPrivateSetting("index.");
        boolean boolean14 = indexScopedSettings10.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings16.getGroups("index.uuid");
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray28 = settings16.getAsArray("", strArray26, (java.lang.Boolean) false);
        indexScopedSettings10.validate("index.shadow_replicas", settings16);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings16);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting31 = indexSettings30.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting37 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer38 = null;
        indexScopedSettings36.addSettingsUpdateConsumer(settingsSetting37, settingsConsumer38);
        org.elasticsearch.common.settings.Settings settings40 = indexScopedSettings32.get(settingsSetting37);
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings32.dryRun(settings41);
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings42);
        indexSettings30.settings = settings43;
        org.elasticsearch.common.unit.SizeValue sizeValue46 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue47 = settings43.getAsSize("_na_", sizeValue46);
        boolean boolean48 = settings43.isEmpty();
        java.lang.String[] strArray50 = settings43.getAsArray("index.number_of_shards");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean54 = indexScopedSettings52.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings58 = indexScopedSettings52.applySettings(settings55);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray66 = settings58.getAsArray("index.version.created", strArray64, (java.lang.Boolean) false);
        java.lang.String[] strArray67 = settings43.getAsArray("primary_terms", strArray64);
        java.lang.String[] strArray68 = settings6.getAsArray("_na_", strArray67);
        java.lang.Boolean boolean71 = settings6.getAsBoolean("index.auto_expand_replicas", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, java.lang.String> strMap72 = settings6.getAsMap();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(booleanSetting31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertNotNull(settingsSetting37);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNull(sizeValue47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertEquals("'" + boolean71 + "' != '" + true + "'", boolean71, true);
        org.junit.Assert.assertNotNull(strMap72);
    }

    @Test
    public void test3509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3509");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings15 = settings11.getAsSettings("");
        java.lang.Boolean boolean18 = settings15.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue20 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue21 = settings15.getAsBytesSize("index.", byteSizeValue20);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = null;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings27 = settings23.getAsSettings("");
        java.lang.Boolean boolean30 = settings27.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue32 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue33 = settings27.getAsBytesSize("index.", byteSizeValue32);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params35 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings27.toXContent(xContentBuilder34, params35);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = settings15.toXContent(xContentBuilder22, params35);
        java.lang.Class<?> wildcardClass38 = settings15.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder9.put("index.version.upgraded_string", (java.lang.Class) wildcardClass38);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder9.put("index.shared_filesystem.recover_on_any_node", (long) 'a');
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("_na_", (long) 10000);
        java.util.Map<java.lang.String, java.lang.String> strMap46 = builder45.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder45.put("index.version.minimum_compatible", "index.");
        org.elasticsearch.common.settings.Settings settings50 = builder49.build();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings50, streamOutput51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertEquals("'" + boolean18 + "' != '" + true + "'", boolean18, true);
        org.junit.Assert.assertNull(byteSizeValue21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + true + "'", boolean30, true);
        org.junit.Assert.assertNull(byteSizeValue33);
        org.junit.Assert.assertNotNull(params35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNull(xContentBuilder37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
    }

    @Test
    public void test3510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3510");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getValue(settingsSetting17);
        int int19 = 0; // flaky: indexSettings16.numberOfShards;
        org.elasticsearch.common.logging.ESLogger eSLogger20 = null; // flaky: indexSettings16.logger;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting21 = null; // flaky: indexSettings16.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = null; // flaky: indexSettings16.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher23 = null; // flaky: indexSettings16.parseFieldMatcher;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting24 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(settingsSetting17);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertNotNull(eSLogger20);
// flaky:         org.junit.Assert.assertNotNull(intSetting21);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting22);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher23);
// flaky:         org.junit.Assert.assertNotNull(strSetting24);
    }

    @Test
    public void test3511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3511");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings20.applySettings(settings23);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.applySettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexScopedSettings0.copy(settings28, indexMetaData29);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings31.applySettings(settings34);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings31.applySettings(settings38);
        indexScopedSettings0.validate(settings39);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting41 = org.elasticsearch.index.IndexSettings.INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING;
        indexScopedSettings0.validateSettingKey((org.elasticsearch.common.settings.Setting) byteSizeValueSetting41);
        boolean boolean44 = indexScopedSettings0.isPrivateSetting("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings49 = settings45.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings45);
        org.elasticsearch.common.settings.Setting.Property property51 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings54 = settings52.getAsSettings("hi!");
        java.lang.Boolean boolean57 = settings52.getAsBoolean("index.shared_filesystem.recover_on_any_node", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings52.getAsGroups();
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings52);
        boolean boolean60 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings52);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(byteSizeValueSetting41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertTrue("'" + property51 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property51.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertEquals("'" + boolean57 + "' != '" + true + "'", boolean57, true);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test3512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3512");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
// flaky:         indexSettings16.setMaxResultWindow(100);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting22 = null; // flaky: indexSettings16.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = null; // flaky: indexSettings16.indexMetaData;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = null; // flaky: indexMetaData23.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = null; // flaky: indexMetaData23.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(intSetting22);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
    }

    @Test
    public void test3513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3513");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings24 = settings20.getAsSettings("");
        java.lang.Boolean boolean27 = settings24.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue29 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue30 = settings24.getAsBytesSize("index.", byteSizeValue29);
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings0.dryRun(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean36 = indexScopedSettings34.isPrivateSetting("index.");
        boolean boolean38 = indexScopedSettings34.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings40.getGroups("index.uuid");
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray52 = settings40.getAsArray("", strArray50, (java.lang.Boolean) false);
        indexScopedSettings34.validate("index.shadow_replicas", settings40);
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings40);
        indexSettings54.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings54.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings54.getMAX_RESCORE_WINDOW_SETTING();
        java.lang.String str59 = indexSettings54.getUUID();
        long long60 = indexSettings54.gcDeletesInMillis;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean64 = indexScopedSettings62.isPrivateSetting("index.");
        boolean boolean66 = indexScopedSettings62.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap70 = settings68.getGroups("index.uuid");
        java.lang.String[] strArray78 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray80 = settings68.getAsArray("", strArray78, (java.lang.Boolean) false);
        indexScopedSettings62.validate("index.shadow_replicas", settings68);
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings68);
        org.elasticsearch.index.translog.Translog.Durability durability83 = null;
        indexSettings82.setTranslogDurability(durability83);
        org.elasticsearch.common.unit.TimeValue timeValue85 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings82.setGCDeletes(timeValue85);
        org.apache.lucene.index.MergePolicy mergePolicy87 = indexSettings82.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue88 = indexSettings82.syncInterval;
        indexSettings54.refreshInterval = timeValue88;
        org.elasticsearch.common.unit.TimeValue timeValue90 = indexSettings54.refreshInterval;
        org.elasticsearch.Version version91 = indexSettings54.version;
        org.elasticsearch.Version version92 = settings24.getAsVersion("index.version.created_string", version91);
        boolean boolean93 = settings24.isEmpty();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertEquals("'" + boolean27 + "' != '" + true + "'", boolean27, true);
        org.junit.Assert.assertNull(byteSizeValue30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "_na_" + "'", str59, "_na_");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 60000L + "'", long60 == 60000L);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(timeValue85);
        org.junit.Assert.assertNotNull(mergePolicy87);
        org.junit.Assert.assertNotNull(timeValue88);
        org.junit.Assert.assertNotNull(timeValue90);
        org.junit.Assert.assertNotNull(version91);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test3514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3514");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer25 = null;
        indexScopedSettings23.addSettingsUpdateConsumer(settingsSetting24, settingsConsumer25);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting28 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer29 = null;
        indexScopedSettings27.addSettingsUpdateConsumer(settingsSetting28, settingsConsumer29);
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings23.get(settingsSetting28);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings23.dryRun(settings32);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings33);
        indexSettings21.settings = settings34;
        boolean boolean36 = indexSettings21.warmerEnabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settingsSetting28);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test3515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3515");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        boolean boolean23 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.Version version24 = indexSettings21.getIndexVersionCreated();
        boolean boolean25 = indexSettings21.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test3516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3516");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = settings4.getAsSettings("");
        java.lang.Boolean boolean11 = settings8.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = settings8.getAsBytesSize("index.", byteSizeValue13);
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.uuid", 0L);
        java.lang.String str20 = builder18.get("");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder18.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = settings24.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings26.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction29 = null;
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder18.putProperties(strMap27, strPredicate28, strFunction29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder18.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.uuid", 0L);
        java.lang.String str38 = builder36.get("");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder36.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = settings42.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings44.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction47 = null;
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder36.putProperties(strMap45, strPredicate46, strFunction47);
        boolean boolean50 = indexScopedSettings0.updateSettings(settings8, builder18, builder48, "index.uuid");
        boolean boolean52 = indexScopedSettings0.hasDynamicSetting("index.version.upgraded");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + boolean11 + "' != '" + true + "'", boolean11, true);
        org.junit.Assert.assertNull(byteSizeValue14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test3517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3517");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig35 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting36 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting37 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean38 = indexSettings21.isQueryStringAllowLeadingWildcard();
        boolean boolean39 = indexSettings21.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting40 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        boolean boolean41 = indexSettings21.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(mergePolicyConfig35);
        org.junit.Assert.assertNotNull(booleanSetting36);
        org.junit.Assert.assertNotNull(booleanSetting37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSetting40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test3518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3518");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.excludeFilters();
        java.lang.Object obj2 = null;
        boolean boolean3 = indexMetaData0.equals(obj2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int8 = builder7.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = settings13.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.uuid");
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray29 = settings17.getAsArray("", strArray27, (java.lang.Boolean) false);
        java.lang.String[] strArray31 = settings13.getAsArray("index.version.minimum_compatible", strArray27, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder10.settings(settings13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder10.creationDate((long) 10);
        java.lang.String[] strArray56 = new java.lang.String[] { "index.", "index.version.upgraded_string", "", "index.creation_date", "index.shared_filesystem", "index.auto_expand_replicas", "index.version.upgraded_string", "archived.", "index.uuid", "archived.", "", "index.shared_filesystem.recover_on_any_node", "index.version.created_string", "_na_", "hi!", "index.blocks.read_only", "index.version.created_string", "index.creation_date", "index.version.minimum_compatible", "index.creation_date" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder10.putActiveAllocationIds(10000, (java.util.Set<java.lang.String>) strSet57);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder4.putActiveAllocationIds((int) 'a', (java.util.Set<java.lang.String>) strSet57);
        long long62 = builder60.primaryTerm(0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
    }

    @Test
    public void test3519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3519");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData28.getMappings();
        org.elasticsearch.common.settings.Settings settings30 = indexMetaData28.getSettings();
        int int31 = indexMetaData28.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test3520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3520");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue23 = indexSettings21.globalCheckpointInterval;
        boolean boolean24 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher25 = indexSettings21.getParseFieldMatcher();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting26 = indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNotNull(timeValue23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher25);
        org.junit.Assert.assertNotNull(intSetting26);
    }

    @Test
    public void test3521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3521");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        boolean boolean25 = indexSettings21.isIndexUsingShadowReplicas();
        java.lang.String str26 = indexSettings21.defaultField;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "_all" + "'", str26, "_all");
    }

    @Test
    public void test3522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3522");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.syncInterval;
        java.lang.String str28 = indexSettings21.customDataPath();
        indexSettings21.gcDeletesInMillis = 5000099;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test3523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3523");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("index.uuid", 0L);
        java.lang.String str24 = builder22.get("");
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings34 = settings30.getAsSettings("");
        java.lang.Boolean boolean37 = settings34.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue39 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue40 = settings34.getAsBytesSize("index.", byteSizeValue39);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = null;
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings42.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings46 = settings42.getAsSettings("");
        java.lang.Boolean boolean49 = settings46.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue52 = settings46.getAsBytesSize("index.", byteSizeValue51);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params54 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = settings46.toXContent(xContentBuilder53, params54);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = settings34.toXContent(xContentBuilder41, params54);
        java.lang.Class<?> wildcardClass57 = settings34.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder28.put("index.version.upgraded_string", (java.lang.Class) wildcardClass57);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder17.put("_all", (java.lang.Class) wildcardClass57);
        java.lang.String str61 = builder59.remove("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder59.replacePropertyPlaceholders();
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder66 = builder62.put("index.blocks.read", 1000L, byteSizeUnit65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + boolean37 + "' != '" + true + "'", boolean37, true);
        org.junit.Assert.assertNull(byteSizeValue40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertEquals("'" + boolean49 + "' != '" + true + "'", boolean49, true);
        org.junit.Assert.assertNull(byteSizeValue52);
        org.junit.Assert.assertNotNull(params54);
        org.junit.Assert.assertNull(xContentBuilder55);
        org.junit.Assert.assertNull(xContentBuilder56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test3524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3524");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int12 = builder11.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder14.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder14.numberOfReplicas((int) ' ');
        java.lang.String[] strArray40 = new java.lang.String[] { "index.blocks.read_only", "index.version.created", "index.", "index.uuid", "index.uuid", "index.uuid", "index.version.created_string", "index.", "index.", "_na_", "state-", "_na_", "state-", "index.shadow_replicas", "index.blocks.read_only", "index.shared_filesystem", "_na_", "index.blocks.read_only" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder14.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet41);
        long long44 = builder43.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder43.version((long) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.isPrivateSetting("index.");
        boolean boolean52 = indexScopedSettings48.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings54.getGroups("index.uuid");
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray66 = settings54.getAsArray("", strArray64, (java.lang.Boolean) false);
        indexScopedSettings48.validate("index.shadow_replicas", settings54);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings54);
        org.elasticsearch.index.translog.Translog.Durability durability69 = null;
        indexSettings68.setTranslogDurability(durability69);
        org.elasticsearch.common.unit.TimeValue timeValue71 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings68.setGCDeletes(timeValue71);
        org.elasticsearch.common.settings.Settings settings73 = indexSettings68.settings;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder43.settings(settings73);
        java.lang.Class<?> wildcardClass75 = settings73.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder6.put("index.version.created_string", (java.lang.Class) wildcardClass75);
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder76.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder76.loadFromSource("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder79.normalizePrefix("state-");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(timeValue71);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test3525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3525");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder4.creationDate((long) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom30 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder28.putCustom("index.shared_filesystem.recover_on_any_node", custom30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int35 = builder34.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder34.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = settings40.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings44.getGroups("index.uuid");
        java.lang.String[] strArray54 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray56 = settings44.getAsArray("", strArray54, (java.lang.Boolean) false);
        java.lang.String[] strArray58 = settings40.getAsArray("index.version.minimum_compatible", strArray54, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder37.settings(settings40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder37.creationDate((long) 10);
        long long62 = builder61.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder61.removeAllAliases();
        int int64 = builder61.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean69 = indexScopedSettings67.isPrivateSetting("index.");
        boolean boolean71 = indexScopedSettings67.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap75 = settings73.getGroups("index.uuid");
        java.lang.String[] strArray83 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray85 = settings73.getAsArray("", strArray83, (java.lang.Boolean) false);
        indexScopedSettings67.validate("index.shadow_replicas", settings73);
        org.elasticsearch.index.IndexSettings indexSettings87 = new org.elasticsearch.index.IndexSettings(indexMetaData66, settings73);
        java.util.Set<java.lang.String> strSet88 = settings73.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder89 = builder61.putActiveAllocationIds((int) 'a', strSet88);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder90 = builder31.putActiveAllocationIds(1, strSet88);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test3526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3526");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings4.applySettings(settings7);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = settings11.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = settings13.getAsMap();
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings4.applySettings(settings13);
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings0.dryRun(settings13);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings16.getGroups("index.shadow_replicas", true);
        org.elasticsearch.common.settings.Settings settings21 = settings16.getByPrefix("_na_");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = settings21.getAsMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings26.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings23.applySettings(settings26);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings23.applySettings(settings30);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting32 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings23.get(settingsSetting32);
        java.lang.String str34 = indexScopedSettings23.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int36 = indexMetaData35.getNumberOfShards();
        org.elasticsearch.Version version37 = indexMetaData35.getUpgradedVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = new org.elasticsearch.common.settings.IndexScopedSettings(settings21, indexScopedSettings23, indexMetaData35);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting40 = indexScopedSettings38.get("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settingsSetting32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(version37);
        org.junit.Assert.assertNull(wildcardSetting40);
    }

    @Test
    public void test3527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3527");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting29 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData30.excludeFilters();
        java.lang.Object obj32 = null;
        boolean boolean33 = indexMetaData30.equals(obj32);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = indexMetaData30.mappingOrDefault("hi!");
        int int36 = indexMetaData30.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData30.getCustoms();
        indexSettings21.indexMetaData = indexMetaData30;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = indexMetaData30.getState();
        long long40 = indexMetaData30.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(booleanSetting29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
    }

    @Test
    public void test3528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3528");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder1.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("index.version.created");
        long long7 = builder6.version();
        long long8 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.version((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder6.creationDate(1000L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder6.version(60000L);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3529");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue23 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.common.settings.Settings settings24 = indexSettings21.settings;
        boolean boolean25 = indexSettings21.TTLPurgeDisabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(byteSizeValue23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test3530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3530");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        long long7 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.numberOfShards(1);
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray14 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder10.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList15);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.version.created", (double) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray29 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder25.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList30);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.version.created", (double) ' ');
        java.lang.Class<?> wildcardClass39 = builder38.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder23.put("index.version.created_string", (java.lang.Class) wildcardClass39);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder23.putNull("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder6.settings(builder42);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder42.put("index.version.minimum_compatible", "index.");
        java.lang.String str48 = builder46.remove("index.priority");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test3531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3531");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder4.creationDate((long) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int32 = builder31.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder31.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder34.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = settings37.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings41.getGroups("index.uuid");
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray53 = settings41.getAsArray("", strArray51, (java.lang.Boolean) false);
        java.lang.String[] strArray55 = settings37.getAsArray("index.version.minimum_compatible", strArray51, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder34.settings(settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder34.creationDate((long) 10);
        java.lang.String[] strArray80 = new java.lang.String[] { "index.", "index.version.upgraded_string", "", "index.creation_date", "index.shared_filesystem", "index.auto_expand_replicas", "index.version.upgraded_string", "archived.", "index.uuid", "archived.", "", "index.shared_filesystem.recover_on_any_node", "index.version.created_string", "_na_", "hi!", "index.blocks.read_only", "index.version.created_string", "index.creation_date", "index.version.minimum_compatible", "index.creation_date" };
        java.util.LinkedHashSet<java.lang.String> strSet81 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = builder34.putActiveAllocationIds(10000, (java.util.Set<java.lang.String>) strSet81);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder84 = builder28.putActiveAllocationIds((int) (byte) 10, (java.util.Set<java.lang.String>) strSet81);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData86 = builder28.mapping("index.uuid");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(mappingMetaData86);
    }

    @Test
    public void test3532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3532");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.creationDate((long) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.version((long) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.version(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean11 = indexScopedSettings9.isPrivateSetting("index.");
        boolean boolean13 = indexScopedSettings9.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getGroups("index.uuid");
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray27 = settings15.getAsArray("", strArray25, (java.lang.Boolean) false);
        indexScopedSettings9.validate("index.shadow_replicas", settings15);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings15);
        org.elasticsearch.common.settings.Settings settings30 = indexSettings29.getSettings();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue31 = indexSettings29.getFlushThresholdSize();
        org.elasticsearch.Version version32 = indexSettings29.getIndexVersionCreated();
        long long33 = indexSettings29.getGcDeletesInMillis();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting34 = indexSettings29.getINDEX_CHECK_ON_STARTUP();
        indexSettings29.setMaxRescoreWindow(10);
        int int37 = indexSettings29.getMaxResultWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.isPrivateSetting("index.");
        boolean boolean43 = indexScopedSettings39.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray57 = settings45.getAsArray("", strArray55, (java.lang.Boolean) false);
        indexScopedSettings39.validate("index.shadow_replicas", settings45);
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings45);
        boolean boolean61 = indexSettings59.matchesIndexName("");
        long long62 = indexSettings59.getGcDeletesInMillis();
        boolean boolean63 = indexSettings59.queryStringAnalyzeWildcard;
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings59.getDEFAULT_GC_DELETES();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig65 = indexSettings59.getmergePolicyConfig();
        org.elasticsearch.common.unit.TimeValue timeValue66 = indexSettings59.getDEFAULT_REFRESH_INTERVAL();
        indexSettings29.setRefreshInterval(timeValue66);
        org.elasticsearch.common.settings.Settings settings68 = indexSettings29.getNodeSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder7.settings(settings68);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(byteSizeValue31);
        org.junit.Assert.assertNotNull(version32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 60000L + "'", long33 == 60000L);
        org.junit.Assert.assertNotNull(strSetting34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10000 + "'", int37 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertNotNull(mergePolicyConfig65);
        org.junit.Assert.assertNotNull(timeValue66);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test3533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3533");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder6.put("index.shared_filesystem.recover_on_any_node", (long) '#');
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder6.putNull("_all");
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.uuid", 0L);
        java.lang.String str20 = builder18.get("");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder18.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = settings24.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings26.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction29 = null;
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder18.putProperties(strMap27, strPredicate28, strFunction29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder18.replacePropertyPlaceholders();
        java.lang.String[] strArray45 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.", "index.blocks.read", "index.auto_expand_replicas", "index.blocks.read_only", "index.blocks.read", "state-", "index.uuid", "index.version.upgraded_string", "index.auto_expand_replicas", "archived.", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder31.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder13.putArray("", (java.util.List<java.lang.String>) strList46);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder51 = builder13.put(objDictionary50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test3534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3534");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        boolean boolean56 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        indexSettings78.setEnableWarmer(true);
        java.lang.String str81 = indexSettings78.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = indexSettings78.getIndexMetaData();
        indexSettings21.indexMetaData = indexMetaData82;
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap84 = indexMetaData82.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData86 = indexMetaData82.mapping("index.blocks.metadata");
        long long87 = indexMetaData82.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData89 = indexMetaData82.mapping("index.uuid");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap84);
        org.junit.Assert.assertNull(mappingMetaData86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData89);
    }

    @Test
    public void test3535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3535");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getTranslogDurability();
        boolean boolean28 = indexSettings21.queryStringAllowLeadingWildcard;
        boolean boolean29 = indexSettings21.isQueryStringLenient();
        boolean boolean30 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.Version version31 = indexSettings21.version;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(version31);
    }

    @Test
    public void test3536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3536");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        boolean boolean23 = indexSettings21.isIndexUsingShadowReplicas();
        int int24 = indexSettings21.getNumberOfShards();
        boolean boolean25 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.Version version26 = indexSettings21.version;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNotNull(settings27);
    }

    @Test
    public void test3537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3537");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.isPrivateSetting("index.");
        boolean boolean15 = indexScopedSettings11.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.uuid");
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray29 = settings17.getAsArray("", strArray27, (java.lang.Boolean) false);
        indexScopedSettings11.validate("index.shadow_replicas", settings17);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings17);
        org.elasticsearch.index.translog.Translog.Durability durability32 = null;
        indexSettings31.setTranslogDurability(durability32);
        org.elasticsearch.common.unit.TimeValue timeValue34 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings31.setGCDeletes(timeValue34);
        org.elasticsearch.Version version36 = indexSettings31.version;
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder6.put("index.blocks.read", version36);
        java.util.Map<java.lang.String, java.lang.String> strMap38 = builder6.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder6.put("index.shared_filesystem", (double) '#');
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.uuid", 0L);
        java.lang.String str50 = builder48.get("");
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder48.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings56 = settings54.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap57 = settings56.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder48.putProperties(strMap57, strPredicate58, strFunction59);
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings64 = settings62.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings66.getGroups("index.uuid");
        java.lang.String[] strArray76 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray78 = settings66.getAsArray("", strArray76, (java.lang.Boolean) false);
        java.lang.String[] strArray80 = settings62.getAsArray("index.version.minimum_compatible", strArray76, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder48.extendArray("", strArray80);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder44.put((java.lang.Object[]) strArray80);
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder82.putNull("index.number_of_replicas");
        java.lang.Class<?> wildcardClass85 = builder84.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(timeValue34);
        org.junit.Assert.assertNotNull(version36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test3538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3538");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        boolean boolean32 = indexScopedSettings28.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        indexScopedSettings28.validate("index.shadow_replicas", settings34);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings34);
        org.elasticsearch.index.translog.Translog.Durability durability49 = null;
        indexSettings48.setTranslogDurability(durability49);
        boolean boolean51 = indexSettings48.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting57 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer58 = null;
        indexScopedSettings56.addSettingsUpdateConsumer(settingsSetting57, settingsConsumer58);
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings52.get(settingsSetting57);
        org.elasticsearch.common.settings.Settings settings61 = indexSettings48.getValue(settingsSetting57);
        org.elasticsearch.common.settings.Settings settings62 = indexSettings21.getValue(settingsSetting57);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue63 = null;
        indexSettings21.flushThresholdSize = byteSizeValue63;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
        org.junit.Assert.assertNotNull(settingsSetting57);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
    }

    @Test
    public void test3539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3539");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting4 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer5 = null;
        indexScopedSettings3.addSettingsUpdateConsumer(settingsSetting4, settingsConsumer5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer9 = null;
        indexScopedSettings7.addSettingsUpdateConsumer(settingsSetting8, settingsConsumer9);
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings3.get(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings3.dryRun(settings12);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings15.applySettings(settings18);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings15.applySettings(settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings15.get(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13, strPredicate14, indexScopedSettings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters28 = indexMetaData27.includeFilters();
        long long29 = indexMetaData27.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData27.mappingOrDefault("state-");
        boolean boolean32 = false; // flaky: indexSettings26.updateIndexMetaData(indexMetaData27);
        boolean boolean34 = false; // flaky: indexSettings26.matchesIndexName("state-");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertNotNull(settingsSetting4);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNull(discoveryNodeFilters28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test3540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3540");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        boolean boolean21 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting24 = indexScopedSettings0.get("index.version.upgraded_string");
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting25 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING;
        indexScopedSettings0.validateSettingKey((org.elasticsearch.common.settings.Setting) intSetting25);
        org.elasticsearch.common.settings.Setting.Property property27 = indexScopedSettings0.getScope();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int29 = indexMetaData28.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings30.applySettings(settings33);
        java.lang.String str38 = settings33.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting41 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer42 = null;
        indexScopedSettings40.addSettingsUpdateConsumer(settingsSetting41, settingsConsumer42);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData28, settings33, strPredicate39, indexScopedSettings40);
        int int45 = 0; // flaky: indexSettings44.getNumberOfReplicas();
        int int46 = 0; // flaky: indexSettings44.getMaxRescoreWindow();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings47.applySettings(settings50);
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings47.applySettings(settings54);
        boolean boolean56 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
// flaky:         indexSettings44.settings = settings54;
        org.elasticsearch.common.settings.Settings settings59 = settings54.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings0.dryRun(settings59);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNull(wildcardSetting24);
        org.junit.Assert.assertNotNull(intSetting25);
        org.junit.Assert.assertTrue("'" + property27 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property27.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(settingsSetting41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10000 + "'", int46 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
    }

    @Test
    public void test3541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3541");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        int int27 = builder26.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder26.version((long) (-1));
        java.lang.String str31 = builder30.index();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test3542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3542");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexSettings21.getScopedSettings();
        org.elasticsearch.common.settings.Setting.Property property27 = indexScopedSettings26.getScope();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + property27 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property27.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
    }

    @Test
    public void test3543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3543");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test3544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3544");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder4.settings(settings27);
        java.lang.String str42 = settings27.get("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.isPrivateSetting("index.");
        boolean boolean47 = indexScopedSettings43.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings49.getGroups("index.uuid");
        java.lang.String[] strArray59 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray61 = settings49.getAsArray("", strArray59, (java.lang.Boolean) false);
        indexScopedSettings43.validate("index.shadow_replicas", settings49);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting64 = indexScopedSettings43.get("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int66 = indexMetaData65.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = new org.elasticsearch.common.settings.IndexScopedSettings(settings27, indexScopedSettings43, indexMetaData65);
        java.util.Set<java.lang.String> strSet69 = indexMetaData65.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters70 = indexMetaData65.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters71 = indexMetaData65.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap72 = indexMetaData65.getMappings();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(wildcardSetting64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNull(discoveryNodeFilters70);
        org.junit.Assert.assertNull(discoveryNodeFilters71);
        org.junit.Assert.assertNotNull(strImmutableOpenMap72);
    }

    @Test
    public void test3545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3545");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig35 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings43);
        org.elasticsearch.common.unit.TimeValue timeValue58 = indexSettings57.getDEFAULT_REFRESH_INTERVAL();
        indexSettings57.maxResultWindow = (byte) -1;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        indexSettings21.setdurability(durability61);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = indexSettings21.getIndexMetaData();
        org.elasticsearch.Version version64 = indexMetaData63.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(mergePolicyConfig35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(timeValue58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNotNull(version64);
    }

    @Test
    public void test3546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3546");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder1.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putMapping(mappingMetaData7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test3547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3547");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getRefreshInterval();
        org.elasticsearch.index.translog.Translog.Durability durability26 = indexSettings21.getTranslogDurability();
        boolean boolean27 = indexSettings21.isShadowReplicaIndex;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting28 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        boolean boolean29 = indexSettings21.hasCustomDataPath();
        int int30 = indexSettings21.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + durability26 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability26.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(booleanSetting28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
    }

    @Test
    public void test3548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3548");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
// flaky:         indexSettings16.setMaxResultWindow(100);
        org.elasticsearch.common.unit.TimeValue timeValue22 = null; // flaky: indexSettings16.refreshInterval;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null; // flaky: indexSettings16.indexNameMatcher;
        org.elasticsearch.common.logging.ESLogger eSLogger24 = null; // flaky: indexSettings16.getlogger();
        org.elasticsearch.common.unit.TimeValue timeValue25 = null; // flaky: indexSettings16.syncInterval;
        org.elasticsearch.common.unit.TimeValue timeValue26 = null; // flaky: indexSettings16.getsyncInterval();
        boolean boolean27 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
        java.lang.Class<?> wildcardClass28 = null; // flaky: indexSettings16.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNull(strPredicate23);
// flaky:         org.junit.Assert.assertNotNull(eSLogger24);
// flaky:         org.junit.Assert.assertNotNull(timeValue25);
// flaky:         org.junit.Assert.assertNotNull(timeValue26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test3549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3549");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting25 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting26 = indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        boolean boolean32 = indexScopedSettings28.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        indexScopedSettings28.validate("index.shadow_replicas", settings34);
        org.elasticsearch.common.settings.Settings settings49 = settings34.getAsSettings("_all");
        indexSettings21.settings = settings34;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean55 = indexScopedSettings53.isPrivateSetting("index.");
        boolean boolean57 = indexScopedSettings53.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings59.getGroups("index.uuid");
        java.lang.String[] strArray69 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray71 = settings59.getAsArray("", strArray69, (java.lang.Boolean) false);
        indexScopedSettings53.validate("index.shadow_replicas", settings59);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings59);
        org.elasticsearch.index.translog.Translog.Durability durability74 = null;
        indexSettings73.setTranslogDurability(durability74);
        boolean boolean76 = indexSettings73.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting78 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer79 = null;
        indexScopedSettings77.addSettingsUpdateConsumer(settingsSetting78, settingsConsumer79);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings81 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting82 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer83 = null;
        indexScopedSettings81.addSettingsUpdateConsumer(settingsSetting82, settingsConsumer83);
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings77.get(settingsSetting82);
        org.elasticsearch.common.settings.Settings settings86 = indexSettings73.getValue(settingsSetting82);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData87 = indexSettings73.indexMetaData;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig88 = indexSettings73.getmergePolicyConfig();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting89 = indexSettings73.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue90 = indexSettings73.getsyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue91 = settings34.getAsTime("1.0", timeValue90);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeValueSetting25);
        org.junit.Assert.assertNotNull(intSetting26);
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settingsSetting78);
        org.junit.Assert.assertNotNull(indexScopedSettings81);
        org.junit.Assert.assertNotNull(settingsSetting82);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(indexMetaData87);
        org.junit.Assert.assertNotNull(mergePolicyConfig88);
        org.junit.Assert.assertNotNull(timeValueSetting89);
        org.junit.Assert.assertNotNull(timeValue90);
        org.junit.Assert.assertNotNull(timeValue91);
    }

    @Test
    public void test3550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3550");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
// flaky:         indexSettings16.setMaxResultWindow(100);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting22 = null; // flaky: indexSettings16.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = null; // flaky: indexSettings16.indexMetaData;
        org.elasticsearch.Version version24 = null; // flaky: indexMetaData23.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(intSetting22);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData23);
// flaky:         org.junit.Assert.assertNotNull(version24);
    }

    @Test
    public void test3551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3551");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.unit.TimeValue timeValue17 = null; // flaky: indexSettings16.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue18 = null; // flaky: indexSettings16.getTranslogSyncInterval();
        java.lang.String str19 = null; // flaky: indexSettings16.defaultField;
        boolean boolean20 = false; // flaky: indexSettings16.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting21 = null; // flaky: indexSettings16.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = null; // flaky: indexSettings16.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(timeValue17);
// flaky:         org.junit.Assert.assertNotNull(timeValue18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_all" + "'", str19, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting21);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting22);
    }

    @Test
    public void test3552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3552");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings20.applySettings(settings23);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.applySettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexScopedSettings0.copy(settings28, indexMetaData29);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings31.applySettings(settings34);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings31.applySettings(settings38);
        indexScopedSettings0.validate(settings39);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting41 = org.elasticsearch.index.IndexSettings.INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING;
        indexScopedSettings0.validateSettingKey((org.elasticsearch.common.settings.Setting) byteSizeValueSetting41);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings46.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings49 = indexScopedSettings43.applySettings(settings46);
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings43.applySettings(settings50);
        boolean boolean52 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings50);
        org.elasticsearch.common.unit.SizeValue sizeValue54 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue55 = settings50.getAsSize("index.shadow_replicas", sizeValue54);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.isPrivateSetting("index.");
        boolean boolean61 = indexScopedSettings57.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings63.getGroups("index.uuid");
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray75 = settings63.getAsArray("", strArray73, (java.lang.Boolean) false);
        indexScopedSettings57.validate("index.shadow_replicas", settings63);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings63);
        org.elasticsearch.index.translog.Translog.Durability durability78 = null;
        indexSettings77.setTranslogDurability(durability78);
        org.elasticsearch.common.settings.Settings settings80 = indexSettings77.getNodeSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap81 = settings80.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings settings82 = indexScopedSettings0.diff(settings50, settings80);
        org.elasticsearch.common.settings.Settings settings83 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings82);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue86 = settings83.getAsMemory("5000099", "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [5000099] with value [index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(byteSizeValueSetting41);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(sizeValue55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings83);
    }

    @Test
    public void test3553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3553");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.applySettings(settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.get(settingsSetting9);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.isPrivateSetting("index.");
        boolean boolean15 = indexScopedSettings11.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.uuid");
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray29 = settings17.getAsArray("", strArray27, (java.lang.Boolean) false);
        indexScopedSettings11.validate("index.shadow_replicas", settings17);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting32 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer33 = null;
        indexScopedSettings31.addSettingsUpdateConsumer(settingsSetting32, settingsConsumer33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting36 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer37 = null;
        indexScopedSettings35.addSettingsUpdateConsumer(settingsSetting36, settingsConsumer37);
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings31.get(settingsSetting36);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer40 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer41 = null;
        indexScopedSettings11.addSettingsUpdateConsumer(settingsSetting36, settingsConsumer40, settingsConsumer41);
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings0.get(settingsSetting36);
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet44 = indexScopedSettings0.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean48 = indexScopedSettings46.isPrivateSetting("index.");
        boolean boolean50 = indexScopedSettings46.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings52.getGroups("index.uuid");
        java.lang.String[] strArray62 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray64 = settings52.getAsArray("", strArray62, (java.lang.Boolean) false);
        indexScopedSettings46.validate("index.shadow_replicas", settings52);
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings52);
        org.elasticsearch.index.translog.Translog.Durability durability67 = null;
        indexSettings66.setTranslogDurability(durability67);
        org.elasticsearch.common.settings.Settings settings69 = indexSettings66.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting70 = indexSettings66.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings71 = indexSettings66.scopedSettings;
        java.util.function.Predicate<java.lang.String> strPredicate72 = indexScopedSettings71.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings71.dryRun(settings73);
        org.elasticsearch.common.settings.Settings settings75 = indexScopedSettings0.dryRun(settings74);
        java.util.function.Predicate<java.lang.String> strPredicate76 = indexScopedSettings0.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting78 = indexScopedSettings0.get("index.version.upgraded");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settingsSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertNotNull(settingsSetting32);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertNotNull(settingsSetting36);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(wildcardSettingSet44);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(booleanSetting70);
        org.junit.Assert.assertNotNull(indexScopedSettings71);
        org.junit.Assert.assertNotNull(strPredicate72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strPredicate76);
        org.junit.Assert.assertNull(wildcardSetting78);
    }

    @Test
    public void test3554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3554");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability28 = indexSettings21.getdurability();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings29.applySettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings35.getGroups("index.creation_date", false);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean43 = indexScopedSettings41.isPrivateSetting("index.");
        boolean boolean45 = indexScopedSettings41.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap49 = settings47.getGroups("index.uuid");
        java.lang.String[] strArray57 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray59 = settings47.getAsArray("", strArray57, (java.lang.Boolean) false);
        indexScopedSettings41.validate("index.shadow_replicas", settings47);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings47);
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings61.getDEFAULT_REFRESH_INTERVAL();
        int int63 = indexSettings61.getMaxResultWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean67 = indexScopedSettings65.isPrivateSetting("index.");
        boolean boolean69 = indexScopedSettings65.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap73 = settings71.getGroups("index.uuid");
        java.lang.String[] strArray81 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray83 = settings71.getAsArray("", strArray81, (java.lang.Boolean) false);
        indexScopedSettings65.validate("index.shadow_replicas", settings71);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings71);
        org.elasticsearch.index.translog.Translog.Durability durability86 = null;
        indexSettings85.setTranslogDurability(durability86);
        boolean boolean88 = indexSettings85.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig89 = indexSettings85.getmergePolicyConfig();
        org.elasticsearch.common.unit.TimeValue timeValue90 = indexSettings85.getsyncInterval();
        indexSettings61.setRefreshInterval(timeValue90);
        org.elasticsearch.common.unit.TimeValue timeValue92 = settings35.getAsTime("index.version.created_string", timeValue90);
        indexSettings21.setGCDeletes(timeValue90);
        indexSettings21.setMaxResultWindow((int) (short) -1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertTrue("'" + durability28 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability28.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10000 + "'", int63 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig89);
        org.junit.Assert.assertNotNull(timeValue90);
        org.junit.Assert.assertNotNull(timeValue92);
    }

    @Test
    public void test3555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3555");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        boolean boolean12 = indexScopedSettings8.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings14.getGroups("index.uuid");
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray26 = settings14.getAsArray("", strArray24, (java.lang.Boolean) false);
        indexScopedSettings8.validate("index.shadow_replicas", settings14);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings14);
        org.elasticsearch.index.translog.Translog.Durability durability29 = null;
        indexSettings28.setTranslogDurability(durability29);
        org.elasticsearch.common.settings.Settings settings31 = indexSettings28.getSettings();
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder4.settings(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.creationDate((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings43);
        indexSettings57.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue60 = indexSettings57.getsyncInterval();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig61 = indexSettings57.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting62 = indexSettings57.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = indexSettings57.indexMetaData;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state64 = indexMetaData63.getState();
        byte byte65 = state64.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder35.state(state64);
        byte byte67 = state64.id();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(timeValue60);
        org.junit.Assert.assertNotNull(mergePolicyConfig61);
        org.junit.Assert.assertNotNull(booleanSetting62);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertTrue("'" + state64 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state64.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte65 + "' != '" + (byte) 0 + "'", byte65 == (byte) 0);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + byte67 + "' != '" + (byte) 0 + "'", byte67 == (byte) 0);
    }

    @Test
    public void test3556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3556");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = null; // flaky: indexSettings16.getIndexMetaData();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer23 = null;
        indexScopedSettings21.addSettingsUpdateConsumer(settingsSetting22, settingsConsumer23);
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings25.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings25.getAsSettings("");
        java.lang.Boolean boolean32 = settings29.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue34 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue35 = settings29.getAsBytesSize("index.", byteSizeValue34);
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("index.uuid", 0L);
        java.lang.String str41 = builder39.get("");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder39.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings47 = settings45.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = settings47.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate49 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction50 = null;
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder39.putProperties(strMap48, strPredicate49, strFunction50);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder39.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder54.put("index.uuid", 0L);
        java.lang.String str59 = builder57.get("");
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder57.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder57.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings65 = settings63.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap66 = settings65.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate67 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction68 = null;
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder57.putProperties(strMap66, strPredicate67, strFunction68);
        boolean boolean71 = indexScopedSettings21.updateSettings(settings29, builder39, builder69, "index.uuid");
        boolean boolean72 = settings29.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap73 = settings29.getAsGroups();
// flaky:         indexSettings16.settings = settings29;
        boolean boolean75 = false; // flaky: indexSettings16.TTLPurgeDisabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + boolean32 + "' != '" + true + "'", boolean32, true);
        org.junit.Assert.assertNull(byteSizeValue35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test3557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3557");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int25 = builder24.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder24.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings32 = settings30.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        java.lang.String[] strArray48 = settings30.getAsArray("index.version.minimum_compatible", strArray44, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder27.settings(settings30);
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray62 = settings50.getAsArray("", strArray60, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder27.settings(settings50);
        java.lang.String str65 = settings50.get("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.isPrivateSetting("index.");
        boolean boolean70 = indexScopedSettings66.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings72.getGroups("index.uuid");
        java.lang.String[] strArray82 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray84 = settings72.getAsArray("", strArray82, (java.lang.Boolean) false);
        indexScopedSettings66.validate("index.shadow_replicas", settings72);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting87 = indexScopedSettings66.get("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData88 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int89 = indexMetaData88.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings90 = new org.elasticsearch.common.settings.IndexScopedSettings(settings50, indexScopedSettings66, indexMetaData88);
        boolean boolean92 = indexMetaData88.isSameUUID("index.version.created_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap93 = indexMetaData88.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData95 = indexMetaData88.mapping("index.number_of_shards");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff96 = indexMetaData0.diff(indexMetaData88);
        java.util.Set<java.lang.String> strSet98 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 10);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNull(wildcardSetting87);
        org.junit.Assert.assertNotNull(indexMetaData88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap93);
        org.junit.Assert.assertNull(mappingMetaData95);
        org.junit.Assert.assertNotNull(indexMetaDataDiff96);
        org.junit.Assert.assertNull(strSet98);
    }

    @Test
    public void test3558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3558");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.Version version26 = indexSettings21.version;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig28 = indexSettings21.getMergeSchedulerConfig();
        boolean boolean29 = indexSettings21.isQueryStringAllowLeadingWildcard();
        indexSettings21.setMaxRescoreWindow((int) 'a');
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        boolean boolean36 = indexScopedSettings32.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        indexScopedSettings32.validate("index.shadow_replicas", settings38);
        boolean boolean53 = indexScopedSettings32.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Setting.Property property54 = indexScopedSettings32.getScope();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean57 = indexScopedSettings55.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings55.applySettings(settings58);
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings55.applySettings(settings62);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting64 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings55.get(settingsSetting64);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting67 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer68 = null;
        indexScopedSettings66.addSettingsUpdateConsumer(settingsSetting67, settingsConsumer68);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings70 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting71 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer72 = null;
        indexScopedSettings70.addSettingsUpdateConsumer(settingsSetting71, settingsConsumer72);
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings66.get(settingsSetting71);
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings76 = indexScopedSettings66.dryRun(settings75);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting77 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting79 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer80 = null;
        indexScopedSettings78.addSettingsUpdateConsumer(settingsSetting79, settingsConsumer80);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings82 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting83 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer84 = null;
        indexScopedSettings82.addSettingsUpdateConsumer(settingsSetting83, settingsConsumer84);
        org.elasticsearch.common.settings.Settings settings86 = indexScopedSettings78.get(settingsSetting83);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer87 = null;
        indexScopedSettings66.addSettingsUpdateConsumer(settingsSetting77, settingsSetting83, settingsBiConsumer87);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer89 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting64, settingsSetting77, settingsBiConsumer89);
        org.elasticsearch.common.settings.Settings settings91 = indexSettings21.getValue(settingsSetting77);
        boolean boolean92 = indexSettings21.getwarmerEnabled();
        boolean boolean93 = indexSettings21.getqueryStringLenient();
        boolean boolean94 = indexSettings21.isTTLPurgeDisabled();
        org.elasticsearch.common.unit.TimeValue timeValue95 = indexSettings21.getDEFAULT_GC_DELETES();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + property54 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property54.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(indexScopedSettings55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settingsSetting64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertNotNull(settingsSetting67);
        org.junit.Assert.assertNotNull(indexScopedSettings70);
        org.junit.Assert.assertNotNull(settingsSetting71);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settingsSetting77);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
        org.junit.Assert.assertNotNull(settingsSetting79);
        org.junit.Assert.assertNotNull(indexScopedSettings82);
        org.junit.Assert.assertNotNull(settingsSetting83);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(timeValue95);
    }

    @Test
    public void test3559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3559");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.nodeSettings;
        indexSettings21.maxRescoreWindow = 0;
        boolean boolean26 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getSettings();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting28 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings21.getDEFAULT_GC_DELETES();
        boolean boolean30 = indexSettings21.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings35 = settings31.getAsSettings("");
        java.lang.Boolean boolean38 = settings35.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue40 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue41 = settings35.getAsBytesSize("index.", byteSizeValue40);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder42 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params43 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = settings35.toXContent(xContentBuilder42, params43);
        indexSettings21.settings = settings35;
        boolean boolean46 = indexSettings21.defaultAllowUnmappedFields;
        boolean boolean47 = indexSettings21.TTLPurgeDisabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(timeValueSetting28);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertEquals("'" + boolean38 + "' != '" + true + "'", boolean38, true);
        org.junit.Assert.assertNull(byteSizeValue41);
        org.junit.Assert.assertNotNull(params43);
        org.junit.Assert.assertNull(xContentBuilder44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test3560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3560");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean25 = indexSettings21.getqueryStringAnalyzeWildcard();
        boolean boolean26 = indexSettings21.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings27.applySettings(settings30);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = settings34.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = settings36.getAsMap();
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings27.applySettings(settings36);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = settings40.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = settings42.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean48 = indexScopedSettings46.isPrivateSetting("index.");
        boolean boolean50 = indexScopedSettings46.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings52.getGroups("index.uuid");
        java.lang.String[] strArray62 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray64 = settings52.getAsArray("", strArray62, (java.lang.Boolean) false);
        indexScopedSettings46.validate("index.shadow_replicas", settings52);
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings52);
        boolean boolean68 = indexSettings66.matchesIndexName("");
        long long69 = indexSettings66.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue70 = indexSettings66.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue71 = settings42.getAsBytesSize("primary_terms", byteSizeValue70);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue72 = settings36.getAsBytesSize("index.priority", byteSizeValue70);
        indexSettings21.setTranslogFlushThresholdSize(byteSizeValue70);
        int int74 = indexSettings21.getNumberOfReplicas();
        indexSettings21.warmerEnabled = false;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 60000L + "'", long69 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue70);
        org.junit.Assert.assertNotNull(byteSizeValue71);
        org.junit.Assert.assertNotNull(byteSizeValue72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test3561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3561");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.number_of_replicas");
        java.lang.String str8 = builder5.index();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int10 = indexMetaData9.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings14.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings11.applySettings(settings14);
        java.lang.String str19 = settings14.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer23 = null;
        indexScopedSettings21.addSettingsUpdateConsumer(settingsSetting22, settingsConsumer23);
        org.elasticsearch.index.IndexSettings indexSettings25 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14, strPredicate20, indexScopedSettings21);
        int int26 = 0; // flaky: indexSettings25.getNumberOfReplicas();
        int int27 = 0; // flaky: indexSettings25.getMaxRescoreWindow();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings28.applySettings(settings31);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.applySettings(settings35);
        boolean boolean37 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings35);
// flaky:         indexSettings25.settings = settings35;
        org.elasticsearch.common.settings.Settings settings40 = settings35.getAsSettings("");
        java.lang.String str42 = settings40.get("index.blocks.read");
        org.elasticsearch.common.settings.Settings settings44 = settings40.getAsSettings("index.version.minimum_compatible");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings40.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder5.settings(settings40);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test3562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3562");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting26 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        boolean boolean27 = indexSettings21.getisShadowReplicaIndex();
        int int28 = indexSettings21.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(timeValueSetting26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
    }

    @Test
    public void test3563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3563");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        boolean boolean56 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        indexSettings78.setEnableWarmer(true);
        java.lang.String str81 = indexSettings78.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = indexSettings78.getIndexMetaData();
        indexSettings21.indexMetaData = indexMetaData82;
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap84 = indexMetaData82.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters85 = indexMetaData82.getInitialRecoveryFilters();
        int int86 = indexMetaData82.getTotalNumberOfShards();
        long long87 = indexMetaData82.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap84);
        org.junit.Assert.assertNull(discoveryNodeFilters85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1L + "'", long87 == 1L);
    }

    @Test
    public void test3564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3564");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getGlobalCheckpointInterval();
        java.lang.String str23 = indexSettings21.nodeName;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.isPrivateSetting("index.");
        boolean boolean29 = indexScopedSettings25.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray43 = settings31.getAsArray("", strArray41, (java.lang.Boolean) false);
        indexScopedSettings25.validate("index.shadow_replicas", settings31);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings31);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting46 = indexSettings45.getINDEX_REFRESH_INTERVAL_SETTING();
        java.lang.String str47 = indexSettings45.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue48 = indexSettings45.getTranslogSyncInterval();
        indexSettings21.setGCDeletes(timeValue48);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean53 = indexScopedSettings51.isPrivateSetting("index.");
        boolean boolean55 = indexScopedSettings51.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap59 = settings57.getGroups("index.uuid");
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray69 = settings57.getAsArray("", strArray67, (java.lang.Boolean) false);
        indexScopedSettings51.validate("index.shadow_replicas", settings57);
        org.elasticsearch.index.IndexSettings indexSettings71 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings57);
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings71.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability73 = indexSettings71.getTranslogDurability();
        indexSettings21.durability = durability73;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting75 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(timeValueSetting46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertTrue("'" + durability73 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability73.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(booleanSetting75);
    }

    @Test
    public void test3565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3565");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings21.globalCheckpointInterval;
        java.lang.String str27 = indexSettings21.nodeName;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        boolean boolean33 = indexScopedSettings29.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        indexScopedSettings29.validate("index.shadow_replicas", settings35);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        org.elasticsearch.index.translog.Translog.Durability durability50 = null;
        indexSettings49.setTranslogDurability(durability50);
        org.elasticsearch.common.unit.TimeValue timeValue52 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings49.setGCDeletes(timeValue52);
        org.elasticsearch.Version version54 = indexSettings49.version;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting55 = indexSettings49.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig56 = indexSettings49.getMergeSchedulerConfig();
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings49.refreshInterval;
        indexSettings21.setRefreshInterval(timeValue57);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int60 = indexMetaData59.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean63 = indexScopedSettings61.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings67 = indexScopedSettings61.applySettings(settings64);
        java.lang.String str69 = settings64.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings71 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting72 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer73 = null;
        indexScopedSettings71.addSettingsUpdateConsumer(settingsSetting72, settingsConsumer73);
        org.elasticsearch.index.IndexSettings indexSettings75 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData59, settings64, strPredicate70, indexScopedSettings71);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting76 = null; // flaky: indexSettings75.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str77 = null; // flaky: indexSettings75.defaultField;
        boolean boolean78 = false; // flaky: indexSettings75.defaultAllowUnmappedFields;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData79 = null; // flaky: indexSettings75.getIndexMetaData();
        long long81 = 0L; // flaky: indexMetaData79.primaryTerm((int) (byte) 0);
        java.util.Set<java.lang.String> strSet83 = null; // flaky: indexMetaData79.activeAllocationIds(1);
        java.util.Set<java.lang.String> strSet85 = null; // flaky: indexMetaData79.activeAllocationIds((int) (byte) 100);
        indexSettings21.indexMetaData = indexMetaData79;
        org.elasticsearch.common.unit.TimeValue timeValue87 = indexSettings21.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(timeValue52);
        org.junit.Assert.assertNotNull(version54);
        org.junit.Assert.assertNotNull(booleanSetting55);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig56);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(indexScopedSettings71);
        org.junit.Assert.assertNotNull(settingsSetting72);
// flaky:         org.junit.Assert.assertNotNull(strSetting76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "_all" + "'", str77, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNull(strSet83);
        org.junit.Assert.assertNull(strSet85);
        org.junit.Assert.assertNotNull(timeValue87);
    }

    @Test
    public void test3566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3566");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue23 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.Version version24 = indexSettings21.getIndexVersionCreated();
        long long25 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting26 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        boolean boolean48 = indexScopedSettings27.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Setting.Property property49 = indexScopedSettings27.getScope();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean52 = indexScopedSettings50.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings53.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings56 = indexScopedSettings50.applySettings(settings53);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings58 = indexScopedSettings50.applySettings(settings57);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting59 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings50.get(settingsSetting59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting66 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings65.addSettingsUpdateConsumer(settingsSetting66, settingsConsumer67);
        org.elasticsearch.common.settings.Settings settings69 = indexScopedSettings61.get(settingsSetting66);
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.dryRun(settings70);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting72 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting74 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer75 = null;
        indexScopedSettings73.addSettingsUpdateConsumer(settingsSetting74, settingsConsumer75);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting78 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer79 = null;
        indexScopedSettings77.addSettingsUpdateConsumer(settingsSetting78, settingsConsumer79);
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings73.get(settingsSetting78);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer82 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting72, settingsSetting78, settingsBiConsumer82);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer84 = null;
        indexScopedSettings27.addSettingsUpdateConsumer(settingsSetting59, settingsSetting72, settingsBiConsumer84);
        org.elasticsearch.common.settings.Settings settings86 = indexSettings21.getValue(settingsSetting59);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData87 = indexSettings21.indexMetaData;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters88 = indexMetaData87.excludeFilters();
        org.apache.lucene.util.Version version89 = indexMetaData87.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters90 = indexMetaData87.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(byteSizeValue23);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 60000L + "'", long25 == 60000L);
        org.junit.Assert.assertNotNull(strSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + property49 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property49.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settingsSetting59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertNotNull(settingsSetting66);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settingsSetting72);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertNotNull(settingsSetting74);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settingsSetting78);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(indexMetaData87);
        org.junit.Assert.assertNull(discoveryNodeFilters88);
        org.junit.Assert.assertNull(version89);
        org.junit.Assert.assertNull(discoveryNodeFilters90);
    }

    @Test
    public void test3567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3567");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting28 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue30 = indexSettings21.flushThresholdSize;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting31 = indexSettings21.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting32 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertNotNull(timeValueSetting28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(byteSizeValue30);
        org.junit.Assert.assertNotNull(timeValueSetting31);
        org.junit.Assert.assertNotNull(timeValueSetting32);
    }

    @Test
    public void test3568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3568");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings settings10 = builder6.build();
        org.elasticsearch.common.settings.Settings settings12 = settings10.getByPrefix("_na_");
        boolean boolean13 = settings12.isEmpty();
        java.lang.String str16 = settings12.get("", "index.version.created_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index.version.created_string" + "'", str16, "index.version.created_string");
    }

    @Test
    public void test3569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3569");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig35 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting36 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig37 = indexSettings21.mergeSchedulerConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting38 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(mergePolicyConfig35);
        org.junit.Assert.assertNotNull(timeValueSetting36);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig37);
        org.junit.Assert.assertNotNull(booleanSetting38);
    }

    @Test
    public void test3570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3570");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getValue(settingsSetting17);
        int int19 = 0; // flaky: indexSettings16.numberOfShards;
        org.elasticsearch.common.logging.ESLogger eSLogger20 = null; // flaky: indexSettings16.logger;
        org.elasticsearch.common.settings.Settings settings21 = null; // flaky: indexSettings16.getSettings();
        int int22 = 0; // flaky: indexSettings16.maxResultWindow;
// flaky:         indexSettings16.setwarmerEnabled(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(settingsSetting17);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertNotNull(eSLogger20);
// flaky:         org.junit.Assert.assertNotNull(settings21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
    }

    @Test
    public void test3571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3571");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData0.requireFilters();
        java.util.Set<java.lang.String> strSet26 = indexMetaData0.activeAllocationIds(0);
        org.elasticsearch.Version version27 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(version27);
    }

    @Test
    public void test3572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3572");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings2 = settings0.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings4 = settings0.getByPrefix("index.shadow_replicas");
        java.lang.String[] strArray6 = settings0.getAsArray("index.data_path");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings0.getGroups("1.0");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test3573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3573");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        boolean boolean19 = indexScopedSettings15.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings21.getGroups("index.uuid");
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray33 = settings21.getAsArray("", strArray31, (java.lang.Boolean) false);
        indexScopedSettings15.validate("index.shadow_replicas", settings21);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings21);
        org.elasticsearch.index.translog.Translog.Durability durability36 = null;
        indexSettings35.setTranslogDurability(durability36);
        org.elasticsearch.common.unit.TimeValue timeValue38 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings35.setGCDeletes(timeValue38);
        org.elasticsearch.Version version40 = indexSettings35.version;
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder8.put("active_allocations", version40);
        org.elasticsearch.common.settings.Settings settings42 = builder41.build();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder41.put("index.shared_filesystem", 100);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.number_of_shards", (float) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean53 = indexScopedSettings51.isPrivateSetting("index.");
        boolean boolean55 = indexScopedSettings51.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap59 = settings57.getGroups("index.uuid");
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray69 = settings57.getAsArray("", strArray67, (java.lang.Boolean) false);
        indexScopedSettings51.validate("index.shadow_replicas", settings57);
        org.elasticsearch.index.IndexSettings indexSettings71 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings57);
        org.elasticsearch.index.translog.Translog.Durability durability72 = null;
        indexSettings71.setTranslogDurability(durability72);
        org.elasticsearch.common.unit.TimeValue timeValue74 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings71.setGCDeletes(timeValue74);
        org.elasticsearch.common.settings.Settings settings76 = indexSettings71.settings;
        org.elasticsearch.index.translog.Translog.Durability durability77 = indexSettings71.getdurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = indexSettings71.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap79 = indexMetaData78.getMappings();
        org.elasticsearch.common.settings.Settings settings80 = indexMetaData78.getSettings();
        org.elasticsearch.Version version81 = indexMetaData78.getCreationVersion();
        java.lang.Class<?> wildcardClass82 = indexMetaData78.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder45.put("index.shared_filesystem", (java.lang.Class) wildcardClass82);
        java.util.Map<java.lang.String, java.lang.String> strMap84 = builder45.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(version40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(timeValue74);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNull(durability77);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertNotNull(strImmutableOpenMap79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(version81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(strMap84);
    }

    @Test
    public void test3574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3574");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.maxResultWindow;
        org.apache.lucene.index.MergePolicy mergePolicy18 = null; // flaky: indexSettings16.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy18);
    }

    @Test
    public void test3575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3575");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.isPrivateSetting("index.");
        boolean boolean11 = indexScopedSettings7.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings13.getGroups("index.uuid");
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray25 = settings13.getAsArray("", strArray23, (java.lang.Boolean) false);
        indexScopedSettings7.validate("index.shadow_replicas", settings13);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings13);
        indexSettings27.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings27.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue31 = indexSettings27.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings39);
        indexSettings53.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexSettings53.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue57 = indexSettings53.flushThresholdSize;
        indexSettings27.flushThresholdSize = byteSizeValue57;
        indexSettings27.TTLPurgeDisabled = false;
        int int61 = indexSettings27.maxRescoreWindow;
        boolean boolean62 = indexSettings27.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean66 = indexScopedSettings64.isPrivateSetting("index.");
        boolean boolean68 = indexScopedSettings64.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings70.getGroups("index.uuid");
        java.lang.String[] strArray80 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray82 = settings70.getAsArray("", strArray80, (java.lang.Boolean) false);
        indexScopedSettings64.validate("index.shadow_replicas", settings70);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings70);
        indexSettings84.setEnableWarmer(true);
        java.lang.String str87 = indexSettings84.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData88 = indexSettings84.getIndexMetaData();
        indexSettings27.indexMetaData = indexMetaData88;
        java.util.Set<java.lang.String> strSet91 = indexMetaData88.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder92 = builder4.putActiveAllocationIds(1, strSet91);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData93 = builder92.build();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(byteSizeValue31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertNotNull(byteSizeValue57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10000 + "'", int61 == 10000);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(indexMetaData88);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(indexMetaData93);
    }

    @Test
    public void test3576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3576");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = settings4.getAsSettings("hi!");
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.common.unit.TimeValue timeValue8 = indexSettings7.globalCheckpointInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.isPrivateSetting("index.");
        boolean boolean14 = indexScopedSettings10.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings16.getGroups("index.uuid");
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray28 = settings16.getAsArray("", strArray26, (java.lang.Boolean) false);
        indexScopedSettings10.validate("index.shadow_replicas", settings16);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings16);
        org.elasticsearch.common.settings.Settings settings31 = indexSettings30.getSettings();
        indexSettings30.maxResultWindow = (short) -1;
        boolean boolean34 = indexSettings30.isOnSharedFilesystem();
        boolean boolean35 = indexSettings30.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings43);
        indexSettings57.setEnableWarmer(true);
        java.lang.String str60 = indexSettings57.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        java.lang.String str62 = indexSettings57.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.getTranslogDurability();
        boolean boolean64 = indexSettings57.queryStringAllowLeadingWildcard;
        boolean boolean65 = indexSettings57.isQueryStringLenient();
        org.elasticsearch.index.translog.Translog.Durability durability66 = indexSettings57.durability;
        indexSettings30.setdurability(durability66);
        indexSettings7.durability = durability66;
        indexSettings7.setwarmerEnabled(true);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig71 = indexSettings7.mergeSchedulerConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + durability66 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability66.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergeSchedulerConfig71);
    }

    @Test
    public void test3577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3577");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability23 = indexSettings21.durability;
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        boolean boolean26 = indexSettings21.getqueryStringAllowLeadingWildcard();
        boolean boolean27 = indexSettings21.warmerEnabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test3578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3578");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds(100);
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(settings4);
    }

    @Test
    public void test3579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3579");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.Version version26 = indexSettings21.version;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean28 = indexSettings21.getdefaultAllowUnmappedFields();
        java.util.function.Predicate<java.lang.String> strPredicate29 = indexSettings21.getindexNameMatcher();
        boolean boolean30 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.Version version31 = indexSettings21.getversion();
        boolean boolean32 = indexSettings21.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test3580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3580");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        boolean boolean26 = indexSettings21.getwarmerEnabled();
        boolean boolean27 = indexSettings21.getdefaultAllowUnmappedFields();
        boolean boolean28 = indexSettings21.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test3581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3581");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap25 = indexMetaData0.getMappings();
        boolean boolean27 = indexMetaData0.isSameUUID("index.shared_filesystem");
        long long29 = indexMetaData0.primaryTerm(0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test3582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3582");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        int int26 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.Version version27 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters28 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(version27);
        org.junit.Assert.assertNull(discoveryNodeFilters28);
    }

    @Test
    public void test3583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3583");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting26 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        indexSettings21.setMaxRescoreWindow((int) (short) 10);
        boolean boolean29 = indexSettings21.hasCustomDataPath();
        indexSettings21.maxRescoreWindow = 0;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting32 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(timeValueSetting26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(timeValueSetting32);
    }

    @Test
    public void test3584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3584");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getValue(settingsSetting17);
        int int19 = 0; // flaky: indexSettings16.numberOfShards;
        org.elasticsearch.common.logging.ESLogger eSLogger20 = null; // flaky: indexSettings16.logger;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting21 = null; // flaky: indexSettings16.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.isPrivateSetting("index.");
        boolean boolean27 = indexScopedSettings23.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getGroups("index.uuid");
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray41 = settings29.getAsArray("", strArray39, (java.lang.Boolean) false);
        indexScopedSettings23.validate("index.shadow_replicas", settings29);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings29);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData22.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap45 = indexMetaData22.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData22.getCustoms();
        boolean boolean47 = false; // flaky: indexSettings16.updateIndexMetaData(indexMetaData22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting48 = null; // flaky: indexSettings16.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        int int49 = 0; // flaky: indexSettings16.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(settingsSetting17);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertNotNull(eSLogger20);
// flaky:         org.junit.Assert.assertNotNull(intSetting21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(strImmutableOpenMap45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10000 + "'", int49 == 10000);
    }

    @Test
    public void test3585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3585");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        boolean boolean56 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        indexSettings78.setEnableWarmer(true);
        java.lang.String str81 = indexSettings78.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = indexSettings78.getIndexMetaData();
        indexSettings21.indexMetaData = indexMetaData82;
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap84 = indexMetaData82.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters85 = indexMetaData82.getInitialRecoveryFilters();
        int int86 = indexMetaData82.getTotalNumberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            long long88 = indexMetaData82.primaryTerm(35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap84);
        org.junit.Assert.assertNull(discoveryNodeFilters85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test3586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3586");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.nodeSettings;
        indexSettings21.maxRescoreWindow = 0;
        boolean boolean26 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getSettings();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting28 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        int int29 = indexSettings21.numberOfShards;
        java.lang.String str30 = indexSettings21.nodeName;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        boolean boolean36 = indexScopedSettings32.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        indexScopedSettings32.validate("index.shadow_replicas", settings38);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings38);
        indexSettings52.setEnableWarmer(true);
        java.lang.String str55 = indexSettings52.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = indexSettings52.getIndexMetaData();
        indexSettings21.indexMetaData = indexMetaData56;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings21.parseFieldMatcher;
        boolean boolean59 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(timeValueSetting28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test3587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3587");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting18 = null; // flaky: indexSettings16.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = null; // flaky: indexSettings16.scopedSettings;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.isPrivateSetting("index.");
        boolean boolean24 = indexScopedSettings20.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings26.getGroups("index.uuid");
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray38 = settings26.getAsArray("", strArray36, (java.lang.Boolean) false);
        indexScopedSettings20.validate("index.shadow_replicas", settings26);
        boolean boolean41 = indexScopedSettings20.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Setting.Property property42 = indexScopedSettings20.getScope();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings46.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings49 = indexScopedSettings43.applySettings(settings46);
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings43.applySettings(settings50);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting52 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings43.get(settingsSetting52);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting55 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer56 = null;
        indexScopedSettings54.addSettingsUpdateConsumer(settingsSetting55, settingsConsumer56);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting59 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer60 = null;
        indexScopedSettings58.addSettingsUpdateConsumer(settingsSetting59, settingsConsumer60);
        org.elasticsearch.common.settings.Settings settings62 = indexScopedSettings54.get(settingsSetting59);
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings64 = indexScopedSettings54.dryRun(settings63);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting65 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting67 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer68 = null;
        indexScopedSettings66.addSettingsUpdateConsumer(settingsSetting67, settingsConsumer68);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings70 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting71 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer72 = null;
        indexScopedSettings70.addSettingsUpdateConsumer(settingsSetting71, settingsConsumer72);
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings66.get(settingsSetting71);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer75 = null;
        indexScopedSettings54.addSettingsUpdateConsumer(settingsSetting65, settingsSetting71, settingsBiConsumer75);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer77 = null;
        indexScopedSettings20.addSettingsUpdateConsumer(settingsSetting52, settingsSetting65, settingsBiConsumer77);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer79 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer80 = null;
// flaky:         indexScopedSettings19.addSettingsUpdateConsumer(settingsSetting52, settingsConsumer79, settingsConsumer80);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting83 = null; // flaky: indexScopedSettings19.get("index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertNotNull(intSetting18);
// flaky:         org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + property42 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property42.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settingsSetting52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(indexScopedSettings54);
        org.junit.Assert.assertNotNull(settingsSetting55);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertNotNull(settingsSetting59);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(settingsSetting65);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertNotNull(settingsSetting67);
        org.junit.Assert.assertNotNull(indexScopedSettings70);
        org.junit.Assert.assertNotNull(settingsSetting71);
        org.junit.Assert.assertNotNull(settings74);
// flaky:         org.junit.Assert.assertNotNull(wildcardSetting83);
    }

    @Test
    public void test3588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3588");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability23 = indexSettings21.getTranslogDurability();
        boolean boolean24 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean26 = indexSettings21.isShadowReplicaIndex;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings28 = indexSettings21.nodeSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertNotNull(settings28);
    }

    @Test
    public void test3589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3589");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        boolean boolean56 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        indexSettings78.setEnableWarmer(true);
        java.lang.String str81 = indexSettings78.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = indexSettings78.getIndexMetaData();
        indexSettings21.indexMetaData = indexMetaData82;
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap84 = indexMetaData82.getActiveAllocationIds();
        int int85 = indexMetaData82.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test3590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3590");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.settings.Settings settings24 = indexSettings21.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexSettings21.scopedSettings;
        boolean boolean27 = indexSettings21.isWarmerEnabled();
        java.lang.String str28 = indexSettings21.defaultField;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting29 = indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger30 = indexSettings21.logger;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig31 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = indexSettings21.indexMetaData;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters33 = indexMetaData32.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_all" + "'", str28, "_all");
        org.junit.Assert.assertNotNull(intSetting29);
        org.junit.Assert.assertNotNull(eSLogger30);
        org.junit.Assert.assertNotNull(mergePolicyConfig31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNull(discoveryNodeFilters33);
    }

    @Test
    public void test3591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3591");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings26.applySettings(settings29);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings26.applySettings(settings33);
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.common.unit.SizeValue sizeValue37 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue38 = settings33.getAsSize("index.shadow_replicas", sizeValue37);
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings33);
        java.lang.String str42 = settings33.get("state-");
        java.lang.String str45 = settings33.get("index.version.minimum_compatible", "index.shared_filesystem.recover_on_any_node");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings33.getAsGroups(false);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.isPrivateSetting("index.");
        boolean boolean53 = indexScopedSettings49.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.uuid");
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray67 = settings55.getAsArray("", strArray65, (java.lang.Boolean) false);
        indexScopedSettings49.validate("index.shadow_replicas", settings55);
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings55);
        boolean boolean71 = indexSettings69.matchesIndexName("");
        long long72 = indexSettings69.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue73 = indexSettings69.getGlobalCheckpointInterval();
        org.elasticsearch.index.translog.Translog.Durability durability74 = indexSettings69.getTranslogDurability();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting75 = indexSettings69.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        boolean boolean76 = settings33.equals((java.lang.Object) indexSettings69);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(sizeValue38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "index.shared_filesystem.recover_on_any_node" + "'", str45, "index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 60000L + "'", long72 == 60000L);
        org.junit.Assert.assertNotNull(timeValue73);
        org.junit.Assert.assertTrue("'" + durability74 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability74.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(byteSizeValueSetting75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test3592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3592");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getTranslogDurability();
        boolean boolean28 = indexSettings21.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting29 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        boolean boolean30 = indexSettings21.getqueryStringLenient();
        java.lang.String str31 = indexSettings21.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue32 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = indexSettings21.indexMetaData;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strSetting29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(timeValue32);
        org.junit.Assert.assertNotNull(indexMetaData33);
    }

    @Test
    public void test3593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3593");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting25 = indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        int int26 = indexSettings21.getMaxRescoreWindow();
        indexSettings21.setMaxResultWindow((int) (short) 1);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig29 = indexSettings21.mergeSchedulerConfig;
        indexSettings21.maxRescoreWindow = 10;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(intSetting25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig29);
    }

    @Test
    public void test3594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3594");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.isPrivateSetting("index.");
        boolean boolean10 = indexScopedSettings6.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray24 = settings12.getAsArray("", strArray22, (java.lang.Boolean) false);
        indexScopedSettings6.validate("index.shadow_replicas", settings12);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings12);
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings26.setTranslogDurability(durability27);
        boolean boolean29 = indexSettings26.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer32 = null;
        indexScopedSettings30.addSettingsUpdateConsumer(settingsSetting31, settingsConsumer32);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting35 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer36 = null;
        indexScopedSettings34.addSettingsUpdateConsumer(settingsSetting35, settingsConsumer36);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings30.get(settingsSetting35);
        org.elasticsearch.common.settings.Settings settings39 = indexSettings26.getValue(settingsSetting35);
        java.lang.String str40 = indexSettings26.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting41 = indexSettings26.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = indexSettings26.indexMetaData;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff43 = indexMetaData0.diff(indexMetaData42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters45 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap46 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settingsSetting35);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaDataDiff43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(discoveryNodeFilters45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
    }

    @Test
    public void test3595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3595");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        long long7 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.numberOfShards(1);
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray14 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder10.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList15);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.version.created", (double) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray29 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder25.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList30);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.version.created", (double) ' ');
        java.lang.Class<?> wildcardClass39 = builder38.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder23.put("index.version.created_string", (java.lang.Class) wildcardClass39);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder23.putNull("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder6.settings(builder42);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder42.put("index.version.minimum_compatible", "index.");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder42.put("", (double) (-1));
        java.lang.String str51 = builder42.remove("1");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test3596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3596");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting26 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        indexSettings21.setMaxRescoreWindow((int) (short) 10);
        boolean boolean29 = indexSettings21.hasCustomDataPath();
        indexSettings21.maxRescoreWindow = 0;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig32 = indexSettings21.mergeSchedulerConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting33 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.isPrivateSetting("index.");
        boolean boolean39 = indexScopedSettings35.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings41.getGroups("index.uuid");
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray53 = settings41.getAsArray("", strArray51, (java.lang.Boolean) false);
        indexScopedSettings35.validate("index.shadow_replicas", settings41);
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings41);
        indexSettings55.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue58 = indexSettings55.getsyncInterval();
        boolean boolean59 = indexSettings55.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig60 = indexSettings55.getmergePolicyConfig();
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings55.durability;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher62 = indexSettings55.getParseFieldMatcher();
        org.elasticsearch.Version version63 = indexSettings55.getversion();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings55.refreshInterval;
        indexSettings21.refreshInterval = timeValue64;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(timeValueSetting26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig32);
        org.junit.Assert.assertNotNull(booleanSetting33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(timeValue58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig60);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNotNull(timeValue64);
    }

    @Test
    public void test3597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3597");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = indexSettings21.getScopedSettings();
        boolean boolean36 = indexSettings21.getqueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test3598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3598");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = indexSettings21.getIndexMetaData();
        java.lang.String str29 = indexSettings21.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings21.getRefreshInterval();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = indexSettings21.getScopedSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
    }

    @Test
    public void test3599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3599");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.settings.Settings settings24 = indexSettings21.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexSettings21.scopedSettings;
        boolean boolean27 = indexSettings21.isWarmerEnabled();
        java.lang.String str28 = indexSettings21.defaultField;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        boolean boolean34 = indexScopedSettings30.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.uuid");
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray48 = settings36.getAsArray("", strArray46, (java.lang.Boolean) false);
        indexScopedSettings30.validate("index.shadow_replicas", settings36);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings36);
        org.elasticsearch.index.translog.Translog.Durability durability51 = null;
        indexSettings50.setTranslogDurability(durability51);
        boolean boolean53 = indexSettings50.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting54 = indexSettings50.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting55 = indexSettings50.getMAX_RESCORE_WINDOW_SETTING();
        boolean boolean57 = indexSettings50.matchesIndexName("index.version.created");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting58 = indexSettings50.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean62 = indexScopedSettings60.isPrivateSetting("index.");
        boolean boolean64 = indexScopedSettings60.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings66.getGroups("index.uuid");
        java.lang.String[] strArray76 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray78 = settings66.getAsArray("", strArray76, (java.lang.Boolean) false);
        indexScopedSettings60.validate("index.shadow_replicas", settings66);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData59, settings66);
        org.elasticsearch.common.unit.TimeValue timeValue81 = indexSettings80.getDEFAULT_REFRESH_INTERVAL();
        indexSettings80.maxResultWindow = (byte) -1;
        org.elasticsearch.index.translog.Translog.Durability durability84 = indexSettings80.getTranslogDurability();
        indexSettings50.durability = durability84;
        indexSettings21.setTranslogDurability(durability84);
        org.elasticsearch.Version version87 = indexSettings21.version;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting88 = indexSettings21.getDEFAULT_FIELD_SETTING();
        boolean boolean89 = indexSettings21.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_all" + "'", str28, "_all");
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(timeValueSetting54);
        org.junit.Assert.assertNotNull(intSetting55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(timeValueSetting58);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(timeValue81);
        org.junit.Assert.assertTrue("'" + durability84 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability84.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(version87);
        org.junit.Assert.assertNotNull(strSetting88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test3600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3600");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.Version version22 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap26 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(version22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
    }

    @Test
    public void test3601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3601");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting72 = indexSettings21.getMAX_RESULT_WINDOW_SETTING();
        java.util.function.Predicate<java.lang.String> strPredicate73 = indexSettings21.indexNameMatcher;
        java.lang.String str74 = indexSettings21.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(intSetting72);
        org.junit.Assert.assertNotNull(strPredicate73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test3602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3602");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        long long26 = indexSettings21.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 60000L + "'", long26 == 60000L);
    }

    @Test
    public void test3603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3603");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        boolean boolean24 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        boolean boolean30 = indexScopedSettings26.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        indexScopedSettings26.validate("index.shadow_replicas", settings32);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings32);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting47 = indexSettings46.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData48.includeFilters();
        indexSettings46.indexMetaData = indexMetaData48;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters52 = indexMetaData48.includeFilters();
        indexSettings21.indexMetaData = indexMetaData48;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean57 = indexScopedSettings55.isPrivateSetting("index.");
        boolean boolean59 = indexScopedSettings55.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap63 = settings61.getGroups("index.uuid");
        java.lang.String[] strArray71 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray73 = settings61.getAsArray("", strArray71, (java.lang.Boolean) false);
        indexScopedSettings55.validate("index.shadow_replicas", settings61);
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings61);
        org.elasticsearch.common.settings.Settings settings76 = indexSettings75.getSettings();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue77 = indexSettings75.getFlushThresholdSize();
        indexSettings21.setTranslogFlushThresholdSize(byteSizeValue77);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting79 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        boolean boolean80 = indexSettings21.getdefaultAllowUnmappedFields();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher81 = indexSettings21.parseFieldMatcher;
        java.lang.String str82 = indexSettings21.defaultField;
        boolean boolean83 = indexSettings21.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(booleanSetting47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
        org.junit.Assert.assertNull(discoveryNodeFilters52);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(indexScopedSettings55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(byteSizeValue77);
        org.junit.Assert.assertNotNull(timeValueSetting79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(parseFieldMatcher81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "_all" + "'", str82, "_all");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test3604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3604");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder1.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.version((long) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.index("hi!");
        long long11 = builder10.version();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test3605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3605");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.putNull("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings12.applySettings(settings15);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray26 = settings18.getAsArray("index.version.created", strArray24, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder6.extendArray("index.version.created_string", strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.uuid", 0L);
        java.lang.String str34 = builder32.get("");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.uuid", 0L);
        java.lang.String str45 = builder43.get("");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("index.shared_filesystem", (int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings57 = settings55.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings59.getGroups("index.uuid");
        java.lang.String[] strArray69 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray71 = settings59.getAsArray("", strArray69, (java.lang.Boolean) false);
        java.lang.String[] strArray73 = settings55.getAsArray("index.version.minimum_compatible", strArray69, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap76 = settings74.getGroups("index.uuid");
        java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray86 = settings74.getAsArray("", strArray84, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder49.put("", "state-", strArray69, strArray84);
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder38.extendArray("archived.", strArray84);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder6.putArray("archived.", strArray84);
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder6.put("1.0", "index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder6.put("index.number_of_shards", false);
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder6.put("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a", "index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test3606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3606");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte8 = state7.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.state(state7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int15 = builder14.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings22 = settings20.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings24.getGroups("index.uuid");
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray36 = settings24.getAsArray("", strArray34, (java.lang.Boolean) false);
        java.lang.String[] strArray38 = settings20.getAsArray("index.version.minimum_compatible", strArray34, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder17.settings(settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder17.creationDate((long) 10);
        java.lang.String[] strArray63 = new java.lang.String[] { "index.", "index.version.upgraded_string", "", "index.creation_date", "index.shared_filesystem", "index.auto_expand_replicas", "index.version.upgraded_string", "archived.", "index.uuid", "archived.", "", "index.shared_filesystem.recover_on_any_node", "index.version.created_string", "_na_", "hi!", "index.blocks.read_only", "index.version.created_string", "index.creation_date", "index.version.minimum_compatible", "index.creation_date" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder17.putActiveAllocationIds(10000, (java.util.Set<java.lang.String>) strSet64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder4.putActiveAllocationIds(10000, (java.util.Set<java.lang.String>) strSet64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder67.removeAlias("0");
        int int70 = builder67.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = builder67.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = builder67.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test3607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3607");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.put("index.shadow_replicas", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder3.putNull("index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.uuid", 0L);
        java.lang.String str17 = builder15.get("");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder18.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder18.put("index.shared_filesystem.recover_on_any_node", (long) '#');
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder18.putNull("_all");
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.uuid", 0L);
        java.lang.String str32 = builder30.get("");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder30.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings38 = settings36.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings38.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction41 = null;
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder30.putProperties(strMap39, strPredicate40, strFunction41);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder30.replacePropertyPlaceholders();
        java.lang.String[] strArray57 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.", "index.blocks.read", "index.auto_expand_replicas", "index.blocks.read_only", "index.blocks.read", "state-", "index.uuid", "index.version.upgraded_string", "index.auto_expand_replicas", "archived.", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder43.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList58);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder25.putArray("", (java.util.List<java.lang.String>) strList58);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder10.putArray("index.", (java.util.List<java.lang.String>) strList58);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test3608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3608");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting31 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(booleanSetting30);
        org.junit.Assert.assertNotNull(byteSizeValueSetting31);
    }

    @Test
    public void test3609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3609");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean25 = indexSettings21.getqueryStringAnalyzeWildcard();
        indexSettings21.setTTLPurgeDisabled(true);
        boolean boolean28 = indexSettings21.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version29 = indexSettings21.version;
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings21.refreshInterval;
        org.elasticsearch.common.settings.Settings settings31 = indexSettings21.getSettings();
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings31);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(version29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test3610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3610");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.Version version26 = indexSettings21.getversion();
        java.lang.String str27 = indexSettings21.getDefaultField();
        boolean boolean28 = indexSettings21.queryStringLenient;
        boolean boolean29 = indexSettings21.queryStringAnalyzeWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "_all" + "'", str27, "_all");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test3611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3611");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.isPrivateSetting("index.");
        boolean boolean14 = indexScopedSettings10.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings16.getGroups("index.uuid");
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray28 = settings16.getAsArray("", strArray26, (java.lang.Boolean) false);
        indexScopedSettings10.validate("index.shadow_replicas", settings16);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings16);
        org.elasticsearch.common.settings.Settings settings31 = indexSettings30.getSettings();
        boolean boolean32 = indexSettings30.isIndexUsingShadowReplicas();
        org.elasticsearch.Version version33 = indexSettings30.getIndexVersionCreated();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder6.put("index.blocks.read_only", version33);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder6.normalizePrefix("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test3612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3612");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.logging.ESLogger eSLogger28 = indexSettings21.getlogger();
        java.util.function.Predicate<java.lang.String> strPredicate29 = indexSettings21.getindexNameMatcher();
        int int30 = indexSettings21.getMaxResultWindow();
        org.elasticsearch.common.unit.TimeValue timeValue31 = indexSettings21.globalCheckpointInterval;
        boolean boolean32 = indexSettings21.getisShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertNotNull(eSLogger28);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test3613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3613");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings21.syncInterval;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting27 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue28 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        boolean boolean33 = indexScopedSettings29.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        indexScopedSettings29.validate("index.shadow_replicas", settings35);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting50 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer51 = null;
        indexScopedSettings49.addSettingsUpdateConsumer(settingsSetting50, settingsConsumer51);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting54 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer55 = null;
        indexScopedSettings53.addSettingsUpdateConsumer(settingsSetting54, settingsConsumer55);
        org.elasticsearch.common.settings.Settings settings57 = indexScopedSettings49.get(settingsSetting54);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer58 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting54, settingsConsumer58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = indexScopedSettings29.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting63 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer64 = null;
        indexScopedSettings62.addSettingsUpdateConsumer(settingsSetting63, settingsConsumer64);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting67 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer68 = null;
        indexScopedSettings66.addSettingsUpdateConsumer(settingsSetting67, settingsConsumer68);
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings62.get(settingsSetting67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer71 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer72 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting67, settingsConsumer71, settingsConsumer72);
        org.elasticsearch.common.settings.Settings settings74 = indexSettings21.getValue(settingsSetting67);
        long long75 = indexSettings21.getGcDeletesInMillis();
        boolean boolean76 = indexSettings21.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(strSetting27);
        org.junit.Assert.assertNotNull(byteSizeValue28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertNotNull(settingsSetting50);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertNotNull(settingsSetting54);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertNotNull(settingsSetting63);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertNotNull(settingsSetting67);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 60000L + "'", long75 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test3614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3614");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap2 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        org.elasticsearch.common.io.stream.StreamInput streamInput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff7 = indexMetaData0.readDiffFrom(streamInput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
    }

    @Test
    public void test3615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3615");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        int int25 = indexSettings21.getMaxResultWindow();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting26 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger27 = indexSettings21.logger;
        boolean boolean28 = indexSettings21.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting29 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        boolean boolean30 = indexSettings21.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertNotNull(timeValueSetting26);
        org.junit.Assert.assertNotNull(eSLogger27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(booleanSetting29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test3616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3616");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        boolean boolean8 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings3);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3617");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.logging.ESLogger eSLogger30 = indexSettings21.logger;
        boolean boolean31 = indexSettings21.defaultAllowUnmappedFields;
        int int32 = indexSettings21.getMaxRescoreWindow();
        boolean boolean33 = indexSettings21.isShadowReplicaIndex();
        boolean boolean34 = indexSettings21.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(eSLogger30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10000 + "'", int32 == 10000);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test3618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3618");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.nodeSettings;
        indexSettings21.maxRescoreWindow = 0;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        boolean boolean28 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig29 = indexSettings21.mergePolicyConfig;
        org.apache.lucene.index.MergePolicy mergePolicy30 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting31 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        boolean boolean33 = indexSettings21.matchesIndexName("5000099");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(mergePolicyConfig29);
        org.junit.Assert.assertNotNull(mergePolicy30);
        org.junit.Assert.assertNotNull(booleanSetting31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test3619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3619");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.Version version25 = indexSettings21.getversion();
        int int26 = indexSettings21.maxRescoreWindow;
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings21.durability = durability27;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.uuid", 0L);
        java.lang.String str35 = builder33.get("");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings settings40 = builder36.build();
        org.elasticsearch.common.settings.Settings settings42 = settings40.getByPrefix("_na_");
        indexScopedSettings29.validate(settings42);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting45 = indexScopedSettings29.get("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNull(wildcardSetting45);
    }

    @Test
    public void test3620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3620");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder5.removeAllAliases();
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.putAlias(builder8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test3621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3621");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        boolean boolean25 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig26 = indexSettings21.getmergePolicyConfig();
        boolean boolean27 = indexSettings21.defaultAllowUnmappedFields;
        indexSettings21.maxRescoreWindow = (byte) 0;
        indexSettings21.setTTLPurgeDisabled(true);
        org.elasticsearch.common.unit.TimeValue timeValue32 = null;
        indexSettings21.refreshInterval = timeValue32;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test3622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3622");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test3623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3623");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfShards();
        int int2 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.index.Index index3 = indexMetaData0.getIndex();
        org.elasticsearch.common.io.stream.StreamInput streamInput4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = indexMetaData0.readFrom(streamInput4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(index3);
    }

    @Test
    public void test3624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3624");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.index.Index index23 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData0.mapping("index.blocks.read");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings26.applySettings(settings29);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings26.applySettings(settings33);
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.common.unit.SizeValue sizeValue37 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue38 = settings33.getAsSize("index.shadow_replicas", sizeValue37);
        java.util.Map<java.lang.String, java.lang.Object> strMap39 = settings33.getAsStructuredMap();
        java.lang.Boolean boolean42 = settings33.getAsBoolean("index.version.created", (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings33);
        org.elasticsearch.index.translog.Translog.Durability durability44 = indexSettings43.getTranslogDurability();
        org.elasticsearch.index.translog.Translog.Durability durability45 = indexSettings43.durability;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(index23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(sizeValue38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + false + "'", boolean42, false);
        org.junit.Assert.assertTrue("'" + durability44 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability44.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + durability45 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability45.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test3625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3625");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        boolean boolean24 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getDEFAULT_GC_DELETES();
        java.util.function.Predicate<java.lang.String> strPredicate26 = indexSettings21.indexNameMatcher;
        java.lang.String str27 = indexSettings21.getUUID();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting28 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = indexSettings21.indexMetaData;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap30 = indexMetaData29.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "_na_" + "'", str27, "_na_");
        org.junit.Assert.assertNotNull(booleanSetting28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
    }

    @Test
    public void test3626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3626");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.logging.ESLogger eSLogger30 = indexSettings21.logger;
        org.elasticsearch.Version version31 = indexSettings21.getversion();
        org.elasticsearch.common.unit.TimeValue timeValue32 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        indexSettings21.setwarmerEnabled(false);
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue36 = indexSettings21.globalCheckpointInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = indexSettings21.getIndexMetaData();
        int int38 = indexMetaData37.getNumberOfShards();
        long long39 = indexMetaData37.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(eSLogger30);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(timeValue32);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
    }

    @Test
    public void test3627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3627");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        org.elasticsearch.common.logging.ESLogger eSLogger56 = indexSettings21.logger;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig57 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig58 = indexSettings21.getMergeSchedulerConfig();
        long long59 = indexSettings21.gcDeletesInMillis;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting60 = indexSettings21.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings61 = indexSettings21.getNodeSettings();
        boolean boolean62 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings61);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertNotNull(eSLogger56);
        org.junit.Assert.assertNotNull(mergePolicyConfig57);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 60000L + "'", long59 == 60000L);
        org.junit.Assert.assertNotNull(booleanSetting60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test3628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3628");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        boolean boolean23 = indexSettings21.isIndexUsingShadowReplicas();
        boolean boolean24 = indexSettings21.queryStringLenient;
        boolean boolean25 = indexSettings21.isIndexUsingShadowReplicas();
        boolean boolean26 = indexSettings21.isQueryStringLenient();
        java.lang.String str27 = indexSettings21.getNodeName();
        java.lang.String str28 = indexSettings21.getDefaultField();
        org.elasticsearch.Version version29 = indexSettings21.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_all" + "'", str28, "_all");
        org.junit.Assert.assertNotNull(version29);
    }

    @Test
    public void test3629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3629");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings27.applySettings(settings30);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings27.applySettings(settings34);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting36 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings27.get(settingsSetting36);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.isPrivateSetting("index.");
        boolean boolean42 = indexScopedSettings38.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings44.getGroups("index.uuid");
        java.lang.String[] strArray54 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray56 = settings44.getAsArray("", strArray54, (java.lang.Boolean) false);
        indexScopedSettings38.validate("index.shadow_replicas", settings44);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting59 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer60 = null;
        indexScopedSettings58.addSettingsUpdateConsumer(settingsSetting59, settingsConsumer60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting63 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer64 = null;
        indexScopedSettings62.addSettingsUpdateConsumer(settingsSetting63, settingsConsumer64);
        org.elasticsearch.common.settings.Settings settings66 = indexScopedSettings58.get(settingsSetting63);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer68 = null;
        indexScopedSettings38.addSettingsUpdateConsumer(settingsSetting63, settingsConsumer67, settingsConsumer68);
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings27.get(settingsSetting63);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings72 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean74 = indexScopedSettings72.isPrivateSetting("index.");
        boolean boolean76 = indexScopedSettings72.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap80 = settings78.getGroups("index.uuid");
        java.lang.String[] strArray88 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray90 = settings78.getAsArray("", strArray88, (java.lang.Boolean) false);
        indexScopedSettings72.validate("index.shadow_replicas", settings78);
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings78);
        indexSettings92.setEnableWarmer(true);
        java.lang.String str95 = indexSettings92.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData96 = indexSettings92.getIndexMetaData();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings97 = new org.elasticsearch.common.settings.IndexScopedSettings(settings26, indexScopedSettings27, indexMetaData96);
        org.elasticsearch.common.settings.Setting.Property property98 = indexScopedSettings27.getScope();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settingsSetting36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertNotNull(settingsSetting59);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertNotNull(settingsSetting63);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(indexScopedSettings72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNotNull(indexMetaData96);
        org.junit.Assert.assertTrue("'" + property98 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property98.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
    }

    @Test
    public void test3630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3630");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.getFlushThresholdSize();
        indexSettings21.TTLPurgeDisabled = false;
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean29 = indexSettings21.queryStringLenient;
        indexSettings21.maxRescoreWindow = 10;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting32 = indexSettings21.getDEFAULT_FIELD_SETTING();
        boolean boolean33 = indexSettings21.queryStringAllowLeadingWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSetting32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test3631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3631");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        boolean boolean27 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting28 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        boolean boolean34 = indexScopedSettings30.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.uuid");
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray48 = settings36.getAsArray("", strArray46, (java.lang.Boolean) false);
        indexScopedSettings30.validate("index.shadow_replicas", settings36);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings36);
        boolean boolean52 = indexSettings50.matchesIndexName("");
        boolean boolean53 = indexSettings50.TTLPurgeDisabled;
        org.elasticsearch.common.unit.TimeValue timeValue54 = indexSettings50.getDEFAULT_GC_DELETES();
        java.util.function.Predicate<java.lang.String> strPredicate55 = indexSettings50.indexNameMatcher;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.isPrivateSetting("index.");
        boolean boolean61 = indexScopedSettings57.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings63.getGroups("index.uuid");
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray75 = settings63.getAsArray("", strArray73, (java.lang.Boolean) false);
        indexScopedSettings57.validate("index.shadow_replicas", settings63);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings63);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting78 = indexSettings77.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue79 = null;
        indexSettings77.flushThresholdSize = byteSizeValue79;
        org.elasticsearch.index.translog.Translog.Durability durability81 = indexSettings77.getTranslogDurability();
        indexSettings50.durability = durability81;
        indexSettings21.setdurability(durability81);
        boolean boolean84 = indexSettings21.isQueryStringAnalyzeWildcard();
        int int85 = indexSettings21.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings86 = indexSettings21.nodeSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeValueSetting28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(strPredicate55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(timeValueSetting78);
        org.junit.Assert.assertTrue("'" + durability81 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability81.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(settings86);
    }

    @Test
    public void test3632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3632");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        indexSettings21.TTLPurgeDisabled = false;
        boolean boolean28 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.common.logging.ESLogger eSLogger29 = indexSettings21.getlogger();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(eSLogger29);
    }

    @Test
    public void test3633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3633");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        boolean boolean56 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        indexSettings78.setEnableWarmer(true);
        java.lang.String str81 = indexSettings78.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = indexSettings78.getIndexMetaData();
        indexSettings21.indexMetaData = indexMetaData82;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting84 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.common.logging.ESLogger eSLogger85 = indexSettings21.getlogger();
        boolean boolean86 = indexSettings21.isWarmerEnabled();
        int int87 = indexSettings21.maxRescoreWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertNotNull(booleanSetting84);
        org.junit.Assert.assertNotNull(eSLogger85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10000 + "'", int87 == 10000);
    }

    @Test
    public void test3634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3634");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder8.put("_all", (float) 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.uuid", (double) 100.0f);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean20 = indexScopedSettings18.isPrivateSetting("index.");
        boolean boolean22 = indexScopedSettings18.isPrivateSetting("");
        java.lang.String str23 = indexScopedSettings18.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int26 = builder25.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder25.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = settings31.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        java.lang.String[] strArray49 = settings31.getAsArray("index.version.minimum_compatible", strArray45, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder28.settings(settings31);
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.uuid");
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray63 = settings51.getAsArray("", strArray61, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder28.settings(settings51);
        java.lang.String str66 = settings51.get("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings67 = indexScopedSettings18.archiveUnknownOrBrokenSettings(settings51);
        org.elasticsearch.common.unit.SizeValue sizeValue69 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue70 = settings67.getAsSize("", sizeValue69);
        java.lang.String[] strArray72 = settings67.getAsArray("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder13.extendArray("index.creation_date_string", strArray72);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder13.put("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", "index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 index.version.created_string=5.0.0 ");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNull(sizeValue70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test3635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3635");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getTranslogDurability();
        boolean boolean28 = indexSettings21.queryStringAllowLeadingWildcard;
        boolean boolean29 = indexSettings21.queryStringAllowLeadingWildcard;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state52 = indexMetaData30.getState();
        indexSettings21.indexMetaData = indexMetaData30;
        boolean boolean54 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = indexSettings21.indexMetaData;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + state52 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state52.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(indexMetaData55);
    }

    @Test
    public void test3636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3636");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer25 = null;
        indexScopedSettings23.addSettingsUpdateConsumer(settingsSetting24, settingsConsumer25);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting28 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer29 = null;
        indexScopedSettings27.addSettingsUpdateConsumer(settingsSetting28, settingsConsumer29);
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings23.get(settingsSetting28);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings23.dryRun(settings32);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings33);
        indexSettings21.settings = settings34;
        org.elasticsearch.common.unit.SizeValue sizeValue37 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue38 = settings34.getAsSize("_na_", sizeValue37);
        boolean boolean39 = settings34.isEmpty();
        java.lang.String[] strArray41 = settings34.getAsArray("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean46 = indexScopedSettings44.isPrivateSetting("index.");
        boolean boolean48 = indexScopedSettings44.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray62 = settings50.getAsArray("", strArray60, (java.lang.Boolean) false);
        indexScopedSettings44.validate("index.shadow_replicas", settings50);
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings50);
        org.elasticsearch.index.translog.Translog.Durability durability65 = null;
        indexSettings64.setTranslogDurability(durability65);
        long long67 = indexSettings64.getGcDeletesInMillis();
        boolean boolean68 = indexSettings64.getwarmerEnabled();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting69 = indexSettings64.getQUERY_STRING_ANALYZE_WILDCARD();
        indexSettings64.setwarmerEnabled(true);
        indexSettings64.maxRescoreWindow = (short) -1;
        java.lang.String str74 = indexSettings64.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue75 = indexSettings64.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.unit.TimeValue timeValue76 = settings34.getAsTime("index.shared_filesystem.recover_on_any_node", timeValue75);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settingsSetting28);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNull(sizeValue38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 60000L + "'", long67 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(booleanSetting69);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(timeValue75);
        org.junit.Assert.assertNotNull(timeValue76);
    }

    @Test
    public void test3637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3637");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        org.elasticsearch.common.unit.TimeValue timeValue55 = indexSettings21.getsyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexSettings21.getDEFAULT_GC_DELETES();
        boolean boolean57 = indexSettings21.queryStringLenient;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = indexSettings21.indexMetaData;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(indexMetaData58);
    }

    @Test
    public void test3638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3638");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        indexSettings21.maxRescoreWindow = 0;
        java.lang.String str30 = indexSettings21.getUUID();
        java.lang.String str31 = indexSettings21.customDataPath();
        boolean boolean32 = indexSettings21.getqueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "_na_" + "'", str30, "_na_");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test3639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3639");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig25 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = indexSettings21.indexMetaData;
        org.apache.lucene.util.Version version28 = indexMetaData27.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters29 = indexMetaData27.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicyConfig25);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNull(version28);
        org.junit.Assert.assertNull(discoveryNodeFilters29);
    }

    @Test
    public void test3640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3640");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting18 = null; // flaky: indexSettings16.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability19 = null;
// flaky:         indexSettings16.setTranslogDurability(durability19);
        org.elasticsearch.common.settings.Settings settings21 = null; // flaky: indexSettings16.settings;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = indexSettings16.matchesIndexName("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 index.version.created_string=5.0.0 ");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertNotNull(intSetting18);
// flaky:         org.junit.Assert.assertNotNull(settings21);
    }

    @Test
    public void test3641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3641");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.isPrivateSetting("index.");
        boolean boolean10 = indexScopedSettings6.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray24 = settings12.getAsArray("", strArray22, (java.lang.Boolean) false);
        indexScopedSettings6.validate("index.shadow_replicas", settings12);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings12);
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings26.setTranslogDurability(durability27);
        boolean boolean29 = indexSettings26.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer32 = null;
        indexScopedSettings30.addSettingsUpdateConsumer(settingsSetting31, settingsConsumer32);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting35 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer36 = null;
        indexScopedSettings34.addSettingsUpdateConsumer(settingsSetting35, settingsConsumer36);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings30.get(settingsSetting35);
        org.elasticsearch.common.settings.Settings settings39 = indexSettings26.getValue(settingsSetting35);
        java.lang.String str40 = indexSettings26.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting41 = indexSettings26.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = indexSettings26.indexMetaData;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff43 = indexMetaData0.diff(indexMetaData42);
        int int44 = indexMetaData42.getNumberOfShards();
        int int45 = indexMetaData42.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData42);
        int int47 = indexMetaData42.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settingsSetting35);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaDataDiff43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
    }

    @Test
    public void test3642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3642");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("5000099");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test3643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3643");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        int int26 = indexSettings21.getNumberOfShards();
        long long27 = indexSettings21.gcDeletesInMillis;
        indexSettings21.setTTLPurgeDisabled(false);
        boolean boolean30 = indexSettings21.defaultAllowUnmappedFields;
        org.elasticsearch.common.logging.ESLogger eSLogger31 = indexSettings21.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = indexSettings21.getIndexMetaData();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 60000L + "'", long27 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(eSLogger31);
        org.junit.Assert.assertNotNull(indexMetaData32);
    }

    @Test
    public void test3644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3644");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        int int7 = builder4.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.removeAlias("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.numberOfShards((int) '4');
        int int14 = builder11.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder11.index("index.number_of_replicas");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder11.putMapping("0", "index.version.upgraded");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test3645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3645");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.isPrivateSetting("index.");
        boolean boolean15 = indexScopedSettings11.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.uuid");
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray29 = settings17.getAsArray("", strArray27, (java.lang.Boolean) false);
        indexScopedSettings11.validate("index.shadow_replicas", settings17);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings17);
        org.elasticsearch.index.translog.Translog.Durability durability32 = null;
        indexSettings31.setTranslogDurability(durability32);
        org.elasticsearch.common.unit.TimeValue timeValue34 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings31.setGCDeletes(timeValue34);
        org.elasticsearch.Version version36 = indexSettings31.version;
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder6.put("index.blocks.read", version36);
        java.util.Map<java.lang.String, java.lang.String> strMap38 = builder6.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder6.put("index.shared_filesystem", (double) '#');
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.creation_date_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(timeValue34);
        org.junit.Assert.assertNotNull(version36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test3646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3646");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int25 = builder24.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder24.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings32 = settings30.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        java.lang.String[] strArray48 = settings30.getAsArray("index.version.minimum_compatible", strArray44, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder27.settings(settings30);
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray62 = settings50.getAsArray("", strArray60, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder27.settings(settings50);
        java.lang.String str65 = settings50.get("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.isPrivateSetting("index.");
        boolean boolean70 = indexScopedSettings66.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings72.getGroups("index.uuid");
        java.lang.String[] strArray82 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray84 = settings72.getAsArray("", strArray82, (java.lang.Boolean) false);
        indexScopedSettings66.validate("index.shadow_replicas", settings72);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting87 = indexScopedSettings66.get("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData88 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int89 = indexMetaData88.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings90 = new org.elasticsearch.common.settings.IndexScopedSettings(settings50, indexScopedSettings66, indexMetaData88);
        boolean boolean92 = indexMetaData88.isSameUUID("index.version.created_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap93 = indexMetaData88.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData95 = indexMetaData88.mapping("index.number_of_shards");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff96 = indexMetaData0.diff(indexMetaData88);
        org.elasticsearch.Version version97 = indexMetaData88.getUpgradedVersion();
        org.apache.lucene.util.Version version98 = indexMetaData88.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNull(wildcardSetting87);
        org.junit.Assert.assertNotNull(indexMetaData88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap93);
        org.junit.Assert.assertNull(mappingMetaData95);
        org.junit.Assert.assertNotNull(indexMetaDataDiff96);
        org.junit.Assert.assertNotNull(version97);
        org.junit.Assert.assertNull(version98);
    }

    @Test
    public void test3647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3647");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.isPrivateSetting("index.");
        boolean boolean25 = indexScopedSettings21.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        indexScopedSettings21.validate("index.shadow_replicas", settings27);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings27);
        indexSettings41.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings41.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue45 = indexSettings41.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.isPrivateSetting("index.");
        boolean boolean51 = indexScopedSettings47.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings53.getGroups("index.uuid");
        java.lang.String[] strArray63 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray65 = settings53.getAsArray("", strArray63, (java.lang.Boolean) false);
        indexScopedSettings47.validate("index.shadow_replicas", settings53);
        org.elasticsearch.index.IndexSettings indexSettings67 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings53);
        indexSettings67.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue70 = indexSettings67.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue71 = indexSettings67.flushThresholdSize;
        indexSettings41.flushThresholdSize = byteSizeValue71;
        indexSettings41.TTLPurgeDisabled = false;
        int int75 = indexSettings41.maxRescoreWindow;
        int int76 = indexSettings41.getMaxResultWindow();
        org.elasticsearch.common.unit.TimeValue timeValue77 = indexSettings41.getTranslogSyncInterval();
// flaky:         indexSettings16.setRefreshInterval(timeValue77);
        org.elasticsearch.index.translog.Translog.Durability durability79 = null; // flaky: indexSettings16.getTranslogDurability();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting80 = null; // flaky: indexSettings16.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        int int81 = 0; // flaky: indexSettings16.numberOfShards;
// flaky:         indexSettings16.maxResultWindow = 32;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(byteSizeValue45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(timeValue70);
        org.junit.Assert.assertNotNull(byteSizeValue71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10000 + "'", int75 == 10000);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10000 + "'", int76 == 10000);
        org.junit.Assert.assertNotNull(timeValue77);
// flaky:         org.junit.Assert.assertTrue("'" + durability79 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability79.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertNotNull(byteSizeValueSetting80);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test3648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3648");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue23 = indexSettings21.globalCheckpointInterval;
        org.elasticsearch.Version version24 = indexSettings21.getversion();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting25 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        boolean boolean27 = indexSettings21.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNotNull(timeValue23);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNotNull(timeValueSetting25);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test3649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3649");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        boolean boolean23 = indexSettings21.isShadowReplicaIndex;
        org.elasticsearch.common.logging.ESLogger eSLogger24 = indexSettings21.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.indexMetaData;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexSettings21.getScopedSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(eSLogger24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
    }

    @Test
    public void test3650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3650");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.removeAlias("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder10.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.isPrivateSetting("index.");
        boolean boolean21 = indexScopedSettings17.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray35 = settings23.getAsArray("", strArray33, (java.lang.Boolean) false);
        indexScopedSettings17.validate("index.shadow_replicas", settings23);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings23);
        java.util.Set<java.lang.String> strSet38 = settings23.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder11.putActiveAllocationIds((int) (short) 0, strSet38);
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.uuid", 0L);
        java.lang.String str45 = builder43.get("");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder43.put("index.shared_filesystem", (long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder39.settings(builder43);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder39.putMapping(mappingMetaData51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test3651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3651");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        org.elasticsearch.index.translog.Translog.Durability durability56 = indexSettings21.durability;
        indexSettings21.maxRescoreWindow = (short) 100;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting59 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + durability56 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability56.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(booleanSetting59);
    }

    @Test
    public void test3652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3652");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.refreshInterval;
        java.lang.String str28 = indexSettings21.getDefaultField();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = indexSettings21.indexMetaData;
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings21.getsyncInterval();
        boolean boolean31 = indexSettings21.isQueryStringAnalyzeWildcard();
        java.util.function.Predicate<java.lang.String> strPredicate32 = indexSettings21.indexNameMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_all" + "'", str28, "_all");
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strPredicate32);
    }

    @Test
    public void test3653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3653");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.settings.Settings settings24 = indexSettings21.getNodeSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        org.elasticsearch.common.unit.TimeValue timeValue48 = indexSettings47.getDEFAULT_REFRESH_INTERVAL();
        indexSettings47.maxResultWindow = (byte) -1;
        org.elasticsearch.common.unit.TimeValue timeValue51 = indexSettings47.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue52 = settings24.getAsTime("index.creation_date_string", timeValue51);
        org.elasticsearch.common.settings.Settings settings54 = settings24.getAsSettings("index.version.upgraded_string");
        org.elasticsearch.common.settings.Settings settings56 = settings24.getByPrefix("0");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(timeValue51);
        org.junit.Assert.assertNotNull(timeValue52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
    }

    @Test
    public void test3654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3654");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = null; // flaky: indexSettings16.getIndexMetaData();
        long long22 = 0L; // flaky: indexMetaData20.primaryTerm((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.isPrivateSetting("index.");
        boolean boolean28 = indexScopedSettings24.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray42 = settings30.getAsArray("", strArray40, (java.lang.Boolean) false);
        indexScopedSettings24.validate("index.shadow_replicas", settings30);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings30);
        boolean boolean46 = indexSettings44.matchesIndexName("");
        boolean boolean47 = indexSettings44.TTLPurgeDisabled;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.isPrivateSetting("index.");
        boolean boolean53 = indexScopedSettings49.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.uuid");
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray67 = settings55.getAsArray("", strArray65, (java.lang.Boolean) false);
        indexScopedSettings49.validate("index.shadow_replicas", settings55);
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings55);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting70 = indexSettings69.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters72 = indexMetaData71.includeFilters();
        indexSettings69.indexMetaData = indexMetaData71;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData71);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData71.includeFilters();
        indexSettings44.indexMetaData = indexMetaData71;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData71);
        boolean boolean78 = false; // flaky: indexMetaData20.equals((java.lang.Object) builder77);
        int int79 = 0; // flaky: indexMetaData20.getTotalNumberOfShards();
        org.apache.lucene.util.Version version80 = null; // flaky: indexMetaData20.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(booleanSetting70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNull(discoveryNodeFilters72);
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNull(version80);
    }

    @Test
    public void test3655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3655");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = settings9.getAsMap();
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property12 = indexScopedSettings0.getScope();
        java.util.function.Predicate<java.lang.String> strPredicate13 = indexScopedSettings0.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean16 = indexScopedSettings14.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings14.applySettings(settings17);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings14.applySettings(settings21);
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = settings23.getAsSettings("hi!");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings25.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings0.diff(settings22, settings25);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings22.getAsGroups();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings22, streamOutput30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + property12 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property12.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap29);
    }

    @Test
    public void test3656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3656");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.excludeFilters();
        java.lang.Object obj2 = null;
        boolean boolean3 = indexMetaData0.equals(obj2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
    }

    @Test
    public void test3657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3657");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
    }

    @Test
    public void test3658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3658");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        int int7 = builder4.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.removeAlias("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.numberOfShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.removeAlias("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 100);
        int int18 = builder17.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test3659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3659");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.isQueryStringAnalyzeWildcard();
        int int26 = indexSettings21.getMaxResultWindow();
        indexSettings21.TTLPurgeDisabled = false;
        boolean boolean29 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test3660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3660");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.index.Index index23 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = indexMetaData0.getState();
        byte byte25 = state24.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(index23);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
    }

    @Test
    public void test3661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3661");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting4 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer5 = null;
        indexScopedSettings3.addSettingsUpdateConsumer(settingsSetting4, settingsConsumer5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer9 = null;
        indexScopedSettings7.addSettingsUpdateConsumer(settingsSetting8, settingsConsumer9);
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings3.get(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings3.dryRun(settings12);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings15.applySettings(settings18);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings15.applySettings(settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings15.get(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13, strPredicate14, indexScopedSettings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        boolean boolean32 = indexScopedSettings28.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        indexScopedSettings28.validate("index.shadow_replicas", settings34);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings34);
        org.elasticsearch.index.translog.Translog.Durability durability49 = null;
        indexSettings48.setTranslogDurability(durability49);
        org.elasticsearch.common.unit.TimeValue timeValue51 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings48.setGCDeletes(timeValue51);
        org.elasticsearch.common.settings.Settings settings53 = indexSettings48.settings;
        org.elasticsearch.index.translog.Translog.Durability durability54 = null;
        indexSettings48.durability = durability54;
        boolean boolean56 = indexSettings48.isWarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        org.elasticsearch.common.unit.TimeValue timeValue79 = indexSettings78.getDEFAULT_REFRESH_INTERVAL();
        indexSettings48.setGCDeletes(timeValue79);
        boolean boolean81 = indexMetaData0.equals((java.lang.Object) timeValue79);
        org.apache.lucene.util.Version version82 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap83 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertNotNull(settingsSetting4);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(timeValue51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(timeValue79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(version82);
        org.junit.Assert.assertNotNull(strImmutableOpenMap83);
    }

    @Test
    public void test3662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3662");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig26 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig27 = indexSettings21.mergeSchedulerConfig;
        boolean boolean28 = indexSettings21.isQueryStringLenient();
        org.elasticsearch.index.translog.Translog.Durability durability29 = indexSettings21.getTranslogDurability();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = indexSettings21.getINDEX_WARMER_ENABLED_SETTING();
        boolean boolean31 = indexSettings21.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig26);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + durability29 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability29.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(booleanSetting30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test3663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3663");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings4.applySettings(settings7);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = settings11.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = settings13.getAsMap();
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings4.applySettings(settings13);
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings0.dryRun(settings13);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings16.getGroups("index.shadow_replicas", true);
        org.elasticsearch.common.settings.Settings settings21 = settings16.getByPrefix("_na_");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = settings21.getAsMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings26.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings23.applySettings(settings26);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings23.applySettings(settings30);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting32 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings23.get(settingsSetting32);
        java.lang.String str34 = indexScopedSettings23.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int36 = indexMetaData35.getNumberOfShards();
        org.elasticsearch.Version version37 = indexMetaData35.getUpgradedVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = new org.elasticsearch.common.settings.IndexScopedSettings(settings21, indexScopedSettings23, indexMetaData35);
        java.util.function.Predicate<java.lang.String> strPredicate39 = indexScopedSettings23.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean43 = indexScopedSettings41.isPrivateSetting("index.");
        boolean boolean45 = indexScopedSettings41.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap49 = settings47.getGroups("index.uuid");
        java.lang.String[] strArray57 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray59 = settings47.getAsArray("", strArray57, (java.lang.Boolean) false);
        indexScopedSettings41.validate("index.shadow_replicas", settings47);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings47);
        indexSettings61.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings61.getsyncInterval();
        indexSettings61.setwarmerEnabled(true);
        org.elasticsearch.common.settings.Settings settings67 = indexSettings61.getSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap68 = settings67.getAsStructuredMap();
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings23.validate(settings67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.version.created]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settingsSetting32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(version37);
        org.junit.Assert.assertNotNull(strPredicate39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strMap68);
    }

    @Test
    public void test3664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3664");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.version.upgraded_string");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("0");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.upgraded_string" + "'", str2, "index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test3665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3665");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        boolean boolean12 = indexScopedSettings8.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings14.getGroups("index.uuid");
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray26 = settings14.getAsArray("", strArray24, (java.lang.Boolean) false);
        indexScopedSettings8.validate("index.shadow_replicas", settings14);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings14);
        org.elasticsearch.index.translog.Translog.Durability durability29 = null;
        indexSettings28.setTranslogDurability(durability29);
        org.elasticsearch.common.settings.Settings settings31 = indexSettings28.getSettings();
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder4.settings(settings31);
        int int34 = builder4.numberOfShards();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder4.putAlias(aliasMetaData35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test3666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3666");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getTranslogDurability();
        boolean boolean28 = indexSettings21.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting29 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        boolean boolean30 = indexSettings21.getqueryStringLenient();
        java.lang.String str31 = indexSettings21.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue32 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig33 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting34 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strSetting29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(timeValue32);
        org.junit.Assert.assertNotNull(mergePolicyConfig33);
        org.junit.Assert.assertNotNull(booleanSetting34);
    }

    @Test
    public void test3667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3667");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet20 = indexScopedSettings0.getBUILT_IN_INDEX_SETTINGS();
        java.lang.String str21 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting23 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer24 = null;
        indexScopedSettings22.addSettingsUpdateConsumer(settingsSetting23, settingsConsumer24);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting27 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer28 = null;
        indexScopedSettings26.addSettingsUpdateConsumer(settingsSetting27, settingsConsumer28);
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings22.get(settingsSetting27);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting27, settingsConsumer31);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters34 = indexMetaData33.includeFilters();
        long long35 = indexMetaData33.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting37 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer38 = null;
        indexScopedSettings36.addSettingsUpdateConsumer(settingsSetting37, settingsConsumer38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting41 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer42 = null;
        indexScopedSettings40.addSettingsUpdateConsumer(settingsSetting41, settingsConsumer42);
        org.elasticsearch.common.settings.Settings settings44 = indexScopedSettings36.get(settingsSetting41);
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings36.dryRun(settings45);
        java.util.function.Predicate<java.lang.String> strPredicate47 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings48.applySettings(settings51);
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings56 = indexScopedSettings48.applySettings(settings55);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting57 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings58 = indexScopedSettings48.get(settingsSetting57);
        org.elasticsearch.index.IndexSettings indexSettings59 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData33, settings46, strPredicate47, indexScopedSettings48);
        long long60 = indexMetaData33.getCreationDate();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting61 = org.elasticsearch.index.IndexSettings.MAX_RESULT_WINDOW_SETTING;
        boolean boolean62 = indexMetaData33.equals((java.lang.Object) intSetting61);
        org.elasticsearch.common.settings.Settings settings63 = indexMetaData33.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings63.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.isPrivateSetting("index.");
        boolean boolean70 = indexScopedSettings66.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings72.getGroups("index.uuid");
        java.lang.String[] strArray82 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray84 = settings72.getAsArray("", strArray82, (java.lang.Boolean) false);
        indexScopedSettings66.validate("index.shadow_replicas", settings72);
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData65, settings72);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting87 = indexSettings86.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData88 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters89 = indexMetaData88.includeFilters();
        indexSettings86.indexMetaData = indexMetaData88;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder91 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData88);
        org.elasticsearch.common.settings.Settings settings92 = indexMetaData88.getSettings();
        org.elasticsearch.common.settings.Settings settings93 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings92);
        java.util.Map<java.lang.String, java.lang.String> strMap94 = settings93.getAsMap();
        org.elasticsearch.common.settings.Settings settings95 = indexScopedSettings0.diff(settings63, settings93);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue98 = settings93.getAsRatio("5000099", "index.version.upgraded");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.version.upgraded]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(wildcardSettingSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settingsSetting23);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(settingsSetting27);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNull(discoveryNodeFilters34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertNotNull(settingsSetting37);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(settingsSetting41);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strPredicate47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settingsSetting57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertNotNull(intSetting61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(booleanSetting87);
        org.junit.Assert.assertNotNull(indexMetaData88);
        org.junit.Assert.assertNull(discoveryNodeFilters89);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(settings93);
        org.junit.Assert.assertNotNull(strMap94);
        org.junit.Assert.assertNotNull(settings95);
    }

    @Test
    public void test3668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3668");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.putNull("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings12.applySettings(settings15);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray26 = settings18.getAsArray("index.version.created", strArray24, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder6.extendArray("index.version.created_string", strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder6.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder29.normalizePrefix("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder29.put("index.data_path", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("index.uuid", 0L);
        java.lang.String str41 = builder39.get("");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder39.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings47 = settings45.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = settings47.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate49 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction50 = null;
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder39.putProperties(strMap48, strPredicate49, strFunction50);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder39.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder55 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("index.uuid", 0L);
        java.lang.String str60 = builder58.get("");
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder61.putNull("hi!");
        java.lang.String str65 = builder63.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder63.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder63.put("_na_", (double) 1);
        java.lang.String[] strArray87 = new java.lang.String[] { "index.blocks.write", "index.blocks.read_only", "state-", "index.shared_filesystem", "index.version.created_string", "1.0", "index.number_of_replicas", "5000099", "index.uuid", "index.blocks.write", "index.priority", "", "1", "", "1.0" };
        java.util.ArrayList<java.lang.String> strList88 = new java.util.ArrayList<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList88, strArray87);
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder70.putArray("index.data_path", (java.util.List<java.lang.String>) strList88);
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder39.putArray("index.shadow_replicas", (java.util.List<java.lang.String>) strList88);
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder34.putArray("index.shadow_replicas", (java.util.List<java.lang.String>) strList88);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test3669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3669");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings21.durability = durability27;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting29 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        indexSettings51.setEnableWarmer(true);
        java.lang.String str54 = indexSettings51.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = indexSettings51.getIndexMetaData();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean58 = indexScopedSettings56.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings59.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings62 = indexScopedSettings56.applySettings(settings59);
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings64 = indexScopedSettings56.applySettings(settings63);
        boolean boolean65 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings63);
        org.elasticsearch.common.unit.SizeValue sizeValue67 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue68 = settings63.getAsSize("index.shadow_replicas", sizeValue67);
        boolean boolean69 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings63);
        org.elasticsearch.index.IndexSettings indexSettings70 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings63);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters71 = indexMetaData55.includeFilters();
        boolean boolean72 = indexSettings21.updateIndexMetaData(indexMetaData55);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting73 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting74 = indexSettings21.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting75 = indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.settings.Settings settings76 = indexSettings21.getSettings();
        org.elasticsearch.common.settings.Settings settings78 = settings76.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(timeValueSetting29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(sizeValue68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(booleanSetting73);
        org.junit.Assert.assertNotNull(booleanSetting74);
        org.junit.Assert.assertNotNull(intSetting75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings78);
    }

    @Test
    public void test3670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3670");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings2 = settings0.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = settings2.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.isPrivateSetting("index.");
        boolean boolean10 = indexScopedSettings6.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray24 = settings12.getAsArray("", strArray22, (java.lang.Boolean) false);
        indexScopedSettings6.validate("index.shadow_replicas", settings12);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings12);
        boolean boolean28 = indexSettings26.matchesIndexName("");
        long long29 = indexSettings26.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue30 = indexSettings26.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue31 = settings2.getAsBytesSize("primary_terms", byteSizeValue30);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = null;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings37 = settings33.getAsSettings("");
        java.lang.Boolean boolean40 = settings37.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue42 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue43 = settings37.getAsBytesSize("index.", byteSizeValue42);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = null;
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings49 = settings45.getAsSettings("");
        java.lang.Boolean boolean52 = settings49.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue54 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue55 = settings49.getAsBytesSize("index.", byteSizeValue54);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params57 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder58 = settings49.toXContent(xContentBuilder56, params57);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder59 = settings37.toXContent(xContentBuilder44, params57);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder60 = settings2.toXContent(xContentBuilder32, params57);
        java.lang.String str63 = settings2.get("index.data_path", "index.creation_date");
        java.lang.String str66 = settings2.get("index.uuid", "index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.isPrivateSetting("index.");
        boolean boolean72 = indexScopedSettings68.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap76 = settings74.getGroups("index.uuid");
        java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray86 = settings74.getAsArray("", strArray84, (java.lang.Boolean) false);
        indexScopedSettings68.validate("index.shadow_replicas", settings74);
        org.elasticsearch.index.IndexSettings indexSettings88 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings74);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting89 = indexSettings88.getINDEX_REFRESH_INTERVAL_SETTING();
        boolean boolean90 = indexSettings88.isShadowReplicaIndex;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher91 = indexSettings88.getParseFieldMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability92 = indexSettings88.durability;
        java.util.function.Predicate<java.lang.String> strPredicate93 = indexSettings88.indexNameMatcher;
        org.elasticsearch.common.settings.Settings settings94 = settings2.filter(strPredicate93);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 60000L + "'", long29 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue30);
        org.junit.Assert.assertNotNull(byteSizeValue31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertEquals("'" + boolean40 + "' != '" + true + "'", boolean40, true);
        org.junit.Assert.assertNull(byteSizeValue43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertEquals("'" + boolean52 + "' != '" + true + "'", boolean52, true);
        org.junit.Assert.assertNull(byteSizeValue55);
        org.junit.Assert.assertNotNull(params57);
        org.junit.Assert.assertNull(xContentBuilder58);
        org.junit.Assert.assertNull(xContentBuilder59);
        org.junit.Assert.assertNull(xContentBuilder60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "index.creation_date" + "'", str63, "index.creation_date");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "index.creation_date" + "'", str66, "index.creation_date");
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(timeValueSetting89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher91);
        org.junit.Assert.assertTrue("'" + durability92 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability92.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate93);
        org.junit.Assert.assertNotNull(settings94);
    }

    @Test
    public void test3671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3671");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder0.get("1.0");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.put(objDictionary6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test3672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3672");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.excludeFilters();
        long long5 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.io.stream.StreamInput streamInput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = indexMetaData0.readFrom(streamInput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    }

    @Test
    public void test3673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3673");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting23 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        int int24 = indexSettings21.maxRescoreWindow;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = settings25.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = settings27.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        boolean boolean53 = indexSettings51.matchesIndexName("");
        long long54 = indexSettings51.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue55 = indexSettings51.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue56 = settings27.getAsBytesSize("primary_terms", byteSizeValue55);
        indexSettings21.flushThresholdSize = byteSizeValue55;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(booleanSetting23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 60000L + "'", long54 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue55);
        org.junit.Assert.assertNotNull(byteSizeValue56);
    }

    @Test
    public void test3674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3674");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfShards(10);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test3675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3675");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings21.getGlobalCheckpointInterval();
        java.lang.String str73 = indexSettings21.nodeName;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test3676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3676");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.logging.ESLogger eSLogger30 = indexSettings21.logger;
        org.elasticsearch.Version version31 = indexSettings21.getversion();
        indexSettings21.warmerEnabled = true;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting34 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(eSLogger30);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(timeValueSetting34);
    }

    @Test
    public void test3677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3677");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getValue(settingsSetting17);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting19 = null; // flaky: indexSettings16.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        boolean boolean20 = false; // flaky: indexSettings16.getqueryStringLenient();
        boolean boolean21 = false; // flaky: indexSettings16.TTLPurgeDisabled;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig22 = null; // flaky: indexSettings16.mergeSchedulerConfig;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting23 = null; // flaky: indexSettings16.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        boolean boolean24 = false; // flaky: indexSettings16.warmerEnabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(settingsSetting17);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig22);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting23);
// flaky:         org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test3678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3678");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        java.lang.String str10 = builder3.remove("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder3.loadFromSource("index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.uuid", 0L);
        java.lang.String str20 = builder18.get("");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder21.putNull("hi!");
        java.lang.String str25 = builder23.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("_all", (float) 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.uuid", (double) 100.0f);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        java.lang.String str38 = indexScopedSettings33.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int41 = builder40.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder40.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder43.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings48 = settings46.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray62 = settings50.getAsArray("", strArray60, (java.lang.Boolean) false);
        java.lang.String[] strArray64 = settings46.getAsArray("index.version.minimum_compatible", strArray60, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder43.settings(settings46);
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings66.getGroups("index.uuid");
        java.lang.String[] strArray76 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray78 = settings66.getAsArray("", strArray76, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder43.settings(settings66);
        java.lang.String str81 = settings66.get("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings82 = indexScopedSettings33.archiveUnknownOrBrokenSettings(settings66);
        org.elasticsearch.common.unit.SizeValue sizeValue84 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue85 = settings82.getAsSize("", sizeValue84);
        java.lang.String[] strArray87 = settings82.getAsArray("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder28.extendArray("index.creation_date_string", strArray87);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder3.putArray("index.shared_filesystem.recover_on_any_node", strArray87);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNull(sizeValue85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test3679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3679");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int30 = builder29.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder29.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder32.creationDate((long) (short) 1);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings40 = settings38.getAsSettings("hi!");
        java.util.Set<java.lang.String> strSet41 = settings40.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder32.putActiveAllocationIds((int) ' ', strSet41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder26.putActiveAllocationIds(5000099, strSet41);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test3680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3680");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (short) 1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.putMapping(mappingMetaData4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test3681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3681");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        indexSettings21.setwarmerEnabled(true);
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getSettings();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher28 = indexSettings21.parseFieldMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(parseFieldMatcher28);
    }

    @Test
    public void test3682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3682");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        int int18 = 0; // flaky: indexSettings16.getMaxRescoreWindow();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings19.applySettings(settings22);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings19.applySettings(settings26);
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings26);
// flaky:         indexSettings16.settings = settings26;
        org.elasticsearch.common.settings.Settings settings31 = settings26.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings31);
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("index.creation_date");
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = settings34.getAsStructuredMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap35);
    }

    @Test
    public void test3683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3683");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int4 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.excludeFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
    }

    @Test
    public void test3684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3684");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.putNull("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings12.applySettings(settings15);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray26 = settings18.getAsArray("index.version.created", strArray24, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder6.extendArray("index.version.created_string", strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.uuid", 0L);
        java.lang.String str34 = builder32.get("");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.uuid", 0L);
        java.lang.String str45 = builder43.get("");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("index.shared_filesystem", (int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings57 = settings55.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings59.getGroups("index.uuid");
        java.lang.String[] strArray69 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray71 = settings59.getAsArray("", strArray69, (java.lang.Boolean) false);
        java.lang.String[] strArray73 = settings55.getAsArray("index.version.minimum_compatible", strArray69, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap76 = settings74.getGroups("index.uuid");
        java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray86 = settings74.getAsArray("", strArray84, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder49.put("", "state-", strArray69, strArray84);
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder38.extendArray("archived.", strArray84);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder6.putArray("archived.", strArray84);
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder6.normalizePrefix("index.");
        org.elasticsearch.common.settings.Settings.Builder builder93 = builder6.putNull("index.");
        org.elasticsearch.common.settings.Settings.Builder builder96 = builder93.put("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", false);
        java.lang.Class class98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder99 = builder96.put("primary_terms", class98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test3685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3685");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting4 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer5 = null;
        indexScopedSettings3.addSettingsUpdateConsumer(settingsSetting4, settingsConsumer5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer9 = null;
        indexScopedSettings7.addSettingsUpdateConsumer(settingsSetting8, settingsConsumer9);
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings3.get(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings3.dryRun(settings12);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings15.applySettings(settings18);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings15.applySettings(settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings15.get(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13, strPredicate14, indexScopedSettings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters28 = indexMetaData27.includeFilters();
        long long29 = indexMetaData27.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData27.mappingOrDefault("state-");
        boolean boolean32 = false; // flaky: indexSettings26.updateIndexMetaData(indexMetaData27);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting33 = null; // flaky: indexSettings26.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        long long34 = 0L; // flaky: indexSettings26.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertNotNull(settingsSetting4);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNull(discoveryNodeFilters28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 60000L + "'", long34 == 60000L);
    }

    @Test
    public void test3686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3686");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder5.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.removeAlias("0");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3687");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getNodeSettings();
        boolean boolean28 = indexSettings21.getwarmerEnabled();
        boolean boolean29 = indexSettings21.getisShadowReplicaIndex();
        boolean boolean30 = indexSettings21.isWarmerEnabled();
        indexSettings21.maxResultWindow = 'a';
        org.elasticsearch.common.unit.TimeValue timeValue33 = indexSettings21.globalCheckpointInterval;
        org.elasticsearch.index.translog.Translog.Durability durability34 = indexSettings21.getdurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(timeValue33);
        org.junit.Assert.assertTrue("'" + durability34 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability34.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test3688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3688");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int12 = builder11.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder14.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder14.numberOfReplicas((int) ' ');
        java.lang.String[] strArray40 = new java.lang.String[] { "index.blocks.read_only", "index.version.created", "index.", "index.uuid", "index.uuid", "index.uuid", "index.version.created_string", "index.", "index.", "_na_", "state-", "_na_", "state-", "index.shadow_replicas", "index.blocks.read_only", "index.shared_filesystem", "_na_", "index.blocks.read_only" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder14.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet41);
        long long44 = builder43.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder43.version((long) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.isPrivateSetting("index.");
        boolean boolean52 = indexScopedSettings48.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings54.getGroups("index.uuid");
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray66 = settings54.getAsArray("", strArray64, (java.lang.Boolean) false);
        indexScopedSettings48.validate("index.shadow_replicas", settings54);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings54);
        org.elasticsearch.index.translog.Translog.Durability durability69 = null;
        indexSettings68.setTranslogDurability(durability69);
        org.elasticsearch.common.unit.TimeValue timeValue71 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings68.setGCDeletes(timeValue71);
        org.elasticsearch.common.settings.Settings settings73 = indexSettings68.settings;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder43.settings(settings73);
        java.lang.Class<?> wildcardClass75 = settings73.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder6.put("index.version.created_string", (java.lang.Class) wildcardClass75);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder6.put("", "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder6.normalizePrefix("5000099");
        java.nio.file.Path path82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder83 = builder81.loadFromPath(path82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(timeValue71);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test3689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3689");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = indexSettings21.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue31 = indexSettings21.getsyncInterval();
        boolean boolean32 = indexSettings21.isShadowReplicaIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean36 = indexScopedSettings34.isPrivateSetting("index.");
        boolean boolean38 = indexScopedSettings34.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings40.getGroups("index.uuid");
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray52 = settings40.getAsArray("", strArray50, (java.lang.Boolean) false);
        indexScopedSettings34.validate("index.shadow_replicas", settings40);
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings40);
        indexSettings54.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings54.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue58 = indexSettings54.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean62 = indexScopedSettings60.isPrivateSetting("index.");
        boolean boolean64 = indexScopedSettings60.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings66.getGroups("index.uuid");
        java.lang.String[] strArray76 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray78 = settings66.getAsArray("", strArray76, (java.lang.Boolean) false);
        indexScopedSettings60.validate("index.shadow_replicas", settings66);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData59, settings66);
        indexSettings80.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue83 = indexSettings80.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue84 = indexSettings80.flushThresholdSize;
        indexSettings54.flushThresholdSize = byteSizeValue84;
        indexSettings54.TTLPurgeDisabled = false;
        int int88 = indexSettings54.maxRescoreWindow;
        org.elasticsearch.index.translog.Translog.Durability durability89 = indexSettings54.durability;
        indexSettings21.durability = durability89;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(booleanSetting30);
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertNotNull(byteSizeValue58);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(timeValue83);
        org.junit.Assert.assertNotNull(byteSizeValue84);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 10000 + "'", int88 == 10000);
        org.junit.Assert.assertTrue("'" + durability89 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability89.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test3690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3690");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting25 = indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        int int26 = indexSettings21.getMaxRescoreWindow();
        boolean boolean27 = indexSettings21.getdefaultAllowUnmappedFields();
        boolean boolean28 = indexSettings21.getdefaultAllowUnmappedFields();
        java.util.function.Predicate<java.lang.String> strPredicate29 = indexSettings21.getindexNameMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(intSetting25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strPredicate29);
    }

    @Test
    public void test3691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3691");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getRefreshInterval();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting26 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.Version version27 = indexSettings21.version;
        boolean boolean28 = indexSettings21.TTLPurgeDisabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(durabilitySetting26);
        org.junit.Assert.assertNotNull(version27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3692");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig25 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = indexSettings21.indexMetaData;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = indexMetaData27.getState();
        boolean boolean30 = indexMetaData27.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap31 = indexMetaData27.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicyConfig25);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap31);
    }

    @Test
    public void test3693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3693");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.common.settings.Settings settings27 = indexMetaData23.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap28 = indexMetaData23.getMappings();
        org.elasticsearch.common.io.stream.StreamInput streamInput29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = indexMetaData23.readFrom(streamInput29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
    }

    @Test
    public void test3694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3694");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        java.lang.String str5 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting11 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer12 = null;
        indexScopedSettings10.addSettingsUpdateConsumer(settingsSetting11, settingsConsumer12);
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings6.get(settingsSetting11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings15.applySettings(settings18);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings15.applySettings(settings22);
        boolean boolean24 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings22);
        org.elasticsearch.common.unit.SizeValue sizeValue26 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue27 = settings22.getAsSize("index.shadow_replicas", sizeValue26);
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings22);
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings6.dryRun(settings22);
        boolean boolean31 = indexScopedSettings6.hasDynamicSetting("index.creation_date_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        boolean boolean36 = indexScopedSettings32.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        indexScopedSettings32.validate("index.shadow_replicas", settings38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean54 = indexScopedSettings52.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings58 = indexScopedSettings52.applySettings(settings55);
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings52.applySettings(settings59);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = indexScopedSettings32.copy(settings60, indexMetaData61);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean65 = indexScopedSettings63.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings66.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings69 = indexScopedSettings63.applySettings(settings66);
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings63.applySettings(settings70);
        indexScopedSettings32.validate(settings71);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting74 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer75 = null;
        indexScopedSettings73.addSettingsUpdateConsumer(settingsSetting74, settingsConsumer75);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting78 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer79 = null;
        indexScopedSettings77.addSettingsUpdateConsumer(settingsSetting78, settingsConsumer79);
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings73.get(settingsSetting78);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings82 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting83 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer84 = null;
        indexScopedSettings82.addSettingsUpdateConsumer(settingsSetting83, settingsConsumer84);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer86 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting78, settingsSetting83, settingsBiConsumer86);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer88 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting78, settingsConsumer88);
        org.elasticsearch.common.settings.Settings settings90 = indexScopedSettings0.get(settingsSetting78);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap92 = settings90.getGroups("primary_terms");
        java.lang.String[] strArray94 = settings90.getAsArray("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet95 = settings90.names();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertNotNull(settingsSetting11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(sizeValue27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertNotNull(settingsSetting74);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settingsSetting78);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(indexScopedSettings82);
        org.junit.Assert.assertNotNull(settingsSetting83);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(strMap92);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(strSet95);
    }

    @Test
    public void test3695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3695");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher18 = null; // flaky: indexSettings16.getParseFieldMatcher();
        org.elasticsearch.common.unit.TimeValue timeValue19 = null; // flaky: indexSettings16.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.isPrivateSetting("index.");
        boolean boolean25 = indexScopedSettings21.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        indexScopedSettings21.validate("index.shadow_replicas", settings27);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings27);
        indexSettings41.setEnableWarmer(true);
        indexSettings41.maxResultWindow = (byte) 100;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue46 = indexSettings41.flushThresholdSize;
// flaky:         indexSettings16.flushThresholdSize = byteSizeValue46;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting48 = null; // flaky: indexSettings16.getALLOW_UNMAPPED();
        boolean boolean49 = false; // flaky: indexSettings16.isDefaultAllowUnmappedFields();
        boolean boolean50 = false; // flaky: indexSettings16.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher18);
// flaky:         org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(byteSizeValue46);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test3696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3696");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings21.syncInterval;
        int int27 = indexSettings21.getNumberOfShards();
        org.elasticsearch.Version version28 = indexSettings21.getversion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = indexSettings21.getIndexMetaData();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(version28);
        org.junit.Assert.assertNotNull(indexMetaData29);
    }

    @Test
    public void test3697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3697");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        boolean boolean30 = indexScopedSettings26.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        indexScopedSettings26.validate("index.shadow_replicas", settings32);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings32);
        boolean boolean48 = indexSettings46.matchesIndexName("");
        long long49 = indexSettings46.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings46.getGlobalCheckpointInterval();
        indexSettings21.setRefreshInterval(timeValue50);
        indexSettings21.setEnableWarmer(false);
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig54 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.common.unit.TimeValue timeValue55 = indexSettings21.syncInterval;
        indexSettings21.warmerEnabled = true;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean61 = indexScopedSettings59.isPrivateSetting("index.");
        boolean boolean63 = indexScopedSettings59.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings65.getGroups("index.uuid");
        java.lang.String[] strArray75 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray77 = settings65.getAsArray("", strArray75, (java.lang.Boolean) false);
        indexScopedSettings59.validate("index.shadow_replicas", settings65);
        org.elasticsearch.index.IndexSettings indexSettings79 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings65);
        indexSettings79.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue82 = indexSettings79.getsyncInterval();
        org.elasticsearch.Version version83 = indexSettings79.getversion();
        boolean boolean84 = indexSettings79.warmerEnabled;
        java.lang.String str85 = indexSettings79.nodeName;
        int int86 = indexSettings79.getMaxResultWindow();
        indexSettings79.TTLPurgeDisabled = true;
        org.elasticsearch.common.unit.TimeValue timeValue89 = indexSettings79.getDEFAULT_GC_DELETES();
        indexSettings21.setGCDeletes(timeValue89);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 60000L + "'", long49 == 60000L);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(mergePolicyConfig54);
        org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(timeValue82);
        org.junit.Assert.assertNotNull(version83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10000 + "'", int86 == 10000);
        org.junit.Assert.assertNotNull(timeValue89);
    }

    @Test
    public void test3698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3698");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean25 = indexSettings21.getqueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap48 = indexMetaData26.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap49 = indexMetaData26.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData26);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap51 = indexMetaData26.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet53 = null; // flaky: indexMetaData26.activeAllocationIds(1);
        int int54 = indexMetaData26.getNumberOfShards();
        boolean boolean55 = indexSettings21.updateIndexMetaData(indexMetaData26);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting56 = indexSettings21.getALLOW_UNMAPPED();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
        org.junit.Assert.assertNotNull(strImmutableOpenMap49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap51);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(booleanSetting56);
    }

    @Test
    public void test3699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3699");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexSettings21.getScopedSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = indexScopedSettings26.getDEFAULT_SCOPED_SETTINGS();
        java.lang.String str28 = indexScopedSettings27.nodeName();
        boolean boolean30 = indexScopedSettings27.hasDynamicSetting("0");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test3700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3700");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.logging.ESLogger eSLogger28 = indexSettings21.getlogger();
        org.elasticsearch.common.settings.Settings settings29 = indexSettings21.getSettings();
        boolean boolean30 = indexSettings21.getqueryStringAllowLeadingWildcard();
        boolean boolean31 = indexSettings21.getwarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertNotNull(eSLogger28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test3701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3701");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.getFlushThresholdSize();
        indexSettings21.TTLPurgeDisabled = false;
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean29 = indexSettings21.queryStringLenient;
        indexSettings21.maxRescoreWindow = 10;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue32 = indexSettings21.getFlushThresholdSize();
        java.lang.String str33 = indexSettings21.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue34 = indexSettings21.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteSizeValue32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(timeValue34);
    }

    @Test
    public void test3702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3702");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings26.applySettings(settings29);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings26.applySettings(settings33);
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.common.unit.SizeValue sizeValue37 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue38 = settings33.getAsSize("index.shadow_replicas", sizeValue37);
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings33);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters41 = indexMetaData25.getInitialRecoveryFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = indexMetaData25.readFrom(streamInput42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(sizeValue38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters41);
    }

    @Test
    public void test3703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3703");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte8 = state7.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.state(state7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfReplicas(35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int14 = builder13.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.index("index.");
        int int19 = builder16.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder16.index("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = builder16.mapping("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder16.removeAllAliases();
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.uuid", 0L);
        java.lang.String str30 = builder28.get("");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder28.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = settings34.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = settings36.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction39 = null;
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder28.putProperties(strMap37, strPredicate38, strFunction39);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder28.loadFromSource("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int46 = indexMetaData45.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap47 = indexMetaData45.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters48 = indexMetaData45.requireFilters();
        org.elasticsearch.Version version49 = indexMetaData45.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder28.put("hi!", version49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean55 = indexScopedSettings53.isPrivateSetting("index.");
        boolean boolean57 = indexScopedSettings53.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings59.getGroups("index.uuid");
        java.lang.String[] strArray69 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray71 = settings59.getAsArray("", strArray69, (java.lang.Boolean) false);
        indexScopedSettings53.validate("index.shadow_replicas", settings59);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings59);
        org.elasticsearch.common.settings.Settings settings74 = indexSettings73.getSettings();
        indexSettings73.maxResultWindow = (short) -1;
        boolean boolean77 = indexSettings73.isOnSharedFilesystem();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = indexSettings73.getScopedSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting79 = indexSettings73.getQUERY_STRING_LENIENT_SETTING();
        java.lang.Class<?> wildcardClass80 = booleanSetting79.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder28.put("", (java.lang.Class) wildcardClass80);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = builder24.settings(builder81);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = builder9.settings(builder81);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder81.put("index.uuid", (int) (byte) 0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap47);
        org.junit.Assert.assertNull(discoveryNodeFilters48);
        org.junit.Assert.assertNotNull(version49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
        org.junit.Assert.assertNotNull(booleanSetting79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test3704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3704");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.settings.Settings settings24 = indexSettings21.getSettings();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings24.getAsMap();
        org.elasticsearch.common.unit.SizeValue sizeValue27 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue28 = settings24.getAsSize("index.shared_filesystem", sizeValue27);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings24, streamOutput29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(sizeValue28);
    }

    @Test
    public void test3705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3705");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting5 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer6 = null;
        indexScopedSettings4.addSettingsUpdateConsumer(settingsSetting5, settingsConsumer6);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.get(settingsSetting5);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.dryRun(settings9);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings10.getGroups("index.");
        org.elasticsearch.common.settings.Settings settings14 = settings10.getByPrefix("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.isPrivateSetting("index.");
        boolean boolean20 = indexScopedSettings16.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings22.getGroups("index.uuid");
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray34 = settings22.getAsArray("", strArray32, (java.lang.Boolean) false);
        indexScopedSettings16.validate("index.shadow_replicas", settings22);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings22);
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings36.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability38 = indexSettings36.getTranslogDurability();
        indexSettings36.setEnableWarmer(true);
        java.util.function.Predicate<java.lang.String> strPredicate41 = indexSettings36.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings42 = settings10.filter(strPredicate41);
        boolean boolean43 = settings10.isEmpty();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settingsSetting5);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(timeValue37);
        org.junit.Assert.assertTrue("'" + durability38 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability38.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test3706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3706");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean26 = indexSettings21.getisShadowReplicaIndex();
        boolean boolean27 = indexSettings21.isQueryStringAnalyzeWildcard();
        indexSettings21.warmerEnabled = true;
        org.elasticsearch.Version version30 = indexSettings21.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(version30);
    }

    @Test
    public void test3707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3707");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings19 = settings17.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings21.getGroups("index.uuid");
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray33 = settings21.getAsArray("", strArray31, (java.lang.Boolean) false);
        java.lang.String[] strArray35 = settings17.getAsArray("index.version.minimum_compatible", strArray31, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder3.extendArray("", strArray35);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("index.shadow_replicas", 1.0f);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.isPrivateSetting("index.");
        boolean boolean46 = indexScopedSettings42.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings48.getGroups("index.uuid");
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray60 = settings48.getAsArray("", strArray58, (java.lang.Boolean) false);
        indexScopedSettings42.validate("index.shadow_replicas", settings48);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings48);
        org.elasticsearch.index.translog.Translog.Durability durability63 = null;
        indexSettings62.setTranslogDurability(durability63);
        org.elasticsearch.common.unit.TimeValue timeValue65 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings62.setGCDeletes(timeValue65);
        org.apache.lucene.index.MergePolicy mergePolicy67 = indexSettings62.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher68 = indexSettings62.getParseFieldMatcher();
        indexSettings62.setTTLPurgeDisabled(false);
        org.elasticsearch.common.logging.ESLogger eSLogger71 = indexSettings62.logger;
        org.elasticsearch.Version version72 = indexSettings62.getversion();
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder36.put("index.uuid", version72);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder36.put("1.0", 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertNotNull(mergePolicy67);
        org.junit.Assert.assertNotNull(parseFieldMatcher68);
        org.junit.Assert.assertNotNull(eSLogger71);
        org.junit.Assert.assertNotNull(version72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test3708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3708");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig35 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting36 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting37 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean38 = indexSettings21.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting39 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(mergePolicyConfig35);
        org.junit.Assert.assertNotNull(booleanSetting36);
        org.junit.Assert.assertNotNull(booleanSetting37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(booleanSetting39);
    }

    @Test
    public void test3709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3709");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings20.applySettings(settings23);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.applySettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexScopedSettings0.copy(settings28, indexMetaData29);
        boolean boolean32 = indexScopedSettings30.hasDynamicSetting("index.version.minimum_compatible");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        boolean boolean54 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean56 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting58 = indexScopedSettings33.get("index.number_of_shards");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting59 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting61 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer62 = null;
        indexScopedSettings60.addSettingsUpdateConsumer(settingsSetting61, settingsConsumer62);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting65 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        indexScopedSettings64.addSettingsUpdateConsumer(settingsSetting65, settingsConsumer66);
        org.elasticsearch.common.settings.Settings settings68 = indexScopedSettings60.get(settingsSetting65);
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings60.dryRun(settings69);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting71 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings72 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting73 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer74 = null;
        indexScopedSettings72.addSettingsUpdateConsumer(settingsSetting73, settingsConsumer74);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings76 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting77 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer78 = null;
        indexScopedSettings76.addSettingsUpdateConsumer(settingsSetting77, settingsConsumer78);
        org.elasticsearch.common.settings.Settings settings80 = indexScopedSettings72.get(settingsSetting77);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer81 = null;
        indexScopedSettings60.addSettingsUpdateConsumer(settingsSetting71, settingsSetting77, settingsBiConsumer81);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer83 = null;
        indexScopedSettings33.addSettingsUpdateConsumer(settingsSetting59, settingsSetting77, settingsBiConsumer83);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer85 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer86 = null;
        indexScopedSettings30.addSettingsUpdateConsumer(settingsSetting77, settingsConsumer85, settingsConsumer86);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardSetting58);
        org.junit.Assert.assertNotNull(settingsSetting59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settingsSetting61);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertNotNull(settingsSetting65);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settingsSetting71);
        org.junit.Assert.assertNotNull(indexScopedSettings72);
        org.junit.Assert.assertNotNull(settingsSetting73);
        org.junit.Assert.assertNotNull(indexScopedSettings76);
        org.junit.Assert.assertNotNull(settingsSetting77);
        org.junit.Assert.assertNotNull(settings80);
    }

    @Test
    public void test3710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3710");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int29 = indexMetaData28.getNumberOfShards();
        indexSettings21.indexMetaData = indexMetaData28;
        boolean boolean31 = indexSettings21.getqueryStringAllowLeadingWildcard();
        boolean boolean32 = indexSettings21.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting33 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        java.lang.String str34 = indexSettings21.nodeName;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting35 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(booleanSetting33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(timeValueSetting35);
    }

    @Test
    public void test3711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3711");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        boolean boolean25 = indexSettings21.isShadowReplicaIndex();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher26 = indexSettings21.getParseFieldMatcher();
        boolean boolean27 = indexSettings21.queryStringAllowLeadingWildcard;
        org.elasticsearch.Version version28 = indexSettings21.version;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(version28);
    }

    @Test
    public void test3712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3712");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        long long7 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.numberOfShards(1);
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.uuid", 0L);
        java.lang.String str15 = builder13.get("");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.version.created", "hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder6.settings(builder19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.removeAlias("index.shared_filesystem");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test3713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3713");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        int int28 = indexSettings21.maxResultWindow;
        org.elasticsearch.common.logging.ESLogger eSLogger29 = indexSettings21.getlogger();
        boolean boolean30 = indexSettings21.isQueryStringAllowLeadingWildcard();
        boolean boolean31 = indexSettings21.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(eSLogger29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test3714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3714");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder4.settings(settings27);
        java.lang.String str42 = settings27.get("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.isPrivateSetting("index.");
        boolean boolean47 = indexScopedSettings43.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings49.getGroups("index.uuid");
        java.lang.String[] strArray59 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray61 = settings49.getAsArray("", strArray59, (java.lang.Boolean) false);
        indexScopedSettings43.validate("index.shadow_replicas", settings49);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting64 = indexScopedSettings43.get("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int66 = indexMetaData65.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = new org.elasticsearch.common.settings.IndexScopedSettings(settings27, indexScopedSettings43, indexMetaData65);
        java.util.Set<java.lang.String> strSet69 = indexMetaData65.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters70 = indexMetaData65.excludeFilters();
        java.lang.String str71 = indexMetaData65.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap72 = indexMetaData65.getCustoms();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(wildcardSetting64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNull(discoveryNodeFilters70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "_na_" + "'", str71, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap72);
    }

    @Test
    public void test3715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3715");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting5 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer6 = null;
        indexScopedSettings4.addSettingsUpdateConsumer(settingsSetting5, settingsConsumer6);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.get(settingsSetting5);
        boolean boolean10 = indexScopedSettings0.hasDynamicSetting("archived.");
        java.lang.String str11 = indexScopedSettings0.nodeName();
        boolean boolean13 = indexScopedSettings0.hasDynamicSetting("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = indexScopedSettings0.getDEFAULT_SCOPED_SETTINGS();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settingsSetting5);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
    }

    @Test
    public void test3716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3716");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.syncInterval;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig28 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting29 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        int int30 = indexSettings21.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(mergePolicyConfig28);
        org.junit.Assert.assertNotNull(timeValueSetting29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test3717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3717");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.uuid", 0L);
        java.lang.String str16 = builder14.get("");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem", (int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = settings26.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray42 = settings30.getAsArray("", strArray40, (java.lang.Boolean) false);
        java.lang.String[] strArray44 = settings26.getAsArray("index.version.minimum_compatible", strArray40, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray57 = settings45.getAsArray("", strArray55, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder20.put("", "state-", strArray40, strArray55);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder9.extendArray("archived.", strArray55);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder59.put("index.version.created", true);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder62.putNull("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder64.put("index.creation_date_string", (long) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder67.put("state-", (long) (byte) 100);
        java.util.List<java.lang.String> strList72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder73 = builder70.putArray("", strList72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test3718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3718");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        int int5 = builder4.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.version(100L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate((long) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.numberOfShards((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test3719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3719");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting25 = indexSettings21.getMAX_RESULT_WINDOW_SETTING();
        int int26 = indexSettings21.getMaxResultWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue27 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings21.globalCheckpointInterval;
        boolean boolean29 = indexSettings21.getdefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(intSetting25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue27);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test3720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3720");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting18 = null; // flaky: indexSettings16.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = null; // flaky: indexSettings16.scopedSettings;
        java.lang.String str20 = null; // flaky: indexSettings16.customDataPath();
        boolean boolean21 = false; // flaky: indexSettings16.getqueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertNotNull(intSetting18);
// flaky:         org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test3721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3721");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.auto_expand_replicas", (float) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.uuid", 0L);
        java.lang.String str16 = builder14.get("");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder17.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.isPrivateSetting("index.");
        boolean boolean26 = indexScopedSettings22.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        indexScopedSettings22.validate("index.shadow_replicas", settings28);
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings28);
        org.elasticsearch.index.translog.Translog.Durability durability43 = null;
        indexSettings42.setTranslogDurability(durability43);
        org.elasticsearch.common.unit.TimeValue timeValue45 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings42.setGCDeletes(timeValue45);
        org.elasticsearch.Version version47 = indexSettings42.version;
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder17.put("index.blocks.read", version47);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder9.put("index.creation_date", version47);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("_all", 0.0d);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("index.blocks.write", (int) (short) 1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings67 = indexScopedSettings57.dryRun(settings66);
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings67);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters71 = indexMetaData70.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters72 = indexMetaData70.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData70);
        org.elasticsearch.Version version74 = indexMetaData70.getCreationVersion();
        org.elasticsearch.Version version75 = settings67.getAsVersion("index.version.upgraded", version74);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder52.put("index.priority", version75);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder52.put("index.data_path", "_all");
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder52.put("5000099", "index.blocks.read_only");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertNotNull(version47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNull(discoveryNodeFilters71);
        org.junit.Assert.assertNull(discoveryNodeFilters72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(version74);
        org.junit.Assert.assertNotNull(version75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test3722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3722");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue28 = null;
        indexSettings21.flushThresholdSize = byteSizeValue28;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexSettings21.scopedSettings;
        java.lang.String str31 = indexScopedSettings30.nodeName();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        boolean boolean54 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean56 = indexScopedSettings33.isPrivateSetting("index.uuid");
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap59 = settings57.getGroups("index.uuid");
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray69 = settings57.getAsArray("", strArray67, (java.lang.Boolean) false);
        org.elasticsearch.Version version71 = null;
        org.elasticsearch.Version version72 = settings57.getAsVersion("index.number_of_shards", version71);
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings57);
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings75.getGroups("index.uuid");
        java.lang.String[] strArray85 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray87 = settings75.getAsArray("", strArray85, (java.lang.Boolean) false);
        java.lang.String[] strArray88 = settings57.getAsArray("hi!", strArray85);
        org.elasticsearch.common.settings.Settings settings89 = indexScopedSettings33.dryRun(settings57);
        indexScopedSettings30.validate("index.number_of_shards", settings89);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings91 = indexScopedSettings30.getDEFAULT_SCOPED_SETTINGS();
        boolean boolean93 = indexScopedSettings30.isPrivateSetting("");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNull(version72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(indexScopedSettings91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test3723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3723");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting28 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        boolean boolean29 = indexSettings21.TTLPurgeDisabled;
        boolean boolean30 = indexSettings21.getwarmerEnabled();
        int int31 = indexSettings21.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(durabilitySetting28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
    }

    @Test
    public void test3724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3724");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("_na_");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test3725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3725");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings30.applySettings(settings33);
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = settings37.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings39.getAsMap();
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings30.applySettings(settings39);
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings45 = settings43.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = settings45.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.isPrivateSetting("index.");
        boolean boolean53 = indexScopedSettings49.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.uuid");
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray67 = settings55.getAsArray("", strArray65, (java.lang.Boolean) false);
        indexScopedSettings49.validate("index.shadow_replicas", settings55);
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings55);
        boolean boolean71 = indexSettings69.matchesIndexName("");
        long long72 = indexSettings69.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue73 = indexSettings69.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue74 = settings45.getAsBytesSize("primary_terms", byteSizeValue73);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = settings39.getAsBytesSize("index.priority", byteSizeValue73);
        indexSettings21.flushThresholdSize = byteSizeValue75;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = indexSettings21.getIndexMetaData();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters78 = indexMetaData77.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData77);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings80 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean82 = indexScopedSettings80.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings83 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap85 = settings83.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings86 = indexScopedSettings80.applySettings(settings83);
        java.lang.String[] strArray92 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray94 = settings86.getAsArray("index.version.created", strArray92, (java.lang.Boolean) false);
        boolean boolean95 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings86);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder96 = builder79.settings(settings86);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 60000L + "'", long72 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue73);
        org.junit.Assert.assertNotNull(byteSizeValue74);
        org.junit.Assert.assertNotNull(byteSizeValue75);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNull(discoveryNodeFilters78);
        org.junit.Assert.assertNotNull(indexScopedSettings80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test3726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3726");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom28 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder4.putCustom("index.data_path", custom28);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = builder4.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [archived.]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test3727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3727");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings21.getsyncInterval();
        int int36 = indexSettings21.getMaxRescoreWindow();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig37 = indexSettings21.getMergeSchedulerConfig();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters39 = indexMetaData38.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters40 = indexMetaData38.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData38);
        org.elasticsearch.Version version42 = indexMetaData38.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean46 = indexScopedSettings44.isPrivateSetting("index.");
        boolean boolean48 = indexScopedSettings44.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray62 = settings50.getAsArray("", strArray60, (java.lang.Boolean) false);
        indexScopedSettings44.validate("index.shadow_replicas", settings50);
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings50);
        org.elasticsearch.index.translog.Translog.Durability durability65 = null;
        indexSettings64.setTranslogDurability(durability65);
        boolean boolean67 = indexSettings64.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting69 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer70 = null;
        indexScopedSettings68.addSettingsUpdateConsumer(settingsSetting69, settingsConsumer70);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings72 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting73 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer74 = null;
        indexScopedSettings72.addSettingsUpdateConsumer(settingsSetting73, settingsConsumer74);
        org.elasticsearch.common.settings.Settings settings76 = indexScopedSettings68.get(settingsSetting73);
        org.elasticsearch.common.settings.Settings settings77 = indexSettings64.getValue(settingsSetting73);
        java.lang.String str78 = indexSettings64.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting79 = indexSettings64.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = indexSettings64.indexMetaData;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff81 = indexMetaData38.diff(indexMetaData80);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData80);
        boolean boolean83 = indexSettings21.updateIndexMetaData(indexMetaData80);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap84 = indexMetaData80.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNull(discoveryNodeFilters39);
        org.junit.Assert.assertNull(discoveryNodeFilters40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertNotNull(settingsSetting69);
        org.junit.Assert.assertNotNull(indexScopedSettings72);
        org.junit.Assert.assertNotNull(settingsSetting73);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting79);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(indexMetaDataDiff81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap84);
    }

    @Test
    public void test3728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3728");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "index.number_of_shards", "hi!", "archived.", "index.", "index.version.created", "index.data_path", "hi!", "index.version.upgraded_string", "index.shared_filesystem.recover_on_any_node", "primary_terms", "index.shared_filesystem.recover_on_any_node", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder3.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList27);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        org.elasticsearch.Version version46 = null;
        org.elasticsearch.Version version47 = settings32.getAsVersion("index.number_of_shards", version46);
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings32);
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray62 = settings50.getAsArray("", strArray60, (java.lang.Boolean) false);
        java.lang.String[] strArray63 = settings32.getAsArray("hi!", strArray60);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder30.putArray("primary_terms", strArray63);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder30.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder30.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNull(version47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test3729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3729");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        int int26 = indexSettings21.getNumberOfShards();
        long long27 = indexSettings21.gcDeletesInMillis;
        boolean boolean28 = indexSettings21.isWarmerEnabled();
        boolean boolean29 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexSettings21.getScopedSettings();
        org.elasticsearch.common.logging.ESLogger eSLogger31 = indexSettings21.logger;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 60000L + "'", long27 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(eSLogger31);
    }

    @Test
    public void test3730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3730");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.excludeFilters();
        java.lang.Object obj2 = null;
        boolean boolean3 = indexMetaData0.equals(obj2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("active_allocations");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData0.readDiffFrom(streamInput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
    }

    @Test
    public void test3731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3731");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig25 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = indexSettings21.indexMetaData;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = indexMetaData27.getState();
        boolean boolean30 = indexMetaData27.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData27.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData27.mappingOrDefault("0");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicyConfig25);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNull(mappingMetaData33);
    }

    @Test
    public void test3732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3732");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder3.loadFromSource("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int21 = indexMetaData20.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap22 = indexMetaData20.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData20.requireFilters();
        org.elasticsearch.Version version24 = indexMetaData20.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder3.put("hi!", version24);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.version.minimum_compatible", 0.0f);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray42 = settings30.getAsArray("", strArray40, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder28.extendArray("index.shared_filesystem", strArray42);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder47 = builder43.put("index.priority", (long) '#', byteSizeUnit46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test3733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3733");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean25 = indexSettings21.getqueryStringAnalyzeWildcard();
        boolean boolean26 = indexSettings21.defaultAllowUnmappedFields;
        java.util.function.Predicate<java.lang.String> strPredicate27 = indexSettings21.getindexNameMatcher();
        indexSettings21.maxRescoreWindow = (byte) 0;
        boolean boolean30 = indexSettings21.getwarmerEnabled();
        boolean boolean31 = indexSettings21.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting32 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        int int33 = indexSettings21.getNumberOfShards();
        boolean boolean34 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.index.translog.Translog.Durability durability35 = indexSettings21.getdurability();
        java.lang.String str36 = indexSettings21.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strPredicate27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(booleanSetting32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + durability35 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability35.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "_all" + "'", str36, "_all");
    }

    @Test
    public void test3734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3734");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting25 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting26 = indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        long long28 = indexSettings21.gcDeletesInMillis;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = indexSettings21.indexMetaData;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData29.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeValueSetting25);
        org.junit.Assert.assertNotNull(intSetting26);
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 60000L + "'", long28 == 60000L);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
    }

    @Test
    public void test3735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3735");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray4 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList5);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.version.created", (double) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder10.put("active_allocations", true);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder20 = builder16.put("hi!", (long) 0, byteSizeUnit19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test3736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3736");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.logging.ESLogger eSLogger28 = indexSettings21.getlogger();
        org.elasticsearch.common.settings.Settings settings29 = indexSettings21.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        boolean boolean36 = indexScopedSettings32.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        indexScopedSettings32.validate("index.shadow_replicas", settings38);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings38);
        org.elasticsearch.common.unit.TimeValue timeValue53 = indexSettings52.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue54 = settings29.getAsTime("index.data_path", timeValue53);
        java.lang.Boolean boolean57 = settings29.getAsBoolean("index.version.minimum_compatible", (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertNotNull(eSLogger28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(timeValue53);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertEquals("'" + boolean57 + "' != '" + true + "'", boolean57, true);
    }

    @Test
    public void test3737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3737");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.Version version26 = indexSettings21.version;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean28 = indexSettings21.getdefaultAllowUnmappedFields();
        java.util.function.Predicate<java.lang.String> strPredicate29 = indexSettings21.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings30 = indexSettings21.getSettings();
        org.elasticsearch.index.translog.Translog.Durability durability31 = indexSettings21.getdurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNull(durability31);
    }

    @Test
    public void test3738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3738");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings21.getsyncInterval();
        int int36 = indexSettings21.getMaxRescoreWindow();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig37 = indexSettings21.getMergeSchedulerConfig();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters39 = indexMetaData38.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters40 = indexMetaData38.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData38);
        org.elasticsearch.Version version42 = indexMetaData38.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean46 = indexScopedSettings44.isPrivateSetting("index.");
        boolean boolean48 = indexScopedSettings44.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray62 = settings50.getAsArray("", strArray60, (java.lang.Boolean) false);
        indexScopedSettings44.validate("index.shadow_replicas", settings50);
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings50);
        org.elasticsearch.index.translog.Translog.Durability durability65 = null;
        indexSettings64.setTranslogDurability(durability65);
        boolean boolean67 = indexSettings64.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting69 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer70 = null;
        indexScopedSettings68.addSettingsUpdateConsumer(settingsSetting69, settingsConsumer70);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings72 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting73 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer74 = null;
        indexScopedSettings72.addSettingsUpdateConsumer(settingsSetting73, settingsConsumer74);
        org.elasticsearch.common.settings.Settings settings76 = indexScopedSettings68.get(settingsSetting73);
        org.elasticsearch.common.settings.Settings settings77 = indexSettings64.getValue(settingsSetting73);
        java.lang.String str78 = indexSettings64.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting79 = indexSettings64.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = indexSettings64.indexMetaData;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff81 = indexMetaData38.diff(indexMetaData80);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData80);
        boolean boolean83 = indexSettings21.updateIndexMetaData(indexMetaData80);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder84 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData80);
        long long85 = indexMetaData80.getVersion();
        boolean boolean87 = indexMetaData80.isSameUUID("index.number_of_replicas");
        long long88 = indexMetaData80.getVersion();
        int int89 = indexMetaData80.getNumberOfShards();
        int int90 = indexMetaData80.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNull(discoveryNodeFilters39);
        org.junit.Assert.assertNull(discoveryNodeFilters40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertNotNull(settingsSetting69);
        org.junit.Assert.assertNotNull(indexScopedSettings72);
        org.junit.Assert.assertNotNull(settingsSetting73);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting79);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(indexMetaDataDiff81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1L + "'", long85 == 1L);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1L + "'", long88 == 1L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test3739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3739");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = settings9.getAsMap();
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property12 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings16.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings13.applySettings(settings16);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray27 = settings19.getAsArray("index.version.created", strArray25, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.uuid", 0L);
        java.lang.String str33 = builder31.get("");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder31.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = settings37.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings39.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate41 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction42 = null;
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder31.putProperties(strMap40, strPredicate41, strFunction42);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder31.replacePropertyPlaceholders();
        java.lang.String[] strArray58 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.", "index.blocks.read", "index.auto_expand_replicas", "index.blocks.read_only", "index.blocks.read", "state-", "index.uuid", "index.version.upgraded_string", "index.auto_expand_replicas", "archived.", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder44.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("index.uuid", 0L);
        java.lang.String str67 = builder65.get("");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder68.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder68.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder68.replacePropertyPlaceholders();
        boolean boolean75 = indexScopedSettings0.updateSettings(settings19, builder44, builder68, "_na_");
        boolean boolean76 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings19);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings19, streamOutput77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + property12 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property12.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test3740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3740");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = indexSettings21.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue31 = indexSettings21.getsyncInterval();
        java.lang.String str32 = indexSettings21.customDataPath();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting33 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = indexSettings21.indexMetaData;
        org.elasticsearch.Version version35 = indexMetaData34.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(booleanSetting30);
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(timeValueSetting33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(version35);
    }

    @Test
    public void test3741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3741");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings8 = settings6.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = settings8.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction11 = null;
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder3.putProperties(strMap9, strPredicate10, strFunction11);
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.uuid", 0L);
        java.lang.String str19 = builder17.get("");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder20.putNull("hi!");
        java.lang.String str24 = builder22.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder22.put("_all", (float) 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.uuid", (double) 100.0f);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        boolean boolean36 = indexScopedSettings32.isPrivateSetting("");
        java.lang.String str37 = indexScopedSettings32.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int40 = builder39.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder39.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder42.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings47 = settings45.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings49.getGroups("index.uuid");
        java.lang.String[] strArray59 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray61 = settings49.getAsArray("", strArray59, (java.lang.Boolean) false);
        java.lang.String[] strArray63 = settings45.getAsArray("index.version.minimum_compatible", strArray59, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder42.settings(settings45);
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings65.getGroups("index.uuid");
        java.lang.String[] strArray75 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray77 = settings65.getAsArray("", strArray75, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder42.settings(settings65);
        java.lang.String str80 = settings65.get("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings65);
        org.elasticsearch.common.unit.SizeValue sizeValue83 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue84 = settings81.getAsSize("", sizeValue83);
        java.lang.String[] strArray86 = settings81.getAsArray("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder27.extendArray("index.creation_date_string", strArray86);
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder12.putArray("primary_terms", strArray86);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNull(sizeValue84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test3742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3742");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.Version version22 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData0.activeAllocationIds(35);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(version22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(strSet25);
    }

    @Test
    public void test3743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3743");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
    }

    @Test
    public void test3744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3744");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder3.loadFromSource("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int21 = indexMetaData20.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap22 = indexMetaData20.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData20.requireFilters();
        org.elasticsearch.Version version24 = indexMetaData20.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder3.put("hi!", version24);
        java.lang.String str27 = builder25.remove("1");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test3745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3745");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting5 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer6 = null;
        indexScopedSettings4.addSettingsUpdateConsumer(settingsSetting5, settingsConsumer6);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.get(settingsSetting5);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.dryRun(settings9);
        boolean boolean11 = settings10.isEmpty();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settingsSetting5);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test3746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3746");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting27 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertNotNull(timeValueSetting27);
    }

    @Test
    public void test3747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3747");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.Version version26 = indexSettings21.version;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getSettings();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue28 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig29 = indexSettings21.mergePolicyConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(byteSizeValue28);
        org.junit.Assert.assertNotNull(mergePolicyConfig29);
    }

    @Test
    public void test3748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3748");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = indexScopedSettings1.applySettings(settings4);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings8.applySettings(settings11);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = settings15.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = settings17.getAsMap();
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings8.applySettings(settings17);
        org.elasticsearch.common.settings.Setting.Property property20 = indexScopedSettings8.getScope();
        java.util.function.Predicate<java.lang.String> strPredicate21 = indexScopedSettings8.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.isPrivateSetting("index.");
        boolean boolean26 = indexScopedSettings22.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        indexScopedSettings22.validate("index.shadow_replicas", settings28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings42.applySettings(settings45);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings42.applySettings(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = indexScopedSettings22.copy(settings50, indexMetaData51);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean55 = indexScopedSettings53.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings56.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings53.applySettings(settings56);
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings53.applySettings(settings60);
        indexScopedSettings22.validate(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate21, indexScopedSettings22);
        boolean boolean64 = false; // flaky: indexSettings63.getwarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = null; // flaky: indexSettings63.indexMetaData;
        org.apache.lucene.util.Version version66 = null; // flaky: indexMetaData65.getMinimumCompatibleVersion();
        long long67 = 0L; // flaky: indexMetaData65.getVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = indexMetaData65.readFrom(streamInput68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + property20 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property20.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNull(version66);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
    }

    @Test
    public void test3749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3749");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        int int18 = 0; // flaky: indexSettings16.getMaxRescoreWindow();
        boolean boolean19 = false; // flaky: indexSettings16.getqueryStringAnalyzeWildcard();
        boolean boolean20 = false; // flaky: indexSettings16.isTTLPurgeDisabled();
        org.elasticsearch.common.unit.TimeValue timeValue21 = null; // flaky: indexSettings16.getRefreshInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = null; // flaky: indexSettings16.getQUERY_STRING_ANALYZE_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertNotNull(timeValue21);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting22);
    }

    @Test
    public void test3750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3750");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.uuid", 0L);
        java.lang.String str18 = builder16.get("");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.uuid", 0L);
        java.lang.String str29 = builder27.get("");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.shared_filesystem", (int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings41 = settings39.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        java.lang.String[] strArray57 = settings39.getAsArray("index.version.minimum_compatible", strArray53, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.uuid");
        java.lang.String[] strArray68 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray70 = settings58.getAsArray("", strArray68, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder33.put("", "state-", strArray53, strArray68);
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder22.extendArray("archived.", strArray68);
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder3.extendArray("primary_terms", strArray68);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder73.put("index.version.created", (int) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder76.put("index.creation_date", (float) (byte) 100);
        org.elasticsearch.common.settings.Settings settings80 = builder76.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(settings80);
    }

    @Test
    public void test3751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3751");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder6.put("5000099", 10000L);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.putNull("0");
        java.util.concurrent.TimeUnit timeUnit16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder17 = builder11.put("", (long) (short) 0, timeUnit16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3752");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
// flaky:         indexSettings16.setMaxResultWindow(100);
        org.elasticsearch.common.unit.TimeValue timeValue22 = null; // flaky: indexSettings16.refreshInterval;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null; // flaky: indexSettings16.indexNameMatcher;
        org.elasticsearch.common.logging.ESLogger eSLogger24 = null; // flaky: indexSettings16.getlogger();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig25 = null; // flaky: indexSettings16.mergeSchedulerConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNull(strPredicate23);
// flaky:         org.junit.Assert.assertNotNull(eSLogger24);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig25);
    }

    @Test
    public void test3753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3753");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher25 = indexSettings21.parseFieldMatcher;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int27 = indexMetaData26.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap28 = indexMetaData26.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters29 = indexMetaData26.requireFilters();
        org.elasticsearch.Version version30 = indexMetaData26.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        boolean boolean36 = indexScopedSettings32.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        indexScopedSettings32.validate("index.shadow_replicas", settings38);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings38);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData31.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap54 = indexMetaData31.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters55 = indexMetaData31.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.isPrivateSetting("index.");
        boolean boolean61 = indexScopedSettings57.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings63.getGroups("index.uuid");
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray75 = settings63.getAsArray("", strArray73, (java.lang.Boolean) false);
        indexScopedSettings57.validate("index.shadow_replicas", settings63);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings63);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting78 = indexSettings77.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData79 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters80 = indexMetaData79.includeFilters();
        indexSettings77.indexMetaData = indexMetaData79;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData79);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters83 = indexMetaData79.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff84 = indexMetaData31.diff(indexMetaData79);
        boolean boolean86 = indexMetaData79.isSameUUID("index.version.minimum_compatible");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff87 = indexMetaData26.diff(indexMetaData79);
        boolean boolean88 = indexSettings21.updateIndexMetaData(indexMetaData26);
        org.elasticsearch.common.logging.ESLogger eSLogger89 = indexSettings21.getlogger();
        java.lang.String str90 = indexSettings21.getUUID();
        indexSettings21.maxRescoreWindow = 0;
        org.elasticsearch.common.unit.TimeValue timeValue93 = indexSettings21.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertNotNull(parseFieldMatcher25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNull(discoveryNodeFilters29);
        org.junit.Assert.assertNotNull(version30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNotNull(strImmutableOpenMap54);
        org.junit.Assert.assertNull(discoveryNodeFilters55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(booleanSetting78);
        org.junit.Assert.assertNotNull(indexMetaData79);
        org.junit.Assert.assertNull(discoveryNodeFilters80);
        org.junit.Assert.assertNull(discoveryNodeFilters83);
        org.junit.Assert.assertNotNull(indexMetaDataDiff84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(eSLogger89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "_na_" + "'", str90, "_na_");
        org.junit.Assert.assertNotNull(timeValue93);
    }

    @Test
    public void test3754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3754");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.settings.Settings settings24 = indexSettings21.getSettings();
        java.lang.String str25 = indexSettings21.getDefaultField();
        boolean boolean26 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput28 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData27.writeTo(streamOutput28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "_all" + "'", str25, "_all");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(indexMetaData27);
    }

    @Test
    public void test3755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3755");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings21.durability = durability27;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        boolean boolean34 = indexScopedSettings30.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.uuid");
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray48 = settings36.getAsArray("", strArray46, (java.lang.Boolean) false);
        indexScopedSettings30.validate("index.shadow_replicas", settings36);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings36);
        org.elasticsearch.index.translog.Translog.Durability durability51 = null;
        indexSettings50.setTranslogDurability(durability51);
        org.elasticsearch.common.unit.TimeValue timeValue53 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings50.setGCDeletes(timeValue53);
        indexSettings21.setRefreshInterval(timeValue53);
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexSettings21.globalCheckpointInterval;
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings21.getTranslogSyncInterval();
        indexSettings21.setwarmerEnabled(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(timeValue53);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertNotNull(timeValue57);
    }

    @Test
    public void test3756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3756");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "index.number_of_shards", "hi!", "archived.", "index.", "index.version.created", "index.data_path", "hi!", "index.version.upgraded_string", "index.shared_filesystem.recover_on_any_node", "primary_terms", "index.shared_filesystem.recover_on_any_node", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder3.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList27);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder29.loadFromSource("index.blocks.read");
        java.nio.file.Path path32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder33 = builder31.loadFromPath(path32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test3757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3757");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = settings9.getAsMap();
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property12 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings16.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings13.applySettings(settings16);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray27 = settings19.getAsArray("index.version.created", strArray25, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.uuid", 0L);
        java.lang.String str33 = builder31.get("");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder31.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = settings37.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings39.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate41 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction42 = null;
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder31.putProperties(strMap40, strPredicate41, strFunction42);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder31.replacePropertyPlaceholders();
        java.lang.String[] strArray58 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.", "index.blocks.read", "index.auto_expand_replicas", "index.blocks.read_only", "index.blocks.read", "state-", "index.uuid", "index.version.upgraded_string", "index.auto_expand_replicas", "archived.", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder44.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("index.uuid", 0L);
        java.lang.String str67 = builder65.get("");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder68.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder68.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder68.replacePropertyPlaceholders();
        boolean boolean75 = indexScopedSettings0.updateSettings(settings19, builder44, builder68, "_na_");
        boolean boolean76 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings19);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue79 = settings19.getAsRatio("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", "index.version.created");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.version.created]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + property12 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property12.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test3758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3758");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.logging.ESLogger eSLogger30 = indexSettings21.logger;
        boolean boolean31 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig32 = indexSettings21.getMergeSchedulerConfig();
        boolean boolean33 = indexSettings21.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(eSLogger30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test3759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3759");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig35 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting36 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting37 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        boolean boolean38 = indexSettings21.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(mergePolicyConfig35);
        org.junit.Assert.assertNotNull(booleanSetting36);
        org.junit.Assert.assertNotNull(booleanSetting37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test3760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3760");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        java.io.InputStream inputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.loadFromStream("index.", inputStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test3761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3761");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings21.syncInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(timeValue26);
    }

    @Test
    public void test3762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3762");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.applySettings(settings7);
        java.util.function.Predicate<java.lang.String> strPredicate9 = indexScopedSettings0.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = indexScopedSettings0.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.isPrivateSetting("index.");
        boolean boolean16 = indexScopedSettings12.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray30 = settings18.getAsArray("", strArray28, (java.lang.Boolean) false);
        indexScopedSettings12.validate("index.shadow_replicas", settings18);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings18);
        org.elasticsearch.index.translog.Translog.Durability durability33 = null;
        indexSettings32.setTranslogDurability(durability33);
        org.elasticsearch.common.unit.TimeValue timeValue35 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings32.setGCDeletes(timeValue35);
        org.elasticsearch.common.settings.Settings settings37 = indexSettings32.settings;
        org.elasticsearch.common.settings.Settings settings38 = indexSettings32.getNodeSettings();
        indexScopedSettings0.validate(settings38);
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.uuid", 0L);
        java.lang.String str45 = builder43.get("");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("index.shared_filesystem", (int) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("index.version.upgraded_string", "index.uuid");
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.uuid]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test3763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3763");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue73 = indexSettings21.syncInterval;
        org.elasticsearch.Version version74 = indexSettings21.getversion();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting75 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        boolean boolean76 = indexSettings21.defaultAllowUnmappedFields;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting77 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        indexSettings21.setMaxRescoreWindow((int) (short) 100);
        indexSettings21.warmerEnabled = true;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertNotNull(timeValue73);
        org.junit.Assert.assertNotNull(version74);
        org.junit.Assert.assertNotNull(timeValueSetting75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(timeValueSetting77);
    }

    @Test
    public void test3764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3764");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getTranslogDurability();
        boolean boolean28 = indexSettings21.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting29 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        boolean boolean30 = indexSettings21.isTTLPurgeDisabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = indexSettings21.indexMetaData;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strSetting29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(indexMetaData31);
    }

    @Test
    public void test3765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3765");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        boolean boolean25 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig26 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.durability;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher28 = indexSettings21.getParseFieldMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = indexSettings21.getIndexMetaData();
        org.elasticsearch.Version version30 = indexSettings21.version;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig26);
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(version30);
    }

    @Test
    public void test3766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3766");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings15 = settings11.getAsSettings("");
        java.lang.Boolean boolean18 = settings15.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue20 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue21 = settings15.getAsBytesSize("index.", byteSizeValue20);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = null;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings27 = settings23.getAsSettings("");
        java.lang.Boolean boolean30 = settings27.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue32 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue33 = settings27.getAsBytesSize("index.", byteSizeValue32);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params35 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings27.toXContent(xContentBuilder34, params35);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = settings15.toXContent(xContentBuilder22, params35);
        java.lang.Class<?> wildcardClass38 = settings15.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder9.put("index.version.upgraded_string", (java.lang.Class) wildcardClass38);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder9.put("index.shared_filesystem.recover_on_any_node", (long) 'a');
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder9.put("0", (long) 5000099);
        java.lang.String str47 = builder9.remove("state-");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertEquals("'" + boolean18 + "' != '" + true + "'", boolean18, true);
        org.junit.Assert.assertNull(byteSizeValue21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + true + "'", boolean30, true);
        org.junit.Assert.assertNull(byteSizeValue33);
        org.junit.Assert.assertNotNull(params35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNull(xContentBuilder37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test3767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3767");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting21 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer22 = null;
        indexScopedSettings20.addSettingsUpdateConsumer(settingsSetting21, settingsConsumer22);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting25 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer26 = null;
        indexScopedSettings24.addSettingsUpdateConsumer(settingsSetting25, settingsConsumer26);
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.get(settingsSetting25);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer29 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting25, settingsConsumer29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = indexScopedSettings0.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings35 = settings33.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings0.diff(settings35, settings36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertNotNull(settingsSetting21);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settingsSetting25);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
    }

    @Test
    public void test3768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3768");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig25 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = indexSettings21.indexMetaData;
        org.apache.lucene.index.MergePolicy mergePolicy28 = indexSettings21.getMergePolicy();
        boolean boolean29 = indexSettings21.queryStringAllowLeadingWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicyConfig25);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(mergePolicy28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test3769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3769");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting29 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData30.excludeFilters();
        java.lang.Object obj32 = null;
        boolean boolean33 = indexMetaData30.equals(obj32);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = indexMetaData30.mappingOrDefault("hi!");
        int int36 = indexMetaData30.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData30.getCustoms();
        indexSettings21.indexMetaData = indexMetaData30;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters39 = indexMetaData30.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters40 = indexMetaData30.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(booleanSetting29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNull(discoveryNodeFilters39);
        org.junit.Assert.assertNull(discoveryNodeFilters40);
    }

    @Test
    public void test3770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3770");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder3.loadFromSource("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int21 = indexMetaData20.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap22 = indexMetaData20.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData20.requireFilters();
        org.elasticsearch.Version version24 = indexMetaData20.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder3.put("hi!", version24);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.uuid", 0L);
        java.lang.String str31 = builder29.get("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = settings32.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = settings34.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction37 = null;
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder29.putProperties(strMap35, strPredicate36, strFunction37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder25.put(strMap35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.isPrivateSetting("index.");
        boolean boolean46 = indexScopedSettings42.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings48.getGroups("index.uuid");
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray60 = settings48.getAsArray("", strArray58, (java.lang.Boolean) false);
        indexScopedSettings42.validate("index.shadow_replicas", settings48);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings48);
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings62.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability64 = indexSettings62.getTranslogDurability();
        boolean boolean65 = indexSettings62.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting66 = indexSettings62.getALLOW_UNMAPPED();
        org.elasticsearch.Version version67 = indexSettings62.version;
        long long68 = indexSettings62.gcDeletesInMillis;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = indexSettings62.indexMetaData;
        org.elasticsearch.Version version70 = indexSettings62.version;
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder39.put("5000099", version70);
        java.lang.String str73 = builder71.remove("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertTrue("'" + durability64 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability64.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(booleanSetting66);
        org.junit.Assert.assertNotNull(version67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 60000L + "'", long68 == 60000L);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(version70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test3771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3771");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting28 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        indexSettings21.setMaxRescoreWindow((int) ' ');
        boolean boolean31 = indexSettings21.isIndexUsingShadowReplicas();
        boolean boolean32 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.Version version33 = indexSettings21.getIndexVersionCreated();
        boolean boolean34 = indexSettings21.warmerEnabled;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting35 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        boolean boolean36 = indexSettings21.isShadowReplicaIndex();
        indexSettings21.gcDeletesInMillis = 60000L;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting39 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean42 = indexScopedSettings40.isPrivateSetting("index.");
        boolean boolean44 = indexScopedSettings40.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings46.getGroups("index.uuid");
        java.lang.String[] strArray56 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray58 = settings46.getAsArray("", strArray56, (java.lang.Boolean) false);
        indexScopedSettings40.validate("index.shadow_replicas", settings46);
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet60 = indexScopedSettings40.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean67 = indexScopedSettings65.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap70 = settings68.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings65.applySettings(settings68);
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings74 = settings72.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap75 = settings74.getAsMap();
        org.elasticsearch.common.settings.Settings settings76 = indexScopedSettings65.applySettings(settings74);
        org.elasticsearch.common.settings.Settings settings77 = indexScopedSettings61.dryRun(settings74);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap80 = settings77.getGroups("index.shadow_replicas", true);
        org.elasticsearch.common.settings.Settings settings82 = settings77.getByPrefix("_na_");
        indexScopedSettings40.validate(settings82);
        java.lang.String[] strArray85 = settings82.getAsArray("index.creation_date_string");
        java.util.Map<java.lang.String, java.lang.Object> strMap86 = settings82.getAsStructuredMap();
        indexSettings21.settings = settings82;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting88 = indexSettings21.getALLOW_UNMAPPED();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(durabilitySetting28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(booleanSetting35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(timeValueSetting39);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(wildcardSettingSet60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strMap86);
        org.junit.Assert.assertNotNull(booleanSetting88);
    }

    @Test
    public void test3772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3772");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        boolean boolean24 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getDEFAULT_GC_DELETES();
        java.util.function.Predicate<java.lang.String> strPredicate26 = indexSettings21.indexNameMatcher;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting27 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher28 = indexSettings21.parseFieldMatcher;
        java.lang.String str29 = indexSettings21.defaultField;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(timeValueSetting27);
        org.junit.Assert.assertNotNull(parseFieldMatcher28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "_all" + "'", str29, "_all");
    }

    @Test
    public void test3773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3773");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig35 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings37 = indexSettings21.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(mergePolicyConfig35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(settings37);
    }

    @Test
    public void test3774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3774");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        int int3 = builder1.numberOfShards();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test3775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3775");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "index.number_of_shards", "hi!", "archived.", "index.", "index.version.created", "index.data_path", "hi!", "index.version.upgraded_string", "index.shared_filesystem.recover_on_any_node", "primary_terms", "index.shared_filesystem.recover_on_any_node", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder3.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList27);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        org.elasticsearch.Version version46 = null;
        org.elasticsearch.Version version47 = settings32.getAsVersion("index.number_of_shards", version46);
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings32);
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray62 = settings50.getAsArray("", strArray60, (java.lang.Boolean) false);
        java.lang.String[] strArray63 = settings32.getAsArray("hi!", strArray60);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder30.putArray("primary_terms", strArray63);
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder64.put("index.version.created", false);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder64.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder69.putNull("_all");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNull(version47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test3776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3776");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int29 = indexMetaData28.getNumberOfShards();
        indexSettings21.indexMetaData = indexMetaData28;
        boolean boolean31 = indexSettings21.getqueryStringAllowLeadingWildcard();
        boolean boolean32 = indexSettings21.isQueryStringAllowLeadingWildcard();
        boolean boolean34 = indexSettings21.matchesIndexName("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings39 = settings35.getAsSettings("");
        java.lang.Boolean boolean42 = settings39.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue44 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue45 = settings39.getAsBytesSize("index.", byteSizeValue44);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params47 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder48 = settings39.toXContent(xContentBuilder46, params47);
        boolean boolean49 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings39);
        indexSettings21.settings = settings39;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + true + "'", boolean42, true);
        org.junit.Assert.assertNull(byteSizeValue45);
        org.junit.Assert.assertNotNull(params47);
        org.junit.Assert.assertNull(xContentBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test3777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3777");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        org.elasticsearch.index.translog.Translog.Durability durability56 = indexSettings21.durability;
        indexSettings21.setTTLPurgeDisabled(false);
        boolean boolean59 = indexSettings21.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + durability56 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability56.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test3778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3778");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings21.durability = durability27;
        boolean boolean29 = indexSettings21.isWarmerEnabled();
        java.lang.String str30 = indexSettings21.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "_na_" + "'", str30, "_na_");
    }

    @Test
    public void test3779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3779");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.logging.ESLogger eSLogger28 = indexSettings21.getlogger();
        java.util.function.Predicate<java.lang.String> strPredicate29 = indexSettings21.getindexNameMatcher();
        int int30 = indexSettings21.getMaxResultWindow();
        indexSettings21.setTTLPurgeDisabled(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertNotNull(eSLogger28);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
    }

    @Test
    public void test3780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3780");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher18 = null; // flaky: indexSettings16.getParseFieldMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue19 = null; // flaky: indexSettings16.getFlushThresholdSize();
        org.elasticsearch.common.settings.Settings settings20 = null; // flaky: indexSettings16.nodeSettings;
        org.elasticsearch.Version version21 = null; // flaky: indexSettings16.getIndexVersionCreated();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = null; // flaky: indexSettings16.getScopedSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher18);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue19);
// flaky:         org.junit.Assert.assertNotNull(settings20);
// flaky:         org.junit.Assert.assertNotNull(version21);
// flaky:         org.junit.Assert.assertNotNull(indexScopedSettings22);
    }

    @Test
    public void test3781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3781");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        int int23 = indexSettings21.getMaxResultWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.isPrivateSetting("index.");
        boolean boolean29 = indexScopedSettings25.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray43 = settings31.getAsArray("", strArray41, (java.lang.Boolean) false);
        indexScopedSettings25.validate("index.shadow_replicas", settings31);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings31);
        org.elasticsearch.index.translog.Translog.Durability durability46 = null;
        indexSettings45.setTranslogDurability(durability46);
        boolean boolean48 = indexSettings45.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig49 = indexSettings45.getmergePolicyConfig();
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings45.getsyncInterval();
        indexSettings21.setRefreshInterval(timeValue50);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting52 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting53 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        java.util.function.Predicate<java.lang.String> strPredicate54 = indexSettings21.getindexNameMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig49);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(booleanSetting52);
        org.junit.Assert.assertNotNull(timeValueSetting53);
        org.junit.Assert.assertNotNull(strPredicate54);
    }

    @Test
    public void test3782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3782");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        java.lang.String str26 = indexSettings21.getNodeName();
        java.lang.String str27 = indexSettings21.customDataPath();
        org.elasticsearch.Version version28 = indexSettings21.getversion();
        boolean boolean29 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting30 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue31 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean32 = indexSettings21.getdefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(version28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(durabilitySetting30);
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test3783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3783");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.uuid", 0L);
        java.lang.String str16 = builder14.get("");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem", (int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = settings26.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray42 = settings30.getAsArray("", strArray40, (java.lang.Boolean) false);
        java.lang.String[] strArray44 = settings26.getAsArray("index.version.minimum_compatible", strArray40, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray57 = settings45.getAsArray("", strArray55, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder20.put("", "state-", strArray40, strArray55);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder9.extendArray("archived.", strArray55);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder59.put("index.version.created", true);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder59.put("index.data_path", 10000L);
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder65.putNull("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder65.put("index.uuid", (long) 35);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test3784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3784");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) (byte) -1);
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.putCustom("index.number_of_replicas", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        byte byte10 = state9.id();
        byte byte11 = state9.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder8.state(state9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int15 = builder14.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.index("archived.");
        int int18 = builder17.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int21 = builder20.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = builder20.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder20.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.index("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        byte byte29 = state28.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder25.state(state28);
        byte byte31 = state28.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder17.state(state28);
        byte byte33 = state28.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder8.state(state28);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder8.creationDate((long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 1 + "'", byte10 == (byte) 1);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 1 + "'", byte11 == (byte) 1);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte29 + "' != '" + (byte) 1 + "'", byte29 == (byte) 1);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + byte31 + "' != '" + (byte) 1 + "'", byte31 == (byte) 1);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + byte33 + "' != '" + (byte) 1 + "'", byte33 == (byte) 1);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test3785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3785");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        indexSettings21.maxResultWindow = (byte) 100;
        int int26 = indexSettings21.maxRescoreWindow;
        boolean boolean27 = indexSettings21.isShadowReplicaIndex();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig28 = indexSettings21.getMergeSchedulerConfig();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings21.globalCheckpointInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig28);
        org.junit.Assert.assertNotNull(timeValue29);
    }

    @Test
    public void test3786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3786");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        boolean boolean23 = indexSettings21.isShadowReplicaIndex;
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.syncInterval;
        indexSettings21.TTLPurgeDisabled = false;
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy27);
    }

    @Test
    public void test3787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3787");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability23 = indexSettings21.getTranslogDurability();
        boolean boolean24 = indexSettings21.isQueryStringAllowLeadingWildcard();
        long long25 = indexSettings21.gcDeletesInMillis;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        org.elasticsearch.index.translog.Translog.Durability durability48 = null;
        indexSettings47.setTranslogDurability(durability48);
        boolean boolean50 = indexSettings47.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting52 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer53 = null;
        indexScopedSettings51.addSettingsUpdateConsumer(settingsSetting52, settingsConsumer53);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting56 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer57 = null;
        indexScopedSettings55.addSettingsUpdateConsumer(settingsSetting56, settingsConsumer57);
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings51.get(settingsSetting56);
        org.elasticsearch.common.settings.Settings settings60 = indexSettings47.getValue(settingsSetting56);
        java.lang.String str61 = indexSettings47.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting62 = indexSettings47.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = indexSettings47.indexMetaData;
        indexSettings21.indexMetaData = indexMetaData63;
        org.elasticsearch.common.settings.Settings settings65 = indexMetaData63.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 60000L + "'", long25 == 60000L);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertNotNull(settingsSetting52);
        org.junit.Assert.assertNotNull(indexScopedSettings55);
        org.junit.Assert.assertNotNull(settingsSetting56);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting62);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNotNull(settings65);
    }

    @Test
    public void test3788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3788");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        indexSettings21.gcDeletesInMillis = (byte) 100;
        indexSettings21.TTLPurgeDisabled = true;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting30 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        indexSettings21.setMaxRescoreWindow(0);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting33 = indexSettings21.getALLOW_UNMAPPED();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(timeValueSetting30);
        org.junit.Assert.assertNotNull(booleanSetting33);
    }

    @Test
    public void test3789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3789");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder4.settings(settings27);
        java.lang.String str42 = settings27.get("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.isPrivateSetting("index.");
        boolean boolean47 = indexScopedSettings43.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings49.getGroups("index.uuid");
        java.lang.String[] strArray59 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray61 = settings49.getAsArray("", strArray59, (java.lang.Boolean) false);
        indexScopedSettings43.validate("index.shadow_replicas", settings49);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting64 = indexScopedSettings43.get("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int66 = indexMetaData65.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = new org.elasticsearch.common.settings.IndexScopedSettings(settings27, indexScopedSettings43, indexMetaData65);
        boolean boolean69 = indexMetaData65.isSameUUID("index.version.created_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap70 = indexMetaData65.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap71 = indexMetaData65.getMappings();
        org.apache.lucene.util.Version version72 = indexMetaData65.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap73 = indexMetaData65.getActiveAllocationIds();
        java.lang.String str74 = indexMetaData65.getIndexUUID();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(wildcardSetting64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertNull(version72);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "_na_" + "'", str74, "_na_");
    }

    @Test
    public void test3790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3790");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(10L);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        boolean boolean12 = indexScopedSettings8.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings14.getGroups("index.uuid");
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray26 = settings14.getAsArray("", strArray24, (java.lang.Boolean) false);
        indexScopedSettings8.validate("index.shadow_replicas", settings14);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings14);
        org.elasticsearch.index.translog.Translog.Durability durability29 = null;
        indexSettings28.setTranslogDurability(durability29);
        boolean boolean31 = indexSettings28.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting37 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer38 = null;
        indexScopedSettings36.addSettingsUpdateConsumer(settingsSetting37, settingsConsumer38);
        org.elasticsearch.common.settings.Settings settings40 = indexScopedSettings32.get(settingsSetting37);
        org.elasticsearch.common.settings.Settings settings41 = indexSettings28.getValue(settingsSetting37);
        org.elasticsearch.common.unit.TimeValue timeValue42 = indexSettings28.getsyncInterval();
        int int43 = indexSettings28.getMaxRescoreWindow();
        int int44 = indexSettings28.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig45 = indexSettings28.getmergePolicyConfig();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting46 = indexSettings28.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = indexSettings28.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData49 = indexMetaData47.mappingOrDefault("index.auto_expand_replicas");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters50 = indexMetaData47.requireFilters();
        org.elasticsearch.common.settings.Settings settings51 = indexMetaData47.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder4.settings(settings51);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertNotNull(settingsSetting37);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(timeValue42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10000 + "'", int43 == 10000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig45);
        org.junit.Assert.assertNotNull(booleanSetting46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNull(mappingMetaData49);
        org.junit.Assert.assertNull(discoveryNodeFilters50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test3791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3791");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting18 = indexScopedSettings12.get("index.blocks.read");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(wildcardSetting18);
    }

    @Test
    public void test3792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3792");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.removeAlias("state-");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.putMapping("index.", "_all");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test3793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3793");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        boolean boolean18 = false; // flaky: indexSettings16.queryStringAllowLeadingWildcard;
        java.lang.String str19 = null; // flaky: indexSettings16.customDataPath();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting20 = null; // flaky: indexSettings16.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str19);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting20);
    }

    @Test
    public void test3794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3794");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        boolean boolean23 = indexSettings21.isIndexUsingShadowReplicas();
        boolean boolean24 = indexSettings21.queryStringAllowLeadingWildcard;
        int int25 = indexSettings21.getMaxResultWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        org.elasticsearch.index.translog.Translog.Durability durability48 = null;
        indexSettings47.setTranslogDurability(durability48);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        indexSettings21.refreshInterval = timeValue50;
        org.elasticsearch.common.settings.Settings settings52 = indexSettings21.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting53 = indexSettings21.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(timeValueSetting53);
    }

    @Test
    public void test3795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3795");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.index.translog.Translog.Durability durability26 = indexSettings21.getTranslogDurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        boolean boolean32 = indexScopedSettings28.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        indexScopedSettings28.validate("index.shadow_replicas", settings34);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings34);
        org.elasticsearch.common.settings.Settings settings49 = indexSettings48.getSettings();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue50 = indexSettings48.getFlushThresholdSize();
        org.elasticsearch.Version version51 = indexSettings48.getIndexVersionCreated();
        long long52 = indexSettings48.getGcDeletesInMillis();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting53 = indexSettings48.getINDEX_CHECK_ON_STARTUP();
        indexSettings48.setMaxRescoreWindow(10);
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexSettings48.getDEFAULT_REFRESH_INTERVAL();
        indexSettings21.refreshInterval = timeValue56;
        boolean boolean58 = indexSettings21.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + durability26 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability26.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(byteSizeValue50);
        org.junit.Assert.assertNotNull(version51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 60000L + "'", long52 == 60000L);
        org.junit.Assert.assertNotNull(strSetting53);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test3796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3796");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig26 = indexSettings21.getMergeSchedulerConfig();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        int int28 = indexSettings21.maxRescoreWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
    }

    @Test
    public void test3797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3797");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        int int26 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.Version version27 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData29 = indexMetaData0.mappingOrDefault("index.version.created");
        org.apache.lucene.util.Version version30 = indexMetaData0.getMinimumCompatibleVersion();
        int int31 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput32 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(version27);
        org.junit.Assert.assertNull(mappingMetaData29);
        org.junit.Assert.assertNull(version30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test3798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3798");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        boolean boolean24 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getDEFAULT_GC_DELETES();
        java.util.function.Predicate<java.lang.String> strPredicate26 = indexSettings21.indexNameMatcher;
        java.lang.String str27 = indexSettings21.getUUID();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting28 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        boolean boolean29 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher30 = indexSettings21.parseFieldMatcher;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting31 = indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "_na_" + "'", str27, "_na_");
        org.junit.Assert.assertNotNull(byteSizeValueSetting28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(parseFieldMatcher30);
        org.junit.Assert.assertNotNull(intSetting31);
    }

    @Test
    public void test3799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3799");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings2.applySettings(settings9);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting11 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings12 = indexScopedSettings2.get(settingsSetting11);
        java.lang.String str15 = settings12.get("index.version.minimum_compatible", "index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean20 = indexScopedSettings18.isPrivateSetting("index.");
        boolean boolean22 = indexScopedSettings18.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings24.getGroups("index.uuid");
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray36 = settings24.getAsArray("", strArray34, (java.lang.Boolean) false);
        indexScopedSettings18.validate("index.shadow_replicas", settings24);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings24);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = indexSettings38.scopedSettings;
        org.elasticsearch.common.settings.Settings settings40 = indexSettings38.nodeSettings;
        indexSettings38.maxRescoreWindow = 0;
        boolean boolean43 = indexSettings38.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings44 = indexSettings38.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean48 = indexScopedSettings46.isPrivateSetting("index.");
        boolean boolean50 = indexScopedSettings46.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings52.getGroups("index.uuid");
        java.lang.String[] strArray62 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray64 = settings52.getAsArray("", strArray62, (java.lang.Boolean) false);
        indexScopedSettings46.validate("index.shadow_replicas", settings52);
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings52);
        indexSettings66.setEnableWarmer(true);
        java.lang.String str69 = indexSettings66.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = indexSettings66.getIndexMetaData();
        java.lang.String str71 = indexSettings66.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy72 = indexSettings66.getMergePolicy();
        org.elasticsearch.common.logging.ESLogger eSLogger73 = indexSettings66.getlogger();
        java.util.function.Predicate<java.lang.String> strPredicate74 = indexSettings66.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings75 = settings44.filter(strPredicate74);
        java.lang.String[] strArray77 = settings75.getAsArray("_all");
        java.lang.String[] strArray79 = settings12.getAsArray("primary_terms", strArray77, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder0.putArray("primary_terms", strArray79);
        java.nio.file.Path path81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder82 = builder80.loadFromPath(path81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settingsSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index.number_of_shards" + "'", str15, "index.number_of_shards");
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(mergePolicy72);
        org.junit.Assert.assertNotNull(eSLogger73);
        org.junit.Assert.assertNotNull(strPredicate74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test3800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3800");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        boolean boolean27 = indexSettings21.matchesIndexName("index.blocks.metadata");
        boolean boolean28 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.common.settings.Settings settings29 = indexSettings21.getNodeSettings();
        java.util.function.Predicate<java.lang.String> strPredicate30 = indexSettings21.getindexNameMatcher();
        java.lang.String str31 = indexSettings21.getNodeName();
        boolean boolean32 = indexSettings21.getdefaultAllowUnmappedFields();
        org.elasticsearch.common.unit.TimeValue timeValue33 = indexSettings21.globalCheckpointInterval;
        indexSettings21.setwarmerEnabled(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(timeValue33);
    }

    @Test
    public void test3801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3801");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability23 = indexSettings21.getTranslogDurability();
        boolean boolean24 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings21.getALLOW_UNMAPPED();
        java.util.function.Predicate<java.lang.String> strPredicate26 = indexSettings21.getindexNameMatcher();
        indexSettings21.TTLPurgeDisabled = false;
        indexSettings21.setMaxRescoreWindow(10000);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = indexSettings21.indexMetaData;
        org.elasticsearch.index.translog.Translog.Durability durability32 = indexSettings21.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertTrue("'" + durability32 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability32.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test3802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3802");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig35 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting36 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        boolean boolean37 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting38 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        indexSettings21.setEnableWarmer(true);
        int int41 = indexSettings21.getMaxRescoreWindow();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting42 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.common.settings.Settings settings43 = indexSettings21.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(mergePolicyConfig35);
        org.junit.Assert.assertNotNull(booleanSetting36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(booleanSetting38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10000 + "'", int41 == 10000);
        org.junit.Assert.assertNotNull(booleanSetting42);
        org.junit.Assert.assertNotNull(settings43);
    }

    @Test
    public void test3803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3803");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting5 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer6 = null;
        indexScopedSettings4.addSettingsUpdateConsumer(settingsSetting5, settingsConsumer6);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.get(settingsSetting5);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings9.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings9.getAsSettings("");
        java.lang.Boolean boolean16 = settings13.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue19 = settings13.getAsBytesSize("index.", byteSizeValue18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings13.toXContent(xContentBuilder20, params21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.isPrivateSetting("index.");
        boolean boolean28 = indexScopedSettings24.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray42 = settings30.getAsArray("", strArray40, (java.lang.Boolean) false);
        indexScopedSettings24.validate("index.shadow_replicas", settings30);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings30);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap45 = indexMetaData23.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData23.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters47 = indexMetaData23.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.isPrivateSetting("index.");
        boolean boolean53 = indexScopedSettings49.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.uuid");
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray67 = settings55.getAsArray("", strArray65, (java.lang.Boolean) false);
        indexScopedSettings49.validate("index.shadow_replicas", settings55);
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings55);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting70 = indexSettings69.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters72 = indexMetaData71.includeFilters();
        indexSettings69.indexMetaData = indexMetaData71;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData71);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData71.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff76 = indexMetaData23.diff(indexMetaData71);
        boolean boolean78 = indexMetaData71.isSameUUID("index.version.minimum_compatible");
        org.elasticsearch.Version version79 = indexMetaData71.getCreationVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings80 = indexScopedSettings0.copy(settings13, indexMetaData71);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData82 = indexMetaData71.mappingOrDefault("index.blocks.read");
        boolean boolean84 = indexMetaData71.isSameUUID("");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap85 = indexMetaData71.getMappings();
        boolean boolean87 = indexMetaData71.isSameUUID("index.priority");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settingsSetting5);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + true + "'", boolean16, true);
        org.junit.Assert.assertNull(byteSizeValue19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strImmutableOpenMap45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNull(discoveryNodeFilters47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(booleanSetting70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNull(discoveryNodeFilters72);
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertNotNull(indexMetaDataDiff76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(version79);
        org.junit.Assert.assertNotNull(indexScopedSettings80);
        org.junit.Assert.assertNull(mappingMetaData82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test3804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3804");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.Version version26 = indexSettings21.getversion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        boolean boolean32 = indexScopedSettings28.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        indexScopedSettings28.validate("index.shadow_replicas", settings34);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings34);
        org.elasticsearch.index.translog.Translog.Durability durability49 = null;
        indexSettings48.setTranslogDurability(durability49);
        org.elasticsearch.common.unit.TimeValue timeValue51 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings48.setGCDeletes(timeValue51);
        org.elasticsearch.common.unit.TimeValue timeValue53 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings48.setRefreshInterval(timeValue53);
        indexSettings21.setRefreshInterval(timeValue53);
        long long56 = indexSettings21.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(timeValue51);
        org.junit.Assert.assertNotNull(timeValue53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1000L + "'", long56 == 1000L);
    }

    @Test
    public void test3805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3805");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability23 = indexSettings21.getTranslogDurability();
        boolean boolean24 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.Version version26 = indexSettings21.version;
        long long27 = indexSettings21.gcDeletesInMillis;
        int int28 = indexSettings21.getNumberOfReplicas();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings settings30 = indexSettings21.getValue(settingsSetting29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 60000L + "'", long27 == 60000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test3806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3806");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.isPrivateSetting("index.");
        boolean boolean8 = indexScopedSettings4.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings10.getGroups("index.uuid");
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray22 = settings10.getAsArray("", strArray20, (java.lang.Boolean) false);
        indexScopedSettings4.validate("index.shadow_replicas", settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting25 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer26 = null;
        indexScopedSettings24.addSettingsUpdateConsumer(settingsSetting25, settingsConsumer26);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings24.get(settingsSetting29);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer33 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings4.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer33, settingsConsumer34);
        java.util.function.Predicate<java.lang.String> strPredicate36 = indexScopedSettings4.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = indexScopedSettings37.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings62 = settings58.getAsSettings("");
        java.lang.Boolean boolean65 = settings62.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue67 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue68 = settings62.getAsBytesSize("index.", byteSizeValue67);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder69 = null;
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings70.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings74 = settings70.getAsSettings("");
        java.lang.Boolean boolean77 = settings74.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue79 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue80 = settings74.getAsBytesSize("index.", byteSizeValue79);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder81 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params82 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder83 = settings74.toXContent(xContentBuilder81, params82);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder84 = settings62.toXContent(xContentBuilder69, params82);
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings57.dryRun(settings62);
        org.elasticsearch.common.settings.Settings settings86 = indexScopedSettings4.dryRun(settings62);
        indexScopedSettings0.validate(settings86);
        org.elasticsearch.common.settings.Setting.Property property88 = indexScopedSettings0.getScope();
        boolean boolean90 = indexScopedSettings0.isPrivateSetting("hi!");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settingsSetting25);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertEquals("'" + boolean65 + "' != '" + true + "'", boolean65, true);
        org.junit.Assert.assertNull(byteSizeValue68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertEquals("'" + boolean77 + "' != '" + true + "'", boolean77, true);
        org.junit.Assert.assertNull(byteSizeValue80);
        org.junit.Assert.assertNotNull(params82);
        org.junit.Assert.assertNull(xContentBuilder83);
        org.junit.Assert.assertNull(xContentBuilder84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertTrue("'" + property88 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property88.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3807");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = settings23.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        java.lang.String[] strArray41 = settings23.getAsArray("index.version.minimum_compatible", strArray37, (java.lang.Boolean) false);
        java.lang.String[] strArray43 = settings7.getAsArray("index.version.created", strArray41, (java.lang.Boolean) true);
        boolean boolean44 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int47 = indexMetaData46.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap48 = indexMetaData46.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData46.requireFilters();
        org.elasticsearch.index.Index index50 = indexMetaData46.getMergeSourceIndex();
        org.elasticsearch.Version version51 = indexMetaData46.getUpgradedVersion();
        org.elasticsearch.Version version52 = settings7.getAsVersion("_all", version51);
        java.util.Set<java.lang.String> strSet53 = settings7.names();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
        org.junit.Assert.assertNull(index50);
        org.junit.Assert.assertNotNull(version51);
        org.junit.Assert.assertNotNull(version52);
        org.junit.Assert.assertNotNull(strSet53);
    }

    @Test
    public void test3808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3808");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int6 = indexMetaData5.getNumberOfShards();
        int int7 = indexMetaData5.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.diff(indexMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff8);
    }

    @Test
    public void test3809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3809");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData28.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap52 = indexMetaData30.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData30.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters54 = indexMetaData30.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean58 = indexScopedSettings56.isPrivateSetting("index.");
        boolean boolean60 = indexScopedSettings56.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings62.getGroups("index.uuid");
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray74 = settings62.getAsArray("", strArray72, (java.lang.Boolean) false);
        indexScopedSettings56.validate("index.shadow_replicas", settings62);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings62);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting77 = indexSettings76.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters79 = indexMetaData78.includeFilters();
        indexSettings76.indexMetaData = indexMetaData78;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData78);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters82 = indexMetaData78.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff83 = indexMetaData30.diff(indexMetaData78);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff84 = indexMetaData28.diff(indexMetaData30);
        boolean boolean86 = indexMetaData30.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state88 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder89 = builder87.state(state88);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder91 = builder89.putAlias(aliasMetaData90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNull(discoveryNodeFilters54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(booleanSetting77);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertNull(discoveryNodeFilters79);
        org.junit.Assert.assertNull(discoveryNodeFilters82);
        org.junit.Assert.assertNotNull(indexMetaDataDiff83);
        org.junit.Assert.assertNotNull(indexMetaDataDiff84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + state88 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state88.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test3810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3810");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getRefreshInterval();
        org.elasticsearch.index.translog.Translog.Durability durability26 = indexSettings21.getTranslogDurability();
        boolean boolean27 = indexSettings21.isShadowReplicaIndex;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting28 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        int int29 = indexSettings21.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + durability26 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability26.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(booleanSetting28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test3811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3811");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder3.put("primary_terms", 100.0f);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder18 = builder14.put("index.blocks.read_only", (long) 0, byteSizeUnit17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3812");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings30.applySettings(settings33);
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = settings37.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings39.getAsMap();
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings30.applySettings(settings39);
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings45 = settings43.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = settings45.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.isPrivateSetting("index.");
        boolean boolean53 = indexScopedSettings49.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.uuid");
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray67 = settings55.getAsArray("", strArray65, (java.lang.Boolean) false);
        indexScopedSettings49.validate("index.shadow_replicas", settings55);
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings55);
        boolean boolean71 = indexSettings69.matchesIndexName("");
        long long72 = indexSettings69.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue73 = indexSettings69.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue74 = settings45.getAsBytesSize("primary_terms", byteSizeValue73);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = settings39.getAsBytesSize("index.priority", byteSizeValue73);
        indexSettings21.flushThresholdSize = byteSizeValue75;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = indexSettings21.getIndexMetaData();
        java.util.Set<java.lang.String> strSet79 = null; // flaky: indexMetaData77.activeAllocationIds((int) (short) 10);
        org.elasticsearch.common.io.stream.StreamInput streamInput80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff81 = indexMetaData77.readDiffFrom(streamInput80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 60000L + "'", long72 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue73);
        org.junit.Assert.assertNotNull(byteSizeValue74);
        org.junit.Assert.assertNotNull(byteSizeValue75);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNull(strSet79);
    }

    @Test
    public void test3813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3813");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        int int27 = builder26.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.removeAllAliases();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer32 = null;
        indexScopedSettings30.addSettingsUpdateConsumer(settingsSetting31, settingsConsumer32);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting35 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer36 = null;
        indexScopedSettings34.addSettingsUpdateConsumer(settingsSetting35, settingsConsumer36);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings30.get(settingsSetting35);
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings40 = indexScopedSettings30.dryRun(settings39);
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings40);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean46 = indexScopedSettings44.isPrivateSetting("index.");
        boolean boolean48 = indexScopedSettings44.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray62 = settings50.getAsArray("", strArray60, (java.lang.Boolean) false);
        indexScopedSettings44.validate("index.shadow_replicas", settings50);
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings50);
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings64.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue66 = indexSettings64.globalCheckpointInterval;
        org.elasticsearch.common.unit.TimeValue timeValue67 = settings41.getAsTime("index.version.created", timeValue66);
        java.util.Set<java.lang.String> strSet68 = settings41.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder26.putActiveAllocationIds((int) (byte) 100, strSet68);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settingsSetting35);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertNotNull(timeValue66);
        org.junit.Assert.assertNotNull(timeValue67);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test3814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3814");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.applySettings(settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.get(settingsSetting9);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = settings11.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = settings13.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.isPrivateSetting("index.");
        boolean boolean21 = indexScopedSettings17.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray35 = settings23.getAsArray("", strArray33, (java.lang.Boolean) false);
        indexScopedSettings17.validate("index.shadow_replicas", settings23);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings23);
        boolean boolean39 = indexSettings37.matchesIndexName("");
        long long40 = indexSettings37.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue41 = indexSettings37.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue42 = settings13.getAsBytesSize("primary_terms", byteSizeValue41);
        org.elasticsearch.common.settings.Settings.Builder builder43 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.put("index.uuid", 0L);
        java.lang.String str48 = builder46.get("");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder49.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder55 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("index.uuid", 0L);
        java.lang.String str60 = builder58.get("");
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder58.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder58.put("", true);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder58.put("primary_terms", 100.0f);
        boolean boolean71 = indexScopedSettings0.updateSettings(settings13, builder54, builder58, "");
        java.io.InputStream inputStream73 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder74 = builder58.loadFromStream("index.version.upgraded", inputStream73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settingsSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 60000L + "'", long40 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue41);
        org.junit.Assert.assertNotNull(byteSizeValue42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test3815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3815");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getTranslogDurability();
        boolean boolean28 = indexSettings21.queryStringAllowLeadingWildcard;
        boolean boolean29 = indexSettings21.queryStringAllowLeadingWildcard;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state52 = indexMetaData30.getState();
        indexSettings21.indexMetaData = indexMetaData30;
        org.elasticsearch.common.settings.Settings settings54 = indexSettings21.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings54.getGroups("0", true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + state52 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state52.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap57);
    }

    @Test
    public void test3816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3816");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings21.durability = durability27;
        boolean boolean29 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings21.syncInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(timeValue30);
    }

    @Test
    public void test3817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3817");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = indexScopedSettings1.applySettings(settings4);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings8.applySettings(settings11);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = settings15.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = settings17.getAsMap();
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings8.applySettings(settings17);
        org.elasticsearch.common.settings.Setting.Property property20 = indexScopedSettings8.getScope();
        java.util.function.Predicate<java.lang.String> strPredicate21 = indexScopedSettings8.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.isPrivateSetting("index.");
        boolean boolean26 = indexScopedSettings22.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        indexScopedSettings22.validate("index.shadow_replicas", settings28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings42.applySettings(settings45);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings42.applySettings(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = indexScopedSettings22.copy(settings50, indexMetaData51);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean55 = indexScopedSettings53.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings56.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings53.applySettings(settings56);
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings53.applySettings(settings60);
        indexScopedSettings22.validate(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate21, indexScopedSettings22);
        boolean boolean64 = false; // flaky: indexSettings63.getwarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = null; // flaky: indexSettings63.indexMetaData;
        int int66 = 0; // flaky: indexMetaData65.getNumberOfReplicas();
        long long67 = 0L; // flaky: indexMetaData65.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + property20 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property20.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
    }

    @Test
    public void test3818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3818");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap2 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.isPrivateSetting("index.");
        boolean boolean10 = indexScopedSettings6.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray24 = settings12.getAsArray("", strArray22, (java.lang.Boolean) false);
        indexScopedSettings6.validate("index.shadow_replicas", settings12);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap27 = indexMetaData5.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData5.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters29 = indexMetaData5.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting52 = indexSettings51.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters54 = indexMetaData53.includeFilters();
        indexSettings51.indexMetaData = indexMetaData53;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData53);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters57 = indexMetaData53.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff58 = indexMetaData5.diff(indexMetaData53);
        boolean boolean60 = indexMetaData53.isSameUUID("index.version.minimum_compatible");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff61 = indexMetaData0.diff(indexMetaData53);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap62 = indexMetaData53.getMappings();
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings63.getGroups("index.uuid");
        boolean boolean66 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings63);
        org.elasticsearch.index.IndexSettings indexSettings67 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings63);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput68 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData53.writeTo(streamOutput68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNull(discoveryNodeFilters29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(booleanSetting52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNull(discoveryNodeFilters54);
        org.junit.Assert.assertNull(discoveryNodeFilters57);
        org.junit.Assert.assertNotNull(indexMetaDataDiff58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff61);
        org.junit.Assert.assertNotNull(strImmutableOpenMap62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test3819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3819");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData0.includeFilters();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
    }

    @Test
    public void test3820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3820");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexSettings21.getScopedSettings();
        boolean boolean27 = indexSettings21.queryStringLenient;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig28 = indexSettings21.mergeSchedulerConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig28);
    }

    @Test
    public void test3821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3821");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting25 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting26 = indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        boolean boolean28 = indexSettings21.matchesIndexName("index.version.created");
        org.elasticsearch.common.settings.Settings settings29 = indexSettings21.getSettings();
        org.elasticsearch.common.settings.Settings settings31 = settings29.getAsSettings("index.creation_date");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings35 = settings33.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        java.lang.String[] strArray51 = settings33.getAsArray("index.version.minimum_compatible", strArray47, (java.lang.Boolean) false);
        java.lang.Boolean boolean54 = settings33.getAsBoolean("index.version.minimum_compatible", (java.lang.Boolean) false);
        java.lang.String str56 = settings33.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.put("index.uuid", 0L);
        java.lang.String str63 = builder61.get("");
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder61.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder64.putNull("hi!");
        java.lang.String str68 = builder66.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder66.putNull("hi!");
        java.lang.String str72 = builder66.get("index.");
        org.elasticsearch.common.settings.Settings settings73 = builder66.build();
        org.elasticsearch.common.unit.SizeValue sizeValue75 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue76 = settings73.getAsSize("index.uuid", sizeValue75);
        org.elasticsearch.common.unit.SizeValue sizeValue77 = settings33.getAsSize("index.version.created_string", sizeValue76);
        org.elasticsearch.common.unit.SizeValue sizeValue78 = settings29.getAsSize("index.", sizeValue76);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeValueSetting25);
        org.junit.Assert.assertNotNull(intSetting26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertEquals("'" + boolean54 + "' != '" + false + "'", boolean54, false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(sizeValue76);
        org.junit.Assert.assertNotNull(sizeValue77);
        org.junit.Assert.assertNotNull(sizeValue78);
    }

    @Test
    public void test3822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3822");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = indexSettings21.getIndexMetaData();
        org.elasticsearch.index.translog.Translog.Durability durability29 = indexSettings21.durability;
        org.elasticsearch.common.settings.Settings settings30 = indexSettings21.getNodeSettings();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig31 = indexSettings21.mergePolicyConfig;
        boolean boolean32 = indexSettings21.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNull(durability29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(mergePolicyConfig31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test3823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3823");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings21.syncInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings28.applySettings(settings31);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings35.applySettings(settings38);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = settings42.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings35.applySettings(settings44);
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings35.getScope();
        java.util.function.Predicate<java.lang.String> strPredicate48 = indexScopedSettings35.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.isPrivateSetting("index.");
        boolean boolean53 = indexScopedSettings49.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.uuid");
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray67 = settings55.getAsArray("", strArray65, (java.lang.Boolean) false);
        indexScopedSettings49.validate("index.shadow_replicas", settings55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean71 = indexScopedSettings69.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings72.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings75 = indexScopedSettings69.applySettings(settings72);
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings77 = indexScopedSettings69.applySettings(settings76);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings79 = indexScopedSettings49.copy(settings77, indexMetaData78);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings80 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean82 = indexScopedSettings80.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings83 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap85 = settings83.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings86 = indexScopedSettings80.applySettings(settings83);
        org.elasticsearch.common.settings.Settings settings87 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings88 = indexScopedSettings80.applySettings(settings87);
        indexScopedSettings49.validate(settings88);
        org.elasticsearch.index.IndexSettings indexSettings90 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings31, strPredicate48, indexScopedSettings49);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting91 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer92 = null;
        indexScopedSettings49.addSettingsUpdateConsumer(settingsSetting91, settingsConsumer92);
        org.elasticsearch.common.settings.Settings settings94 = indexSettings21.getValue(settingsSetting91);
        org.elasticsearch.Version version95 = indexSettings21.getIndexVersionCreated();
        boolean boolean96 = indexSettings21.queryStringAnalyzeWildcard;
        org.elasticsearch.index.translog.Translog.Durability durability97 = indexSettings21.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(strPredicate48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertNotNull(indexScopedSettings79);
        org.junit.Assert.assertNotNull(indexScopedSettings80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(settingsSetting91);
        org.junit.Assert.assertNotNull(settings94);
        org.junit.Assert.assertNotNull(version95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + durability97 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability97.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test3824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3824");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.Version version24 = indexSettings21.getversion();
        indexSettings21.setTTLPurgeDisabled(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(version24);
    }

    @Test
    public void test3825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3825");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.nodeSettings;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings23.getGroups("index.priority", true);
        java.lang.String[] strArray28 = settings23.getAsArray("index.creation_date_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strArray28);
    }

    @Test
    public void test3826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3826");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting21 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer22 = null;
        indexScopedSettings20.addSettingsUpdateConsumer(settingsSetting21, settingsConsumer22);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting25 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer26 = null;
        indexScopedSettings24.addSettingsUpdateConsumer(settingsSetting25, settingsConsumer26);
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.get(settingsSetting25);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer29 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting25, settingsConsumer29, settingsConsumer30);
        java.util.function.Predicate<java.lang.String> strPredicate32 = indexScopedSettings0.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean36 = indexScopedSettings34.isPrivateSetting("index.");
        boolean boolean38 = indexScopedSettings34.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings40.getGroups("index.uuid");
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray52 = settings40.getAsArray("", strArray50, (java.lang.Boolean) false);
        indexScopedSettings34.validate("index.shadow_replicas", settings40);
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings40);
        indexSettings54.setEnableWarmer(true);
        indexSettings54.maxResultWindow = (byte) 100;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = indexSettings54.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean63 = indexScopedSettings61.isPrivateSetting("index.");
        boolean boolean65 = indexScopedSettings61.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap69 = settings67.getGroups("index.uuid");
        java.lang.String[] strArray77 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray79 = settings67.getAsArray("", strArray77, (java.lang.Boolean) false);
        indexScopedSettings61.validate("index.shadow_replicas", settings67);
        org.elasticsearch.index.IndexSettings indexSettings81 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings67);
        org.elasticsearch.index.translog.Translog.Durability durability82 = null;
        indexSettings81.setTranslogDurability(durability82);
        boolean boolean84 = indexSettings81.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings85 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting86 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer87 = null;
        indexScopedSettings85.addSettingsUpdateConsumer(settingsSetting86, settingsConsumer87);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings89 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting90 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer91 = null;
        indexScopedSettings89.addSettingsUpdateConsumer(settingsSetting90, settingsConsumer91);
        org.elasticsearch.common.settings.Settings settings93 = indexScopedSettings85.get(settingsSetting90);
        org.elasticsearch.common.settings.Settings settings94 = indexSettings81.getValue(settingsSetting90);
        org.elasticsearch.common.settings.Settings settings95 = indexScopedSettings59.get(settingsSetting90);
        java.lang.String str98 = settings95.get("index.blocks.write", "hi!");
        org.elasticsearch.common.settings.Settings settings99 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings95);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertNotNull(settingsSetting21);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settingsSetting25);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings85);
        org.junit.Assert.assertNotNull(settingsSetting86);
        org.junit.Assert.assertNotNull(indexScopedSettings89);
        org.junit.Assert.assertNotNull(settingsSetting90);
        org.junit.Assert.assertNotNull(settings93);
        org.junit.Assert.assertNotNull(settings94);
        org.junit.Assert.assertNotNull(settings95);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "hi!" + "'", str98, "hi!");
        org.junit.Assert.assertNotNull(settings99);
    }

    @Test
    public void test3827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3827");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap2 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
    }

    @Test
    public void test3828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3828");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData28.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap52 = indexMetaData30.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData30.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters54 = indexMetaData30.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean58 = indexScopedSettings56.isPrivateSetting("index.");
        boolean boolean60 = indexScopedSettings56.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings62.getGroups("index.uuid");
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray74 = settings62.getAsArray("", strArray72, (java.lang.Boolean) false);
        indexScopedSettings56.validate("index.shadow_replicas", settings62);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings62);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting77 = indexSettings76.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters79 = indexMetaData78.includeFilters();
        indexSettings76.indexMetaData = indexMetaData78;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData78);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters82 = indexMetaData78.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff83 = indexMetaData30.diff(indexMetaData78);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff84 = indexMetaData28.diff(indexMetaData30);
        org.elasticsearch.common.io.stream.StreamInput streamInput85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff86 = indexMetaData28.readDiffFrom(streamInput85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNull(discoveryNodeFilters54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(booleanSetting77);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertNull(discoveryNodeFilters79);
        org.junit.Assert.assertNull(discoveryNodeFilters82);
        org.junit.Assert.assertNotNull(indexMetaDataDiff83);
        org.junit.Assert.assertNotNull(indexMetaDataDiff84);
    }

    @Test
    public void test3829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3829");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder1.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("index.version.created");
        long long7 = builder6.version();
        long long8 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.version((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder6.creationDate(1000L);
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.uuid", 0L);
        java.lang.String str18 = builder16.get("");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("hi!");
        java.lang.String str23 = builder21.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder21.put("index.shared_filesystem.recover_on_any_node", (double) 10000L);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        boolean boolean33 = indexScopedSettings29.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        indexScopedSettings29.validate("index.shadow_replicas", settings35);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = indexSettings49.scopedSettings;
        org.elasticsearch.common.settings.Settings settings51 = indexSettings49.nodeSettings;
        indexSettings49.maxRescoreWindow = 0;
        boolean boolean54 = indexSettings49.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings55 = indexSettings49.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting56 = indexSettings49.getQUERY_STRING_LENIENT_SETTING();
        java.lang.Class<?> wildcardClass57 = indexSettings49.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder26.put("index.auto_expand_replicas", (java.lang.Class) wildcardClass57);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder6.settings(builder58);
        int int60 = builder6.numberOfShards();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(booleanSetting56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
    }

    @Test
    public void test3830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3830");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.unit.TimeValue timeValue26 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setRefreshInterval(timeValue26);
        indexSettings21.setEnableWarmer(false);
        indexSettings21.setwarmerEnabled(false);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting32 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        indexSettings21.maxResultWindow = 5000099;
        java.lang.String str35 = indexSettings21.defaultField;
        boolean boolean36 = indexSettings21.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(byteSizeValueSetting32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "_all" + "'", str35, "_all");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test3831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3831");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        int int28 = indexSettings21.maxResultWindow;
        org.elasticsearch.common.logging.ESLogger eSLogger29 = indexSettings21.getlogger();
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher31 = indexSettings21.parseFieldMatcher;
        int int32 = indexSettings21.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = indexSettings21.scopedSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(eSLogger29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(parseFieldMatcher31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
    }

    @Test
    public void test3832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3832");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.putNull("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings12.applySettings(settings15);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray26 = settings18.getAsArray("index.version.created", strArray24, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder6.extendArray("index.version.created_string", strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.creation_date_string", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder30.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.uuid", 0L);
        java.lang.String str37 = builder35.get("");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings40 = settings38.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = settings40.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction43 = null;
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder35.putProperties(strMap41, strPredicate42, strFunction43);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean48 = indexScopedSettings46.isPrivateSetting("index.");
        boolean boolean50 = indexScopedSettings46.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings52.getGroups("index.uuid");
        java.lang.String[] strArray62 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray64 = settings52.getAsArray("", strArray62, (java.lang.Boolean) false);
        indexScopedSettings46.validate("index.shadow_replicas", settings52);
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings52);
        org.elasticsearch.common.settings.Settings settings67 = indexSettings66.getSettings();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue68 = indexSettings66.getFlushThresholdSize();
        org.elasticsearch.Version version69 = indexSettings66.getIndexVersionCreated();
        long long70 = indexSettings66.getGcDeletesInMillis();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting71 = indexSettings66.getINDEX_CHECK_ON_STARTUP();
        indexSettings66.setMaxRescoreWindow(10);
        org.elasticsearch.common.unit.TimeValue timeValue74 = indexSettings66.getDEFAULT_REFRESH_INTERVAL();
        java.util.function.Predicate<java.lang.String> strPredicate75 = indexSettings66.indexNameMatcher;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction76 = null;
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder31.putProperties(strMap41, strPredicate75, strFunction76);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder31.put("index.number_of_shards", 10.0d);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(byteSizeValue68);
        org.junit.Assert.assertNotNull(version69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 60000L + "'", long70 == 60000L);
        org.junit.Assert.assertNotNull(strSetting71);
        org.junit.Assert.assertNotNull(timeValue74);
        org.junit.Assert.assertNotNull(strPredicate75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test3833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3833");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.isOnSharedFilesystem();
        boolean boolean26 = indexSettings21.isIndexUsingShadowReplicas();
        long long27 = indexSettings21.gcDeletesInMillis;
        boolean boolean28 = indexSettings21.getisShadowReplicaIndex();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = indexSettings21.getScopedSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting52 = indexSettings51.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue53 = null;
        indexSettings51.flushThresholdSize = byteSizeValue53;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting55 = indexSettings51.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting56 = indexSettings51.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability57 = indexSettings51.durability;
        indexSettings21.setdurability(durability57);
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings21.refreshInterval;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher60 = indexSettings21.parseFieldMatcher;
        java.lang.Class<?> wildcardClass61 = indexSettings21.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 60000L + "'", long27 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(timeValueSetting52);
        org.junit.Assert.assertNotNull(booleanSetting55);
        org.junit.Assert.assertNotNull(booleanSetting56);
        org.junit.Assert.assertTrue("'" + durability57 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability57.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(parseFieldMatcher60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test3834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3834");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = indexScopedSettings1.applySettings(settings4);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings8.applySettings(settings11);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = settings15.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = settings17.getAsMap();
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings8.applySettings(settings17);
        org.elasticsearch.common.settings.Setting.Property property20 = indexScopedSettings8.getScope();
        java.util.function.Predicate<java.lang.String> strPredicate21 = indexScopedSettings8.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.isPrivateSetting("index.");
        boolean boolean26 = indexScopedSettings22.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        indexScopedSettings22.validate("index.shadow_replicas", settings28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings42.applySettings(settings45);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings42.applySettings(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = indexScopedSettings22.copy(settings50, indexMetaData51);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean55 = indexScopedSettings53.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings56.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings53.applySettings(settings56);
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings53.applySettings(settings60);
        indexScopedSettings22.validate(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate21, indexScopedSettings22);
        org.elasticsearch.common.unit.TimeValue timeValue65 = null;
        org.elasticsearch.common.unit.TimeValue timeValue66 = settings4.getAsTime("index.version.created_string", timeValue65);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + property20 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property20.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNull(timeValue66);
    }

    @Test
    public void test3835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3835");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting5 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer6 = null;
        indexScopedSettings4.addSettingsUpdateConsumer(settingsSetting5, settingsConsumer6);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.get(settingsSetting5);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.dryRun(settings9);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings10.getGroups("index.");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings10.getAsGroups(false);
        boolean boolean15 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings10);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settingsSetting5);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3836");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getTranslogDurability();
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings21.getsyncInterval();
        int int29 = indexSettings21.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        org.elasticsearch.index.translog.Translog.Durability durability52 = null;
        indexSettings51.setTranslogDurability(durability52);
        boolean boolean54 = indexSettings51.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig55 = indexSettings51.getmergePolicyConfig();
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexSettings51.getsyncInterval();
        indexSettings21.refreshInterval = timeValue56;
        indexSettings21.maxResultWindow = ' ';
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig55);
        org.junit.Assert.assertNotNull(timeValue56);
    }

    @Test
    public void test3837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3837");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.logging.ESLogger eSLogger30 = indexSettings21.logger;
        boolean boolean31 = indexSettings21.getqueryStringAnalyzeWildcard();
        org.elasticsearch.index.translog.Translog.Durability durability32 = indexSettings21.getTranslogDurability();
        boolean boolean33 = indexSettings21.queryStringAllowLeadingWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(eSLogger30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(durability32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test3838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3838");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte8 = state7.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.state(state7);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = builder9.mapping("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.removeAlias("index.version.created_string");
        long long14 = builder9.version();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test3839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3839");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting26 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        java.lang.String str27 = indexSettings21.nodeName;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting28 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        indexSettings21.setEnableWarmer(true);
        boolean boolean31 = indexSettings21.TTLPurgeDisabled;
        int int32 = indexSettings21.numberOfShards;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(durabilitySetting26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(booleanSetting28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test3840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3840");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean25 = indexSettings21.getqueryStringAnalyzeWildcard();
        boolean boolean26 = indexSettings21.defaultAllowUnmappedFields;
        boolean boolean27 = indexSettings21.getqueryStringLenient();
        indexSettings21.setTTLPurgeDisabled(false);
        int int30 = indexSettings21.getMaxRescoreWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = indexSettings21.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mappingOrDefault("index.priority");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = settings34.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        java.lang.String[] strArray52 = settings34.getAsArray("index.version.minimum_compatible", strArray48, (java.lang.Boolean) false);
        boolean boolean53 = settings34.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings34);
        java.lang.String str56 = settings34.get("index.uuid");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test3841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3841");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting27 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer28 = null;
        indexScopedSettings26.addSettingsUpdateConsumer(settingsSetting27, settingsConsumer28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer32 = null;
        indexScopedSettings30.addSettingsUpdateConsumer(settingsSetting31, settingsConsumer32);
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings26.get(settingsSetting31);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings26.dryRun(settings35);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting37 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting39 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer40 = null;
        indexScopedSettings38.addSettingsUpdateConsumer(settingsSetting39, settingsConsumer40);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting43 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer44 = null;
        indexScopedSettings42.addSettingsUpdateConsumer(settingsSetting43, settingsConsumer44);
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings38.get(settingsSetting43);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer47 = null;
        indexScopedSettings26.addSettingsUpdateConsumer(settingsSetting37, settingsSetting43, settingsBiConsumer47);
        org.elasticsearch.common.settings.Settings settings49 = indexScopedSettings25.get(settingsSetting37);
        boolean boolean51 = indexScopedSettings25.hasDynamicSetting("index.blocks.read_only");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting53 = indexScopedSettings25.get("archived.");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(settingsSetting27);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settingsSetting37);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertNotNull(settingsSetting39);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertNotNull(settingsSetting43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(wildcardSetting53);
    }

    @Test
    public void test3842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3842");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray4 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList5);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.version.created", (double) ' ');
        org.elasticsearch.common.settings.Settings settings14 = builder13.build();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = settings14.getAsMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test3843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3843");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.excludeFilters();
        java.lang.Object obj2 = null;
        boolean boolean3 = indexMetaData0.equals(obj2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.numberOfShards(0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test3844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3844");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean26 = indexSettings21.getisShadowReplicaIndex();
        boolean boolean27 = indexSettings21.hasCustomDataPath();
        org.elasticsearch.common.logging.ESLogger eSLogger28 = indexSettings21.logger;
        boolean boolean29 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig30 = indexSettings21.mergeSchedulerConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(eSLogger28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig30);
    }

    @Test
    public void test3845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3845");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = indexScopedSettings0.getDEFAULT_SCOPED_SETTINGS();
        java.lang.String str21 = indexScopedSettings20.nodeName();
        java.lang.String str22 = indexScopedSettings20.nodeName();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting24 = indexScopedSettings20.get("1");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(wildcardSetting24);
    }

    @Test
    public void test3846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3846");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.Version version26 = indexSettings21.version;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean28 = indexSettings21.getdefaultAllowUnmappedFields();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings21.globalCheckpointInterval;
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings21.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting31 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(timeValueSetting31);
    }

    @Test
    public void test3847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3847");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        org.elasticsearch.common.logging.ESLogger eSLogger56 = indexSettings21.logger;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig57 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig58 = indexSettings21.getMergeSchedulerConfig();
        long long59 = indexSettings21.gcDeletesInMillis;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting60 = indexSettings21.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue61 = indexSettings21.flushThresholdSize;
        org.elasticsearch.index.translog.Translog.Durability durability62 = indexSettings21.getdurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertNotNull(eSLogger56);
        org.junit.Assert.assertNotNull(mergePolicyConfig57);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 60000L + "'", long59 == 60000L);
        org.junit.Assert.assertNotNull(booleanSetting60);
        org.junit.Assert.assertNotNull(byteSizeValue61);
        org.junit.Assert.assertTrue("'" + durability62 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability62.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test3848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3848");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = indexSettings21.getScopedSettings();
        int int36 = indexSettings21.getNumberOfShards();
        java.lang.String str37 = indexSettings21.getNodeName();
        boolean boolean38 = indexSettings21.queryStringAnalyzeWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test3849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3849");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getValue(settingsSetting17);
        int int19 = 0; // flaky: indexSettings16.numberOfShards;
        org.elasticsearch.common.logging.ESLogger eSLogger20 = null; // flaky: indexSettings16.logger;
        org.elasticsearch.common.settings.Settings settings21 = null; // flaky: indexSettings16.getSettings();
        int int22 = 0; // flaky: indexSettings16.maxResultWindow;
        java.lang.String str23 = null; // flaky: indexSettings16.nodeName;
        org.elasticsearch.Version version24 = null; // flaky: indexSettings16.getIndexVersionCreated();
        boolean boolean25 = false; // flaky: indexSettings16.isIndexUsingShadowReplicas();
// flaky:         indexSettings16.setMaxRescoreWindow((int) (byte) 1);
// flaky:         indexSettings16.warmerEnabled = true;
        boolean boolean30 = false; // flaky: indexSettings16.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Settings settings31 = null; // flaky: indexSettings16.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(settingsSetting17);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertNotNull(eSLogger20);
// flaky:         org.junit.Assert.assertNotNull(settings21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
// flaky:         org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertNotNull(settings31);
    }

    @Test
    public void test3850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3850");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting28 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        indexSettings21.setMaxRescoreWindow((int) ' ');
        boolean boolean31 = indexSettings21.isIndexUsingShadowReplicas();
        boolean boolean32 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.Version version33 = indexSettings21.getIndexVersionCreated();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.isPrivateSetting("index.");
        boolean boolean39 = indexScopedSettings35.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings41.getGroups("index.uuid");
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray53 = settings41.getAsArray("", strArray51, (java.lang.Boolean) false);
        indexScopedSettings35.validate("index.shadow_replicas", settings41);
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings41);
        org.elasticsearch.index.translog.Translog.Durability durability56 = null;
        indexSettings55.setTranslogDurability(durability56);
        boolean boolean58 = indexSettings55.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting60 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer61 = null;
        indexScopedSettings59.addSettingsUpdateConsumer(settingsSetting60, settingsConsumer61);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting64 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer65 = null;
        indexScopedSettings63.addSettingsUpdateConsumer(settingsSetting64, settingsConsumer65);
        org.elasticsearch.common.settings.Settings settings67 = indexScopedSettings59.get(settingsSetting64);
        org.elasticsearch.common.settings.Settings settings68 = indexSettings55.getValue(settingsSetting64);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = indexSettings55.indexMetaData;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap70 = indexMetaData69.getAliases();
        indexSettings21.indexMetaData = indexMetaData69;
        org.elasticsearch.index.Index index72 = indexMetaData69.getMergeSourceIndex();
        // The following exception was thrown during execution in test generation
        try {
            long long74 = indexMetaData69.primaryTerm((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(durabilitySetting28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertNotNull(settingsSetting60);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertNotNull(settingsSetting64);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNull(index72);
    }

    @Test
    public void test3851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3851");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        boolean boolean19 = indexScopedSettings15.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings21.getGroups("index.uuid");
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray33 = settings21.getAsArray("", strArray31, (java.lang.Boolean) false);
        indexScopedSettings15.validate("index.shadow_replicas", settings21);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings21);
        org.elasticsearch.index.translog.Translog.Durability durability36 = null;
        indexSettings35.setTranslogDurability(durability36);
        org.elasticsearch.common.unit.TimeValue timeValue38 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings35.setGCDeletes(timeValue38);
        org.elasticsearch.Version version40 = indexSettings35.version;
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder8.put("active_allocations", version40);
        org.elasticsearch.common.settings.Settings settings42 = builder41.build();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder41.put("index.shared_filesystem", 100);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.number_of_shards", (float) ' ');
        java.lang.String str50 = builder48.get("index.creation_date_string");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder52 = builder48.put(objDictionary51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(version40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test3852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3852");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder1 = null;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings2.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = settings2.getAsSettings("");
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue12 = settings6.getAsBytesSize("index.", byteSizeValue11);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params14 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = settings6.toXContent(xContentBuilder13, params14);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = null;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = settings17.getAsSettings("");
        java.lang.Boolean boolean24 = settings21.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue26 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue27 = settings21.getAsBytesSize("index.", byteSizeValue26);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = null;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings33 = settings29.getAsSettings("");
        java.lang.Boolean boolean36 = settings33.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue38 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue39 = settings33.getAsBytesSize("index.", byteSizeValue38);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder40 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params41 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder42 = settings33.toXContent(xContentBuilder40, params41);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder43 = settings21.toXContent(xContentBuilder28, params41);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = settings6.toXContent(xContentBuilder16, params41);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder1, params41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNull(byteSizeValue12);
        org.junit.Assert.assertNotNull(params14);
        org.junit.Assert.assertNull(xContentBuilder15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + boolean24 + "' != '" + true + "'", boolean24, true);
        org.junit.Assert.assertNull(byteSizeValue27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + boolean36 + "' != '" + true + "'", boolean36, true);
        org.junit.Assert.assertNull(byteSizeValue39);
        org.junit.Assert.assertNotNull(params41);
        org.junit.Assert.assertNull(xContentBuilder42);
        org.junit.Assert.assertNull(xContentBuilder43);
        org.junit.Assert.assertNull(xContentBuilder44);
    }

    @Test
    public void test3853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3853");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean23 = indexSettings21.TTLPurgeDisabled;
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getRefreshInterval();
        int int26 = indexSettings21.getNumberOfReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(timeValue27);
    }

    @Test
    public void test3854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3854");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig25 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        indexSettings21.setMaxResultWindow((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = indexSettings21.indexMetaData;
        org.apache.lucene.util.Version version30 = indexMetaData29.getMinimumCompatibleVersion();
        org.elasticsearch.index.Index index31 = indexMetaData29.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicyConfig25);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(version30);
        org.junit.Assert.assertNull(index31);
    }

    @Test
    public void test3855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3855");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getSettings();
        boolean boolean19 = false; // flaky: indexSettings16.isOnSharedFilesystem();
        boolean boolean20 = false; // flaky: indexSettings16.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher21 = null; // flaky: indexSettings16.getParseFieldMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher21);
    }

    @Test
    public void test3856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3856");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int29 = indexMetaData28.getNumberOfShards();
        indexSettings21.indexMetaData = indexMetaData28;
        boolean boolean31 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting32 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteSizeValueSetting32);
    }

    @Test
    public void test3857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3857");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean25 = indexSettings21.getqueryStringAnalyzeWildcard();
        boolean boolean26 = indexSettings21.defaultAllowUnmappedFields;
        boolean boolean27 = indexSettings21.getqueryStringLenient();
        indexSettings21.setTTLPurgeDisabled(false);
        int int30 = indexSettings21.getMaxRescoreWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = indexSettings21.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mappingOrDefault("index.priority");
        boolean boolean35 = indexMetaData31.isSameUUID("index.");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test3858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3858");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        int int23 = indexSettings21.getMaxResultWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.isPrivateSetting("index.");
        boolean boolean29 = indexScopedSettings25.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray43 = settings31.getAsArray("", strArray41, (java.lang.Boolean) false);
        indexScopedSettings25.validate("index.shadow_replicas", settings31);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings31);
        org.elasticsearch.index.translog.Translog.Durability durability46 = null;
        indexSettings45.setTranslogDurability(durability46);
        boolean boolean48 = indexSettings45.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig49 = indexSettings45.getmergePolicyConfig();
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings45.getsyncInterval();
        indexSettings21.setRefreshInterval(timeValue50);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting52 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        int int53 = indexSettings21.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting54 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        boolean boolean55 = indexSettings21.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting56 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig49);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(booleanSetting52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(booleanSetting54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteSizeValueSetting56);
    }

    @Test
    public void test3859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3859");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.creationDate((long) (short) 1);
        long long9 = builder8.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int12 = builder11.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = builder11.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder11.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.index("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        byte byte20 = state19.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder16.state(state19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder16.version(10L);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData24.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData24.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData24);
        org.elasticsearch.Version version28 = indexMetaData24.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        boolean boolean34 = indexScopedSettings30.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.uuid");
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray48 = settings36.getAsArray("", strArray46, (java.lang.Boolean) false);
        indexScopedSettings30.validate("index.shadow_replicas", settings36);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings36);
        org.elasticsearch.index.translog.Translog.Durability durability51 = null;
        indexSettings50.setTranslogDurability(durability51);
        boolean boolean53 = indexSettings50.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting55 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer56 = null;
        indexScopedSettings54.addSettingsUpdateConsumer(settingsSetting55, settingsConsumer56);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting59 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer60 = null;
        indexScopedSettings58.addSettingsUpdateConsumer(settingsSetting59, settingsConsumer60);
        org.elasticsearch.common.settings.Settings settings62 = indexScopedSettings54.get(settingsSetting59);
        org.elasticsearch.common.settings.Settings settings63 = indexSettings50.getValue(settingsSetting59);
        java.lang.String str64 = indexSettings50.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting65 = indexSettings50.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = indexSettings50.indexMetaData;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff67 = indexMetaData24.diff(indexMetaData66);
        int int68 = indexMetaData24.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state69 = indexMetaData24.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = builder23.state(state69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = builder8.state(state69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder8.index("");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte20 + "' != '" + (byte) 1 + "'", byte20 == (byte) 1);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(version28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings54);
        org.junit.Assert.assertNotNull(settingsSetting55);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertNotNull(settingsSetting59);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting65);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexMetaDataDiff67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + state69 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state69.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test3860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3860");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        boolean boolean19 = indexScopedSettings15.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings21.getGroups("index.uuid");
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray33 = settings21.getAsArray("", strArray31, (java.lang.Boolean) false);
        indexScopedSettings15.validate("index.shadow_replicas", settings21);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings21);
        org.elasticsearch.index.translog.Translog.Durability durability36 = null;
        indexSettings35.setTranslogDurability(durability36);
        org.elasticsearch.common.unit.TimeValue timeValue38 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings35.setGCDeletes(timeValue38);
        org.elasticsearch.Version version40 = indexSettings35.version;
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder8.put("active_allocations", version40);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("active_allocations", (float) 10000);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.put("index.auto_expand_replicas", (double) 10000);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = builder47.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(version40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strMap48);
    }

    @Test
    public void test3861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3861");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        boolean boolean12 = indexScopedSettings8.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings14.getGroups("index.uuid");
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray26 = settings14.getAsArray("", strArray24, (java.lang.Boolean) false);
        indexScopedSettings8.validate("index.shadow_replicas", settings14);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings14);
        org.elasticsearch.index.translog.Translog.Durability durability29 = null;
        indexSettings28.setTranslogDurability(durability29);
        org.elasticsearch.common.settings.Settings settings31 = indexSettings28.getSettings();
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder4.settings(settings31);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = builder33.mapping("index.data_path");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean38 = indexScopedSettings36.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings36.applySettings(settings39);
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = indexScopedSettings36.applySettings(settings43);
        boolean boolean45 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings43);
        org.elasticsearch.common.unit.SizeValue sizeValue47 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue48 = settings43.getAsSize("index.shadow_replicas", sizeValue47);
        java.lang.String str51 = settings43.get("_na_", "index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder33.settings(settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder33.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom55 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder33.putCustom("index.auto_expand_replicas", custom55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder56.creationDate(10000L);
        java.lang.String str59 = builder58.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder58.numberOfShards((int) (short) 10);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(sizeValue48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "index.uuid" + "'", str51, "index.uuid");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "archived." + "'", str59, "archived.");
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test3862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3862");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings21.syncInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings28.applySettings(settings31);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings35.applySettings(settings38);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = settings42.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings35.applySettings(settings44);
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings35.getScope();
        java.util.function.Predicate<java.lang.String> strPredicate48 = indexScopedSettings35.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.isPrivateSetting("index.");
        boolean boolean53 = indexScopedSettings49.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.uuid");
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray67 = settings55.getAsArray("", strArray65, (java.lang.Boolean) false);
        indexScopedSettings49.validate("index.shadow_replicas", settings55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean71 = indexScopedSettings69.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings72.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings75 = indexScopedSettings69.applySettings(settings72);
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings77 = indexScopedSettings69.applySettings(settings76);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings79 = indexScopedSettings49.copy(settings77, indexMetaData78);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings80 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean82 = indexScopedSettings80.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings83 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap85 = settings83.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings86 = indexScopedSettings80.applySettings(settings83);
        org.elasticsearch.common.settings.Settings settings87 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings88 = indexScopedSettings80.applySettings(settings87);
        indexScopedSettings49.validate(settings88);
        org.elasticsearch.index.IndexSettings indexSettings90 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings31, strPredicate48, indexScopedSettings49);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting91 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer92 = null;
        indexScopedSettings49.addSettingsUpdateConsumer(settingsSetting91, settingsConsumer92);
        org.elasticsearch.common.settings.Settings settings94 = indexSettings21.getValue(settingsSetting91);
        boolean boolean95 = indexSettings21.isWarmerEnabled();
        boolean boolean96 = indexSettings21.getwarmerEnabled();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting97 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig98 = indexSettings21.mergeSchedulerConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(strPredicate48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertNotNull(indexScopedSettings79);
        org.junit.Assert.assertNotNull(indexScopedSettings80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(settingsSetting91);
        org.junit.Assert.assertNotNull(settings94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(booleanSetting97);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig98);
    }

    @Test
    public void test3863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3863");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.putNull("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings12.applySettings(settings15);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray26 = settings18.getAsArray("index.version.created", strArray24, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder6.extendArray("index.version.created_string", strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder6.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder29.normalizePrefix("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder29.put("index.data_path", (double) (byte) 0);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = builder34.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strMap35);
    }

    @Test
    public void test3864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3864");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        boolean boolean6 = indexScopedSettings0.isPrivateSetting("index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder7 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.uuid", 0L);
        java.lang.String str12 = builder10.get("");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = settings13.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = settings15.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction18 = null;
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder10.putProperties(strMap16, strPredicate17, strFunction18);
        org.elasticsearch.common.settings.Settings settings20 = builder10.build();
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings20);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
    }

    @Test
    public void test3865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3865");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder6.put("index.version.upgraded", (double) 10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int15 = builder14.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.creationDate(1L);
        long long20 = builder19.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder19.numberOfShards(1);
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder23.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList28);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.version.created", (double) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray42 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder38.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList43);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.version.created", (double) ' ');
        java.lang.Class<?> wildcardClass52 = builder51.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder36.put("index.version.created_string", (java.lang.Class) wildcardClass52);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder36.putNull("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder19.settings(builder55);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean61 = indexScopedSettings59.isPrivateSetting("index.");
        boolean boolean63 = indexScopedSettings59.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings65.getGroups("index.uuid");
        java.lang.String[] strArray75 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray77 = settings65.getAsArray("", strArray75, (java.lang.Boolean) false);
        indexScopedSettings59.validate("index.shadow_replicas", settings65);
        org.elasticsearch.index.IndexSettings indexSettings79 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings65);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings80 = indexSettings79.scopedSettings;
        org.elasticsearch.common.settings.Settings settings81 = indexSettings79.nodeSettings;
        indexSettings79.maxRescoreWindow = 0;
        boolean boolean84 = indexSettings79.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings85 = indexSettings79.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting86 = indexSettings79.getQUERY_STRING_LENIENT_SETTING();
        java.lang.Class<?> wildcardClass87 = indexSettings79.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder55.put("index.shadow_replicas", (java.lang.Class) wildcardClass87);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder11.put("", (java.lang.Class) wildcardClass87);
        java.lang.String str91 = builder89.remove("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(indexScopedSettings80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(booleanSetting86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNull(str91);
    }

    @Test
    public void test3866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3866");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue23 = indexSettings21.globalCheckpointInterval;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = indexSettings21.scopedSettings;
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.refreshInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNotNull(timeValue23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(timeValue25);
    }

    @Test
    public void test3867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3867");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        indexSettings21.maxResultWindow = (byte) 100;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue26 = indexSettings21.flushThresholdSize;
        java.lang.String str27 = indexSettings21.defaultField;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher28 = indexSettings21.parseFieldMatcher;
        boolean boolean29 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        indexSettings51.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue54 = indexSettings51.getsyncInterval();
        org.elasticsearch.common.settings.Settings settings55 = indexSettings51.getSettings();
        int int56 = indexSettings51.getNumberOfShards();
        long long57 = indexSettings51.gcDeletesInMillis;
        indexSettings51.setTTLPurgeDisabled(false);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean63 = indexScopedSettings61.isPrivateSetting("index.");
        boolean boolean65 = indexScopedSettings61.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap69 = settings67.getGroups("index.uuid");
        java.lang.String[] strArray77 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray79 = settings67.getAsArray("", strArray77, (java.lang.Boolean) false);
        indexScopedSettings61.validate("index.shadow_replicas", settings67);
        org.elasticsearch.index.IndexSettings indexSettings81 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings67);
        org.elasticsearch.index.translog.Translog.Durability durability82 = null;
        indexSettings81.setTranslogDurability(durability82);
        org.elasticsearch.common.unit.TimeValue timeValue84 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings81.setGCDeletes(timeValue84);
        indexSettings51.setGCDeletes(timeValue84);
        indexSettings21.setRefreshInterval(timeValue84);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(byteSizeValue26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "_all" + "'", str27, "_all");
        org.junit.Assert.assertNotNull(parseFieldMatcher28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 60000L + "'", long57 == 60000L);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(timeValue84);
    }

    @Test
    public void test3868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3868");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        boolean boolean23 = indexSettings21.isShadowReplicaIndex;
        java.lang.String str24 = indexSettings21.getDefaultField();
        boolean boolean25 = indexSettings21.queryStringLenient;
        indexSettings21.gcDeletesInMillis = 52L;
        indexSettings21.setwarmerEnabled(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "_all" + "'", str24, "_all");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test3869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3869");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        boolean boolean30 = indexSettings21.getdefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting31 = indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        boolean boolean32 = indexSettings21.getwarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = indexSettings21.indexMetaData;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = indexMetaData33.mapping("index.version.created_string");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData33.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(intSetting31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
    }

    @Test
    public void test3870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3870");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.remove("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.put("index.data_path", "index.version.created");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder3.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test3871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3871");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.common.settings.Settings.Builder builder3 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.uuid", 0L);
        java.lang.String str8 = builder6.get("");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.putNull("hi!");
        java.lang.String str13 = builder11.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder11.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean20 = indexScopedSettings18.isPrivateSetting("index.");
        boolean boolean22 = indexScopedSettings18.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings24.getGroups("index.uuid");
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray36 = settings24.getAsArray("", strArray34, (java.lang.Boolean) false);
        indexScopedSettings18.validate("index.shadow_replicas", settings24);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings24);
        org.elasticsearch.index.translog.Translog.Durability durability39 = null;
        indexSettings38.setTranslogDurability(durability39);
        org.elasticsearch.common.unit.TimeValue timeValue41 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings38.setGCDeletes(timeValue41);
        org.elasticsearch.Version version43 = indexSettings38.version;
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder11.put("active_allocations", version43);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.put("active_allocations", (float) 10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder1.settings(builder44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder1.removeAlias("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder50.creationDate((long) (byte) -1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.shared_filesystem" + "'", str2, "index.shared_filesystem");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(version43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test3872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3872");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        indexSettings21.setEnableWarmer(false);
        boolean boolean27 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.Version version28 = indexSettings21.getversion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(version28);
    }

    @Test
    public void test3873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3873");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean22 = indexSettings21.isShadowReplicaIndex;
        org.elasticsearch.common.unit.TimeValue timeValue23 = indexSettings21.getsyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.isPrivateSetting("index.");
        boolean boolean29 = indexScopedSettings25.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray43 = settings31.getAsArray("", strArray41, (java.lang.Boolean) false);
        indexScopedSettings25.validate("index.shadow_replicas", settings31);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings31);
        org.elasticsearch.index.translog.Translog.Durability durability46 = null;
        indexSettings45.setTranslogDurability(durability46);
        org.elasticsearch.common.unit.TimeValue timeValue48 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings45.setGCDeletes(timeValue48);
        org.elasticsearch.common.settings.Settings settings50 = indexSettings45.settings;
        boolean boolean51 = indexSettings45.TTLPurgeDisabled;
        boolean boolean52 = indexSettings45.isTTLPurgeDisabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean56 = indexScopedSettings54.isPrivateSetting("index.");
        boolean boolean58 = indexScopedSettings54.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap62 = settings60.getGroups("index.uuid");
        java.lang.String[] strArray70 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray72 = settings60.getAsArray("", strArray70, (java.lang.Boolean) false);
        indexScopedSettings54.validate("index.shadow_replicas", settings60);
        org.elasticsearch.index.IndexSettings indexSettings74 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings60);
        boolean boolean76 = indexSettings74.matchesIndexName("");
        long long77 = indexSettings74.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue78 = indexSettings74.getGlobalCheckpointInterval();
        org.elasticsearch.index.translog.Translog.Durability durability79 = indexSettings74.getTranslogDurability();
        indexSettings45.setTranslogDurability(durability79);
        indexSettings21.setdurability(durability79);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting82 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        int int83 = indexSettings21.maxResultWindow;
        boolean boolean84 = indexSettings21.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(timeValue23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(indexScopedSettings54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 60000L + "'", long77 == 60000L);
        org.junit.Assert.assertNotNull(timeValue78);
        org.junit.Assert.assertTrue("'" + durability79 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability79.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValueSetting82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10000 + "'", int83 == 10000);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test3874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3874");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        boolean boolean19 = indexScopedSettings15.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings21.getGroups("index.uuid");
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray33 = settings21.getAsArray("", strArray31, (java.lang.Boolean) false);
        indexScopedSettings15.validate("index.shadow_replicas", settings21);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings21);
        org.elasticsearch.index.translog.Translog.Durability durability36 = null;
        indexSettings35.setTranslogDurability(durability36);
        org.elasticsearch.common.unit.TimeValue timeValue38 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings35.setGCDeletes(timeValue38);
        org.elasticsearch.Version version40 = indexSettings35.version;
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder8.put("active_allocations", version40);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.blocks.read_only", 0.0d);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(version40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test3875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3875");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.isPrivateSetting("index.");
        boolean boolean11 = indexScopedSettings7.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings13.getGroups("index.uuid");
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray25 = settings13.getAsArray("", strArray23, (java.lang.Boolean) false);
        indexScopedSettings7.validate("index.shadow_replicas", settings13);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings13);
        indexSettings27.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings27.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue31 = indexSettings27.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings39);
        indexSettings53.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexSettings53.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue57 = indexSettings53.flushThresholdSize;
        indexSettings27.flushThresholdSize = byteSizeValue57;
        indexSettings27.TTLPurgeDisabled = false;
        int int61 = indexSettings27.maxRescoreWindow;
        boolean boolean62 = indexSettings27.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean66 = indexScopedSettings64.isPrivateSetting("index.");
        boolean boolean68 = indexScopedSettings64.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings70.getGroups("index.uuid");
        java.lang.String[] strArray80 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray82 = settings70.getAsArray("", strArray80, (java.lang.Boolean) false);
        indexScopedSettings64.validate("index.shadow_replicas", settings70);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings70);
        indexSettings84.setEnableWarmer(true);
        java.lang.String str87 = indexSettings84.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData88 = indexSettings84.getIndexMetaData();
        indexSettings27.indexMetaData = indexMetaData88;
        java.util.Set<java.lang.String> strSet91 = indexMetaData88.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder92 = builder4.putActiveAllocationIds(1, strSet91);
        int int93 = builder92.numberOfReplicas();
        long long95 = builder92.primaryTerm((int) (short) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(byteSizeValue31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertNotNull(byteSizeValue57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10000 + "'", int61 == 10000);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(indexMetaData88);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
    }

    @Test
    public void test3876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3876");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = builder4.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.shared_filesystem.recover_on_any_node]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test3877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3877");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        long long7 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.numberOfShards(1);
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray14 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder10.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList15);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.version.created", (double) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray29 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder25.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList30);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.version.created", (double) ' ');
        java.lang.Class<?> wildcardClass39 = builder38.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder23.put("index.version.created_string", (java.lang.Class) wildcardClass39);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder23.putNull("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder6.settings(builder42);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean48 = indexScopedSettings46.isPrivateSetting("index.");
        boolean boolean50 = indexScopedSettings46.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings52.getGroups("index.uuid");
        java.lang.String[] strArray62 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray64 = settings52.getAsArray("", strArray62, (java.lang.Boolean) false);
        indexScopedSettings46.validate("index.shadow_replicas", settings52);
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings52);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexSettings66.scopedSettings;
        org.elasticsearch.common.settings.Settings settings68 = indexSettings66.nodeSettings;
        indexSettings66.maxRescoreWindow = 0;
        boolean boolean71 = indexSettings66.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings72 = indexSettings66.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting73 = indexSettings66.getQUERY_STRING_LENIENT_SETTING();
        java.lang.Class<?> wildcardClass74 = indexSettings66.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder42.put("index.shadow_replicas", (java.lang.Class) wildcardClass74);
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder42.put("index.version.created_string", (long) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder78.put("primary_terms", (double) 60000L);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(booleanSetting73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test3878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3878");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.getDEFAULT_GC_DELETES();
        boolean boolean28 = indexSettings21.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test3879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3879");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.version.minimum_compatible");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.version.minimum_compatible]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3880");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        indexSettings21.maxRescoreWindow = 0;
        boolean boolean30 = indexSettings21.queryStringLenient;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting31 = indexSettings21.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(timeValueSetting31);
    }

    @Test
    public void test3881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3881");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.auto_expand_replicas", (float) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.uuid", 0L);
        java.lang.String str16 = builder14.get("");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder17.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.isPrivateSetting("index.");
        boolean boolean26 = indexScopedSettings22.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        indexScopedSettings22.validate("index.shadow_replicas", settings28);
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings28);
        org.elasticsearch.index.translog.Translog.Durability durability43 = null;
        indexSettings42.setTranslogDurability(durability43);
        org.elasticsearch.common.unit.TimeValue timeValue45 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings42.setGCDeletes(timeValue45);
        org.elasticsearch.Version version47 = indexSettings42.version;
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder17.put("index.blocks.read", version47);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder9.put("index.creation_date", version47);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("_all", 0.0d);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("index.blocks.write", (int) (short) 1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings67 = indexScopedSettings57.dryRun(settings66);
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings67);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters71 = indexMetaData70.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters72 = indexMetaData70.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData70);
        org.elasticsearch.Version version74 = indexMetaData70.getCreationVersion();
        org.elasticsearch.Version version75 = settings67.getAsVersion("index.version.upgraded", version74);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder52.put("index.priority", version75);
        java.lang.String str78 = builder52.remove("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertNotNull(version47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNull(discoveryNodeFilters71);
        org.junit.Assert.assertNull(discoveryNodeFilters72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(version74);
        org.junit.Assert.assertNotNull(version75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(str78);
    }

    @Test
    public void test3882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3882");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        boolean boolean56 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        indexSettings78.setEnableWarmer(true);
        java.lang.String str81 = indexSettings78.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = indexSettings78.getIndexMetaData();
        indexSettings21.indexMetaData = indexMetaData82;
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap84 = indexMetaData82.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters85 = indexMetaData82.includeFilters();
        org.elasticsearch.Version version86 = indexMetaData82.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters87 = indexMetaData82.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap84);
        org.junit.Assert.assertNull(discoveryNodeFilters85);
        org.junit.Assert.assertNotNull(version86);
        org.junit.Assert.assertNull(discoveryNodeFilters87);
    }

    @Test
    public void test3883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3883");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.creationDate((long) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.version((long) (byte) 1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.numberOfShards((int) (byte) 0);
        java.lang.Class<?> wildcardClass10 = builder9.getClass();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3884");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        indexSettings21.maxResultWindow = (byte) 100;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue26 = indexSettings21.flushThresholdSize;
        java.lang.String str27 = indexSettings21.defaultField;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher28 = indexSettings21.parseFieldMatcher;
        boolean boolean29 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.common.settings.Settings settings30 = indexSettings21.nodeSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(byteSizeValue26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "_all" + "'", str27, "_all");
        org.junit.Assert.assertNotNull(parseFieldMatcher28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
    }

    @Test
    public void test3885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3885");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue23 = indexSettings21.globalCheckpointInterval;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = indexSettings21.scopedSettings;
        java.util.function.Predicate<java.lang.String> strPredicate25 = indexScopedSettings24.getINDEX_SETTINGS_KEY_PREDICATE();
        boolean boolean27 = indexScopedSettings24.hasDynamicSetting("index.version.created_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNotNull(timeValue23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(strPredicate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test3886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3886");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig25 = indexSettings21.mergeSchedulerConfig;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher26 = indexSettings21.parseFieldMatcher;
        int int27 = indexSettings21.maxResultWindow;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting28 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue29 = null;
        indexSettings21.setTranslogFlushThresholdSize(byteSizeValue29);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig25);
        org.junit.Assert.assertNotNull(parseFieldMatcher26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertNotNull(timeValueSetting28);
    }

    @Test
    public void test3887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3887");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.applySettings(settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.get(settingsSetting9);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        org.elasticsearch.Version version15 = null;
        org.elasticsearch.Version version16 = settings11.getAsVersion("", version15);
        boolean boolean17 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings11);
        org.elasticsearch.common.settings.Settings.Builder builder18 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("index.uuid", 0L);
        java.lang.String str23 = builder21.get("");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.putNull("hi!");
        java.lang.String str28 = builder26.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder26.put("_all", (float) 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.uuid", 0L);
        java.lang.String str37 = builder35.get("");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.auto_expand_replicas", (float) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder43 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.put("index.uuid", 0L);
        java.lang.String str48 = builder46.get("");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean56 = indexScopedSettings54.isPrivateSetting("index.");
        boolean boolean58 = indexScopedSettings54.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap62 = settings60.getGroups("index.uuid");
        java.lang.String[] strArray70 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray72 = settings60.getAsArray("", strArray70, (java.lang.Boolean) false);
        indexScopedSettings54.validate("index.shadow_replicas", settings60);
        org.elasticsearch.index.IndexSettings indexSettings74 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings60);
        org.elasticsearch.index.translog.Translog.Durability durability75 = null;
        indexSettings74.setTranslogDurability(durability75);
        org.elasticsearch.common.unit.TimeValue timeValue77 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings74.setGCDeletes(timeValue77);
        org.elasticsearch.Version version79 = indexSettings74.version;
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder49.put("index.blocks.read", version79);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder41.put("index.creation_date", version79);
        java.lang.String str83 = builder41.get("");
        boolean boolean85 = indexScopedSettings0.updateDynamicSettings(settings11, builder26, builder41, "index.blocks.metadata");
        org.elasticsearch.common.settings.Setting.Property property86 = indexScopedSettings0.getScope();
        java.lang.String str87 = indexScopedSettings0.nodeName();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settingsSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(version16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(indexScopedSettings54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(timeValue77);
        org.junit.Assert.assertNotNull(version79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + property86 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property86.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test3888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3888");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings21.durability = durability27;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        boolean boolean34 = indexScopedSettings30.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.uuid");
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray48 = settings36.getAsArray("", strArray46, (java.lang.Boolean) false);
        indexScopedSettings30.validate("index.shadow_replicas", settings36);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings36);
        org.elasticsearch.index.translog.Translog.Durability durability51 = null;
        indexSettings50.setTranslogDurability(durability51);
        org.elasticsearch.common.unit.TimeValue timeValue53 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings50.setGCDeletes(timeValue53);
        indexSettings21.setRefreshInterval(timeValue53);
        org.elasticsearch.common.settings.Settings settings56 = indexSettings21.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        boolean boolean80 = indexSettings78.matchesIndexName("");
        long long81 = indexSettings78.getGcDeletesInMillis();
        boolean boolean82 = indexSettings78.queryStringLenient;
        boolean boolean83 = indexSettings78.TTLPurgeDisabled;
        org.elasticsearch.common.unit.TimeValue timeValue84 = indexSettings78.globalCheckpointInterval;
        indexSettings21.setRefreshInterval(timeValue84);
        org.elasticsearch.common.settings.Settings settings86 = indexSettings21.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(timeValue53);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 60000L + "'", long81 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(timeValue84);
        org.junit.Assert.assertNotNull(settings86);
    }

    @Test
    public void test3889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3889");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        int int7 = builder4.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.removeAlias("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.numberOfShards((int) '4');
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean16 = indexScopedSettings14.isPrivateSetting("index.");
        boolean boolean18 = indexScopedSettings14.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getGroups("index.uuid");
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray32 = settings20.getAsArray("", strArray30, (java.lang.Boolean) false);
        indexScopedSettings14.validate("index.shadow_replicas", settings20);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean36 = indexScopedSettings34.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings40 = indexScopedSettings34.applySettings(settings37);
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings34.applySettings(settings41);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = indexScopedSettings14.copy(settings42, indexMetaData43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean47 = indexScopedSettings45.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings48.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings45.applySettings(settings48);
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings45.applySettings(settings52);
        indexScopedSettings14.validate(settings53);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting55 = org.elasticsearch.index.IndexSettings.INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING;
        indexScopedSettings14.validateSettingKey((org.elasticsearch.common.settings.Setting) byteSizeValueSetting55);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        boolean boolean80 = indexSettings78.matchesIndexName("");
        long long81 = indexSettings78.getGcDeletesInMillis();
        boolean boolean82 = indexSettings78.queryStringAnalyzeWildcard;
        org.elasticsearch.common.settings.Settings settings83 = indexSettings78.getNodeSettings();
        org.elasticsearch.common.settings.Settings settings84 = indexScopedSettings14.applySettings(settings83);
        org.elasticsearch.common.settings.Settings settings86 = settings83.getByPrefix("0");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = builder11.settings(settings83);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder89 = builder11.putAlias(aliasMetaData88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(byteSizeValueSetting55);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 60000L + "'", long81 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test3890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3890");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.isPrivateSetting("index.");
        boolean boolean10 = indexScopedSettings6.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray24 = settings12.getAsArray("", strArray22, (java.lang.Boolean) false);
        indexScopedSettings6.validate("index.shadow_replicas", settings12);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings12);
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings26.setTranslogDurability(durability27);
        boolean boolean29 = indexSettings26.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer32 = null;
        indexScopedSettings30.addSettingsUpdateConsumer(settingsSetting31, settingsConsumer32);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting35 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer36 = null;
        indexScopedSettings34.addSettingsUpdateConsumer(settingsSetting35, settingsConsumer36);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings30.get(settingsSetting35);
        org.elasticsearch.common.settings.Settings settings39 = indexSettings26.getValue(settingsSetting35);
        java.lang.String str40 = indexSettings26.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting41 = indexSettings26.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = indexSettings26.indexMetaData;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff43 = indexMetaData0.diff(indexMetaData42);
        int int44 = indexMetaData42.getNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData46 = indexMetaData42.mappingOrDefault("index.creation_date_string");
        org.apache.lucene.util.Version version47 = indexMetaData42.getMinimumCompatibleVersion();
        org.elasticsearch.Version version48 = indexMetaData42.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settingsSetting35);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaDataDiff43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(mappingMetaData46);
        org.junit.Assert.assertNull(version47);
        org.junit.Assert.assertNotNull(version48);
    }

    @Test
    public void test3891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3891");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = settings4.getAsSettings("");
        java.lang.Boolean boolean11 = settings8.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = settings8.getAsBytesSize("index.", byteSizeValue13);
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.uuid", 0L);
        java.lang.String str20 = builder18.get("");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder18.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = settings24.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings26.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction29 = null;
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder18.putProperties(strMap27, strPredicate28, strFunction29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder18.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.uuid", 0L);
        java.lang.String str38 = builder36.get("");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder36.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = settings42.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings44.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction47 = null;
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder36.putProperties(strMap45, strPredicate46, strFunction47);
        boolean boolean50 = indexScopedSettings0.updateSettings(settings8, builder18, builder48, "index.uuid");
        org.elasticsearch.common.settings.Settings settings51 = builder48.build();
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder48.put("index.version.upgraded", (float) 1);
        org.elasticsearch.common.settings.Settings settings55 = builder48.build();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + boolean11 + "' != '" + true + "'", boolean11, true);
        org.junit.Assert.assertNull(byteSizeValue14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
    }

    @Test
    public void test3892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3892");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting4 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer5 = null;
        indexScopedSettings3.addSettingsUpdateConsumer(settingsSetting4, settingsConsumer5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer9 = null;
        indexScopedSettings7.addSettingsUpdateConsumer(settingsSetting8, settingsConsumer9);
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings3.get(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings3.dryRun(settings12);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings15.applySettings(settings18);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings15.applySettings(settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings15.get(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13, strPredicate14, indexScopedSettings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters28 = indexMetaData27.includeFilters();
        long long29 = indexMetaData27.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData27.mappingOrDefault("state-");
        boolean boolean32 = false; // flaky: indexSettings26.updateIndexMetaData(indexMetaData27);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters33 = indexMetaData27.requireFilters();
        long long34 = indexMetaData27.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertNotNull(settingsSetting4);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNull(discoveryNodeFilters28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
    }

    @Test
    public void test3893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3893");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings26.applySettings(settings29);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings26.applySettings(settings33);
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.common.unit.SizeValue sizeValue37 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue38 = settings33.getAsSize("index.shadow_replicas", sizeValue37);
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings33);
        java.lang.String str42 = settings33.get("state-");
        java.lang.String str45 = settings33.get("index.version.minimum_compatible", "index.shared_filesystem.recover_on_any_node");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings33.getAsGroups(false);
        boolean boolean48 = settings33.isEmpty();
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings33);
        java.lang.Boolean boolean52 = settings33.getAsBoolean("", (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(sizeValue38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "index.shared_filesystem.recover_on_any_node" + "'", str45, "index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertEquals("'" + boolean52 + "' != '" + true + "'", boolean52, true);
    }

    @Test
    public void test3894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3894");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        boolean boolean12 = indexScopedSettings8.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings14.getGroups("index.uuid");
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray26 = settings14.getAsArray("", strArray24, (java.lang.Boolean) false);
        indexScopedSettings8.validate("index.shadow_replicas", settings14);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings14);
        org.elasticsearch.index.translog.Translog.Durability durability29 = null;
        indexSettings28.setTranslogDurability(durability29);
        org.elasticsearch.common.settings.Settings settings31 = indexSettings28.getSettings();
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder4.settings(settings31);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = builder33.mapping("index.data_path");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean38 = indexScopedSettings36.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings36.applySettings(settings39);
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = indexScopedSettings36.applySettings(settings43);
        boolean boolean45 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings43);
        org.elasticsearch.common.unit.SizeValue sizeValue47 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue48 = settings43.getAsSize("index.shadow_replicas", sizeValue47);
        java.lang.String str51 = settings43.get("_na_", "index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder33.settings(settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder33.numberOfShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder33.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder56.removeAlias("index.uuid");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(sizeValue48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "index.uuid" + "'", str51, "index.uuid");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test3895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3895");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        int int25 = indexSettings21.getMaxResultWindow();
        indexSettings21.TTLPurgeDisabled = true;
        org.elasticsearch.common.logging.ESLogger eSLogger28 = indexSettings21.logger;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting29 = indexSettings21.getMAX_RESULT_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(eSLogger28);
        org.junit.Assert.assertNotNull(intSetting29);
    }

    @Test
    public void test3896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3896");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getValue(settingsSetting17);
// flaky:         indexSettings16.maxResultWindow = 35;
        java.lang.String str21 = null; // flaky: indexSettings16.defaultField;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(settingsSetting17);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_all" + "'", str21, "_all");
    }

    @Test
    public void test3897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3897");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.queryStringAnalyzeWildcard;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting26 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        boolean boolean27 = indexSettings21.getisShadowReplicaIndex();
        boolean boolean28 = indexSettings21.isShadowReplicaIndex;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(durabilitySetting26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3898");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        boolean boolean27 = indexSettings21.matchesIndexName("index.blocks.metadata");
        boolean boolean28 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.common.settings.Settings settings29 = indexSettings21.getNodeSettings();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting30 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        boolean boolean36 = indexScopedSettings32.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        indexScopedSettings32.validate("index.shadow_replicas", settings38);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings38);
        boolean boolean54 = indexSettings52.matchesIndexName("");
        long long55 = indexSettings52.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexSettings52.getGlobalCheckpointInterval();
        boolean boolean57 = indexSettings52.getisShadowReplicaIndex();
        boolean boolean58 = indexSettings52.isQueryStringAnalyzeWildcard();
        indexSettings52.gcDeletesInMillis = 100;
        org.elasticsearch.common.unit.TimeValue timeValue61 = indexSettings52.getTranslogSyncInterval();
        indexSettings21.refreshInterval = timeValue61;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(timeValueSetting30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 60000L + "'", long55 == 60000L);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(timeValue61);
    }

    @Test
    public void test3899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3899");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        boolean boolean56 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        indexSettings78.setEnableWarmer(true);
        java.lang.String str81 = indexSettings78.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = indexSettings78.getIndexMetaData();
        indexSettings21.indexMetaData = indexMetaData82;
        java.util.Set<java.lang.String> strSet85 = indexMetaData82.activeAllocationIds((int) (short) 0);
        boolean boolean87 = indexMetaData82.isSameUUID("_all");
        long long88 = indexMetaData82.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1L + "'", long88 == 1L);
    }

    @Test
    public void test3900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3900");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.queryStringAnalyzeWildcard;
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings21.getTranslogSyncInterval();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting28 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        indexSettings21.warmerEnabled = false;
        java.lang.String str31 = indexSettings21.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(strSetting28);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test3901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3901");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder1.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.index("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        byte byte10 = state9.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.state(state9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder6.numberOfShards((int) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("index.version.created", custom15);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder13.putAlias(aliasMetaData17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 1 + "'", byte10 == (byte) 1);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test3902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3902");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = settings4.getAsSettings("hi!");
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        int int9 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test3903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3903");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher18 = null; // flaky: indexSettings16.getParseFieldMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int20 = indexMetaData19.getNumberOfShards();
        int int21 = indexMetaData19.getTotalNumberOfShards();
// flaky:         indexSettings16.indexMetaData = indexMetaData19;
        long long23 = indexMetaData19.getVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff25 = indexMetaData19.readDiffFrom(streamInput24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
    }

    @Test
    public void test3904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3904");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder6.put("index.version.upgraded", (double) 10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int15 = builder14.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.creationDate(1L);
        long long20 = builder19.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder19.numberOfShards(1);
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder23.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList28);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.version.created", (double) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray42 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder38.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList43);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.version.created", (double) ' ');
        java.lang.Class<?> wildcardClass52 = builder51.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder36.put("index.version.created_string", (java.lang.Class) wildcardClass52);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder36.putNull("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder19.settings(builder55);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean61 = indexScopedSettings59.isPrivateSetting("index.");
        boolean boolean63 = indexScopedSettings59.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings65.getGroups("index.uuid");
        java.lang.String[] strArray75 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray77 = settings65.getAsArray("", strArray75, (java.lang.Boolean) false);
        indexScopedSettings59.validate("index.shadow_replicas", settings65);
        org.elasticsearch.index.IndexSettings indexSettings79 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings65);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings80 = indexSettings79.scopedSettings;
        org.elasticsearch.common.settings.Settings settings81 = indexSettings79.nodeSettings;
        indexSettings79.maxRescoreWindow = 0;
        boolean boolean84 = indexSettings79.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings85 = indexSettings79.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting86 = indexSettings79.getQUERY_STRING_LENIENT_SETTING();
        java.lang.Class<?> wildcardClass87 = indexSettings79.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder55.put("index.shadow_replicas", (java.lang.Class) wildcardClass87);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder11.put("", (java.lang.Class) wildcardClass87);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder91 = builder89.put(objDictionary90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(indexScopedSettings80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(booleanSetting86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test3905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3905");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig35 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting36 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting37 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting38 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        indexSettings21.setMaxResultWindow((int) (short) -1);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig41 = indexSettings21.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(mergePolicyConfig35);
        org.junit.Assert.assertNotNull(booleanSetting36);
        org.junit.Assert.assertNotNull(booleanSetting37);
        org.junit.Assert.assertNotNull(timeValueSetting38);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig41);
    }

    @Test
    public void test3906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3906");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.uuid", 0L);
        java.lang.String str18 = builder16.get("");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder16.loadFromSource("hi!");
        java.lang.String str23 = builder16.remove("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.uuid", 0L);
        java.lang.String str30 = builder28.get("");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder31.putNull("hi!");
        java.lang.String str35 = builder33.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder33.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean42 = indexScopedSettings40.isPrivateSetting("index.");
        boolean boolean44 = indexScopedSettings40.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings46.getGroups("index.uuid");
        java.lang.String[] strArray56 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray58 = settings46.getAsArray("", strArray56, (java.lang.Boolean) false);
        indexScopedSettings40.validate("index.shadow_replicas", settings46);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings46);
        org.elasticsearch.index.translog.Translog.Durability durability61 = null;
        indexSettings60.setTranslogDurability(durability61);
        org.elasticsearch.common.unit.TimeValue timeValue63 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings60.setGCDeletes(timeValue63);
        org.elasticsearch.Version version65 = indexSettings60.version;
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder33.put("active_allocations", version65);
        org.elasticsearch.common.settings.Settings.Builder builder68 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray72 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder68.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList73);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder66.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList73);
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder16.putArray("index.creation_date_string", (java.util.List<java.lang.String>) strList73);
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder11.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList73);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder78.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder78.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(version65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test3907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3907");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        indexSettings21.setMaxResultWindow(1);
        boolean boolean25 = indexSettings21.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertNotNull(timeValue27);
    }

    @Test
    public void test3908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3908");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = indexScopedSettings1.applySettings(settings4);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings8.applySettings(settings11);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = settings15.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = settings17.getAsMap();
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings8.applySettings(settings17);
        org.elasticsearch.common.settings.Setting.Property property20 = indexScopedSettings8.getScope();
        java.util.function.Predicate<java.lang.String> strPredicate21 = indexScopedSettings8.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.isPrivateSetting("index.");
        boolean boolean26 = indexScopedSettings22.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        indexScopedSettings22.validate("index.shadow_replicas", settings28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings42.applySettings(settings45);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings42.applySettings(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = indexScopedSettings22.copy(settings50, indexMetaData51);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean55 = indexScopedSettings53.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings56.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings53.applySettings(settings56);
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings53.applySettings(settings60);
        indexScopedSettings22.validate(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate21, indexScopedSettings22);
        boolean boolean64 = false; // flaky: indexSettings63.getwarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = null; // flaky: indexSettings63.indexMetaData;
        int int66 = 0; // flaky: indexSettings63.maxResultWindow;
// flaky:         indexSettings63.warmerEnabled = false;
        boolean boolean69 = false; // flaky: indexSettings63.getisShadowReplicaIndex();
        int int70 = 0; // flaky: indexSettings63.getNumberOfShards();
        org.elasticsearch.index.translog.Translog.Durability durability71 = null; // flaky: indexSettings63.getdurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + property20 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property20.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10000 + "'", int66 == 10000);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + durability71 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability71.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test3909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3909");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        org.elasticsearch.common.unit.TimeValue timeValue55 = indexSettings21.getsyncInterval();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting56 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.common.settings.Settings settings57 = indexSettings21.settings;
        boolean boolean58 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertNotNull(durabilitySetting56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test3910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3910");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting18 = null; // flaky: indexSettings16.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = null; // flaky: indexSettings16.scopedSettings;
        org.elasticsearch.Version version20 = null; // flaky: indexSettings16.getversion();
        boolean boolean21 = false; // flaky: indexSettings16.getisShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = null; // flaky: indexSettings16.getQUERY_STRING_ANALYZE_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertNotNull(intSetting18);
// flaky:         org.junit.Assert.assertNotNull(indexScopedSettings19);
// flaky:         org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting22);
    }

    @Test
    public void test3911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3911");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting5 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer6 = null;
        indexScopedSettings4.addSettingsUpdateConsumer(settingsSetting5, settingsConsumer6);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.get(settingsSetting5);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings9.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings9.getAsSettings("");
        java.lang.Boolean boolean16 = settings13.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue19 = settings13.getAsBytesSize("index.", byteSizeValue18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings13.toXContent(xContentBuilder20, params21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.isPrivateSetting("index.");
        boolean boolean28 = indexScopedSettings24.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray42 = settings30.getAsArray("", strArray40, (java.lang.Boolean) false);
        indexScopedSettings24.validate("index.shadow_replicas", settings30);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings30);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap45 = indexMetaData23.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData23.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters47 = indexMetaData23.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.isPrivateSetting("index.");
        boolean boolean53 = indexScopedSettings49.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.uuid");
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray67 = settings55.getAsArray("", strArray65, (java.lang.Boolean) false);
        indexScopedSettings49.validate("index.shadow_replicas", settings55);
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings55);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting70 = indexSettings69.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters72 = indexMetaData71.includeFilters();
        indexSettings69.indexMetaData = indexMetaData71;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData71);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData71.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff76 = indexMetaData23.diff(indexMetaData71);
        boolean boolean78 = indexMetaData71.isSameUUID("index.version.minimum_compatible");
        org.elasticsearch.Version version79 = indexMetaData71.getCreationVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings80 = indexScopedSettings0.copy(settings13, indexMetaData71);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData82 = indexMetaData71.mappingOrDefault("index.blocks.read");
        boolean boolean84 = indexMetaData71.isSameUUID("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder85 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData71);
        org.elasticsearch.common.settings.Settings settings86 = indexMetaData71.getSettings();
        boolean boolean88 = indexMetaData71.isSameUUID("index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settingsSetting5);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + true + "'", boolean16, true);
        org.junit.Assert.assertNull(byteSizeValue19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strImmutableOpenMap45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNull(discoveryNodeFilters47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(booleanSetting70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNull(discoveryNodeFilters72);
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertNotNull(indexMetaDataDiff76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(version79);
        org.junit.Assert.assertNotNull(indexScopedSettings80);
        org.junit.Assert.assertNull(mappingMetaData82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test3912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3912");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        indexSettings21.maxResultWindow = (byte) 100;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue26 = indexSettings21.flushThresholdSize;
        java.lang.String str27 = indexSettings21.defaultField;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher28 = indexSettings21.parseFieldMatcher;
        org.elasticsearch.common.settings.Settings settings29 = indexSettings21.getNodeSettings();
        boolean boolean30 = indexSettings21.getdefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting31 = indexSettings21.getMAX_RESULT_WINDOW_SETTING();
        java.lang.String str32 = indexSettings21.customDataPath();
        org.elasticsearch.common.settings.Settings settings33 = indexSettings21.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting34 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(byteSizeValue26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "_all" + "'", str27, "_all");
        org.junit.Assert.assertNotNull(parseFieldMatcher28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(intSetting31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(timeValueSetting34);
    }

    @Test
    public void test3913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3913");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData28.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap52 = indexMetaData30.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData30.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters54 = indexMetaData30.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean58 = indexScopedSettings56.isPrivateSetting("index.");
        boolean boolean60 = indexScopedSettings56.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings62.getGroups("index.uuid");
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray74 = settings62.getAsArray("", strArray72, (java.lang.Boolean) false);
        indexScopedSettings56.validate("index.shadow_replicas", settings62);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings62);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting77 = indexSettings76.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters79 = indexMetaData78.includeFilters();
        indexSettings76.indexMetaData = indexMetaData78;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData78);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters82 = indexMetaData78.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff83 = indexMetaData30.diff(indexMetaData78);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff84 = indexMetaData28.diff(indexMetaData30);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap85 = indexMetaData28.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters86 = indexMetaData28.requireFilters();
        org.elasticsearch.Version version87 = indexMetaData28.getCreationVersion();
        boolean boolean89 = indexMetaData28.isSameUUID("index.blocks.read");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNull(discoveryNodeFilters54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(booleanSetting77);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertNull(discoveryNodeFilters79);
        org.junit.Assert.assertNull(discoveryNodeFilters82);
        org.junit.Assert.assertNotNull(indexMetaDataDiff83);
        org.junit.Assert.assertNotNull(indexMetaDataDiff84);
        org.junit.Assert.assertNotNull(strImmutableOpenMap85);
        org.junit.Assert.assertNull(discoveryNodeFilters86);
        org.junit.Assert.assertNotNull(version87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test3914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3914");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.creationDate((long) (short) 1);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings12 = settings10.getAsSettings("hi!");
        java.util.Set<java.lang.String> strSet13 = settings12.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder4.putActiveAllocationIds((int) ' ', strSet13);
        int int15 = builder14.numberOfShards();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test3915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3915");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds(100);
        int int4 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.common.xcontent.XContentParser xContentParser7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean11 = indexScopedSettings9.isPrivateSetting("index.");
        boolean boolean13 = indexScopedSettings9.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getGroups("index.uuid");
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray27 = settings15.getAsArray("", strArray25, (java.lang.Boolean) false);
        indexScopedSettings9.validate("index.shadow_replicas", settings15);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings15);
        org.elasticsearch.index.translog.Translog.Durability durability30 = null;
        indexSettings29.setTranslogDurability(durability30);
        boolean boolean32 = indexSettings29.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting34 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer35 = null;
        indexScopedSettings33.addSettingsUpdateConsumer(settingsSetting34, settingsConsumer35);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting38 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer39 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting38, settingsConsumer39);
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings33.get(settingsSetting38);
        org.elasticsearch.common.settings.Settings settings42 = indexSettings29.getValue(settingsSetting38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = indexSettings29.indexMetaData;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig44 = indexSettings29.getmergePolicyConfig();
        java.util.function.Predicate<java.lang.String> strPredicate45 = indexSettings29.getindexNameMatcher();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting46 = indexSettings29.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher47 = indexSettings29.parseFieldMatcher;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = indexMetaData0.fromXContent(xContentParser7, parseFieldMatcher47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertNotNull(settingsSetting34);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertNotNull(settingsSetting38);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(mergePolicyConfig44);
        org.junit.Assert.assertNotNull(strPredicate45);
        org.junit.Assert.assertNotNull(intSetting46);
        org.junit.Assert.assertNotNull(parseFieldMatcher47);
    }

    @Test
    public void test3916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3916");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.excludeFilters();
        java.lang.Object obj2 = null;
        boolean boolean3 = indexMetaData0.equals(obj2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.state(state6);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = builder5.primaryTerm(52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test3917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3917");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "index.number_of_shards", "hi!", "archived.", "index.", "index.version.created", "index.data_path", "hi!", "index.version.upgraded_string", "index.shared_filesystem.recover_on_any_node", "primary_terms", "index.shared_filesystem.recover_on_any_node", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder3.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean53 = indexScopedSettings51.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings54.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings57 = indexScopedSettings51.applySettings(settings54);
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings51.applySettings(settings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = indexScopedSettings31.copy(settings59, indexMetaData60);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap62 = indexMetaData60.getAliases();
        org.elasticsearch.Version version63 = indexMetaData60.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder3.put("_na_", version63);
        java.lang.String str66 = builder3.remove("index.creation_date_string");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder70 = builder3.put("index.auto_expand_replicas", (long) (short) 0, byteSizeUnit69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(strImmutableOpenMap62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test3918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3918");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        boolean boolean24 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getDEFAULT_GC_DELETES();
        java.util.function.Predicate<java.lang.String> strPredicate26 = indexSettings21.indexNameMatcher;
        java.lang.String str27 = indexSettings21.getUUID();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting28 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        boolean boolean29 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher30 = indexSettings21.parseFieldMatcher;
        java.lang.String str31 = indexSettings21.getUUID();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting32 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.common.unit.TimeValue timeValue33 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "_na_" + "'", str27, "_na_");
        org.junit.Assert.assertNotNull(byteSizeValueSetting28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(parseFieldMatcher30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "_na_" + "'", str31, "_na_");
        org.junit.Assert.assertNotNull(booleanSetting32);
        org.junit.Assert.assertNotNull(timeValue33);
    }

    @Test
    public void test3919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3919");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings9.getGroups("index.uuid");
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray21 = settings9.getAsArray("", strArray19, (java.lang.Boolean) false);
        org.elasticsearch.Version version23 = null;
        org.elasticsearch.Version version24 = settings9.getAsVersion("index.number_of_shards", version23);
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        java.lang.String[] strArray40 = settings9.getAsArray("hi!", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder6.put((java.lang.Object[]) strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.number_of_shards", (double) (short) 0);
        java.lang.String str46 = builder41.get("5000099");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(version24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test3920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3920");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        boolean boolean32 = indexScopedSettings28.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        indexScopedSettings28.validate("index.shadow_replicas", settings34);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings34);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting49 = indexSettings48.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability50 = indexSettings48.durability;
        org.elasticsearch.common.unit.TimeValue timeValue51 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings48.setGCDeletes(timeValue51);
        org.elasticsearch.common.unit.TimeValue timeValue53 = indexSettings48.refreshInterval;
        indexSettings21.setGCDeletes(timeValue53);
        boolean boolean55 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(timeValueSetting49);
        org.junit.Assert.assertTrue("'" + durability50 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability50.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue51);
        org.junit.Assert.assertNotNull(timeValue53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test3921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3921");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = settings9.getAsMap();
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property12 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings16.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings13.applySettings(settings16);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray27 = settings19.getAsArray("index.version.created", strArray25, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.uuid", 0L);
        java.lang.String str33 = builder31.get("");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder31.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = settings37.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings39.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate41 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction42 = null;
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder31.putProperties(strMap40, strPredicate41, strFunction42);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder31.replacePropertyPlaceholders();
        java.lang.String[] strArray58 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.", "index.blocks.read", "index.auto_expand_replicas", "index.blocks.read_only", "index.blocks.read", "state-", "index.uuid", "index.version.upgraded_string", "index.auto_expand_replicas", "archived.", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder44.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("index.uuid", 0L);
        java.lang.String str67 = builder65.get("");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder68.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder68.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder68.replacePropertyPlaceholders();
        boolean boolean75 = indexScopedSettings0.updateSettings(settings19, builder44, builder68, "_na_");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings19.getAsGroups(false);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + property12 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property12.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strMap77);
    }

    @Test
    public void test3922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3922");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.version.created");
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.putAlias(builder6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test3923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3923");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
// flaky:         indexSettings16.setMaxResultWindow(100);
        org.elasticsearch.common.unit.TimeValue timeValue22 = null; // flaky: indexSettings16.refreshInterval;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null; // flaky: indexSettings16.indexNameMatcher;
        org.elasticsearch.common.settings.Settings settings24 = null; // flaky: indexSettings16.settings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting25 = null; // flaky: indexSettings16.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNull(strPredicate23);
// flaky:         org.junit.Assert.assertNotNull(settings24);
// flaky:         org.junit.Assert.assertNotNull(durabilitySetting25);
    }

    @Test
    public void test3924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3924");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        java.util.function.Predicate<java.lang.String> strPredicate25 = indexSettings21.getindexNameMatcher();
        boolean boolean26 = indexSettings21.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertNotNull(strPredicate25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3925");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.blocks.metadata", (long) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.uuid", 0L);
        java.lang.String str25 = builder23.get("");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder26.putNull("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings32.applySettings(settings35);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray46 = settings38.getAsArray("index.version.created", strArray44, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder26.extendArray("index.version.created_string", strArray46);
        org.elasticsearch.common.settings.Settings.Builder builder48 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.uuid", 0L);
        java.lang.String str53 = builder51.get("");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings56 = settings54.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap57 = settings56.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder51.putProperties(strMap57, strPredicate58, strFunction59);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder26.put(strMap57);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder19.put(strMap57);
        org.elasticsearch.common.settings.Settings settings63 = builder19.build();
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder19.loadFromSource("1");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test3926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3926");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        boolean boolean25 = indexSettings21.getqueryStringLenient();
        java.util.function.Predicate<java.lang.String> strPredicate26 = indexSettings21.getindexNameMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.durability;
        indexSettings21.setEnableWarmer(false);
        org.elasticsearch.common.settings.Settings settings30 = indexSettings21.nodeSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings30);
    }

    @Test
    public void test3927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3927");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings21.getsyncInterval();
        int int36 = indexSettings21.getMaxRescoreWindow();
        org.elasticsearch.Version version37 = indexSettings21.getIndexVersionCreated();
        int int38 = indexSettings21.maxRescoreWindow;
        boolean boolean39 = indexSettings21.queryStringLenient;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertNotNull(version37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10000 + "'", int38 == 10000);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test3928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3928");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.uuid", 0L);
        java.lang.String str16 = builder14.get("");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder17.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.put("index.version.created", (long) (short) 10);
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray35 = settings23.getAsArray("", strArray33, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder22.put((java.lang.Object[]) strArray35);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder8.put((java.lang.Object[]) strArray35);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting39 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer40 = null;
        indexScopedSettings38.addSettingsUpdateConsumer(settingsSetting39, settingsConsumer40);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting43 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer44 = null;
        indexScopedSettings42.addSettingsUpdateConsumer(settingsSetting43, settingsConsumer44);
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings38.get(settingsSetting43);
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings38.dryRun(settings47);
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("index.uuid", 0L);
        java.lang.String str54 = builder52.get("");
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder55.putNull("hi!");
        java.lang.String str59 = builder57.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder57.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean66 = indexScopedSettings64.isPrivateSetting("index.");
        boolean boolean68 = indexScopedSettings64.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings70.getGroups("index.uuid");
        java.lang.String[] strArray80 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray82 = settings70.getAsArray("", strArray80, (java.lang.Boolean) false);
        indexScopedSettings64.validate("index.shadow_replicas", settings70);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings70);
        org.elasticsearch.index.translog.Translog.Durability durability85 = null;
        indexSettings84.setTranslogDurability(durability85);
        org.elasticsearch.common.unit.TimeValue timeValue87 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings84.setGCDeletes(timeValue87);
        org.elasticsearch.Version version89 = indexSettings84.version;
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder57.put("active_allocations", version89);
        java.util.Map<java.lang.String, java.lang.String> strMap91 = builder57.internalMap();
        boolean boolean92 = settings47.equals((java.lang.Object) builder57);
        java.lang.String str95 = settings47.get("index.number_of_shards", "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder96 = builder37.put(settings47);
        java.lang.String str98 = builder37.get("index.creation_date");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertNotNull(settingsSetting39);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertNotNull(settingsSetting43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(timeValue87);
        org.junit.Assert.assertNotNull(version89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(strMap91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "index.shared_filesystem.recover_on_any_node" + "'", str95, "index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNull(str98);
    }

    @Test
    public void test3929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3929");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.Version version25 = indexSettings21.getversion();
        boolean boolean26 = indexSettings21.warmerEnabled;
        indexSettings21.TTLPurgeDisabled = true;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = indexSettings21.scopedSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
    }

    @Test
    public void test3930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3930");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = indexScopedSettings0.getDEFAULT_SCOPED_SETTINGS();
        java.lang.String str21 = indexScopedSettings20.nodeName();
        boolean boolean23 = indexScopedSettings20.hasDynamicSetting("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 index.version.created_string=5.0.0 ");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test3931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3931");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder6.put("index.shared_filesystem.recover_on_any_node", (long) '#');
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder6.put("index.shared_filesystem.recover_on_any_node", (float) 0L);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray20 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder16.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList21);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.version.created", (double) ' ');
        java.lang.Class<?> wildcardClass30 = builder29.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder6.put("5000099", (java.lang.Class) wildcardClass30);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder35 = builder31.put("index.creation_date_string", (long) 100, byteSizeUnit34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test3932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3932");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        java.lang.String str5 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting11 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer12 = null;
        indexScopedSettings10.addSettingsUpdateConsumer(settingsSetting11, settingsConsumer12);
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings6.get(settingsSetting11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings15.applySettings(settings18);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings15.applySettings(settings22);
        boolean boolean24 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings22);
        org.elasticsearch.common.unit.SizeValue sizeValue26 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue27 = settings22.getAsSize("index.shadow_replicas", sizeValue26);
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings22);
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings6.dryRun(settings22);
        boolean boolean31 = indexScopedSettings6.hasDynamicSetting("index.creation_date_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        boolean boolean36 = indexScopedSettings32.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        indexScopedSettings32.validate("index.shadow_replicas", settings38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean54 = indexScopedSettings52.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings58 = indexScopedSettings52.applySettings(settings55);
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings52.applySettings(settings59);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = indexScopedSettings32.copy(settings60, indexMetaData61);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean65 = indexScopedSettings63.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings66.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings69 = indexScopedSettings63.applySettings(settings66);
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings63.applySettings(settings70);
        indexScopedSettings32.validate(settings71);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting74 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer75 = null;
        indexScopedSettings73.addSettingsUpdateConsumer(settingsSetting74, settingsConsumer75);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting78 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer79 = null;
        indexScopedSettings77.addSettingsUpdateConsumer(settingsSetting78, settingsConsumer79);
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings73.get(settingsSetting78);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings82 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting83 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer84 = null;
        indexScopedSettings82.addSettingsUpdateConsumer(settingsSetting83, settingsConsumer84);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer86 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting78, settingsSetting83, settingsBiConsumer86);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer88 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting78, settingsConsumer88);
        org.elasticsearch.common.settings.Settings settings90 = indexScopedSettings0.get(settingsSetting78);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap92 = settings90.getGroups("primary_terms");
        java.lang.String[] strArray94 = settings90.getAsArray("index.shadow_replicas");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings90, streamOutput95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertNotNull(settingsSetting11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(sizeValue27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertNotNull(settingsSetting74);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settingsSetting78);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(indexScopedSettings82);
        org.junit.Assert.assertNotNull(settingsSetting83);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(strMap92);
        org.junit.Assert.assertNotNull(strArray94);
    }

    @Test
    public void test3933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3933");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean23 = indexSettings21.TTLPurgeDisabled;
        boolean boolean24 = indexSettings21.hasCustomDataPath();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig25 = indexSettings21.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig25);
    }

    @Test
    public void test3934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3934");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings20.applySettings(settings23);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.applySettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexScopedSettings0.copy(settings28, indexMetaData29);
        java.util.Set<java.lang.String> strSet31 = settings28.names();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings28.getAsGroups();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings28.getGroups("primary_terms");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap34);
    }

    @Test
    public void test3935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3935");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        int int26 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings27 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long30 = indexMetaData0.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
    }

    @Test
    public void test3936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3936");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings21.getsyncInterval();
        int int36 = indexSettings21.getMaxRescoreWindow();
        int int37 = indexSettings21.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig38 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting39 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = indexSettings21.getIndexMetaData();
        java.lang.String str41 = indexMetaData40.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig38);
        org.junit.Assert.assertNotNull(booleanSetting39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "_na_" + "'", str41, "_na_");
    }

    @Test
    public void test3937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3937");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.nodeSettings;
        indexSettings21.maxRescoreWindow = 0;
        boolean boolean26 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        boolean boolean33 = indexScopedSettings29.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        indexScopedSettings29.validate("index.shadow_replicas", settings35);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        indexSettings49.setEnableWarmer(true);
        java.lang.String str52 = indexSettings49.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = indexSettings49.getIndexMetaData();
        java.lang.String str54 = indexSettings49.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy55 = indexSettings49.getMergePolicy();
        org.elasticsearch.common.logging.ESLogger eSLogger56 = indexSettings49.getlogger();
        java.util.function.Predicate<java.lang.String> strPredicate57 = indexSettings49.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings58 = settings27.filter(strPredicate57);
        java.lang.String[] strArray60 = settings58.getAsArray("_all");
        java.lang.String str62 = settings58.get("1.0");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(mergePolicy55);
        org.junit.Assert.assertNotNull(eSLogger56);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNull(str62);
    }

    @Test
    public void test3938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3938");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        indexSettings21.maxRescoreWindow = 0;
        boolean boolean30 = indexSettings21.queryStringLenient;
        boolean boolean31 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.translog.Translog.Durability durability32 = indexSettings21.durability;
        boolean boolean33 = indexSettings21.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + durability32 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability32.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test3939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3939");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("");
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.uuid", 0L);
        java.lang.String str9 = builder4.get("1.0");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.settings(builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.removeAlias("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.removeAlias("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.index("");
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test3940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3940");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData0.mappingOrDefault("index.priority");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.excludeFilters();
        long long5 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
    }

    @Test
    public void test3941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3941");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings26.applySettings(settings29);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings26.applySettings(settings33);
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.common.unit.SizeValue sizeValue37 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue38 = settings33.getAsSize("index.shadow_replicas", sizeValue37);
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings33);
        int int41 = indexMetaData25.getNumberOfReplicas();
        int int42 = indexMetaData25.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(sizeValue38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test3942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3942");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap2 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(version7);
    }

    @Test
    public void test3943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3943");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.Version version26 = indexSettings21.getversion();
        long long27 = indexSettings21.gcDeletesInMillis;
        boolean boolean29 = indexSettings21.matchesIndexName("1.0");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1000L + "'", long27 == 1000L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test3944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3944");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting25 = indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        int int26 = indexSettings21.getMaxRescoreWindow();
        boolean boolean27 = indexSettings21.getdefaultAllowUnmappedFields();
        org.elasticsearch.common.logging.ESLogger eSLogger28 = indexSettings21.getlogger();
        indexSettings21.TTLPurgeDisabled = false;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(intSetting25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(eSLogger28);
    }

    @Test
    public void test3945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3945");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.index.translog.Translog.Durability durability26 = indexSettings21.getTranslogDurability();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting27 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        int int28 = indexSettings21.getNumberOfReplicas();
        boolean boolean29 = indexSettings21.getwarmerEnabled();
        long long30 = indexSettings21.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + durability26 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability26.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(byteSizeValueSetting27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 60000L + "'", long30 == 60000L);
    }

    @Test
    public void test3946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3946");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getNodeSettings();
        boolean boolean28 = indexSettings21.isQueryStringLenient();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting29 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeValueSetting29);
    }

    @Test
    public void test3947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3947");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        boolean boolean18 = false; // flaky: indexSettings16.getqueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3948");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate((long) 'a');
        org.elasticsearch.common.settings.Settings.Builder builder7 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.uuid", 0L);
        java.lang.String str12 = builder10.get("");
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder10.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder10.put("", true);
        java.lang.String[] strArray33 = new java.lang.String[] { "index.shadow_replicas", "index.number_of_shards", "hi!", "archived.", "index.", "index.version.created", "index.data_path", "hi!", "index.version.upgraded_string", "index.shared_filesystem.recover_on_any_node", "primary_terms", "index.shared_filesystem.recover_on_any_node", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder10.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList34);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        org.elasticsearch.Version version53 = null;
        org.elasticsearch.Version version54 = settings39.getAsVersion("index.number_of_shards", version53);
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings39);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap59 = settings57.getGroups("index.uuid");
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray69 = settings57.getAsArray("", strArray67, (java.lang.Boolean) false);
        java.lang.String[] strArray70 = settings39.getAsArray("hi!", strArray67);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder37.putArray("primary_terms", strArray70);
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder71.put("index.version.created", false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder6.settings(builder74);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData77 = builder6.mapping("index.number_of_replicas");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNull(version54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(mappingMetaData77);
    }

    @Test
    public void test3949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3949");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        boolean boolean28 = indexSettings21.isOnSharedFilesystem();
        int int29 = indexSettings21.numberOfShards;
        int int30 = indexSettings21.maxResultWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
    }

    @Test
    public void test3950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3950");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        boolean boolean28 = indexSettings21.isIndexUsingShadowReplicas();
        long long29 = indexSettings21.gcDeletesInMillis;
        int int30 = indexSettings21.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        boolean boolean36 = indexScopedSettings32.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        indexScopedSettings32.validate("index.shadow_replicas", settings38);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings38);
        indexSettings52.setEnableWarmer(true);
        java.lang.String str55 = indexSettings52.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = indexSettings52.getIndexMetaData();
        java.lang.String str57 = indexSettings52.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability58 = indexSettings52.getTranslogDurability();
        boolean boolean59 = indexSettings52.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig60 = indexSettings52.getMergeSchedulerConfig();
        boolean boolean61 = indexSettings52.isWarmerEnabled();
        java.lang.String str62 = indexSettings52.getDefaultField();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting63 = indexSettings52.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        boolean boolean65 = indexSettings52.matchesIndexName("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean69 = indexScopedSettings67.isPrivateSetting("index.");
        boolean boolean71 = indexScopedSettings67.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap75 = settings73.getGroups("index.uuid");
        java.lang.String[] strArray83 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray85 = settings73.getAsArray("", strArray83, (java.lang.Boolean) false);
        indexScopedSettings67.validate("index.shadow_replicas", settings73);
        org.elasticsearch.index.IndexSettings indexSettings87 = new org.elasticsearch.index.IndexSettings(indexMetaData66, settings73);
        org.elasticsearch.index.translog.Translog.Durability durability88 = null;
        indexSettings87.setTranslogDurability(durability88);
        org.elasticsearch.common.unit.TimeValue timeValue90 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings87.setGCDeletes(timeValue90);
        org.elasticsearch.Version version92 = indexSettings87.version;
        org.elasticsearch.common.settings.Settings settings93 = indexSettings87.getSettings();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue94 = indexSettings87.getFlushThresholdSize();
        indexSettings52.setTranslogFlushThresholdSize(byteSizeValue94);
        indexSettings21.flushThresholdSize = byteSizeValue94;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1000L + "'", long29 == 1000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + durability58 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability58.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_all" + "'", str62, "_all");
        org.junit.Assert.assertNotNull(booleanSetting63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(timeValue90);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(settings93);
        org.junit.Assert.assertNotNull(byteSizeValue94);
    }

    @Test
    public void test3951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3951");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int25 = builder24.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder24.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings32 = settings30.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        java.lang.String[] strArray48 = settings30.getAsArray("index.version.minimum_compatible", strArray44, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder27.settings(settings30);
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray62 = settings50.getAsArray("", strArray60, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder27.settings(settings50);
        java.lang.String str65 = settings50.get("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.isPrivateSetting("index.");
        boolean boolean70 = indexScopedSettings66.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings72.getGroups("index.uuid");
        java.lang.String[] strArray82 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray84 = settings72.getAsArray("", strArray82, (java.lang.Boolean) false);
        indexScopedSettings66.validate("index.shadow_replicas", settings72);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting87 = indexScopedSettings66.get("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData88 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int89 = indexMetaData88.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings90 = new org.elasticsearch.common.settings.IndexScopedSettings(settings50, indexScopedSettings66, indexMetaData88);
        boolean boolean92 = indexMetaData88.isSameUUID("index.version.created_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap93 = indexMetaData88.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData95 = indexMetaData88.mapping("index.number_of_shards");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff96 = indexMetaData0.diff(indexMetaData88);
        int int97 = indexMetaData0.getNumberOfReplicas();
        long long98 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNull(wildcardSetting87);
        org.junit.Assert.assertNotNull(indexMetaData88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap93);
        org.junit.Assert.assertNull(mappingMetaData95);
        org.junit.Assert.assertNotNull(indexMetaDataDiff96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 1L + "'", long98 == 1L);
    }

    @Test
    public void test3952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3952");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.putNull("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings12.applySettings(settings15);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray26 = settings18.getAsArray("index.version.created", strArray24, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder6.extendArray("index.version.created_string", strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder6.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.uuid", 0L);
        java.lang.String str36 = builder34.get("");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("state-", true);
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("index.uuid", 0L);
        java.lang.String str47 = builder45.get("");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder48.putNull("hi!");
        java.lang.String str52 = builder50.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder50.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.isPrivateSetting("index.");
        boolean boolean61 = indexScopedSettings57.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings63.getGroups("index.uuid");
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray75 = settings63.getAsArray("", strArray73, (java.lang.Boolean) false);
        indexScopedSettings57.validate("index.shadow_replicas", settings63);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings63);
        org.elasticsearch.index.translog.Translog.Durability durability78 = null;
        indexSettings77.setTranslogDurability(durability78);
        org.elasticsearch.common.unit.TimeValue timeValue80 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings77.setGCDeletes(timeValue80);
        org.elasticsearch.Version version82 = indexSettings77.version;
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder50.put("active_allocations", version82);
        org.elasticsearch.common.settings.Settings.Builder builder85 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray89 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList90 = new java.util.ArrayList<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList90, strArray89);
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder85.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList90);
        org.elasticsearch.common.settings.Settings.Builder builder93 = builder83.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList90);
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder40.putArray("", (java.util.List<java.lang.String>) strList90);
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder29.putArray("index.version.upgraded", (java.util.List<java.lang.String>) strList90);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(timeValue80);
        org.junit.Assert.assertNotNull(version82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test3953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3953");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean25 = indexSettings21.getqueryStringAnalyzeWildcard();
        boolean boolean26 = indexSettings21.defaultAllowUnmappedFields;
        java.util.function.Predicate<java.lang.String> strPredicate27 = indexSettings21.getindexNameMatcher();
        indexSettings21.maxRescoreWindow = (byte) 0;
        boolean boolean30 = indexSettings21.getwarmerEnabled();
        boolean boolean31 = indexSettings21.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting32 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting33 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strPredicate27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(booleanSetting32);
        org.junit.Assert.assertNotNull(timeValueSetting33);
    }

    @Test
    public void test3954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3954");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.putNull("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings12.applySettings(settings15);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray26 = settings18.getAsArray("index.version.created", strArray24, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder6.extendArray("index.version.created_string", strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder6.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder29.normalizePrefix("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder29.put("index.auto_expand_replicas", "index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int37 = indexMetaData36.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings41.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings44 = indexScopedSettings38.applySettings(settings41);
        java.lang.String str46 = settings41.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer50 = null;
        indexScopedSettings48.addSettingsUpdateConsumer(settingsSetting49, settingsConsumer50);
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData36, settings41, strPredicate47, indexScopedSettings48);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting53 = null; // flaky: indexSettings52.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher54 = null; // flaky: indexSettings52.getParseFieldMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue55 = null; // flaky: indexSettings52.getFlushThresholdSize();
        org.elasticsearch.common.settings.Settings settings56 = null; // flaky: indexSettings52.nodeSettings;
        boolean boolean57 = false; // flaky: indexSettings52.getdefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int59 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean62 = indexScopedSettings60.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings63.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings66 = indexScopedSettings60.applySettings(settings63);
        java.lang.String str68 = settings63.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings70 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting71 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer72 = null;
        indexScopedSettings70.addSettingsUpdateConsumer(settingsSetting71, settingsConsumer72);
        org.elasticsearch.index.IndexSettings indexSettings74 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData58, settings63, strPredicate69, indexScopedSettings70);
// flaky:         indexSettings74.setMaxResultWindow((int) '4');
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher77 = null; // flaky: indexSettings74.parseFieldMatcher;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting78 = null; // flaky: indexSettings74.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
// flaky:         indexSettings74.setTTLPurgeDisabled(true);
        org.elasticsearch.common.settings.Settings settings81 = null; // flaky: indexSettings74.getSettings();
// flaky:         indexSettings52.settings = settings81;
        java.lang.String[] strArray84 = null; // flaky: settings81.getAsArray("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder85 = null; // flaky: builder29.putArray("index.blocks.write", strArray84);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertNotNull(settingsSetting49);
// flaky:         org.junit.Assert.assertNotNull(strSetting53);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher54);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue55);
// flaky:         org.junit.Assert.assertNotNull(settings56);
// flaky:         org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(indexScopedSettings70);
        org.junit.Assert.assertNotNull(settingsSetting71);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher77);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting78);
// flaky:         org.junit.Assert.assertNotNull(settings81);
// flaky:         org.junit.Assert.assertNotNull(strArray84);
// flaky:         org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test3955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3955");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.unit.TimeValue timeValue26 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setRefreshInterval(timeValue26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        boolean boolean33 = indexScopedSettings29.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        indexScopedSettings29.validate("index.shadow_replicas", settings35);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        org.elasticsearch.index.translog.Translog.Durability durability50 = null;
        indexSettings49.setTranslogDurability(durability50);
        org.elasticsearch.common.unit.TimeValue timeValue52 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings49.setGCDeletes(timeValue52);
        org.elasticsearch.common.settings.Settings settings54 = indexSettings49.settings;
        boolean boolean55 = indexSettings49.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting56 = indexSettings49.getINDEX_TRANSLOG_DURABILITY_SETTING();
        indexSettings49.setMaxRescoreWindow((int) ' ');
        boolean boolean59 = indexSettings49.isIndexUsingShadowReplicas();
        boolean boolean60 = indexSettings49.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.Version version61 = indexSettings49.getIndexVersionCreated();
        boolean boolean62 = indexSettings49.warmerEnabled;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean66 = indexScopedSettings64.isPrivateSetting("index.");
        boolean boolean68 = indexScopedSettings64.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings70.getGroups("index.uuid");
        java.lang.String[] strArray80 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray82 = settings70.getAsArray("", strArray80, (java.lang.Boolean) false);
        indexScopedSettings64.validate("index.shadow_replicas", settings70);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings70);
        boolean boolean86 = indexSettings84.matchesIndexName("");
        long long87 = indexSettings84.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue88 = indexSettings84.getDEFAULT_REFRESH_INTERVAL();
        indexSettings49.refreshInterval = timeValue88;
        indexSettings21.setRefreshInterval(timeValue88);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings91 = indexSettings21.getScopedSettings();
        boolean boolean93 = indexSettings21.matchesIndexName("index.data_path");
        org.elasticsearch.common.settings.Settings settings94 = indexSettings21.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(timeValue52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(durabilitySetting56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 60000L + "'", long87 == 60000L);
        org.junit.Assert.assertNotNull(timeValue88);
        org.junit.Assert.assertNotNull(indexScopedSettings91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(settings94);
    }

    @Test
    public void test3956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3956");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.putNull("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings12.applySettings(settings15);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray26 = settings18.getAsArray("index.version.created", strArray24, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder6.extendArray("index.version.created_string", strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder6.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder29.normalizePrefix("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder29.put("index.data_path", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder29.put("active_allocations", "index.blocks.read");
        java.lang.String str39 = builder37.remove("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#index.version.created_string=5.0.0#");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test3957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3957");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.logging.ESLogger eSLogger28 = indexSettings21.getlogger();
        boolean boolean29 = indexSettings21.isShadowReplicaIndex();
        org.elasticsearch.index.translog.Translog.Durability durability30 = indexSettings21.getdurability();
        int int31 = indexSettings21.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertNotNull(eSLogger28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + durability30 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability30.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
    }

    @Test
    public void test3958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3958");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting18 = null; // flaky: indexSettings16.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability19 = null;
// flaky:         indexSettings16.setTranslogDurability(durability19);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig21 = null; // flaky: indexSettings16.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int23 = indexMetaData22.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings24.applySettings(settings27);
        java.lang.String str32 = settings27.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting35 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer36 = null;
        indexScopedSettings34.addSettingsUpdateConsumer(settingsSetting35, settingsConsumer36);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData22, settings27, strPredicate33, indexScopedSettings34);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting39 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings40 = null; // flaky: indexSettings38.getValue(settingsSetting39);
        org.elasticsearch.common.settings.Settings settings41 = null; // flaky: indexSettings16.getValue(settingsSetting39);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertNotNull(intSetting18);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settingsSetting35);
        org.junit.Assert.assertNotNull(settingsSetting39);
// flaky:         org.junit.Assert.assertNotNull(settings40);
// flaky:         org.junit.Assert.assertNotNull(settings41);
    }

    @Test
    public void test3959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3959");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.excludeFilters();
        java.lang.Object obj2 = null;
        boolean boolean3 = indexMetaData0.equals(obj2);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mappingOrDefault("hi!");
        int int6 = indexMetaData0.getTotalNumberOfShards();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAlias("index.uuid");
        int int11 = builder8.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test3960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3960");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings21.globalCheckpointInterval;
        java.lang.String str27 = indexSettings21.nodeName;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        boolean boolean33 = indexScopedSettings29.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        indexScopedSettings29.validate("index.shadow_replicas", settings35);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        org.elasticsearch.index.translog.Translog.Durability durability50 = null;
        indexSettings49.setTranslogDurability(durability50);
        org.elasticsearch.common.unit.TimeValue timeValue52 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings49.setGCDeletes(timeValue52);
        org.elasticsearch.Version version54 = indexSettings49.version;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting55 = indexSettings49.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig56 = indexSettings49.getMergeSchedulerConfig();
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings49.refreshInterval;
        indexSettings21.setRefreshInterval(timeValue57);
        boolean boolean59 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(timeValue52);
        org.junit.Assert.assertNotNull(version54);
        org.junit.Assert.assertNotNull(booleanSetting55);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig56);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test3961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3961");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder3.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder3.loadFromSource("index.auto_expand_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder3.internalMap();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = builder3.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder3.normalizePrefix("index.blocks.write");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder3.loadFromSource("index.version.upgraded");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test3962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3962");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.numberOfReplicas(1);
        long long29 = builder28.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.numberOfShards((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.numberOfShards((int) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder32.removeAllAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test3963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3963");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        java.lang.String str35 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting36 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = indexSettings21.indexMetaData;
        boolean boolean38 = indexSettings21.warmerEnabled;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting39 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(booleanSetting39);
    }

    @Test
    public void test3964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3964");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher18 = null; // flaky: indexSettings16.getParseFieldMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue19 = null; // flaky: indexSettings16.getFlushThresholdSize();
        org.elasticsearch.common.settings.Settings settings20 = null; // flaky: indexSettings16.nodeSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData21.getState();
        boolean boolean23 = false; // flaky: indexSettings16.updateIndexMetaData(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher18);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue19);
// flaky:         org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test3965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3965");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.unit.TimeValue timeValue17 = null; // flaky: indexSettings16.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue18 = null; // flaky: indexSettings16.getTranslogSyncInterval();
        org.elasticsearch.Version version19 = null; // flaky: indexSettings16.getIndexVersionCreated();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting20 = null; // flaky: indexSettings16.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(timeValue17);
// flaky:         org.junit.Assert.assertNotNull(timeValue18);
// flaky:         org.junit.Assert.assertNotNull(version19);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting20);
    }

    @Test
    public void test3966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3966");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte8 = state7.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.state(state7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int15 = builder14.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings22 = settings20.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings24.getGroups("index.uuid");
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray36 = settings24.getAsArray("", strArray34, (java.lang.Boolean) false);
        java.lang.String[] strArray38 = settings20.getAsArray("index.version.minimum_compatible", strArray34, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder17.settings(settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder17.creationDate((long) 10);
        java.lang.String[] strArray63 = new java.lang.String[] { "index.", "index.version.upgraded_string", "", "index.creation_date", "index.shared_filesystem", "index.auto_expand_replicas", "index.version.upgraded_string", "archived.", "index.uuid", "archived.", "", "index.shared_filesystem.recover_on_any_node", "index.version.created_string", "_na_", "hi!", "index.blocks.read_only", "index.version.created_string", "index.creation_date", "index.version.minimum_compatible", "index.creation_date" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder17.putActiveAllocationIds(10000, (java.util.Set<java.lang.String>) strSet64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder4.putActiveAllocationIds(10000, (java.util.Set<java.lang.String>) strSet64);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state68 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder4.state(state68);
        // The following exception was thrown during execution in test generation
        try {
            long long71 = builder69.primaryTerm((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test3967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3967");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.logging.ESLogger eSLogger28 = indexSettings21.getlogger();
        boolean boolean29 = indexSettings21.isShadowReplicaIndex();
        org.elasticsearch.index.translog.Translog.Durability durability30 = indexSettings21.getdurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        boolean boolean36 = indexScopedSettings32.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        indexScopedSettings32.validate("index.shadow_replicas", settings38);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings38);
        org.elasticsearch.Version version53 = indexMetaData31.getUpgradedVersion();
        indexSettings21.indexMetaData = indexMetaData31;
        long long55 = indexMetaData31.getVersion();
        org.apache.lucene.util.Version version56 = indexMetaData31.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertNotNull(eSLogger28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + durability30 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability30.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(version53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertNull(version56);
    }

    @Test
    public void test3968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3968");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = indexScopedSettings1.applySettings(settings4);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings8.applySettings(settings11);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = settings15.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = settings17.getAsMap();
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings8.applySettings(settings17);
        org.elasticsearch.common.settings.Setting.Property property20 = indexScopedSettings8.getScope();
        java.util.function.Predicate<java.lang.String> strPredicate21 = indexScopedSettings8.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.isPrivateSetting("index.");
        boolean boolean26 = indexScopedSettings22.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        indexScopedSettings22.validate("index.shadow_replicas", settings28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings42.applySettings(settings45);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings42.applySettings(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = indexScopedSettings22.copy(settings50, indexMetaData51);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean55 = indexScopedSettings53.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings56.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings53.applySettings(settings56);
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings53.applySettings(settings60);
        indexScopedSettings22.validate(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate21, indexScopedSettings22);
        int int64 = 0; // flaky: indexSettings63.getNumberOfReplicas();
        java.lang.String str65 = null; // flaky: indexSettings63.defaultField;
        java.util.function.Predicate<java.lang.String> strPredicate66 = null; // flaky: indexSettings63.indexNameMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + property20 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property20.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "_all" + "'", str65, "_all");
// flaky:         org.junit.Assert.assertNotNull(strPredicate66);
    }

    @Test
    public void test3969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3969");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting28 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        indexSettings21.warmerEnabled = false;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher31 = indexSettings21.getParseFieldMatcher();
        boolean boolean32 = indexSettings21.warmerEnabled;
        org.elasticsearch.common.unit.TimeValue timeValue33 = indexSettings21.refreshInterval;
        boolean boolean34 = indexSettings21.queryStringAllowLeadingWildcard;
        boolean boolean35 = indexSettings21.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(durabilitySetting28);
        org.junit.Assert.assertNotNull(parseFieldMatcher31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(timeValue33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test3970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3970");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        boolean boolean24 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.globalCheckpointInterval;
        boolean boolean26 = indexSettings21.isOnSharedFilesystem();
        boolean boolean27 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = indexSettings21.scopedSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
    }

    @Test
    public void test3971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3971");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData0.mappingOrDefault("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters27 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData29 = indexMetaData0.mapping("index.number_of_replicas");
        org.elasticsearch.common.xcontent.XContentParser xContentParser30 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        boolean boolean36 = indexScopedSettings32.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        indexScopedSettings32.validate("index.shadow_replicas", settings38);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings38);
        indexSettings52.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue55 = indexSettings52.getsyncInterval();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig56 = indexSettings52.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting57 = indexSettings52.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        boolean boolean58 = indexSettings52.getisShadowReplicaIndex();
        indexSettings52.setwarmerEnabled(false);
        org.elasticsearch.common.unit.TimeValue timeValue61 = indexSettings52.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting62 = indexSettings52.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher63 = indexSettings52.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexMetaData0.fromXContent(xContentParser30, parseFieldMatcher63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(discoveryNodeFilters27);
        org.junit.Assert.assertNull(mappingMetaData29);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertNotNull(mergePolicyConfig56);
        org.junit.Assert.assertNotNull(booleanSetting57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNotNull(strSetting62);
        org.junit.Assert.assertNotNull(parseFieldMatcher63);
    }

    @Test
    public void test3972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3972");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder1.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("index.version.created");
        long long7 = builder6.version();
        long long8 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.version((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder6.creationDate(1000L);
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.uuid", 0L);
        java.lang.String str18 = builder16.get("");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("hi!");
        java.lang.String str23 = builder21.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder21.put("index.shared_filesystem.recover_on_any_node", (double) 10000L);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        boolean boolean33 = indexScopedSettings29.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        indexScopedSettings29.validate("index.shadow_replicas", settings35);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = indexSettings49.scopedSettings;
        org.elasticsearch.common.settings.Settings settings51 = indexSettings49.nodeSettings;
        indexSettings49.maxRescoreWindow = 0;
        boolean boolean54 = indexSettings49.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings55 = indexSettings49.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting56 = indexSettings49.getQUERY_STRING_LENIENT_SETTING();
        java.lang.Class<?> wildcardClass57 = indexSettings49.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder26.put("index.auto_expand_replicas", (java.lang.Class) wildcardClass57);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder6.settings(builder58);
        java.nio.file.Path path60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.loadFromPath(path60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(booleanSetting56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test3973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3973");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        boolean boolean26 = indexSettings21.isDefaultAllowUnmappedFields();
        java.lang.String str27 = indexSettings21.customDataPath();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = indexSettings21.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int30 = indexMetaData29.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings31.applySettings(settings34);
        java.lang.String str39 = settings34.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting42 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer43 = null;
        indexScopedSettings41.addSettingsUpdateConsumer(settingsSetting42, settingsConsumer43);
        org.elasticsearch.index.IndexSettings indexSettings45 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData29, settings34, strPredicate40, indexScopedSettings41);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting46 = null; // flaky: indexSettings45.getINDEX_CHECK_ON_STARTUP();
        boolean boolean47 = false; // flaky: indexSettings45.queryStringAllowLeadingWildcard;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig48 = null; // flaky: indexSettings45.mergeSchedulerConfig;
        org.elasticsearch.common.unit.TimeValue timeValue49 = null; // flaky: indexSettings45.getTranslogSyncInterval();
// flaky:         indexSettings21.setGCDeletes(timeValue49);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertNotNull(settingsSetting42);
// flaky:         org.junit.Assert.assertNotNull(strSetting46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig48);
// flaky:         org.junit.Assert.assertNotNull(timeValue49);
    }

    @Test
    public void test3974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3974");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getValue(settingsSetting17);
        int int19 = 0; // flaky: indexSettings16.numberOfShards;
        org.elasticsearch.common.logging.ESLogger eSLogger20 = null; // flaky: indexSettings16.logger;
        org.elasticsearch.common.settings.Settings settings21 = null; // flaky: indexSettings16.getSettings();
        int int22 = 0; // flaky: indexSettings16.maxResultWindow;
        java.lang.String str23 = null; // flaky: indexSettings16.nodeName;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting24 = null; // flaky: indexSettings16.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings25.applySettings(settings28);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.applySettings(settings32);
        boolean boolean35 = indexScopedSettings25.isPrivateSetting("index.version.upgraded");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting37 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer38 = null;
        indexScopedSettings36.addSettingsUpdateConsumer(settingsSetting37, settingsConsumer38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean42 = indexScopedSettings40.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings40.applySettings(settings43);
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings49 = settings47.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap50 = settings49.getAsMap();
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings40.applySettings(settings49);
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings36.dryRun(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int54 = indexMetaData53.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean57 = indexScopedSettings55.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings55.applySettings(settings58);
        java.lang.String str63 = settings58.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate64 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting66 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings65.addSettingsUpdateConsumer(settingsSetting66, settingsConsumer67);
        org.elasticsearch.index.IndexSettings indexSettings69 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData53, settings58, strPredicate64, indexScopedSettings65);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting70 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings71 = null; // flaky: indexSettings69.getValue(settingsSetting70);
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings36.get(settingsSetting70);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer73 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting70, settingsConsumer73);
        org.elasticsearch.common.settings.Settings settings75 = null; // flaky: indexSettings16.getValue(settingsSetting70);
        org.elasticsearch.common.settings.Settings settings76 = null; // flaky: indexSettings16.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(settingsSetting17);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertNotNull(eSLogger20);
// flaky:         org.junit.Assert.assertNotNull(settings21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertNotNull(settingsSetting37);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertNotNull(settingsSetting66);
        org.junit.Assert.assertNotNull(settingsSetting70);
// flaky:         org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
// flaky:         org.junit.Assert.assertNotNull(settings75);
// flaky:         org.junit.Assert.assertNotNull(settings76);
    }

    @Test
    public void test3975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3975");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.maxResultWindow;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getNodeSettings();
        int int19 = 0; // flaky: indexSettings16.maxRescoreWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
    }

    @Test
    public void test3976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3976");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig25 = indexSettings21.mergeSchedulerConfig;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher26 = indexSettings21.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.getsyncInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting28 = indexSettings21.getMAX_RESULT_WINDOW_SETTING();
        int int29 = indexSettings21.getMaxRescoreWindow();
        boolean boolean30 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue31 = indexSettings21.syncInterval;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig32 = indexSettings21.mergeSchedulerConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig25);
        org.junit.Assert.assertNotNull(parseFieldMatcher26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(intSetting28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig32);
    }

    @Test
    public void test3977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3977");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("index.uuid", 0L);
        java.lang.String str24 = builder22.get("");
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings34 = settings30.getAsSettings("");
        java.lang.Boolean boolean37 = settings34.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue39 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue40 = settings34.getAsBytesSize("index.", byteSizeValue39);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = null;
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings42.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings46 = settings42.getAsSettings("");
        java.lang.Boolean boolean49 = settings46.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue52 = settings46.getAsBytesSize("index.", byteSizeValue51);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params54 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = settings46.toXContent(xContentBuilder53, params54);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = settings34.toXContent(xContentBuilder41, params54);
        java.lang.Class<?> wildcardClass57 = settings34.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder28.put("index.version.upgraded_string", (java.lang.Class) wildcardClass57);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder17.put("_all", (java.lang.Class) wildcardClass57);
        java.lang.String[] strArray65 = new java.lang.String[] { "index.creation_date", "index.blocks.read_only", "index.shared_filesystem", "index.uuid" };
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder59.putArray("index.version.upgraded", strArray65);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder59.put("archived.", (int) ' ');
        java.lang.String str71 = builder59.remove("index.version.created");
        java.nio.file.Path path72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder73 = builder59.loadFromPath(path72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + boolean37 + "' != '" + true + "'", boolean37, true);
        org.junit.Assert.assertNull(byteSizeValue40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertEquals("'" + boolean49 + "' != '" + true + "'", boolean49, true);
        org.junit.Assert.assertNull(byteSizeValue52);
        org.junit.Assert.assertNotNull(params54);
        org.junit.Assert.assertNull(xContentBuilder55);
        org.junit.Assert.assertNull(xContentBuilder56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test3978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3978");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig25 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        indexSettings21.setMaxResultWindow((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = indexSettings21.indexMetaData;
        indexSettings21.setMaxResultWindow((int) (byte) 0);
        int int32 = indexSettings21.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicyConfig25);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10000 + "'", int32 == 10000);
    }

    @Test
    public void test3979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3979");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
// flaky:         indexSettings16.gcDeletesInMillis = (-1L);
// flaky:         indexSettings16.TTLPurgeDisabled = true;
        boolean boolean22 = false; // flaky: indexSettings16.warmerEnabled;
        org.elasticsearch.common.unit.TimeValue timeValue23 = null; // flaky: indexSettings16.getRefreshInterval();
        long long24 = 0L; // flaky: indexSettings16.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertNotNull(timeValue23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    }

    @Test
    public void test3980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3980");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        int int18 = 0; // flaky: indexSettings16.getMaxRescoreWindow();
        org.elasticsearch.common.settings.Settings settings19 = null; // flaky: indexSettings16.getSettings();
// flaky:         indexSettings16.TTLPurgeDisabled = true;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null; // flaky: indexSettings16.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = null; // flaky: indexSettings16.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings24 = null; // flaky: indexMetaData23.getSettings();
        java.lang.String str26 = null; // flaky: settings24.get("index.blocks.metadata");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
// flaky:         org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNull(strPredicate22);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData23);
// flaky:         org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test3981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3981");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = indexSettings21.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue31 = indexSettings21.getsyncInterval();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings32.applySettings(settings35);
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings41 = settings39.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = settings41.getAsMap();
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings32.applySettings(settings41);
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings47 = settings45.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = settings47.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean53 = indexScopedSettings51.isPrivateSetting("index.");
        boolean boolean55 = indexScopedSettings51.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap59 = settings57.getGroups("index.uuid");
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray69 = settings57.getAsArray("", strArray67, (java.lang.Boolean) false);
        indexScopedSettings51.validate("index.shadow_replicas", settings57);
        org.elasticsearch.index.IndexSettings indexSettings71 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings57);
        boolean boolean73 = indexSettings71.matchesIndexName("");
        long long74 = indexSettings71.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = indexSettings71.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue76 = settings47.getAsBytesSize("primary_terms", byteSizeValue75);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue77 = settings41.getAsBytesSize("index.priority", byteSizeValue75);
        indexSettings21.flushThresholdSize = byteSizeValue77;
        boolean boolean79 = indexSettings21.queryStringAnalyzeWildcard;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings80 = indexSettings21.scopedSettings;
        java.lang.String str81 = indexScopedSettings80.nodeName();
        boolean boolean83 = indexScopedSettings80.isPrivateSetting("5000099");
        boolean boolean85 = indexScopedSettings80.isPrivateSetting("index.data_path");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(booleanSetting30);
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 60000L + "'", long74 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue75);
        org.junit.Assert.assertNotNull(byteSizeValue76);
        org.junit.Assert.assertNotNull(byteSizeValue77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test3982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3982");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings20.applySettings(settings23);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.applySettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexScopedSettings0.copy(settings28, indexMetaData29);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData32 = indexMetaData29.mappingOrDefault("index.version.minimum_compatible");
        int int33 = indexMetaData29.getNumberOfShards();
        java.lang.String str34 = indexMetaData29.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData29);
        long long36 = indexMetaData29.getCreationDate();
        java.lang.String str37 = indexMetaData29.getIndexUUID();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNull(mappingMetaData32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "_na_" + "'", str34, "_na_");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "_na_" + "'", str37, "_na_");
    }

    @Test
    public void test3983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3983");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        int int26 = indexSettings21.getNumberOfShards();
        long long27 = indexSettings21.gcDeletesInMillis;
        boolean boolean28 = indexSettings21.isWarmerEnabled();
        boolean boolean29 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig30 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.common.unit.TimeValue timeValue31 = indexSettings21.getTranslogSyncInterval();
        int int32 = indexSettings21.maxRescoreWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 60000L + "'", long27 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig30);
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10000 + "'", int32 == 10000);
    }

    @Test
    public void test3984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3984");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = indexScopedSettings1.applySettings(settings4);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings8.applySettings(settings11);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = settings15.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = settings17.getAsMap();
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings8.applySettings(settings17);
        org.elasticsearch.common.settings.Setting.Property property20 = indexScopedSettings8.getScope();
        java.util.function.Predicate<java.lang.String> strPredicate21 = indexScopedSettings8.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.isPrivateSetting("index.");
        boolean boolean26 = indexScopedSettings22.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        indexScopedSettings22.validate("index.shadow_replicas", settings28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings42.applySettings(settings45);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings42.applySettings(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = indexScopedSettings22.copy(settings50, indexMetaData51);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean55 = indexScopedSettings53.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings56.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings53.applySettings(settings56);
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings53.applySettings(settings60);
        indexScopedSettings22.validate(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate21, indexScopedSettings22);
        boolean boolean64 = false; // flaky: indexSettings63.getwarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = null; // flaky: indexSettings63.indexMetaData;
        int int66 = 0; // flaky: indexSettings63.maxResultWindow;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting67 = null; // flaky: indexSettings63.getINDEX_GC_DELETES_SETTING();
        boolean boolean68 = false; // flaky: indexSettings63.queryStringAnalyzeWildcard;
        org.elasticsearch.common.unit.TimeValue timeValue69 = null; // flaky: indexSettings63.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + property20 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property20.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10000 + "'", int66 == 10000);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
// flaky:         org.junit.Assert.assertNotNull(timeValue69);
    }

    @Test
    public void test3985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3985");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.excludeFilters();
        java.lang.Object obj2 = null;
        boolean boolean3 = indexMetaData0.equals(obj2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.state(state6);
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.uuid", 0L);
        java.lang.String str13 = builder11.get("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings19.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings23 = settings19.getAsSettings("");
        java.lang.Boolean boolean26 = settings23.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue28 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue29 = settings23.getAsBytesSize("index.", byteSizeValue28);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = null;
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings35 = settings31.getAsSettings("");
        java.lang.Boolean boolean38 = settings35.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue40 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue41 = settings35.getAsBytesSize("index.", byteSizeValue40);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder42 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params43 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = settings35.toXContent(xContentBuilder42, params43);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder45 = settings23.toXContent(xContentBuilder30, params43);
        java.lang.Class<?> wildcardClass46 = settings23.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder17.put("index.version.upgraded_string", (java.lang.Class) wildcardClass46);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder17.put("index.shared_filesystem.recover_on_any_node", (long) 'a');
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("_na_", (long) 10000);
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder53.put("index.version.minimum_compatible", "index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder5.settings(builder57);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder58.numberOfReplicas((int) '4');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertEquals("'" + boolean26 + "' != '" + true + "'", boolean26, true);
        org.junit.Assert.assertNull(byteSizeValue29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertEquals("'" + boolean38 + "' != '" + true + "'", boolean38, true);
        org.junit.Assert.assertNull(byteSizeValue41);
        org.junit.Assert.assertNotNull(params43);
        org.junit.Assert.assertNull(xContentBuilder44);
        org.junit.Assert.assertNull(xContentBuilder45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test3986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3986");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder3.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder3.loadFromSource("index.auto_expand_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder3.internalMap();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = builder3.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = settings24.getAsSettings("hi!");
        java.lang.Boolean boolean29 = settings24.getAsBoolean("index.shared_filesystem.recover_on_any_node", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings24.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings39);
        indexSettings53.setEnableWarmer(true);
        java.lang.String str56 = indexSettings53.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = indexSettings53.getIndexMetaData();
        java.lang.String str58 = indexSettings53.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy59 = indexSettings53.getMergePolicy();
        org.elasticsearch.common.logging.ESLogger eSLogger60 = indexSettings53.getlogger();
        org.elasticsearch.common.settings.Settings settings61 = indexSettings53.getSettings();
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings63.getGroups("index.uuid");
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray75 = settings63.getAsArray("", strArray73, (java.lang.Boolean) false);
        java.lang.String[] strArray76 = settings61.getAsArray("index.blocks.write", strArray73);
        java.lang.String[] strArray78 = settings24.getAsArray("_all", strArray73, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder3.extendArray("", strArray78);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder81 = builder3.put(objDictionary80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertEquals("'" + boolean29 + "' != '" + true + "'", boolean29, true);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(mergePolicy59);
        org.junit.Assert.assertNotNull(eSLogger60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test3987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3987");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean25 = indexSettings21.getqueryStringAnalyzeWildcard();
        boolean boolean26 = indexSettings21.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings27.applySettings(settings30);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = settings34.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = settings36.getAsMap();
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings27.applySettings(settings36);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = settings40.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = settings42.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean48 = indexScopedSettings46.isPrivateSetting("index.");
        boolean boolean50 = indexScopedSettings46.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings52.getGroups("index.uuid");
        java.lang.String[] strArray62 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray64 = settings52.getAsArray("", strArray62, (java.lang.Boolean) false);
        indexScopedSettings46.validate("index.shadow_replicas", settings52);
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings52);
        boolean boolean68 = indexSettings66.matchesIndexName("");
        long long69 = indexSettings66.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue70 = indexSettings66.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue71 = settings42.getAsBytesSize("primary_terms", byteSizeValue70);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue72 = settings36.getAsBytesSize("index.priority", byteSizeValue70);
        indexSettings21.setTranslogFlushThresholdSize(byteSizeValue70);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings74 = indexSettings21.scopedSettings;
        indexSettings21.setTTLPurgeDisabled(true);
        boolean boolean77 = indexSettings21.getqueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 60000L + "'", long69 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue70);
        org.junit.Assert.assertNotNull(byteSizeValue71);
        org.junit.Assert.assertNotNull(byteSizeValue72);
        org.junit.Assert.assertNotNull(indexScopedSettings74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test3988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3988");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings20.applySettings(settings23);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.applySettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexScopedSettings0.copy(settings28, indexMetaData29);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings31.applySettings(settings34);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings31.applySettings(settings38);
        indexScopedSettings0.validate(settings39);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting41 = org.elasticsearch.index.IndexSettings.INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING;
        indexScopedSettings0.validateSettingKey((org.elasticsearch.common.settings.Setting) byteSizeValueSetting41);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean46 = indexScopedSettings44.isPrivateSetting("index.");
        boolean boolean48 = indexScopedSettings44.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray62 = settings50.getAsArray("", strArray60, (java.lang.Boolean) false);
        indexScopedSettings44.validate("index.shadow_replicas", settings50);
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings50);
        boolean boolean66 = indexSettings64.matchesIndexName("");
        long long67 = indexSettings64.getGcDeletesInMillis();
        boolean boolean68 = indexSettings64.queryStringAnalyzeWildcard;
        org.elasticsearch.common.settings.Settings settings69 = indexSettings64.getNodeSettings();
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings0.applySettings(settings69);
        org.elasticsearch.common.settings.Settings settings72 = settings69.getByPrefix("0");
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings72);
        java.util.Map<java.lang.String, java.lang.String> strMap74 = settings72.getAsMap();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(byteSizeValueSetting41);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 60000L + "'", long67 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(strMap74);
    }

    @Test
    public void test3989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3989");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("archived.", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.version.minimum_compatible", (float) '#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test3990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3990");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = indexSettings21.indexMetaData;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig36 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting37 = indexSettings21.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue38 = indexSettings21.getsyncInterval();
        indexSettings21.TTLPurgeDisabled = true;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.isPrivateSetting("index.");
        boolean boolean46 = indexScopedSettings42.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings48.getGroups("index.uuid");
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray60 = settings48.getAsArray("", strArray58, (java.lang.Boolean) false);
        indexScopedSettings42.validate("index.shadow_replicas", settings48);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings48);
        boolean boolean64 = indexSettings62.matchesIndexName("");
        long long65 = indexSettings62.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue66 = indexSettings62.getGlobalCheckpointInterval();
        org.elasticsearch.index.translog.Translog.Durability durability67 = indexSettings62.getTranslogDurability();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting68 = indexSettings62.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int70 = indexMetaData69.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings71 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean73 = indexScopedSettings71.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap76 = settings74.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings77 = indexScopedSettings71.applySettings(settings74);
        java.lang.String str79 = settings74.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate80 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings81 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting82 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer83 = null;
        indexScopedSettings81.addSettingsUpdateConsumer(settingsSetting82, settingsConsumer83);
        org.elasticsearch.index.IndexSettings indexSettings85 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData69, settings74, strPredicate80, indexScopedSettings81);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting86 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings87 = null; // flaky: indexSettings85.getValue(settingsSetting86);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting88 = null; // flaky: indexSettings85.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        boolean boolean89 = false; // flaky: indexSettings85.getqueryStringLenient();
        org.elasticsearch.common.unit.TimeValue timeValue90 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
// flaky:         indexSettings85.setRefreshInterval(timeValue90);
        org.elasticsearch.index.translog.Translog.Durability durability92 = null; // flaky: indexSettings85.getdurability();
        indexSettings62.durability = durability92;
        indexSettings21.setTranslogDurability(durability92);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(mergePolicyConfig36);
        org.junit.Assert.assertNotNull(timeValueSetting37);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 60000L + "'", long65 == 60000L);
        org.junit.Assert.assertNotNull(timeValue66);
        org.junit.Assert.assertTrue("'" + durability67 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability67.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(byteSizeValueSetting68);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(indexScopedSettings81);
        org.junit.Assert.assertNotNull(settingsSetting82);
        org.junit.Assert.assertNotNull(settingsSetting86);
// flaky:         org.junit.Assert.assertNotNull(settings87);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(timeValue90);
// flaky:         org.junit.Assert.assertTrue("'" + durability92 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability92.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test3991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3991");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap25 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.putAlias(aliasMetaData27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
    }

    @Test
    public void test3992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3992");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder6.put("index.version.created", (long) (short) 10);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray24 = settings12.getAsArray("", strArray22, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder11.put((java.lang.Object[]) strArray24);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder11.put("primary_terms", (double) 10L);
        java.nio.file.Path path29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.loadFromPath(path29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test3993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3993");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        boolean boolean25 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig26 = indexSettings21.getmergePolicyConfig();
        boolean boolean27 = indexSettings21.defaultAllowUnmappedFields;
        boolean boolean28 = indexSettings21.isShadowReplicaIndex;
        java.util.function.Predicate<java.lang.String> strPredicate29 = indexSettings21.indexNameMatcher;
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings32 = settings30.getAsSettings("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int35 = indexMetaData34.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean38 = indexScopedSettings36.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings36.applySettings(settings39);
        java.lang.String str44 = settings39.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting47 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer48 = null;
        indexScopedSettings46.addSettingsUpdateConsumer(settingsSetting47, settingsConsumer48);
        org.elasticsearch.index.IndexSettings indexSettings50 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData34, settings39, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting51 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings52 = null; // flaky: indexSettings50.getValue(settingsSetting51);
        org.elasticsearch.common.unit.TimeValue timeValue53 = null; // flaky: indexSettings50.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue54 = settings30.getAsTime("hi!", timeValue53);
        indexSettings21.setRefreshInterval(timeValue54);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertNotNull(settingsSetting47);
        org.junit.Assert.assertNotNull(settingsSetting51);
// flaky:         org.junit.Assert.assertNotNull(settings52);
// flaky:         org.junit.Assert.assertNotNull(timeValue53);
// flaky:         org.junit.Assert.assertNotNull(timeValue54);
    }

    @Test
    public void test3994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3994");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        boolean boolean19 = indexScopedSettings15.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings21.getGroups("index.uuid");
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray33 = settings21.getAsArray("", strArray31, (java.lang.Boolean) false);
        indexScopedSettings15.validate("index.shadow_replicas", settings21);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings21);
        org.elasticsearch.index.translog.Translog.Durability durability36 = null;
        indexSettings35.setTranslogDurability(durability36);
        org.elasticsearch.common.unit.TimeValue timeValue38 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings35.setGCDeletes(timeValue38);
        org.elasticsearch.Version version40 = indexSettings35.version;
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder8.put("active_allocations", version40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray47 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder43.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList48);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder41.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList48);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder41.loadFromSource("index.number_of_shards");
        java.lang.String str55 = builder41.remove("");
        java.util.concurrent.TimeUnit timeUnit58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder59 = builder41.put("", (long) 32, timeUnit58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(version40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test3995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3995");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig25 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig27 = indexSettings21.mergePolicyConfig;
        java.lang.String str28 = indexSettings21.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings21.getsyncInterval();
        boolean boolean30 = indexSettings21.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicyConfig25);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertNotNull(mergePolicyConfig27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test3996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3996");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap25 = indexMetaData0.getActiveAllocationIds();
        int int26 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test3997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3997");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting28 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertNotNull(booleanSetting28);
    }

    @Test
    public void test3998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3998");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("archived.", false);
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue33 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue34 = settings29.getAsBytesSize("index.auto_expand_replicas", byteSizeValue33);
        boolean boolean35 = settings29.isEmpty();
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = settings29.getAsStructuredMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting38 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer39 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting38, settingsConsumer39);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting42 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer43 = null;
        indexScopedSettings41.addSettingsUpdateConsumer(settingsSetting42, settingsConsumer43);
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings37.get(settingsSetting42);
        boolean boolean47 = indexScopedSettings37.hasDynamicSetting("archived.");
        java.util.function.Predicate<java.lang.String> strPredicate48 = indexScopedSettings37.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.Settings settings49 = settings29.filter(strPredicate48);
        org.elasticsearch.common.settings.Settings settings50 = settings25.filter(strPredicate48);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(byteSizeValue34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertNotNull(settingsSetting38);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertNotNull(settingsSetting42);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strPredicate48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
    }

    @Test
    public void test3999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3999");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        boolean boolean25 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig26 = indexSettings21.getmergePolicyConfig();
        boolean boolean27 = indexSettings21.defaultAllowUnmappedFields;
        boolean boolean28 = indexSettings21.isShadowReplicaIndex;
        boolean boolean29 = indexSettings21.queryStringLenient;
        boolean boolean31 = indexSettings21.matchesIndexName("index.creation_date_string");
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue32 = indexSettings21.flushThresholdSize;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteSizeValue32);
    }

    @Test
    public void test4000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test4000");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder1.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("index.version.created");
        long long7 = builder6.version();
        long long8 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.version((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder6.creationDate(1000L);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = builder6.mapping("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(mappingMetaData14);
    }
}
