import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test5001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5001");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        boolean boolean23 = indexSettings21.isIndexUsingShadowReplicas();
        boolean boolean24 = indexSettings21.queryStringAllowLeadingWildcard;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.indexMetaData;
        boolean boolean26 = indexSettings21.getisShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(booleanSetting27);
    }

    @Test
    public void test5002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5002");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings19 = settings17.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings21.getGroups("index.uuid");
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray33 = settings21.getAsArray("", strArray31, (java.lang.Boolean) false);
        java.lang.String[] strArray35 = settings17.getAsArray("index.version.minimum_compatible", strArray31, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder3.extendArray("", strArray35);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("index.shadow_replicas", 1.0f);
        java.util.Map<java.lang.String, java.lang.String> strMap40 = builder39.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strMap40);
    }

    @Test
    public void test5003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5003");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        int int7 = builder4.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.index("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int14 = builder13.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = builder13.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder13.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.index("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        byte byte22 = state21.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder18.state(state21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder11.state(state21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder24.numberOfShards((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 1 + "'", byte22 == (byte) 1);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test5004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5004");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder3.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("index.uuid", 0L);
        java.lang.String str24 = builder22.get("");
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder25.putNull("hi!");
        java.lang.String str29 = builder27.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder27.put("_na_", (double) 1);
        java.lang.String[] strArray51 = new java.lang.String[] { "index.blocks.write", "index.blocks.read_only", "state-", "index.shared_filesystem", "index.version.created_string", "1.0", "index.number_of_replicas", "5000099", "index.uuid", "index.blocks.write", "index.priority", "", "1", "", "1.0" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder34.putArray("index.data_path", (java.util.List<java.lang.String>) strList52);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder3.putArray("index.shadow_replicas", (java.util.List<java.lang.String>) strList52);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = builder3.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strMap56);
    }

    @Test
    public void test5005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5005");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.Version version26 = indexSettings21.version;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig28 = indexSettings21.getMergeSchedulerConfig();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings21.refreshInterval;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher30 = indexSettings21.getParseFieldMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue31 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings39);
        indexSettings53.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexSettings53.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting57 = indexSettings53.getMAX_RESULT_WINDOW_SETTING();
        int int58 = indexSettings53.getMaxResultWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = indexSettings53.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue60 = indexSettings53.refreshInterval;
        indexSettings21.setRefreshInterval(timeValue60);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig28);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(parseFieldMatcher30);
        org.junit.Assert.assertNotNull(byteSizeValue31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertNotNull(intSetting57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10000 + "'", int58 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue59);
        org.junit.Assert.assertNotNull(timeValue60);
    }

    @Test
    public void test5006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5006");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.warmerEnabled;
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.getNodeSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int28 = indexMetaData27.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings29.applySettings(settings32);
        java.lang.String str37 = settings32.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting40 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer41 = null;
        indexScopedSettings39.addSettingsUpdateConsumer(settingsSetting40, settingsConsumer41);
        org.elasticsearch.index.IndexSettings indexSettings43 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32, strPredicate38, indexScopedSettings39);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting44 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings45 = null; // flaky: indexSettings43.getValue(settingsSetting44);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting46 = null; // flaky: indexSettings43.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.isPrivateSetting("index.");
        boolean boolean52 = indexScopedSettings48.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings54.getGroups("index.uuid");
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray66 = settings54.getAsArray("", strArray64, (java.lang.Boolean) false);
        indexScopedSettings48.validate("index.shadow_replicas", settings54);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings54);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting69 = indexSettings68.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability70 = indexSettings68.durability;
// flaky:         indexSettings43.setdurability(durability70);
        indexSettings21.durability = durability70;
        org.elasticsearch.Version version73 = indexSettings21.getversion();
        boolean boolean74 = indexSettings21.getisShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings75 = indexSettings21.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertNotNull(settingsSetting40);
        org.junit.Assert.assertNotNull(settingsSetting44);
// flaky:         org.junit.Assert.assertNotNull(settings45);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(timeValueSetting69);
        org.junit.Assert.assertTrue("'" + durability70 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability70.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(version73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(settings75);
    }

    @Test
    public void test5007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5007");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("1");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test5008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5008");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue73 = indexSettings21.syncInterval;
        boolean boolean74 = indexSettings21.isQueryStringLenient();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings75 = indexSettings21.getScopedSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertNotNull(timeValue73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings75);
    }

    @Test
    public void test5009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5009");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings15 = settings11.getAsSettings("");
        java.lang.Boolean boolean18 = settings15.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue20 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue21 = settings15.getAsBytesSize("index.", byteSizeValue20);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = null;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings27 = settings23.getAsSettings("");
        java.lang.Boolean boolean30 = settings27.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue32 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue33 = settings27.getAsBytesSize("index.", byteSizeValue32);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params35 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings27.toXContent(xContentBuilder34, params35);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = settings15.toXContent(xContentBuilder22, params35);
        java.lang.Class<?> wildcardClass38 = settings15.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder9.put("index.version.upgraded_string", (java.lang.Class) wildcardClass38);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder9.put("index.shared_filesystem.recover_on_any_node", (long) 'a');
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("_na_", (long) 10000);
        java.util.Map<java.lang.String, java.lang.String> strMap46 = builder45.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder45.put("index.version.minimum_compatible", "index.");
        org.elasticsearch.common.settings.Settings settings50 = builder49.build();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder49.put("hi!", (double) 10000L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertEquals("'" + boolean18 + "' != '" + true + "'", boolean18, true);
        org.junit.Assert.assertNull(byteSizeValue21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + true + "'", boolean30, true);
        org.junit.Assert.assertNull(byteSizeValue33);
        org.junit.Assert.assertNotNull(params35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNull(xContentBuilder37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test5010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5010");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.Version version26 = indexSettings21.version;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int28 = indexMetaData27.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings29.applySettings(settings32);
        java.lang.String str37 = settings32.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting40 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer41 = null;
        indexScopedSettings39.addSettingsUpdateConsumer(settingsSetting40, settingsConsumer41);
        org.elasticsearch.index.IndexSettings indexSettings43 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32, strPredicate38, indexScopedSettings39);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting44 = null; // flaky: indexSettings43.getINDEX_CHECK_ON_STARTUP();
// flaky:         indexSettings43.gcDeletesInMillis = (-1L);
// flaky:         indexSettings43.TTLPurgeDisabled = true;
        int int49 = 0; // flaky: indexSettings43.getMaxRescoreWindow();
        org.elasticsearch.index.translog.Translog.Durability durability50 = null; // flaky: indexSettings43.getdurability();
        indexSettings21.setTranslogDurability(durability50);
        org.elasticsearch.Version version52 = indexSettings21.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertNotNull(settingsSetting40);
// flaky:         org.junit.Assert.assertNotNull(strSetting44);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10000 + "'", int49 == 10000);
// flaky:         org.junit.Assert.assertTrue("'" + durability50 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability50.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(version52);
    }

    @Test
    public void test5011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5011");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder4.settings(settings27);
        java.lang.String str42 = settings27.get("index.shadow_replicas");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue45 = settings27.getAsMemory("0", "1");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [0] with value [1] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test5012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5012");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig25 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        boolean boolean27 = indexSettings21.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicyConfig25);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test5013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5013");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting5 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer6 = null;
        indexScopedSettings4.addSettingsUpdateConsumer(settingsSetting5, settingsConsumer6);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.get(settingsSetting5);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings9.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings9.getAsSettings("");
        java.lang.Boolean boolean16 = settings13.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue19 = settings13.getAsBytesSize("index.", byteSizeValue18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings13.toXContent(xContentBuilder20, params21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.isPrivateSetting("index.");
        boolean boolean28 = indexScopedSettings24.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray42 = settings30.getAsArray("", strArray40, (java.lang.Boolean) false);
        indexScopedSettings24.validate("index.shadow_replicas", settings30);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings30);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap45 = indexMetaData23.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData23.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters47 = indexMetaData23.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.isPrivateSetting("index.");
        boolean boolean53 = indexScopedSettings49.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.uuid");
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray67 = settings55.getAsArray("", strArray65, (java.lang.Boolean) false);
        indexScopedSettings49.validate("index.shadow_replicas", settings55);
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings55);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting70 = indexSettings69.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters72 = indexMetaData71.includeFilters();
        indexSettings69.indexMetaData = indexMetaData71;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData71);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData71.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff76 = indexMetaData23.diff(indexMetaData71);
        boolean boolean78 = indexMetaData71.isSameUUID("index.version.minimum_compatible");
        org.elasticsearch.Version version79 = indexMetaData71.getCreationVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings80 = indexScopedSettings0.copy(settings13, indexMetaData71);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData82 = indexMetaData71.mappingOrDefault("index.blocks.read");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters83 = indexMetaData71.requireFilters();
        boolean boolean85 = indexMetaData71.isSameUUID("index.data_path");
        org.elasticsearch.Version version86 = indexMetaData71.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settingsSetting5);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + true + "'", boolean16, true);
        org.junit.Assert.assertNull(byteSizeValue19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strImmutableOpenMap45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNull(discoveryNodeFilters47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(booleanSetting70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNull(discoveryNodeFilters72);
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertNotNull(indexMetaDataDiff76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(version79);
        org.junit.Assert.assertNotNull(indexScopedSettings80);
        org.junit.Assert.assertNull(mappingMetaData82);
        org.junit.Assert.assertNull(discoveryNodeFilters83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(version86);
    }

    @Test
    public void test5014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5014");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        java.lang.String str2 = builder1.index();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.number_of_replicas" + "'", str2, "index.number_of_replicas");
    }

    @Test
    public void test5015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5015");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher18 = null; // flaky: indexSettings16.getParseFieldMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue19 = null; // flaky: indexSettings16.getFlushThresholdSize();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.isPrivateSetting("index.");
        boolean boolean25 = indexScopedSettings21.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        indexScopedSettings21.validate("index.shadow_replicas", settings27);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings27);
        org.elasticsearch.common.settings.Settings settings42 = indexSettings41.getSettings();
        indexSettings41.maxResultWindow = (short) -1;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig45 = indexSettings41.mergeSchedulerConfig;
        boolean boolean46 = indexSettings41.isShadowReplicaIndex;
        indexSettings41.setMaxRescoreWindow((int) (byte) 0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue49 = indexSettings41.getFlushThresholdSize();
// flaky:         indexSettings16.flushThresholdSize = byteSizeValue49;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher18);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteSizeValue49);
    }

    @Test
    public void test5016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5016");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        boolean boolean25 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig26 = indexSettings21.getmergePolicyConfig();
        boolean boolean27 = indexSettings21.defaultAllowUnmappedFields;
        boolean boolean28 = indexSettings21.isShadowReplicaIndex;
        java.util.function.Predicate<java.lang.String> strPredicate29 = indexSettings21.indexNameMatcher;
        boolean boolean30 = indexSettings21.defaultAllowUnmappedFields;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = indexSettings21.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings39);
        indexSettings53.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexSettings53.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue57 = indexSettings53.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean61 = indexScopedSettings59.isPrivateSetting("index.");
        boolean boolean63 = indexScopedSettings59.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings65.getGroups("index.uuid");
        java.lang.String[] strArray75 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray77 = settings65.getAsArray("", strArray75, (java.lang.Boolean) false);
        indexScopedSettings59.validate("index.shadow_replicas", settings65);
        org.elasticsearch.index.IndexSettings indexSettings79 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings65);
        indexSettings79.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue82 = indexSettings79.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue83 = indexSettings79.flushThresholdSize;
        indexSettings53.flushThresholdSize = byteSizeValue83;
        indexSettings53.TTLPurgeDisabled = false;
        int int87 = indexSettings53.maxRescoreWindow;
        org.elasticsearch.common.logging.ESLogger eSLogger88 = indexSettings53.logger;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig89 = indexSettings53.mergePolicyConfig;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig90 = indexSettings53.getMergeSchedulerConfig();
        long long91 = indexSettings53.gcDeletesInMillis;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting92 = indexSettings53.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue93 = indexSettings53.flushThresholdSize;
        indexSettings21.setTranslogFlushThresholdSize(byteSizeValue93);
        boolean boolean95 = indexSettings21.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertNotNull(byteSizeValue57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(timeValue82);
        org.junit.Assert.assertNotNull(byteSizeValue83);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10000 + "'", int87 == 10000);
        org.junit.Assert.assertNotNull(eSLogger88);
        org.junit.Assert.assertNotNull(mergePolicyConfig89);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 60000L + "'", long91 == 60000L);
        org.junit.Assert.assertNotNull(booleanSetting92);
        org.junit.Assert.assertNotNull(byteSizeValue93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test5017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5017");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        boolean boolean56 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        indexSettings78.setEnableWarmer(true);
        java.lang.String str81 = indexSettings78.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = indexSettings78.getIndexMetaData();
        indexSettings21.indexMetaData = indexMetaData82;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig84 = indexSettings21.getMergeSchedulerConfig();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting85 = indexSettings21.getALLOW_UNMAPPED();
        indexSettings21.TTLPurgeDisabled = true;
        java.lang.String str88 = indexSettings21.getUUID();
        org.elasticsearch.common.settings.Settings settings89 = indexSettings21.settings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig84);
        org.junit.Assert.assertNotNull(booleanSetting85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "_na_" + "'", str88, "_na_");
        org.junit.Assert.assertNotNull(settings89);
    }

    @Test
    public void test5018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5018");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
// flaky:         indexSettings16.maxResultWindow = 0;
        boolean boolean22 = false; // flaky: indexSettings16.isQueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger23 = null; // flaky: indexSettings16.logger;
        org.elasticsearch.common.unit.TimeValue timeValue24 = null; // flaky: indexSettings16.getsyncInterval();
        boolean boolean25 = false; // flaky: indexSettings16.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Settings settings26 = null; // flaky: indexSettings16.nodeSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertNotNull(eSLogger23);
// flaky:         org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertNotNull(settings26);
    }

    @Test
    public void test5019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5019");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.isPrivateSetting("index.");
        boolean boolean14 = indexScopedSettings10.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings16.getGroups("index.uuid");
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray28 = settings16.getAsArray("", strArray26, (java.lang.Boolean) false);
        indexScopedSettings10.validate("index.shadow_replicas", settings16);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings16);
        org.elasticsearch.common.settings.Settings settings31 = indexSettings30.getSettings();
        boolean boolean32 = indexSettings30.isIndexUsingShadowReplicas();
        org.elasticsearch.Version version33 = indexSettings30.getIndexVersionCreated();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder6.put("index.blocks.read_only", version33);
        java.lang.String str36 = builder6.get("");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder6.put("primary_terms", true);
        java.nio.file.Path path40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder41 = builder39.loadFromPath(path40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test5020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5020");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings21.getsyncInterval();
        int int36 = indexSettings21.getMaxRescoreWindow();
        int int37 = indexSettings21.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig38 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting39 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.common.settings.Settings settings40 = indexSettings21.getNodeSettings();
        boolean boolean41 = indexSettings21.getisShadowReplicaIndex();
        org.elasticsearch.index.translog.Translog.Durability durability42 = null;
        indexSettings21.durability = durability42;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig38);
        org.junit.Assert.assertNotNull(booleanSetting39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test5021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5021");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.uuid", 0L);
        java.lang.String str13 = builder11.get("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder14.putNull("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings20.applySettings(settings23);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray34 = settings26.getAsArray("index.version.created", strArray32, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder14.extendArray("index.version.created_string", strArray34);
        org.elasticsearch.common.settings.Settings settings36 = builder14.build();
        indexScopedSettings0.validate("index.number_of_shards", settings36);
        org.elasticsearch.common.settings.Setting.Property property38 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Setting.Property property39 = indexScopedSettings0.getScope();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + property38 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property38.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + property39 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property39.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
    }

    @Test
    public void test5022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5022");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.excludeFilters();
        java.lang.Object obj2 = null;
        boolean boolean3 = indexMetaData0.equals(obj2);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mappingOrDefault("hi!");
        int int6 = indexMetaData0.getTotalNumberOfShards();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int11 = builder10.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings18 = settings16.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getGroups("index.uuid");
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray32 = settings20.getAsArray("", strArray30, (java.lang.Boolean) false);
        java.lang.String[] strArray34 = settings16.getAsArray("index.version.minimum_compatible", strArray30, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder13.settings(settings16);
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.uuid");
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray48 = settings36.getAsArray("", strArray46, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder13.settings(settings36);
        java.lang.String str51 = settings36.get("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean54 = indexScopedSettings52.isPrivateSetting("index.");
        boolean boolean56 = indexScopedSettings52.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.uuid");
        java.lang.String[] strArray68 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray70 = settings58.getAsArray("", strArray68, (java.lang.Boolean) false);
        indexScopedSettings52.validate("index.shadow_replicas", settings58);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting73 = indexScopedSettings52.get("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int75 = indexMetaData74.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings76 = new org.elasticsearch.common.settings.IndexScopedSettings(settings36, indexScopedSettings52, indexMetaData74);
        boolean boolean78 = indexMetaData74.isSameUUID("index.version.created_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap79 = indexMetaData74.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData81 = indexMetaData74.mapping("index.number_of_shards");
        java.util.Set<java.lang.String> strSet83 = null; // flaky: indexMetaData74.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state84 = indexMetaData74.getState();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff85 = indexMetaData0.diff(indexMetaData74);
        org.elasticsearch.common.io.stream.StreamInput streamInput86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff87 = indexMetaData74.readDiffFrom(streamInput86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNull(wildcardSetting73);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap79);
        org.junit.Assert.assertNull(mappingMetaData81);
        org.junit.Assert.assertNull(strSet83);
        org.junit.Assert.assertTrue("'" + state84 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state84.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff85);
    }

    @Test
    public void test5023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5023");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.isPrivateSetting("index.");
        boolean boolean8 = indexScopedSettings4.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings10.getGroups("index.uuid");
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray22 = settings10.getAsArray("", strArray20, (java.lang.Boolean) false);
        indexScopedSettings4.validate("index.shadow_replicas", settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting25 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer26 = null;
        indexScopedSettings24.addSettingsUpdateConsumer(settingsSetting25, settingsConsumer26);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings24.get(settingsSetting29);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer33 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings4.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer33, settingsConsumer34);
        java.util.function.Predicate<java.lang.String> strPredicate36 = indexScopedSettings4.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = indexScopedSettings37.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings62 = settings58.getAsSettings("");
        java.lang.Boolean boolean65 = settings62.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue67 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue68 = settings62.getAsBytesSize("index.", byteSizeValue67);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder69 = null;
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings70.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings74 = settings70.getAsSettings("");
        java.lang.Boolean boolean77 = settings74.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue79 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue80 = settings74.getAsBytesSize("index.", byteSizeValue79);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder81 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params82 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder83 = settings74.toXContent(xContentBuilder81, params82);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder84 = settings62.toXContent(xContentBuilder69, params82);
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings57.dryRun(settings62);
        org.elasticsearch.common.settings.Settings settings86 = indexScopedSettings4.dryRun(settings62);
        indexScopedSettings0.validate(settings86);
        org.elasticsearch.common.settings.Settings settings89 = settings86.getByPrefix("index.number_of_replicas");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settingsSetting25);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertEquals("'" + boolean65 + "' != '" + true + "'", boolean65, true);
        org.junit.Assert.assertNull(byteSizeValue68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertEquals("'" + boolean77 + "' != '" + true + "'", boolean77, true);
        org.junit.Assert.assertNull(byteSizeValue80);
        org.junit.Assert.assertNotNull(params82);
        org.junit.Assert.assertNull(xContentBuilder83);
        org.junit.Assert.assertNull(xContentBuilder84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings89);
    }

    @Test
    public void test5024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5024");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.warmerEnabled;
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.getNodeSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int28 = indexMetaData27.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings29.applySettings(settings32);
        java.lang.String str37 = settings32.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting40 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer41 = null;
        indexScopedSettings39.addSettingsUpdateConsumer(settingsSetting40, settingsConsumer41);
        org.elasticsearch.index.IndexSettings indexSettings43 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32, strPredicate38, indexScopedSettings39);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting44 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings45 = null; // flaky: indexSettings43.getValue(settingsSetting44);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting46 = null; // flaky: indexSettings43.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.isPrivateSetting("index.");
        boolean boolean52 = indexScopedSettings48.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings54.getGroups("index.uuid");
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray66 = settings54.getAsArray("", strArray64, (java.lang.Boolean) false);
        indexScopedSettings48.validate("index.shadow_replicas", settings54);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings54);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting69 = indexSettings68.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability70 = indexSettings68.durability;
// flaky:         indexSettings43.setdurability(durability70);
        indexSettings21.durability = durability70;
        org.elasticsearch.Version version73 = indexSettings21.getversion();
        boolean boolean74 = indexSettings21.isShadowReplicaIndex;
        boolean boolean75 = indexSettings21.isOnSharedFilesystem();
        boolean boolean76 = indexSettings21.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertNotNull(settingsSetting40);
        org.junit.Assert.assertNotNull(settingsSetting44);
// flaky:         org.junit.Assert.assertNotNull(settings45);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(timeValueSetting69);
        org.junit.Assert.assertTrue("'" + durability70 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability70.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(version73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test5025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5025");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.excludeFilters();
        java.lang.Object obj2 = null;
        boolean boolean3 = indexMetaData0.equals(obj2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("active_allocations");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData0.getState();
        boolean boolean10 = indexMetaData0.isSameUUID("primary_terms");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test5026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5026");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder4.settings(settings27);
        java.lang.String str42 = settings27.get("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.isPrivateSetting("index.");
        boolean boolean47 = indexScopedSettings43.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings49.getGroups("index.uuid");
        java.lang.String[] strArray59 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray61 = settings49.getAsArray("", strArray59, (java.lang.Boolean) false);
        indexScopedSettings43.validate("index.shadow_replicas", settings49);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting64 = indexScopedSettings43.get("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int66 = indexMetaData65.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = new org.elasticsearch.common.settings.IndexScopedSettings(settings27, indexScopedSettings43, indexMetaData65);
        boolean boolean69 = indexMetaData65.isSameUUID("index.version.created_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap70 = indexMetaData65.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap71 = indexMetaData65.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData65);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder72.version((long) (short) -1);
        int int75 = builder72.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = builder72.build();
        org.elasticsearch.common.settings.Settings.Builder builder77 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder77.put("index.uuid", 0L);
        java.lang.String str82 = builder80.get("");
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder80.put("index.shadow_replicas", "");
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder80.putNull("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder88 = builder72.settings(builder87);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(wildcardSetting64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(indexMetaData76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test5027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5027");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue23 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.common.settings.Settings settings24 = indexSettings21.settings;
        org.apache.lucene.index.MergePolicy mergePolicy25 = indexSettings21.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(byteSizeValue23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(mergePolicy25);
    }

    @Test
    public void test5028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5028");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = settings9.getAsMap();
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings0.applySettings(settings9);
        java.lang.String str13 = settings9.toDelimitedString('a');
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test5029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5029");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.common.settings.Settings settings27 = indexMetaData23.getSettings();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        org.elasticsearch.common.settings.Settings settings30 = settings28.getAsSettings("");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings28.getGroups("index.blocks.read_only");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
    }

    @Test
    public void test5030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5030");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder3.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder3.loadFromSource("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099aindex.version.created_string=5.0.0a", (float) 5000L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test5031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5031");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.unit.TimeValue timeValue26 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setRefreshInterval(timeValue26);
        indexSettings21.setEnableWarmer(false);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting30 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        boolean boolean31 = indexSettings21.warmerEnabled;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting32 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean36 = indexScopedSettings34.isPrivateSetting("index.");
        boolean boolean38 = indexScopedSettings34.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings40.getGroups("index.uuid");
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray52 = settings40.getAsArray("", strArray50, (java.lang.Boolean) false);
        indexScopedSettings34.validate("index.shadow_replicas", settings40);
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings40);
        boolean boolean55 = indexSettings54.isShadowReplicaIndex;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue56 = indexSettings54.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue56;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting58 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        indexSettings21.setwarmerEnabled(false);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(strSetting30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(booleanSetting32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteSizeValue56);
        org.junit.Assert.assertNotNull(booleanSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
    }

    @Test
    public void test5032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5032");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.write");
    }

    @Test
    public void test5033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5033");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap2 = settings0.getGroups("index.uuid");
        org.elasticsearch.Version version4 = null;
        org.elasticsearch.Version version5 = settings0.getAsVersion("", version4);
        boolean boolean6 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        java.lang.String str8 = settings0.get("index.number_of_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean11 = indexScopedSettings9.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings9.applySettings(settings12);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings9.applySettings(settings16);
        java.util.function.Predicate<java.lang.String> strPredicate18 = indexScopedSettings9.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = indexScopedSettings9.getDEFAULT_SCOPED_SETTINGS();
        java.util.function.Predicate<java.lang.String> strPredicate20 = indexScopedSettings19.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.Settings settings21 = settings0.filter(strPredicate20);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertNotNull(strPredicate20);
        org.junit.Assert.assertNotNull(settings21);
    }

    @Test
    public void test5034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5034");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability23 = indexSettings21.getTranslogDurability();
        boolean boolean24 = indexSettings21.isQueryStringAllowLeadingWildcard();
        long long25 = indexSettings21.gcDeletesInMillis;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        org.elasticsearch.index.translog.Translog.Durability durability48 = null;
        indexSettings47.setTranslogDurability(durability48);
        boolean boolean50 = indexSettings47.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting52 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer53 = null;
        indexScopedSettings51.addSettingsUpdateConsumer(settingsSetting52, settingsConsumer53);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting56 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer57 = null;
        indexScopedSettings55.addSettingsUpdateConsumer(settingsSetting56, settingsConsumer57);
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings51.get(settingsSetting56);
        org.elasticsearch.common.settings.Settings settings60 = indexSettings47.getValue(settingsSetting56);
        java.lang.String str61 = indexSettings47.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting62 = indexSettings47.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = indexSettings47.indexMetaData;
        indexSettings21.indexMetaData = indexMetaData63;
        indexSettings21.setEnableWarmer(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 60000L + "'", long25 == 60000L);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertNotNull(settingsSetting52);
        org.junit.Assert.assertNotNull(indexScopedSettings55);
        org.junit.Assert.assertNotNull(settingsSetting56);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting62);
        org.junit.Assert.assertNotNull(indexMetaData63);
    }

    @Test
    public void test5035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5035");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder6.put("5000099", 10000L);
        java.lang.String str13 = builder11.remove("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 index.version.created_string=5.0.0 ");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test5036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5036");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.priority");
    }

    @Test
    public void test5037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5037");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.removeAlias("");
        int int9 = builder6.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test5038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5038");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        boolean boolean12 = indexScopedSettings8.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings14.getGroups("index.uuid");
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray26 = settings14.getAsArray("", strArray24, (java.lang.Boolean) false);
        indexScopedSettings8.validate("index.shadow_replicas", settings14);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings14);
        org.elasticsearch.index.translog.Translog.Durability durability29 = null;
        indexSettings28.setTranslogDurability(durability29);
        org.elasticsearch.common.settings.Settings settings31 = indexSettings28.getSettings();
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder4.settings(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.creationDate((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder33.index("");
        int int38 = builder33.numberOfShards();
        long long39 = builder33.version();
        long long41 = builder33.primaryTerm((int) (short) 0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test5039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5039");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.removeAlias("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = builder8.mapping("index.shared_filesystem");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mappingMetaData10);
    }

    @Test
    public void test5040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5040");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        indexSettings21.maxResultWindow = (byte) -1;
        org.elasticsearch.Version version25 = indexSettings21.getIndexVersionCreated();
        org.elasticsearch.Version version26 = indexSettings21.version;
        boolean boolean27 = indexSettings21.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting28 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeValueSetting28);
    }

    @Test
    public void test5041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5041");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder4.settings(settings27);
        java.lang.String str42 = settings27.get("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.isPrivateSetting("index.");
        boolean boolean47 = indexScopedSettings43.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings49.getGroups("index.uuid");
        java.lang.String[] strArray59 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray61 = settings49.getAsArray("", strArray59, (java.lang.Boolean) false);
        indexScopedSettings43.validate("index.shadow_replicas", settings49);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting64 = indexScopedSettings43.get("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int66 = indexMetaData65.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = new org.elasticsearch.common.settings.IndexScopedSettings(settings27, indexScopedSettings43, indexMetaData65);
        boolean boolean69 = indexMetaData65.isSameUUID("index.version.created_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap70 = indexMetaData65.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap71 = indexMetaData65.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData65);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder72.version((long) (short) -1);
        int int75 = builder72.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = builder72.build();
        org.elasticsearch.common.io.stream.StreamInput streamInput77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = indexMetaData76.readFrom(streamInput77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(wildcardSetting64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(indexMetaData76);
    }

    @Test
    public void test5042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5042");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean26 = indexSettings21.getisShadowReplicaIndex();
        boolean boolean27 = indexSettings21.isQueryStringAnalyzeWildcard();
        indexSettings21.gcDeletesInMillis = 100;
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings21.getTranslogSyncInterval();
        indexSettings21.setwarmerEnabled(true);
        boolean boolean33 = indexSettings21.isShadowReplicaIndex;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test5043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5043");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.warmerEnabled;
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.getNodeSettings();
        java.lang.String str27 = indexSettings21.getDefaultField();
        indexSettings21.setEnableWarmer(false);
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "_all" + "'", str27, "_all");
        org.junit.Assert.assertNotNull(timeValue30);
    }

    @Test
    public void test5044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5044");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        java.lang.String str73 = settings71.toDelimitedString('a');
        java.lang.String str76 = settings71.get("", "index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099aindex.version.created_string=5.0.0a");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099aindex.version.created_string=5.0.0a" + "'", str76, "index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099aindex.version.created_string=5.0.0a");
    }

    @Test
    public void test5045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5045");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray4 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList5);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.version.created", (double) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder15.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList20);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.version.created", (double) ' ');
        java.lang.Class<?> wildcardClass29 = builder28.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder13.put("index.version.created_string", (java.lang.Class) wildcardClass29);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("hi!", false);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder30.put("archived.", (long) '#');
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("index.number_of_shards", (int) '#');
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder43 = builder39.put("org.elasticsearch.index.MergePolicyConfig", 0L, byteSizeUnit42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test5046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5046");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        boolean boolean25 = indexSettings21.isIndexUsingShadowReplicas();
        int int26 = indexSettings21.getMaxRescoreWindow();
        indexSettings21.setMaxResultWindow((int) (byte) 100);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
    }

    @Test
    public void test5047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5047");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = indexScopedSettings1.applySettings(settings4);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings8.applySettings(settings11);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = settings15.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = settings17.getAsMap();
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings8.applySettings(settings17);
        org.elasticsearch.common.settings.Setting.Property property20 = indexScopedSettings8.getScope();
        java.util.function.Predicate<java.lang.String> strPredicate21 = indexScopedSettings8.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.isPrivateSetting("index.");
        boolean boolean26 = indexScopedSettings22.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        indexScopedSettings22.validate("index.shadow_replicas", settings28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings42.applySettings(settings45);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings42.applySettings(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = indexScopedSettings22.copy(settings50, indexMetaData51);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean55 = indexScopedSettings53.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings56.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings53.applySettings(settings56);
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings53.applySettings(settings60);
        indexScopedSettings22.validate(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate21, indexScopedSettings22);
        boolean boolean64 = false; // flaky: indexSettings63.getwarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = null; // flaky: indexSettings63.indexMetaData;
        int int66 = 0; // flaky: indexSettings63.maxResultWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.isPrivateSetting("index.");
        boolean boolean72 = indexScopedSettings68.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap76 = settings74.getGroups("index.uuid");
        java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray86 = settings74.getAsArray("", strArray84, (java.lang.Boolean) false);
        indexScopedSettings68.validate("index.shadow_replicas", settings74);
        org.elasticsearch.index.IndexSettings indexSettings88 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings74);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting89 = indexSettings88.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData90 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters91 = indexMetaData90.includeFilters();
        indexSettings88.indexMetaData = indexMetaData90;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig93 = indexSettings88.getMergeSchedulerConfig();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData94 = indexSettings88.getIndexMetaData();
        boolean boolean95 = false; // flaky: indexSettings63.updateIndexMetaData(indexMetaData94);
        java.util.function.Predicate<java.lang.String> strPredicate96 = null; // flaky: indexSettings63.indexNameMatcher;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting97 = null; // flaky: indexSettings63.getQUERY_STRING_ANALYZE_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + property20 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property20.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10000 + "'", int66 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(booleanSetting89);
        org.junit.Assert.assertNotNull(indexMetaData90);
        org.junit.Assert.assertNull(discoveryNodeFilters91);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig93);
        org.junit.Assert.assertNotNull(indexMetaData94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
// flaky:         org.junit.Assert.assertNotNull(strPredicate96);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting97);
    }

    @Test
    public void test5048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5048");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.state(state3);
        byte byte5 = state3.id();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 1 + "'", byte5 == (byte) 1);
    }

    @Test
    public void test5049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5049");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        int int27 = builder26.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.removeAllAliases();
        java.lang.String str29 = builder28.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder28.version(5000L);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.putMapping(mappingMetaData32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test5050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5050");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean26 = indexSettings21.getisShadowReplicaIndex();
        boolean boolean27 = indexSettings21.isQueryStringAnalyzeWildcard();
        indexSettings21.gcDeletesInMillis = 100;
        boolean boolean30 = indexSettings21.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.unit.TimeValue timeValue31 = indexSettings21.globalCheckpointInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(timeValue31);
    }

    @Test
    public void test5051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5051");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting5 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer6 = null;
        indexScopedSettings4.addSettingsUpdateConsumer(settingsSetting5, settingsConsumer6);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.get(settingsSetting5);
        boolean boolean10 = indexScopedSettings0.hasDynamicSetting("archived.");
        java.lang.String str11 = indexScopedSettings0.nodeName();
        java.lang.String str12 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = indexScopedSettings0.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean16 = indexScopedSettings14.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings14.applySettings(settings17);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = settings21.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings14.applySettings(settings23);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings25);
        boolean boolean27 = settings25.isEmpty();
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings0.applySettings(settings25);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settingsSetting5);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(settings28);
    }

    @Test
    public void test5052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5052");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean23 = indexSettings21.TTLPurgeDisabled;
        boolean boolean24 = indexSettings21.hasCustomDataPath();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = indexSettings21.scopedSettings;
        boolean boolean26 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.Version version27 = indexSettings21.getversion();
        indexSettings21.maxResultWindow = 10000;
        boolean boolean30 = indexSettings21.getqueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(version27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test5053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5053");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData0.mappingOrDefault("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters27 = indexMetaData0.includeFilters();
        long long28 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(discoveryNodeFilters27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
    }

    @Test
    public void test5054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5054");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        int int26 = indexSettings21.getNumberOfShards();
        java.lang.String str27 = indexSettings21.getUUID();
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings21.getTranslogSyncInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting29 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.Version version30 = indexSettings21.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "_na_" + "'", str27, "_na_");
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(booleanSetting29);
        org.junit.Assert.assertNotNull(version30);
    }

    @Test
    public void test5055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5055");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        indexSettings21.maxRescoreWindow = 0;
        boolean boolean30 = indexSettings21.queryStringLenient;
        boolean boolean31 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = indexSettings21.getScopedSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting34 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer35 = null;
        indexScopedSettings33.addSettingsUpdateConsumer(settingsSetting34, settingsConsumer35);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting38 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer39 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting38, settingsConsumer39);
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings33.get(settingsSetting38);
        boolean boolean43 = indexScopedSettings33.hasDynamicSetting("archived.");
        java.lang.String str44 = indexScopedSettings33.nodeName();
        java.lang.String str45 = indexScopedSettings33.nodeName();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = indexScopedSettings33.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int48 = indexMetaData47.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings52.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings49.applySettings(settings52);
        java.lang.String str57 = settings52.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting60 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer61 = null;
        indexScopedSettings59.addSettingsUpdateConsumer(settingsSetting60, settingsConsumer61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData47, settings52, strPredicate58, indexScopedSettings59);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting64 = null; // flaky: indexSettings63.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher65 = null; // flaky: indexSettings63.getParseFieldMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue66 = null; // flaky: indexSettings63.getFlushThresholdSize();
        org.elasticsearch.common.settings.Settings settings67 = null; // flaky: indexSettings63.nodeSettings;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap73 = settings71.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings68.applySettings(settings71);
        org.elasticsearch.common.settings.Settings settings75 = null; // flaky: indexScopedSettings46.diff(settings67, settings71);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = null; // flaky: settings67.getAsGroups(true);
// flaky:         indexScopedSettings32.validate(settings67);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertNotNull(settingsSetting34);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertNotNull(settingsSetting38);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertNotNull(settingsSetting60);
// flaky:         org.junit.Assert.assertNotNull(strSetting64);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher65);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue66);
// flaky:         org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(settings74);
// flaky:         org.junit.Assert.assertNotNull(settings75);
// flaky:         org.junit.Assert.assertNotNull(strMap77);
    }

    @Test
    public void test5056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5056");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        java.lang.String str35 = indexSettings21.getNodeName();
        java.util.function.Predicate<java.lang.String> strPredicate36 = indexSettings21.getindexNameMatcher();
        indexSettings21.maxResultWindow = (byte) 0;
        java.lang.String str39 = indexSettings21.getUUID();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting40 = indexSettings21.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.isPrivateSetting("index.");
        boolean boolean46 = indexScopedSettings42.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings48.getGroups("index.uuid");
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray60 = settings48.getAsArray("", strArray58, (java.lang.Boolean) false);
        indexScopedSettings42.validate("index.shadow_replicas", settings48);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings48);
        org.elasticsearch.Version version63 = indexMetaData41.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap64 = indexMetaData41.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state65 = indexMetaData41.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean69 = indexScopedSettings67.isPrivateSetting("index.");
        boolean boolean71 = indexScopedSettings67.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap75 = settings73.getGroups("index.uuid");
        java.lang.String[] strArray83 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray85 = settings73.getAsArray("", strArray83, (java.lang.Boolean) false);
        indexScopedSettings67.validate("index.shadow_replicas", settings73);
        org.elasticsearch.index.IndexSettings indexSettings87 = new org.elasticsearch.index.IndexSettings(indexMetaData66, settings73);
        indexSettings87.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue90 = indexSettings87.getsyncInterval();
        boolean boolean91 = indexSettings87.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig92 = indexSettings87.getmergePolicyConfig();
        org.elasticsearch.index.translog.Translog.Durability durability93 = indexSettings87.durability;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher94 = indexSettings87.getParseFieldMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData95 = indexSettings87.getIndexMetaData();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff96 = indexMetaData41.diff(indexMetaData95);
        long long97 = indexMetaData95.getVersion();
        indexSettings21.indexMetaData = indexMetaData95;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "_na_" + "'", str39, "_na_");
        org.junit.Assert.assertNotNull(booleanSetting40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNotNull(strImmutableOpenMap64);
        org.junit.Assert.assertTrue("'" + state65 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state65.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(timeValue90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig92);
        org.junit.Assert.assertTrue("'" + durability93 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability93.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher94);
        org.junit.Assert.assertNotNull(indexMetaData95);
        org.junit.Assert.assertNotNull(indexMetaDataDiff96);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1L + "'", long97 == 1L);
    }

    @Test
    public void test5057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5057");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds(100);
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int6 = indexMetaData5.getNumberOfShards();
        int int7 = indexMetaData5.getNumberOfReplicas();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.diff(indexMetaData5);
        long long9 = indexMetaData0.getCreationDate();
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        boolean boolean12 = indexMetaData0.isSameUUID("");
        java.lang.String str13 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(indexMetaDataDiff8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
    }

    @Test
    public void test5058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5058");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.nodeSettings;
        indexSettings21.maxRescoreWindow = 0;
        boolean boolean26 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        boolean boolean33 = indexScopedSettings29.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        indexScopedSettings29.validate("index.shadow_replicas", settings35);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        indexSettings49.setEnableWarmer(true);
        java.lang.String str52 = indexSettings49.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = indexSettings49.getIndexMetaData();
        java.lang.String str54 = indexSettings49.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy55 = indexSettings49.getMergePolicy();
        org.elasticsearch.common.logging.ESLogger eSLogger56 = indexSettings49.getlogger();
        java.util.function.Predicate<java.lang.String> strPredicate57 = indexSettings49.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings58 = settings27.filter(strPredicate57);
        java.lang.String[] strArray60 = settings58.getAsArray("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean65 = indexScopedSettings63.isPrivateSetting("index.");
        boolean boolean67 = indexScopedSettings63.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap71 = settings69.getGroups("index.uuid");
        java.lang.String[] strArray79 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray81 = settings69.getAsArray("", strArray79, (java.lang.Boolean) false);
        indexScopedSettings63.validate("index.shadow_replicas", settings69);
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData62, settings69);
        org.elasticsearch.common.unit.TimeValue timeValue84 = indexSettings83.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue85 = settings58.getAsTime("", timeValue84);
        java.lang.Boolean boolean88 = settings58.getAsBoolean("1", (java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(mergePolicy55);
        org.junit.Assert.assertNotNull(eSLogger56);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(timeValue84);
        org.junit.Assert.assertNotNull(timeValue85);
        org.junit.Assert.assertEquals("'" + boolean88 + "' != '" + false + "'", boolean88, false);
    }

    @Test
    public void test5059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5059");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean25 = indexSettings21.queryStringAllowLeadingWildcard;
        boolean boolean26 = indexSettings21.isShadowReplicaIndex;
        indexSettings21.maxResultWindow = 0;
        boolean boolean29 = indexSettings21.defaultAllowUnmappedFields;
        org.elasticsearch.common.settings.Settings settings30 = indexSettings21.settings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(settings30);
    }

    @Test
    public void test5060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5060");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig25 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = indexSettings21.indexMetaData;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings28.applySettings(settings31);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.applySettings(settings35);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings36.getAsGroups();
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.isPrivateSetting("index.");
        boolean boolean43 = indexScopedSettings39.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray57 = settings45.getAsArray("", strArray55, (java.lang.Boolean) false);
        indexScopedSettings39.validate("index.shadow_replicas", settings45);
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings59.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings63 = settings59.getAsSettings("");
        java.lang.Boolean boolean66 = settings63.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue68 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue69 = settings63.getAsBytesSize("index.", byteSizeValue68);
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings39.dryRun(settings63);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings36, strPredicate38, indexScopedSettings39);
        int int72 = 0; // flaky: indexSettings71.getNumberOfReplicas();
        int int73 = 0; // flaky: indexSettings71.maxResultWindow;
        org.elasticsearch.common.settings.Settings settings74 = null; // flaky: indexSettings71.settings;
        java.lang.String str77 = null; // flaky: settings74.get("index.shadow_replicas", "index.data_path");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicyConfig25);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertEquals("'" + boolean66 + "' != '" + true + "'", boolean66, true);
        org.junit.Assert.assertNull(byteSizeValue69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10000 + "'", int73 == 10000);
// flaky:         org.junit.Assert.assertNotNull(settings74);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "index.data_path" + "'", str77, "index.data_path");
    }

    @Test
    public void test5061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5061");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting28 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        indexSettings21.setMaxRescoreWindow((int) ' ');
        boolean boolean31 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings39);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap54 = indexMetaData32.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap55 = indexMetaData32.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters56 = indexMetaData32.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting79 = indexSettings78.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters81 = indexMetaData80.includeFilters();
        indexSettings78.indexMetaData = indexMetaData80;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData80);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters84 = indexMetaData80.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff85 = indexMetaData32.diff(indexMetaData80);
        boolean boolean87 = indexMetaData80.isSameUUID("index.version.minimum_compatible");
        indexSettings21.indexMetaData = indexMetaData80;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder89 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData80);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state90 = indexMetaData80.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters91 = indexMetaData80.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state92 = indexMetaData80.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(durabilitySetting28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strImmutableOpenMap54);
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertNull(discoveryNodeFilters56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(booleanSetting79);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNull(discoveryNodeFilters81);
        org.junit.Assert.assertNull(discoveryNodeFilters84);
        org.junit.Assert.assertNotNull(indexMetaDataDiff85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + state90 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state90.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters91);
        org.junit.Assert.assertTrue("'" + state92 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state92.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test5062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5062");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings21.durability = durability27;
        boolean boolean29 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        org.elasticsearch.common.unit.TimeValue timeValue52 = indexSettings51.getDEFAULT_REFRESH_INTERVAL();
        indexSettings21.setGCDeletes(timeValue52);
        indexSettings21.warmerEnabled = false;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(timeValue52);
    }

    @Test
    public void test5063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5063");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder3.loadFromSource("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int21 = indexMetaData20.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap22 = indexMetaData20.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData20.requireFilters();
        org.elasticsearch.Version version24 = indexMetaData20.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder3.put("hi!", version24);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.uuid", 0L);
        java.lang.String str31 = builder29.get("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = settings32.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = settings34.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction37 = null;
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder29.putProperties(strMap35, strPredicate36, strFunction37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder25.put(strMap35);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.put("index.", true);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("primary_terms", 100.0d);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.creation_date_string", 0L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test5064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5064");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getTranslogDurability();
        boolean boolean28 = indexSettings21.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting29 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        boolean boolean30 = indexSettings21.getqueryStringLenient();
        java.lang.String str31 = indexSettings21.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue32 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        int int33 = indexSettings21.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strSetting29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(timeValue32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test5065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5065");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        indexSettings21.maxRescoreWindow = 0;
        java.lang.String str30 = indexSettings21.getUUID();
        int int31 = indexSettings21.getMaxResultWindow();
        java.lang.String str32 = indexSettings21.getNodeName();
        java.lang.String str33 = indexSettings21.getDefaultField();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting34 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "_na_" + "'", str30, "_na_");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "_all" + "'", str33, "_all");
        org.junit.Assert.assertNotNull(booleanSetting34);
    }

    @Test
    public void test5066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5066");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap25 = indexMetaData0.getMappings();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput26 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
    }

    @Test
    public void test5067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5067");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        boolean boolean56 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        indexSettings78.setEnableWarmer(true);
        java.lang.String str81 = indexSettings78.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = indexSettings78.getIndexMetaData();
        indexSettings21.indexMetaData = indexMetaData82;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting84 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.common.logging.ESLogger eSLogger85 = indexSettings21.getlogger();
        boolean boolean86 = indexSettings21.isWarmerEnabled();
        int int87 = indexSettings21.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData88 = indexSettings21.getIndexMetaData();
        org.apache.lucene.index.MergePolicy mergePolicy89 = indexSettings21.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertNotNull(booleanSetting84);
        org.junit.Assert.assertNotNull(eSLogger85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(indexMetaData88);
        org.junit.Assert.assertNotNull(mergePolicy89);
    }

    @Test
    public void test5068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5068");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig35 = indexSettings21.getmergePolicyConfig();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting38 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(mergePolicyConfig35);
        org.junit.Assert.assertNotNull(timeValueSetting38);
    }

    @Test
    public void test5069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5069");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        boolean boolean26 = indexSettings21.getwarmerEnabled();
        boolean boolean27 = indexSettings21.getdefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = indexSettings21.getIndexMetaData();
        java.util.function.Predicate<java.lang.String> strPredicate29 = indexSettings21.getindexNameMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strPredicate29);
    }

    @Test
    public void test5070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5070");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        boolean boolean12 = indexScopedSettings8.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings14.getGroups("index.uuid");
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray26 = settings14.getAsArray("", strArray24, (java.lang.Boolean) false);
        indexScopedSettings8.validate("index.shadow_replicas", settings14);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings14);
        org.elasticsearch.index.translog.Translog.Durability durability29 = null;
        indexSettings28.setTranslogDurability(durability29);
        org.elasticsearch.common.settings.Settings settings31 = indexSettings28.getSettings();
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder4.settings(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.creationDate((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings43);
        indexSettings57.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue60 = indexSettings57.getsyncInterval();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig61 = indexSettings57.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting62 = indexSettings57.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = indexSettings57.indexMetaData;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state64 = indexMetaData63.getState();
        byte byte65 = state64.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder35.state(state64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = builder35.creationDate((long) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = builder68.index("5000099");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder70.putMapping(mappingMetaData71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(timeValue60);
        org.junit.Assert.assertNotNull(mergePolicyConfig61);
        org.junit.Assert.assertNotNull(booleanSetting62);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertTrue("'" + state64 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state64.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte65 + "' != '" + (byte) 0 + "'", byte65 == (byte) 0);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test5071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5071");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.nodeSettings;
        indexSettings21.maxRescoreWindow = 0;
        boolean boolean26 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting28 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings21.refreshInterval;
        boolean boolean30 = indexSettings21.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig31 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.common.unit.TimeValue timeValue32 = indexSettings21.getsyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(booleanSetting28);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(mergePolicyConfig31);
        org.junit.Assert.assertNotNull(timeValue32);
    }

    @Test
    public void test5072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5072");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting28 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        indexSettings21.setMaxRescoreWindow((int) ' ');
        boolean boolean31 = indexSettings21.isIndexUsingShadowReplicas();
        boolean boolean32 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.Version version33 = indexSettings21.getIndexVersionCreated();
        boolean boolean34 = indexSettings21.warmerEnabled;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean38 = indexScopedSettings36.isPrivateSetting("index.");
        boolean boolean40 = indexScopedSettings36.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings42.getGroups("index.uuid");
        java.lang.String[] strArray52 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray54 = settings42.getAsArray("", strArray52, (java.lang.Boolean) false);
        indexScopedSettings36.validate("index.shadow_replicas", settings42);
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings42);
        boolean boolean58 = indexSettings56.matchesIndexName("");
        long long59 = indexSettings56.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue60 = indexSettings56.getDEFAULT_REFRESH_INTERVAL();
        indexSettings21.refreshInterval = timeValue60;
        org.elasticsearch.common.settings.Settings settings62 = indexSettings21.settings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(durabilitySetting28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 60000L + "'", long59 == 60000L);
        org.junit.Assert.assertNotNull(timeValue60);
        org.junit.Assert.assertNotNull(settings62);
    }

    @Test
    public void test5073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5073");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        boolean boolean25 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig26 = indexSettings21.getmergePolicyConfig();
        boolean boolean27 = indexSettings21.defaultAllowUnmappedFields;
        boolean boolean28 = indexSettings21.queryStringLenient;
        org.elasticsearch.index.translog.Translog.Durability durability29 = indexSettings21.getdurability();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexSettings21.getScopedSettings();
        indexSettings21.setMaxRescoreWindow((int) (short) 10);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + durability29 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability29.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexScopedSettings30);
    }

    @Test
    public void test5074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5074");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        java.lang.String str26 = indexSettings21.getNodeName();
        java.lang.String str27 = indexSettings21.customDataPath();
        org.elasticsearch.Version version28 = indexSettings21.getversion();
        java.util.function.Predicate<java.lang.String> strPredicate29 = indexSettings21.indexNameMatcher;
        boolean boolean30 = indexSettings21.getwarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(version28);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test5075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5075");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = indexScopedSettings0.getDEFAULT_SCOPED_SETTINGS();
        java.lang.String str21 = indexScopedSettings20.nodeName();
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings20.getScope();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = indexScopedSettings20.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.isPrivateSetting("index.");
        boolean boolean29 = indexScopedSettings25.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray43 = settings31.getAsArray("", strArray41, (java.lang.Boolean) false);
        indexScopedSettings25.validate("index.shadow_replicas", settings31);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings31);
        indexSettings45.setEnableWarmer(true);
        java.lang.String str48 = indexSettings45.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = indexSettings45.getIndexMetaData();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean52 = indexScopedSettings50.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings53.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings56 = indexScopedSettings50.applySettings(settings53);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings58 = indexScopedSettings50.applySettings(settings57);
        boolean boolean59 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings57);
        org.elasticsearch.common.unit.SizeValue sizeValue61 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue62 = settings57.getAsSize("index.shadow_replicas", sizeValue61);
        boolean boolean63 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings57);
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings57);
        java.lang.String str66 = settings57.get("state-");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap69 = settings57.getGroups("index.number_of_replicas", true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder70 = null;
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap73 = settings71.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings75 = settings71.getAsSettings("");
        java.lang.Boolean boolean78 = settings75.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue80 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue81 = settings75.getAsBytesSize("index.", byteSizeValue80);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder82 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params83 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder84 = settings75.toXContent(xContentBuilder82, params83);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder85 = settings57.toXContent(xContentBuilder70, params83);
        indexScopedSettings23.validate(settings57);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(sizeValue62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertEquals("'" + boolean78 + "' != '" + true + "'", boolean78, true);
        org.junit.Assert.assertNull(byteSizeValue81);
        org.junit.Assert.assertNotNull(params83);
        org.junit.Assert.assertNull(xContentBuilder84);
        org.junit.Assert.assertNull(xContentBuilder85);
    }

    @Test
    public void test5076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5076");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
// flaky:         indexSettings16.setMaxResultWindow(100);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting22 = null; // flaky: indexSettings16.getMAX_RESCORE_WINDOW_SETTING();
        boolean boolean23 = false; // flaky: indexSettings16.queryStringAnalyzeWildcard;
        org.elasticsearch.common.unit.TimeValue timeValue24 = null; // flaky: indexSettings16.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.Version version25 = null; // flaky: indexSettings16.getversion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(intSetting22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertNotNull(timeValue24);
// flaky:         org.junit.Assert.assertNotNull(version25);
    }

    @Test
    public void test5077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5077");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.auto_expand_replicas", (float) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("index.number_of_replicas", "");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("state-", 32);
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.uuid", 0L);
        java.lang.String str22 = builder20.get("");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder20.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = settings26.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings28.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.putProperties(strMap29, strPredicate30, strFunction31);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder20.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder33.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.data_path", "_na_");
        org.elasticsearch.common.settings.Settings settings38 = builder37.build();
        java.lang.Class<?> wildcardClass39 = settings38.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder15.put("", (java.lang.Class) wildcardClass39);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test5078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5078");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting25 = indexSettings21.getMAX_RESULT_WINDOW_SETTING();
        int int26 = indexSettings21.getNumberOfReplicas();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig27 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting28 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(intSetting25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(mergePolicyConfig27);
        org.junit.Assert.assertNotNull(durabilitySetting28);
    }

    @Test
    public void test5079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5079");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting26 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        int int27 = indexSettings21.getNumberOfReplicas();
        boolean boolean28 = indexSettings21.defaultAllowUnmappedFields;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(byteSizeValueSetting26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test5080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5080");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder3.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder3.loadFromSource("index.auto_expand_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder3.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder3.putNull("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder3.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder3.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test5081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5081");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability23 = indexSettings21.getTranslogDurability();
        boolean boolean24 = indexSettings21.isQueryStringAllowLeadingWildcard();
        long long25 = indexSettings21.gcDeletesInMillis;
        org.elasticsearch.common.logging.ESLogger eSLogger26 = indexSettings21.getlogger();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.common.logging.ESLogger eSLogger28 = indexSettings21.logger;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 60000L + "'", long25 == 60000L);
        org.junit.Assert.assertNotNull(eSLogger26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertNotNull(eSLogger28);
    }

    @Test
    public void test5082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5082");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue23 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.globalCheckpointInterval;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.getFlushThresholdSize();
        boolean boolean26 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.Version version27 = indexSettings21.version;
        boolean boolean28 = indexSettings21.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(byteSizeValue23);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(version27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test5083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5083");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = indexSettings21.indexMetaData;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig36 = indexSettings21.getmergePolicyConfig();
        java.lang.String str37 = indexSettings21.getUUID();
        int int38 = indexSettings21.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(mergePolicyConfig36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "_na_" + "'", str37, "_na_");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10000 + "'", int38 == 10000);
    }

    @Test
    public void test5084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5084");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting4 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer5 = null;
        indexScopedSettings3.addSettingsUpdateConsumer(settingsSetting4, settingsConsumer5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer9 = null;
        indexScopedSettings7.addSettingsUpdateConsumer(settingsSetting8, settingsConsumer9);
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings3.get(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings3.dryRun(settings12);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings15.applySettings(settings18);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings15.applySettings(settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings15.get(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13, strPredicate14, indexScopedSettings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        boolean boolean32 = indexScopedSettings28.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        indexScopedSettings28.validate("index.shadow_replicas", settings34);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings34);
        org.elasticsearch.index.translog.Translog.Durability durability49 = null;
        indexSettings48.setTranslogDurability(durability49);
        org.elasticsearch.common.unit.TimeValue timeValue51 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings48.setGCDeletes(timeValue51);
        org.elasticsearch.common.settings.Settings settings53 = indexSettings48.settings;
        org.elasticsearch.index.translog.Translog.Durability durability54 = null;
        indexSettings48.durability = durability54;
        boolean boolean56 = indexSettings48.isWarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        org.elasticsearch.common.unit.TimeValue timeValue79 = indexSettings78.getDEFAULT_REFRESH_INTERVAL();
        indexSettings48.setGCDeletes(timeValue79);
        boolean boolean81 = indexMetaData0.equals((java.lang.Object) timeValue79);
        org.apache.lucene.util.Version version82 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.Settings settings83 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertNotNull(settingsSetting4);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(timeValue51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(timeValue79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(version82);
        org.junit.Assert.assertNotNull(settings83);
    }

    @Test
    public void test5085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5085");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        boolean boolean23 = indexSettings21.isShadowReplicaIndex;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher24 = indexSettings21.getParseFieldMatcher();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig25 = indexSettings21.mergePolicyConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher24);
        org.junit.Assert.assertNotNull(mergePolicyConfig25);
    }

    @Test
    public void test5086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5086");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting25 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting26 = indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.getDEFAULT_GC_DELETES();
        int int28 = indexSettings21.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeValueSetting25);
        org.junit.Assert.assertNotNull(intSetting26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test5087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5087");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        boolean boolean32 = indexScopedSettings28.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        indexScopedSettings28.validate("index.shadow_replicas", settings34);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings34);
        org.elasticsearch.index.translog.Translog.Durability durability49 = null;
        indexSettings48.setTranslogDurability(durability49);
        boolean boolean51 = indexSettings48.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting57 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer58 = null;
        indexScopedSettings56.addSettingsUpdateConsumer(settingsSetting57, settingsConsumer58);
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings52.get(settingsSetting57);
        org.elasticsearch.common.settings.Settings settings61 = indexSettings48.getValue(settingsSetting57);
        org.elasticsearch.common.settings.Settings settings62 = indexSettings21.getValue(settingsSetting57);
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings21.globalCheckpointInterval;
        org.elasticsearch.index.translog.Translog.Durability durability64 = indexSettings21.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
        org.junit.Assert.assertNotNull(settingsSetting57);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertTrue("'" + durability64 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability64.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test5088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5088");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem");
        int int2 = builder1.numberOfReplicas();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.primaryTerm((int) (short) 0, 52L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test5089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5089");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData28.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap52 = indexMetaData30.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData30.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters54 = indexMetaData30.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean58 = indexScopedSettings56.isPrivateSetting("index.");
        boolean boolean60 = indexScopedSettings56.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings62.getGroups("index.uuid");
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray74 = settings62.getAsArray("", strArray72, (java.lang.Boolean) false);
        indexScopedSettings56.validate("index.shadow_replicas", settings62);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings62);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting77 = indexSettings76.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters79 = indexMetaData78.includeFilters();
        indexSettings76.indexMetaData = indexMetaData78;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData78);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters82 = indexMetaData78.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff83 = indexMetaData30.diff(indexMetaData78);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff84 = indexMetaData28.diff(indexMetaData30);
        org.elasticsearch.common.settings.Settings settings85 = indexMetaData30.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap86 = settings85.getAsGroups();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNull(discoveryNodeFilters54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(booleanSetting77);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertNull(discoveryNodeFilters79);
        org.junit.Assert.assertNull(discoveryNodeFilters82);
        org.junit.Assert.assertNotNull(indexMetaDataDiff83);
        org.junit.Assert.assertNotNull(indexMetaDataDiff84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strMap86);
    }

    @Test
    public void test5090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5090");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.putNull("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings12.applySettings(settings15);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray26 = settings18.getAsArray("index.version.created", strArray24, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder6.extendArray("index.version.created_string", strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.uuid", 0L);
        java.lang.String str34 = builder32.get("");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.uuid", 0L);
        java.lang.String str45 = builder43.get("");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("index.shared_filesystem", (int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings57 = settings55.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings59.getGroups("index.uuid");
        java.lang.String[] strArray69 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray71 = settings59.getAsArray("", strArray69, (java.lang.Boolean) false);
        java.lang.String[] strArray73 = settings55.getAsArray("index.version.minimum_compatible", strArray69, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap76 = settings74.getGroups("index.uuid");
        java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray86 = settings74.getAsArray("", strArray84, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder49.put("", "state-", strArray69, strArray84);
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder38.extendArray("archived.", strArray84);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder6.putArray("archived.", strArray84);
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder6.put("1.0", "index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder6.put("index.number_of_shards", false);
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder6.put("index.version.upgraded", (-1L));
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test5091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5091");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.settings.Settings settings24 = indexSettings21.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexSettings21.scopedSettings;
        boolean boolean27 = indexSettings21.isWarmerEnabled();
        java.lang.String str28 = indexSettings21.defaultField;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting29 = indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger30 = indexSettings21.logger;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig31 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = indexSettings21.indexMetaData;
        java.lang.String str33 = indexSettings21.nodeName;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_all" + "'", str28, "_all");
        org.junit.Assert.assertNotNull(intSetting29);
        org.junit.Assert.assertNotNull(eSLogger30);
        org.junit.Assert.assertNotNull(mergePolicyConfig31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test5092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5092");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int29 = indexMetaData28.getNumberOfShards();
        indexSettings21.indexMetaData = indexMetaData28;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData28.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters32 = indexMetaData28.excludeFilters();
        int int33 = indexMetaData28.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.isPrivateSetting("index.");
        boolean boolean39 = indexScopedSettings35.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings41.getGroups("index.uuid");
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray53 = settings41.getAsArray("", strArray51, (java.lang.Boolean) false);
        indexScopedSettings35.validate("index.shadow_replicas", settings41);
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings41);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap56 = indexMetaData34.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap57 = indexMetaData34.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters58 = indexMetaData34.excludeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff59 = indexMetaData28.diff(indexMetaData34);
        int int60 = indexMetaData34.getNumberOfShards();
        java.util.Set<java.lang.String> strSet62 = null; // flaky: indexMetaData34.activeAllocationIds((int) (short) 1);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput63 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData34.writeTo(streamOutput63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertNull(discoveryNodeFilters32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strImmutableOpenMap56);
        org.junit.Assert.assertNotNull(strImmutableOpenMap57);
        org.junit.Assert.assertNull(discoveryNodeFilters58);
        org.junit.Assert.assertNotNull(indexMetaDataDiff59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNull(strSet62);
    }

    @Test
    public void test5093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5093");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.applySettings(settings7);
        boolean boolean10 = indexScopedSettings0.hasDynamicSetting("index.blocks.metadata");
        boolean boolean12 = indexScopedSettings0.isPrivateSetting("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 index.version.created_string=5.0.0 ");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test5094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5094");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings26.applySettings(settings29);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings26.applySettings(settings33);
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.common.unit.SizeValue sizeValue37 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue38 = settings33.getAsSize("index.shadow_replicas", sizeValue37);
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings33);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting41 = indexSettings40.getMAX_RESULT_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(sizeValue38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intSetting41);
    }

    @Test
    public void test5095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5095");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        java.lang.String str35 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting36 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = indexSettings21.indexMetaData;
        java.util.function.Predicate<java.lang.String> strPredicate38 = indexSettings21.indexNameMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue39 = indexSettings21.getTranslogSyncInterval();
        indexSettings21.setTTLPurgeDisabled(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strPredicate38);
        org.junit.Assert.assertNotNull(timeValue39);
    }

    @Test
    public void test5096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5096");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap27 = indexMetaData0.getCustoms();
        java.lang.String str28 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.uuid", 0L);
        java.lang.String str35 = builder33.get("");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder33.putNull("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.", (int) 'a');
        org.elasticsearch.common.settings.Settings settings42 = builder41.build();
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings42);
        long long44 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_na_" + "'", str28, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
    }

    @Test
    public void test5097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5097");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue73 = indexSettings21.syncInterval;
        boolean boolean74 = indexSettings21.isQueryStringLenient();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting75 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        java.util.function.Predicate<java.lang.String> strPredicate76 = indexSettings21.getindexNameMatcher();
        boolean boolean77 = indexSettings21.queryStringLenient;
        org.elasticsearch.common.unit.TimeValue timeValue78 = indexSettings21.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertNotNull(timeValue73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(durabilitySetting75);
        org.junit.Assert.assertNotNull(strPredicate76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(timeValue78);
    }

    @Test
    public void test5098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5098");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting28 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        indexSettings21.warmerEnabled = false;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher31 = indexSettings21.getParseFieldMatcher();
        org.elasticsearch.common.unit.TimeValue timeValue32 = indexSettings21.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue33 = indexSettings21.refreshInterval;
        int int34 = indexSettings21.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(durabilitySetting28);
        org.junit.Assert.assertNotNull(parseFieldMatcher31);
        org.junit.Assert.assertNotNull(timeValue32);
        org.junit.Assert.assertNotNull(timeValue33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test5099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5099");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.data_path");
        long long2 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.creationDate((long) 'a');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = builder4.mapping("index.version.created");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = builder4.mapping("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("index.uuid", 0L);
        java.lang.String str14 = builder12.get("");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder12.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings20 = settings18.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings20.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder12.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder12.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.version.minimum_compatible", (long) '#');
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder25.loadFromSource("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder25.putNull("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder25.put("index.version.created", (float) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder4.settings(builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom38 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder4.putCustom("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", custom38);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test5100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5100");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getTranslogDurability();
        org.elasticsearch.index.translog.Translog.Durability durability28 = indexSettings21.getTranslogDurability();
        boolean boolean29 = indexSettings21.isQueryStringAnalyzeWildcard();
        boolean boolean30 = indexSettings21.isDefaultAllowUnmappedFields();
        boolean boolean31 = indexSettings21.getqueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + durability28 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability28.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test5101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5101");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        boolean boolean24 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        boolean boolean30 = indexScopedSettings26.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        indexScopedSettings26.validate("index.shadow_replicas", settings32);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings32);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting47 = indexSettings46.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData48.includeFilters();
        indexSettings46.indexMetaData = indexMetaData48;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters52 = indexMetaData48.includeFilters();
        indexSettings21.indexMetaData = indexMetaData48;
        boolean boolean55 = indexMetaData48.isSameUUID("");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters56 = indexMetaData48.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(booleanSetting47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
        org.junit.Assert.assertNull(discoveryNodeFilters52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters56);
    }

    @Test
    public void test5102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5102");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        boolean boolean28 = indexSettings21.isOnSharedFilesystem();
        int int29 = indexSettings21.numberOfShards;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting30 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        boolean boolean31 = indexSettings21.queryStringLenient;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(durabilitySetting30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test5103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5103");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean73 = indexSettings21.getwarmerEnabled();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting74 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig75 = indexSettings21.getMergeSchedulerConfig();
        java.lang.String str76 = indexSettings21.nodeName;
        boolean boolean77 = indexSettings21.isOnSharedFilesystem();
        org.apache.lucene.index.MergePolicy mergePolicy78 = indexSettings21.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(booleanSetting74);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(mergePolicy78);
    }

    @Test
    public void test5104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5104");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting18 = null; // flaky: indexSettings16.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability19 = null;
// flaky:         indexSettings16.setTranslogDurability(durability19);
        org.elasticsearch.common.settings.Settings settings21 = null; // flaky: indexSettings16.settings;
        org.elasticsearch.common.logging.ESLogger eSLogger22 = null; // flaky: indexSettings16.getlogger();
        org.elasticsearch.common.settings.Settings settings23 = null; // flaky: indexSettings16.settings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertNotNull(intSetting18);
// flaky:         org.junit.Assert.assertNotNull(settings21);
// flaky:         org.junit.Assert.assertNotNull(eSLogger22);
// flaky:         org.junit.Assert.assertNotNull(settings23);
    }

    @Test
    public void test5105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5105");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.refreshInterval;
        java.lang.String str28 = indexSettings21.getDefaultField();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = indexSettings21.indexMetaData;
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings21.getsyncInterval();
        int int31 = indexSettings21.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_all" + "'", str28, "_all");
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test5106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5106");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.isQueryStringAnalyzeWildcard();
        int int26 = indexSettings21.getMaxResultWindow();
        indexSettings21.TTLPurgeDisabled = false;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig29 = indexSettings21.mergeSchedulerConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig29);
    }

    @Test
    public void test5107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5107");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability23 = indexSettings21.durability;
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        boolean boolean26 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting28 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig29 = indexSettings21.mergePolicyConfig;
        boolean boolean30 = indexSettings21.getwarmerEnabled();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting31 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(booleanSetting28);
        org.junit.Assert.assertNotNull(mergePolicyConfig29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(booleanSetting31);
    }

    @Test
    public void test5108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5108");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting48 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer49 = null;
        indexScopedSettings47.addSettingsUpdateConsumer(settingsSetting48, settingsConsumer49);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting52 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer53 = null;
        indexScopedSettings51.addSettingsUpdateConsumer(settingsSetting52, settingsConsumer53);
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings47.get(settingsSetting52);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer56 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer57 = null;
        indexScopedSettings27.addSettingsUpdateConsumer(settingsSetting52, settingsConsumer56, settingsConsumer57);
        boolean boolean59 = indexMetaData23.equals((java.lang.Object) settingsConsumer56);
        boolean boolean61 = indexMetaData23.isSameUUID("primary_terms");
        int int62 = indexMetaData23.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertNotNull(settingsSetting48);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertNotNull(settingsSetting52);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test5109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5109");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder4.settings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder4.numberOfShards((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder4.creationDate((long) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder4.primaryTerm(10, (long) (short) -1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder47.putMapping(mappingMetaData48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test5110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5110");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        boolean boolean23 = indexSettings21.isIndexUsingShadowReplicas();
        boolean boolean24 = indexSettings21.queryStringAllowLeadingWildcard;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.indexMetaData;
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.getNodeSettings();
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.uuid", 0L);
        java.lang.String str33 = builder31.get("");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder31.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = settings37.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings39.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate41 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction42 = null;
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder31.putProperties(strMap40, strPredicate41, strFunction42);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder31.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.put("index.shared_filesystem.recover_on_any_node", (int) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean52 = indexScopedSettings50.isPrivateSetting("index.");
        boolean boolean54 = indexScopedSettings50.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings56.getGroups("index.uuid");
        java.lang.String[] strArray66 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray68 = settings56.getAsArray("", strArray66, (java.lang.Boolean) false);
        indexScopedSettings50.validate("index.shadow_replicas", settings56);
        org.elasticsearch.index.IndexSettings indexSettings70 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings56);
        org.elasticsearch.Version version71 = indexMetaData49.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder44.put("archived.", version71);
        org.elasticsearch.Version version73 = settings26.getAsVersion("index.", version71);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(version71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(version73);
    }

    @Test
    public void test5111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5111");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher23 = indexSettings21.parseFieldMatcher;
        org.elasticsearch.Version version24 = indexSettings21.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNotNull(parseFieldMatcher23);
        org.junit.Assert.assertNotNull(version24);
    }

    @Test
    public void test5112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5112");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting26 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        java.lang.String str27 = indexSettings21.nodeName;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting28 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        boolean boolean29 = indexSettings21.isQueryStringLenient();
        int int30 = indexSettings21.numberOfShards;
        boolean boolean31 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = indexSettings21.indexMetaData;
        int int33 = indexMetaData32.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(durabilitySetting26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(booleanSetting28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test5113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5113");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting21 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer22 = null;
        indexScopedSettings20.addSettingsUpdateConsumer(settingsSetting21, settingsConsumer22);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting25 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer26 = null;
        indexScopedSettings24.addSettingsUpdateConsumer(settingsSetting25, settingsConsumer26);
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.get(settingsSetting25);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer29 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting25, settingsConsumer29, settingsConsumer30);
        org.elasticsearch.common.settings.Setting.Property property32 = indexScopedSettings0.getScope();
        java.lang.String str33 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting35 = indexScopedSettings0.get("");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertNotNull(settingsSetting21);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settingsSetting25);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + property32 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property32.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(wildcardSetting35);
    }

    @Test
    public void test5114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5114");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting4 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer5 = null;
        indexScopedSettings3.addSettingsUpdateConsumer(settingsSetting4, settingsConsumer5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer9 = null;
        indexScopedSettings7.addSettingsUpdateConsumer(settingsSetting8, settingsConsumer9);
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings3.get(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings3.dryRun(settings12);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings15.applySettings(settings18);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings15.applySettings(settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings15.get(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13, strPredicate14, indexScopedSettings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        boolean boolean32 = indexScopedSettings28.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        indexScopedSettings28.validate("index.shadow_replicas", settings34);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings34);
        boolean boolean50 = indexSettings48.matchesIndexName("");
        long long51 = indexSettings48.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue52 = indexSettings48.getFlushThresholdSize();
// flaky:         indexSettings26.setTranslogFlushThresholdSize(byteSizeValue52);
        org.elasticsearch.common.settings.Settings settings54 = null; // flaky: indexSettings26.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting55 = null; // flaky: indexSettings26.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        boolean boolean56 = false; // flaky: indexSettings26.TTLPurgeDisabled;
        boolean boolean57 = false; // flaky: indexSettings26.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertNotNull(settingsSetting4);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 60000L + "'", long51 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue52);
// flaky:         org.junit.Assert.assertNotNull(settings54);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValueSetting55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test5115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5115");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getRefreshInterval();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting26 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        java.lang.Class<?> wildcardClass27 = durabilitySetting26.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(durabilitySetting26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test5116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5116");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        indexSettings21.maxResultWindow = (byte) 100;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue26 = indexSettings21.flushThresholdSize;
        java.lang.String str27 = indexSettings21.defaultField;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher28 = indexSettings21.parseFieldMatcher;
        org.elasticsearch.common.settings.Settings settings29 = indexSettings21.getNodeSettings();
        boolean boolean30 = indexSettings21.getdefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting31 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        int int32 = indexSettings21.getNumberOfShards();
        boolean boolean33 = indexSettings21.isShadowReplicaIndex;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(byteSizeValue26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "_all" + "'", str27, "_all");
        org.junit.Assert.assertNotNull(parseFieldMatcher28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strSetting31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test5117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5117");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        boolean boolean24 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getDEFAULT_GC_DELETES();
        java.util.function.Predicate<java.lang.String> strPredicate26 = indexSettings21.indexNameMatcher;
        java.lang.String str27 = indexSettings21.getUUID();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting28 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        boolean boolean29 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher30 = indexSettings21.parseFieldMatcher;
        java.lang.String str31 = indexSettings21.getUUID();
        java.lang.String str32 = indexSettings21.getUUID();
        org.elasticsearch.common.logging.ESLogger eSLogger33 = indexSettings21.logger;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "_na_" + "'", str27, "_na_");
        org.junit.Assert.assertNotNull(byteSizeValueSetting28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(parseFieldMatcher30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "_na_" + "'", str31, "_na_");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "_na_" + "'", str32, "_na_");
        org.junit.Assert.assertNotNull(eSLogger33);
    }

    @Test
    public void test5118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5118");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings8 = settings6.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = settings8.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction11 = null;
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder3.putProperties(strMap9, strPredicate10, strFunction11);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.put("index.", "state-");
        java.lang.String str17 = builder3.remove("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("index.uuid", 0L);
        java.lang.String str24 = builder22.get("");
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder25.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder25.putNull("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings31.applySettings(settings34);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray45 = settings37.getAsArray("index.version.created", strArray43, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder25.extendArray("index.version.created_string", strArray45);
        org.elasticsearch.common.settings.Settings.Builder builder48 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray52 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder48.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList53);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.put("index.version.created", (double) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder63 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray67 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder63.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList68);
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder70.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder73.put("index.version.created", (double) ' ');
        java.lang.Class<?> wildcardClass77 = builder76.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder61.put("index.version.created_string", (java.lang.Class) wildcardClass77);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder46.put("index.blocks.write", (java.lang.Class) wildcardClass77);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder3.put("index.auto_expand_replicas", (java.lang.Class) wildcardClass77);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.shadow_replicas");
        int int84 = builder83.numberOfShards();
        java.lang.Class<?> wildcardClass85 = builder83.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder80.put("index.shared_filesystem", (java.lang.Class) wildcardClass85);
        java.util.Map<java.lang.String, java.lang.String> strMap87 = builder86.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(strMap87);
    }

    @Test
    public void test5119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5119");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        boolean boolean23 = indexSettings21.isShadowReplicaIndex;
        java.util.function.Predicate<java.lang.String> strPredicate24 = indexSettings21.getindexNameMatcher();
        java.lang.String str25 = indexSettings21.getDefaultField();
        long long26 = indexSettings21.getGcDeletesInMillis();
        boolean boolean27 = indexSettings21.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "_all" + "'", str25, "_all");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 60000L + "'", long26 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test5120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5120");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        indexSettings21.gcDeletesInMillis = (byte) 100;
        java.util.function.Predicate<java.lang.String> strPredicate28 = indexSettings21.indexNameMatcher;
        org.elasticsearch.common.settings.Settings settings29 = indexSettings21.getSettings();
        boolean boolean30 = indexSettings21.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(strPredicate28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test5121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5121");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getNodeSettings();
        int int28 = indexSettings21.maxResultWindow;
        boolean boolean29 = indexSettings21.queryStringLenient;
        org.elasticsearch.common.settings.Settings settings30 = indexSettings21.getNodeSettings();
        boolean boolean31 = settings30.isEmpty();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test5122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5122");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getValue(settingsSetting17);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting19 = null; // flaky: indexSettings16.getDEFAULT_FIELD_SETTING();
        boolean boolean20 = false; // flaky: indexSettings16.queryStringAnalyzeWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(settingsSetting17);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertNotNull(strSetting19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test5123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5123");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder7 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.uuid", 0L);
        java.lang.String str12 = builder10.get("");
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder13.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder13.put("index.version.upgraded", (double) 10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder6.settings(builder13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int21 = indexMetaData20.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings25.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings22.applySettings(settings25);
        java.lang.String str30 = settings25.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.index.IndexSettings indexSettings36 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData20, settings25, strPredicate31, indexScopedSettings32);
        int int37 = 0; // flaky: indexSettings36.getNumberOfReplicas();
        int int38 = 0; // flaky: indexSettings36.getMaxRescoreWindow();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings42.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings39.applySettings(settings42);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings47 = indexScopedSettings39.applySettings(settings46);
        boolean boolean48 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings46);
// flaky:         indexSettings36.settings = settings46;
        org.elasticsearch.common.settings.Settings settings51 = settings46.getAsSettings("");
        java.lang.String str53 = settings51.get("index.blocks.read");
        org.elasticsearch.common.settings.Settings settings55 = settings51.getAsSettings("index.version.minimum_compatible");
        java.lang.String[] strArray60 = new java.lang.String[] { "index.version.created_string", "index.shared_filesystem.recover_on_any_node", "index.priority" };
        java.lang.String[] strArray61 = settings51.getAsArray("index.version.minimum_compatible", strArray60);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder13.put(settings51);
        boolean boolean63 = settings51.isEmpty();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.isPrivateSetting("index.");
        boolean boolean70 = indexScopedSettings66.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings72.getGroups("index.uuid");
        java.lang.String[] strArray82 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray84 = settings72.getAsArray("", strArray82, (java.lang.Boolean) false);
        indexScopedSettings66.validate("index.shadow_replicas", settings72);
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData65, settings72);
        indexSettings86.setEnableWarmer(true);
        java.lang.String str89 = indexSettings86.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData90 = indexSettings86.getIndexMetaData();
        java.lang.String str91 = indexSettings86.getNodeName();
        org.elasticsearch.common.settings.Settings settings92 = indexSettings86.getNodeSettings();
        int int93 = indexSettings86.maxResultWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings94 = indexSettings86.scopedSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting95 = indexSettings86.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue96 = indexSettings86.flushThresholdSize;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue97 = settings51.getAsBytesSize("primary_terms", byteSizeValue96);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10000 + "'", int38 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(indexMetaData90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10000 + "'", int93 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings94);
        org.junit.Assert.assertNotNull(durabilitySetting95);
        org.junit.Assert.assertNotNull(byteSizeValue96);
        org.junit.Assert.assertNotNull(byteSizeValue97);
    }

    @Test
    public void test5124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5124");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.excludeFilters();
        java.lang.Object obj2 = null;
        boolean boolean3 = indexMetaData0.equals(obj2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
    }

    @Test
    public void test5125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5125");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        int int7 = builder4.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.removeAlias("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.numberOfShards((int) '4');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = builder11.mapping("hi!");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(mappingMetaData15);
    }

    @Test
    public void test5126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5126");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.logging.ESLogger eSLogger28 = indexSettings21.getlogger();
        boolean boolean29 = indexSettings21.isShadowReplicaIndex();
        org.elasticsearch.index.translog.Translog.Durability durability30 = indexSettings21.getdurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        boolean boolean36 = indexScopedSettings32.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        indexScopedSettings32.validate("index.shadow_replicas", settings38);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings38);
        org.elasticsearch.Version version53 = indexMetaData31.getUpgradedVersion();
        indexSettings21.indexMetaData = indexMetaData31;
        long long55 = indexMetaData31.getVersion();
        org.elasticsearch.common.settings.Settings settings56 = indexMetaData31.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertNotNull(eSLogger28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + durability30 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability30.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(version53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertNotNull(settings56);
    }

    @Test
    public void test5127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5127");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder3.loadFromSource("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int21 = indexMetaData20.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap22 = indexMetaData20.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData20.requireFilters();
        org.elasticsearch.Version version24 = indexMetaData20.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder3.put("hi!", version24);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.uuid", 0L);
        java.lang.String str31 = builder29.get("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = settings32.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = settings34.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction37 = null;
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder29.putProperties(strMap35, strPredicate36, strFunction37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder25.put(strMap35);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.put("index.", true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean46 = indexScopedSettings44.isPrivateSetting("index.");
        boolean boolean48 = indexScopedSettings44.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray62 = settings50.getAsArray("", strArray60, (java.lang.Boolean) false);
        indexScopedSettings44.validate("index.shadow_replicas", settings50);
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting65 = indexSettings64.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting67 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer68 = null;
        indexScopedSettings66.addSettingsUpdateConsumer(settingsSetting67, settingsConsumer68);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings70 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting71 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer72 = null;
        indexScopedSettings70.addSettingsUpdateConsumer(settingsSetting71, settingsConsumer72);
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings66.get(settingsSetting71);
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings76 = indexScopedSettings66.dryRun(settings75);
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings76);
        indexSettings64.settings = settings77;
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder42.put(settings77);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder42.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder80.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(booleanSetting65);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertNotNull(settingsSetting67);
        org.junit.Assert.assertNotNull(indexScopedSettings70);
        org.junit.Assert.assertNotNull(settingsSetting71);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test5128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5128");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("active_allocations");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test5129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5129");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.queryStringLenient;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexSettings21.getScopedSettings();
        boolean boolean27 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        boolean boolean33 = indexScopedSettings29.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        indexScopedSettings29.validate("index.shadow_replicas", settings35);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        org.elasticsearch.index.translog.Translog.Durability durability50 = null;
        indexSettings49.setTranslogDurability(durability50);
        org.elasticsearch.common.settings.Settings settings52 = indexSettings49.getSettings();
        indexSettings21.settings = settings52;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(settings52);
    }

    @Test
    public void test5130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5130");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        boolean boolean19 = indexScopedSettings15.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings21.getGroups("index.uuid");
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray33 = settings21.getAsArray("", strArray31, (java.lang.Boolean) false);
        indexScopedSettings15.validate("index.shadow_replicas", settings21);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings21);
        org.elasticsearch.index.translog.Translog.Durability durability36 = null;
        indexSettings35.setTranslogDurability(durability36);
        org.elasticsearch.common.unit.TimeValue timeValue38 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings35.setGCDeletes(timeValue38);
        org.elasticsearch.Version version40 = indexSettings35.version;
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder8.put("active_allocations", version40);
        org.elasticsearch.common.settings.Settings settings42 = builder41.build();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder41.put("index.shared_filesystem", 100);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.version.upgraded", (float) (-1L));
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean52 = indexScopedSettings50.isPrivateSetting("index.");
        boolean boolean54 = indexScopedSettings50.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings56.getGroups("index.uuid");
        java.lang.String[] strArray66 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray68 = settings56.getAsArray("", strArray66, (java.lang.Boolean) false);
        indexScopedSettings50.validate("index.shadow_replicas", settings56);
        org.elasticsearch.index.IndexSettings indexSettings70 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings56);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap71 = indexMetaData49.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap72 = indexMetaData49.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData49.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap74 = indexMetaData49.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData49.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData49.getSettings();
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder45.put(settings76);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder45.put("index.version.created", "index.version.created_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(version40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertNotNull(strImmutableOpenMap72);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNotNull(strImmutableOpenMap74);
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test5131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5131");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.isPrivateSetting("index.");
        boolean boolean10 = indexScopedSettings6.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray24 = settings12.getAsArray("", strArray22, (java.lang.Boolean) false);
        indexScopedSettings6.validate("index.shadow_replicas", settings12);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings12);
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings26.setTranslogDurability(durability27);
        boolean boolean29 = indexSettings26.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer32 = null;
        indexScopedSettings30.addSettingsUpdateConsumer(settingsSetting31, settingsConsumer32);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting35 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer36 = null;
        indexScopedSettings34.addSettingsUpdateConsumer(settingsSetting35, settingsConsumer36);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings30.get(settingsSetting35);
        org.elasticsearch.common.settings.Settings settings39 = indexSettings26.getValue(settingsSetting35);
        java.lang.String str40 = indexSettings26.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting41 = indexSettings26.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = indexSettings26.indexMetaData;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff43 = indexMetaData0.diff(indexMetaData42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData42);
        org.elasticsearch.Version version45 = indexMetaData42.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settingsSetting35);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaDataDiff43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(version45);
    }

    @Test
    public void test5132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5132");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        indexSettings21.maxResultWindow = (byte) 100;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue26 = indexSettings21.flushThresholdSize;
        java.lang.String str27 = indexSettings21.defaultField;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher28 = indexSettings21.parseFieldMatcher;
        org.elasticsearch.common.settings.Settings settings29 = indexSettings21.getNodeSettings();
        boolean boolean30 = indexSettings21.getdefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting31 = indexSettings21.getMAX_RESULT_WINDOW_SETTING();
        java.lang.String str32 = indexSettings21.customDataPath();
        org.elasticsearch.common.settings.Settings settings33 = indexSettings21.nodeSettings;
        org.elasticsearch.common.settings.Settings settings35 = settings33.getByPrefix("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings43);
        indexSettings57.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue60 = indexSettings57.getsyncInterval();
        boolean boolean61 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig62 = indexSettings57.getmergePolicyConfig();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.durability;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher64 = indexSettings57.getParseFieldMatcher();
        org.elasticsearch.Version version65 = indexSettings57.getversion();
        boolean boolean66 = indexSettings57.getdefaultAllowUnmappedFields();
        boolean boolean67 = indexSettings57.queryStringAnalyzeWildcard;
        java.util.function.Predicate<java.lang.String> strPredicate68 = indexSettings57.indexNameMatcher;
        org.elasticsearch.common.settings.Settings settings69 = settings33.filter(strPredicate68);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(byteSizeValue26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "_all" + "'", str27, "_all");
        org.junit.Assert.assertNotNull(parseFieldMatcher28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(intSetting31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(timeValue60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig62);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher64);
        org.junit.Assert.assertNotNull(version65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strPredicate68);
        org.junit.Assert.assertNotNull(settings69);
    }

    @Test
    public void test5133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5133");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting56 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        indexSettings21.setwarmerEnabled(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertNotNull(booleanSetting56);
    }

    @Test
    public void test5134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5134");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte8 = state7.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.state(state7);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = builder9.mapping("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.removeAlias("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAlias("index.creation_date_string");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = builder13.mapping("index.blocks.read_only");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(mappingMetaData17);
    }

    @Test
    public void test5135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5135");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.blocks.metadata", (long) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.uuid", 0L);
        java.lang.String str25 = builder23.get("");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder26.putNull("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings32.applySettings(settings35);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray46 = settings38.getAsArray("index.version.created", strArray44, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder26.extendArray("index.version.created_string", strArray46);
        org.elasticsearch.common.settings.Settings.Builder builder48 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.uuid", 0L);
        java.lang.String str53 = builder51.get("");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings56 = settings54.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap57 = settings56.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder51.putProperties(strMap57, strPredicate58, strFunction59);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder26.put(strMap57);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder19.put(strMap57);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("index.version.created", (int) (short) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test5136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5136");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability23 = indexSettings21.durability;
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings21.refreshInterval;
        java.lang.String str27 = indexSettings21.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "_na_" + "'", str27, "_na_");
    }

    @Test
    public void test5137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5137");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099aindex.version.created_string=5.0.0a");
    }

    @Test
    public void test5138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5138");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.isPrivateSetting("index.");
        boolean boolean10 = indexScopedSettings6.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray24 = settings12.getAsArray("", strArray22, (java.lang.Boolean) false);
        indexScopedSettings6.validate("index.shadow_replicas", settings12);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings12);
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings26.setTranslogDurability(durability27);
        boolean boolean29 = indexSettings26.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer32 = null;
        indexScopedSettings30.addSettingsUpdateConsumer(settingsSetting31, settingsConsumer32);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting35 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer36 = null;
        indexScopedSettings34.addSettingsUpdateConsumer(settingsSetting35, settingsConsumer36);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings30.get(settingsSetting35);
        org.elasticsearch.common.settings.Settings settings39 = indexSettings26.getValue(settingsSetting35);
        java.lang.String str40 = indexSettings26.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting41 = indexSettings26.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = indexSettings26.indexMetaData;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff43 = indexMetaData0.diff(indexMetaData42);
        int int44 = indexMetaData0.getNumberOfReplicas();
        java.lang.String str45 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters46 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settingsSetting35);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaDataDiff43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "_na_" + "'", str45, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters46);
    }

    @Test
    public void test5139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5139");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig26 = indexSettings21.getMergeSchedulerConfig();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = indexSettings21.scopedSettings;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig28 = indexSettings21.getMergeSchedulerConfig();
        boolean boolean29 = indexSettings21.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test5140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5140");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = builder24.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        boolean boolean32 = indexScopedSettings28.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        indexScopedSettings28.validate("index.shadow_replicas", settings34);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings34);
        org.elasticsearch.index.translog.Translog.Durability durability49 = null;
        indexSettings48.setTranslogDurability(durability49);
        org.elasticsearch.common.unit.TimeValue timeValue51 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings48.setGCDeletes(timeValue51);
        org.elasticsearch.common.settings.Settings settings53 = indexSettings48.settings;
        org.elasticsearch.index.translog.Translog.Durability durability54 = indexSettings48.getdurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = indexSettings48.getIndexMetaData();
        org.elasticsearch.index.translog.Translog.Durability durability56 = indexSettings48.durability;
        org.elasticsearch.common.settings.Settings settings57 = indexSettings48.getNodeSettings();
        java.util.Set<java.lang.String> strSet58 = settings57.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder24.putActiveAllocationIds((int) (short) 1, strSet58);
        org.elasticsearch.common.settings.Settings settings60 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder59.settings(settings60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder59.version(0L);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(timeValue51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNull(durability54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNull(durability56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test5141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5141");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        org.elasticsearch.common.unit.TimeValue timeValue55 = indexSettings21.getsyncInterval();
        int int56 = indexSettings21.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10000 + "'", int56 == 10000);
    }

    @Test
    public void test5142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5142");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getTranslogDurability();
        boolean boolean28 = indexSettings21.queryStringAllowLeadingWildcard;
        boolean boolean29 = indexSettings21.isQueryStringLenient();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting30 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.Version version31 = indexSettings21.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue32 = indexSettings21.flushThresholdSize;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting33 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(timeValueSetting30);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteSizeValue32);
        org.junit.Assert.assertNotNull(timeValueSetting33);
    }

    @Test
    public void test5143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5143");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getNodeSettings();
        int int28 = indexSettings21.maxResultWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting30 = indexSettings21.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig31 = indexSettings21.mergeSchedulerConfig;
        boolean boolean32 = indexSettings21.isShadowReplicaIndex;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(intSetting30);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test5144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5144");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("index.blocks.write");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putMapping(mappingMetaData5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test5145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5145");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean26 = indexSettings21.getisShadowReplicaIndex();
        boolean boolean27 = indexSettings21.hasCustomDataPath();
        boolean boolean28 = indexSettings21.getisShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting29 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        org.elasticsearch.common.settings.Settings settings52 = indexSettings51.getSettings();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue53 = indexSettings51.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue54 = indexSettings51.globalCheckpointInterval;
        int int55 = indexSettings51.getMaxResultWindow();
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexSettings51.refreshInterval;
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings51.refreshInterval;
        indexSettings21.setRefreshInterval(timeValue57);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(booleanSetting29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(byteSizeValue53);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertNotNull(timeValue57);
    }

    @Test
    public void test5146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5146");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.isPrivateSetting("index.");
        boolean boolean10 = indexScopedSettings6.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray24 = settings12.getAsArray("", strArray22, (java.lang.Boolean) false);
        indexScopedSettings6.validate("index.shadow_replicas", settings12);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings12);
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings26.setTranslogDurability(durability27);
        boolean boolean29 = indexSettings26.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer32 = null;
        indexScopedSettings30.addSettingsUpdateConsumer(settingsSetting31, settingsConsumer32);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting35 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer36 = null;
        indexScopedSettings34.addSettingsUpdateConsumer(settingsSetting35, settingsConsumer36);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings30.get(settingsSetting35);
        org.elasticsearch.common.settings.Settings settings39 = indexSettings26.getValue(settingsSetting35);
        java.lang.String str40 = indexSettings26.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting41 = indexSettings26.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = indexSettings26.indexMetaData;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff43 = indexMetaData0.diff(indexMetaData42);
        int int44 = indexMetaData42.getNumberOfShards();
        int int45 = indexMetaData42.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData42);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData48 = indexMetaData42.mappingOrDefault("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#index.version.created_string=5.0.0#");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput49 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData42.writeTo(streamOutput49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settingsSetting35);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaDataDiff43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(mappingMetaData48);
    }

    @Test
    public void test5147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5147");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = indexSettings21.indexMetaData;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap36 = indexMetaData35.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters37 = indexMetaData35.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters38 = indexMetaData35.includeFilters();
        org.elasticsearch.Version version39 = indexMetaData35.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNull(discoveryNodeFilters37);
        org.junit.Assert.assertNull(discoveryNodeFilters38);
        org.junit.Assert.assertNotNull(version39);
    }

    @Test
    public void test5148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5148");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.put("index.shadow_replicas", "");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#index.version.created_string=5.0.0#", false);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder11.internalMap();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder11.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put("primary_terms", 10L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test5149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5149");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap26 = indexMetaData23.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings27 = indexMetaData23.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData23);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test5150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5150");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.nodeSettings;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings23.getGroups("index.priority", true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        boolean boolean33 = indexScopedSettings29.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        indexScopedSettings29.validate("index.shadow_replicas", settings35);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings49.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue51 = indexSettings49.globalCheckpointInterval;
        org.elasticsearch.Version version52 = indexSettings49.getversion();
        org.elasticsearch.common.unit.TimeValue timeValue53 = indexSettings49.syncInterval;
        org.elasticsearch.common.unit.TimeValue timeValue54 = settings23.getAsTime("index.blocks.read", timeValue53);
        java.lang.Boolean boolean57 = settings23.getAsBoolean("index.blocks.write", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings23.getAsGroups();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(timeValue51);
        org.junit.Assert.assertNotNull(version52);
        org.junit.Assert.assertNotNull(timeValue53);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertEquals("'" + boolean57 + "' != '" + false + "'", boolean57, false);
        org.junit.Assert.assertNotNull(strMap58);
    }

    @Test
    public void test5151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5151");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        int int25 = indexSettings21.getMaxResultWindow();
        int int26 = indexSettings21.getMaxResultWindow();
        int int27 = indexSettings21.getMaxRescoreWindow();
        boolean boolean29 = indexSettings21.matchesIndexName("active_allocations");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test5152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5152");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting28 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        indexSettings21.setMaxRescoreWindow((int) ' ');
        boolean boolean31 = indexSettings21.isIndexUsingShadowReplicas();
        boolean boolean32 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.Version version33 = indexSettings21.getIndexVersionCreated();
        boolean boolean34 = indexSettings21.warmerEnabled;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher35 = indexSettings21.parseFieldMatcher;
        int int36 = indexSettings21.getNumberOfShards();
        boolean boolean37 = indexSettings21.isShadowReplicaIndex();
        java.lang.String str38 = indexSettings21.getDefaultField();
        java.lang.String str39 = indexSettings21.defaultField;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting40 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(durabilitySetting28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(parseFieldMatcher35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "_all" + "'", str38, "_all");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "_all" + "'", str39, "_all");
        org.junit.Assert.assertNotNull(timeValueSetting40);
    }

    @Test
    public void test5153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5153");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        boolean boolean23 = indexSettings21.isShadowReplicaIndex;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.isPrivateSetting("index.");
        boolean boolean29 = indexScopedSettings25.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray43 = settings31.getAsArray("", strArray41, (java.lang.Boolean) false);
        indexScopedSettings25.validate("index.shadow_replicas", settings31);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings31);
        org.elasticsearch.common.settings.Settings settings46 = indexSettings45.getSettings();
        indexSettings45.maxResultWindow = (short) -1;
        boolean boolean49 = indexSettings45.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings45.syncInterval;
        indexSettings21.refreshInterval = timeValue50;
        indexSettings21.setMaxRescoreWindow(100);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting54 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        java.lang.String str55 = indexSettings21.defaultField;
        indexSettings21.warmerEnabled = false;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(durabilitySetting54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "_all" + "'", str55, "_all");
    }

    @Test
    public void test5154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5154");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.uuid");
        java.lang.String str7 = builder6.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.index("");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "index.uuid" + "'", str7, "index.uuid");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test5155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5155");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getValue(settingsSetting17);
        int int19 = 0; // flaky: indexSettings16.numberOfShards;
        org.elasticsearch.common.logging.ESLogger eSLogger20 = null; // flaky: indexSettings16.logger;
        org.elasticsearch.common.settings.Settings settings21 = null; // flaky: indexSettings16.getSettings();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig22 = null; // flaky: indexSettings16.mergeSchedulerConfig;
// flaky:         indexSettings16.setTTLPurgeDisabled(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(settingsSetting17);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertNotNull(eSLogger20);
// flaky:         org.junit.Assert.assertNotNull(settings21);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig22);
    }

    @Test
    public void test5156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5156");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting4 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer5 = null;
        indexScopedSettings3.addSettingsUpdateConsumer(settingsSetting4, settingsConsumer5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer9 = null;
        indexScopedSettings7.addSettingsUpdateConsumer(settingsSetting8, settingsConsumer9);
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings3.get(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings3.dryRun(settings12);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings15.applySettings(settings18);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings15.applySettings(settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings15.get(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13, strPredicate14, indexScopedSettings15);
        long long27 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting28 = org.elasticsearch.index.IndexSettings.MAX_RESULT_WINDOW_SETTING;
        boolean boolean29 = indexMetaData0.equals((java.lang.Object) intSetting28);
        org.elasticsearch.common.settings.Settings settings30 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamInput streamInput32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = indexMetaData0.readFrom(streamInput32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertNotNull(settingsSetting4);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(intSetting28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test5157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5157");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.nodeSettings;
        boolean boolean24 = indexSettings21.isQueryStringLenient();
        indexSettings21.maxRescoreWindow = 10000;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting27 = indexSettings21.getMAX_RESULT_WINDOW_SETTING();
        int int28 = indexSettings21.getMaxRescoreWindow();
        boolean boolean30 = indexSettings21.matchesIndexName("index.uuid");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intSetting27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test5158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5158");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "index.number_of_shards", "hi!", "archived.", "index.", "index.version.created", "index.data_path", "hi!", "index.version.upgraded_string", "index.shared_filesystem.recover_on_any_node", "primary_terms", "index.shared_filesystem.recover_on_any_node", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder3.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList27);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("state-", (double) 10);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.auto_expand_replicas", (float) 32);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test5159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5159");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability23 = indexSettings21.getTranslogDurability();
        boolean boolean24 = indexSettings21.isQueryStringAllowLeadingWildcard();
        long long25 = indexSettings21.gcDeletesInMillis;
        org.elasticsearch.common.logging.ESLogger eSLogger26 = indexSettings21.getlogger();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher28 = indexSettings21.getParseFieldMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 60000L + "'", long25 == 60000L);
        org.junit.Assert.assertNotNull(eSLogger26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertNotNull(parseFieldMatcher28);
    }

    @Test
    public void test5160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5160");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.Version version26 = indexSettings21.version;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig28 = indexSettings21.getMergeSchedulerConfig();
        boolean boolean29 = indexSettings21.isQueryStringAllowLeadingWildcard();
        indexSettings21.setMaxRescoreWindow((int) 'a');
        java.lang.String str32 = indexSettings21.nodeName;
        org.elasticsearch.common.logging.ESLogger eSLogger33 = indexSettings21.logger;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting34 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(eSLogger33);
        org.junit.Assert.assertNotNull(strSetting34);
    }

    @Test
    public void test5161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5161");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        boolean boolean21 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting24 = indexScopedSettings0.get("index.version.upgraded_string");
        boolean boolean26 = indexScopedSettings0.hasDynamicSetting("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.uuid", 0L);
        java.lang.String str33 = builder31.get("");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings settings38 = builder34.build();
        org.elasticsearch.common.unit.SizeValue sizeValue40 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue41 = settings38.getAsSize("primary_terms", sizeValue40);
        boolean boolean42 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings38);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate("state-", settings38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [state-]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNull(wildcardSetting24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNull(sizeValue41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test5162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5162");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        java.lang.String str35 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting36 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = indexSettings21.indexMetaData;
        java.util.function.Predicate<java.lang.String> strPredicate38 = indexSettings21.indexNameMatcher;
        org.elasticsearch.Version version39 = indexSettings21.getversion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strPredicate38);
        org.junit.Assert.assertNotNull(version39);
    }

    @Test
    public void test5163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5163");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int4 = indexMetaData0.getTotalNumberOfShards();
        int int5 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(settings7);
    }

    @Test
    public void test5164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5164");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        boolean boolean21 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting24 = indexScopedSettings0.get("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings25.applySettings(settings28);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.applySettings(settings32);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting34 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings25.get(settingsSetting34);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean38 = indexScopedSettings36.isPrivateSetting("index.");
        boolean boolean40 = indexScopedSettings36.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings42.getGroups("index.uuid");
        java.lang.String[] strArray52 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray54 = settings42.getAsArray("", strArray52, (java.lang.Boolean) false);
        indexScopedSettings36.validate("index.shadow_replicas", settings42);
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet56 = indexScopedSettings36.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean63 = indexScopedSettings61.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings67 = indexScopedSettings61.applySettings(settings64);
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings70 = settings68.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap71 = settings70.getAsMap();
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.common.settings.Settings settings73 = indexScopedSettings57.dryRun(settings70);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap76 = settings73.getGroups("index.shadow_replicas", true);
        org.elasticsearch.common.settings.Settings settings78 = settings73.getByPrefix("_na_");
        indexScopedSettings36.validate(settings78);
        org.elasticsearch.common.settings.Settings settings80 = indexScopedSettings25.dryRun(settings78);
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings0.dryRun(settings80);
        boolean boolean83 = indexScopedSettings0.hasDynamicSetting("index.number_of_replicas");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNull(wildcardSetting24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settingsSetting34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(wildcardSettingSet56);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test5165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5165");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.nodeSettings;
        java.lang.String str24 = indexSettings21.nodeName;
        long long25 = indexSettings21.gcDeletesInMillis;
        boolean boolean26 = indexSettings21.getqueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 60000L + "'", long25 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test5166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5166");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder4.settings(settings27);
        java.lang.String str42 = settings27.get("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.isPrivateSetting("index.");
        boolean boolean47 = indexScopedSettings43.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings49.getGroups("index.uuid");
        java.lang.String[] strArray59 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray61 = settings49.getAsArray("", strArray59, (java.lang.Boolean) false);
        indexScopedSettings43.validate("index.shadow_replicas", settings49);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting64 = indexScopedSettings43.get("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int66 = indexMetaData65.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = new org.elasticsearch.common.settings.IndexScopedSettings(settings27, indexScopedSettings43, indexMetaData65);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters68 = indexMetaData65.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters69 = indexMetaData65.requireFilters();
        org.elasticsearch.Version version70 = indexMetaData65.getCreationVersion();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(wildcardSetting64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters68);
        org.junit.Assert.assertNull(discoveryNodeFilters69);
        org.junit.Assert.assertNotNull(version70);
    }

    @Test
    public void test5167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5167");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        indexSettings21.setMaxResultWindow(1);
        boolean boolean25 = indexSettings21.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        boolean boolean27 = indexSettings21.defaultAllowUnmappedFields;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test5168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5168");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting24 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability25 = indexSettings21.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(durabilitySetting24);
        org.junit.Assert.assertTrue("'" + durability25 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability25.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test5169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5169");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        boolean boolean21 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean23 = indexScopedSettings0.isPrivateSetting("index.uuid");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting25 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer26 = null;
        indexScopedSettings24.addSettingsUpdateConsumer(settingsSetting25, settingsConsumer26);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings28.applySettings(settings31);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings37 = settings35.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = settings37.getAsMap();
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings28.applySettings(settings37);
        org.elasticsearch.common.settings.Settings settings40 = indexScopedSettings24.dryRun(settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.isPrivateSetting("index.");
        boolean boolean46 = indexScopedSettings42.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings48.getGroups("index.uuid");
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray60 = settings48.getAsArray("", strArray58, (java.lang.Boolean) false);
        indexScopedSettings42.validate("index.shadow_replicas", settings48);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings48);
        org.elasticsearch.index.translog.Translog.Durability durability63 = null;
        indexSettings62.setTranslogDurability(durability63);
        boolean boolean65 = indexSettings62.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting67 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer68 = null;
        indexScopedSettings66.addSettingsUpdateConsumer(settingsSetting67, settingsConsumer68);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings70 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting71 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer72 = null;
        indexScopedSettings70.addSettingsUpdateConsumer(settingsSetting71, settingsConsumer72);
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings66.get(settingsSetting71);
        org.elasticsearch.common.settings.Settings settings75 = indexSettings62.getValue(settingsSetting71);
        java.lang.String str76 = indexSettings62.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting77 = indexSettings62.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = indexSettings62.indexMetaData;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings79 = indexScopedSettings0.copy(settings37, indexMetaData78);
        int int80 = indexMetaData78.getNumberOfShards();
        org.elasticsearch.Version version81 = indexMetaData78.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settingsSetting25);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertNotNull(settingsSetting67);
        org.junit.Assert.assertNotNull(indexScopedSettings70);
        org.junit.Assert.assertNotNull(settingsSetting71);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting77);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertNotNull(indexScopedSettings79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(version81);
    }

    @Test
    public void test5170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5170");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099aindex.version.created_string=5.0.0a");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099aindex.version.created_string=5.0.0a]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test5171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5171");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = indexScopedSettings1.applySettings(settings4);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings8.applySettings(settings11);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = settings15.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = settings17.getAsMap();
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings8.applySettings(settings17);
        org.elasticsearch.common.settings.Setting.Property property20 = indexScopedSettings8.getScope();
        java.util.function.Predicate<java.lang.String> strPredicate21 = indexScopedSettings8.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.isPrivateSetting("index.");
        boolean boolean26 = indexScopedSettings22.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        indexScopedSettings22.validate("index.shadow_replicas", settings28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings42.applySettings(settings45);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings42.applySettings(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = indexScopedSettings22.copy(settings50, indexMetaData51);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean55 = indexScopedSettings53.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings56.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings53.applySettings(settings56);
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings53.applySettings(settings60);
        indexScopedSettings22.validate(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate21, indexScopedSettings22);
        boolean boolean64 = false; // flaky: indexSettings63.getwarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = null; // flaky: indexSettings63.indexMetaData;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean69 = indexScopedSettings67.isPrivateSetting("index.");
        boolean boolean71 = indexScopedSettings67.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap75 = settings73.getGroups("index.uuid");
        java.lang.String[] strArray83 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray85 = settings73.getAsArray("", strArray83, (java.lang.Boolean) false);
        indexScopedSettings67.validate("index.shadow_replicas", settings73);
        org.elasticsearch.index.IndexSettings indexSettings87 = new org.elasticsearch.index.IndexSettings(indexMetaData66, settings73);
        org.elasticsearch.common.settings.Settings settings88 = indexSettings87.getSettings();
        boolean boolean89 = indexSettings87.isIndexUsingShadowReplicas();
        int int90 = indexSettings87.getNumberOfShards();
        boolean boolean91 = false; // flaky: indexMetaData65.equals((java.lang.Object) int90);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder92 = null; // flaky: new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData65);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = null; // flaky: builder92.primaryTerm((int) (short) 10, (long) 5000099);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + property20 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property20.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test5172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5172");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.getwarmerEnabled();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean28 = indexSettings21.TTLPurgeDisabled;
        java.lang.String str29 = indexSettings21.getNodeName();
        indexSettings21.gcDeletesInMillis = (byte) 1;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test5173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5173");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig26 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig27 = indexSettings21.mergeSchedulerConfig;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting28 = indexSettings21.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        boolean boolean29 = indexSettings21.getwarmerEnabled();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher30 = indexSettings21.getParseFieldMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig26);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig27);
        org.junit.Assert.assertNotNull(timeValueSetting28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(parseFieldMatcher30);
    }

    @Test
    public void test5174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5174");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting5 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer6 = null;
        indexScopedSettings4.addSettingsUpdateConsumer(settingsSetting5, settingsConsumer6);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.get(settingsSetting5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean11 = indexScopedSettings9.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings9.applySettings(settings12);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings9.applySettings(settings16);
        boolean boolean18 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings16);
        org.elasticsearch.common.unit.SizeValue sizeValue20 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue21 = settings16.getAsSize("index.shadow_replicas", sizeValue20);
        boolean boolean22 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings16);
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings0.dryRun(settings16);
        java.util.Set<java.lang.String> strSet24 = settings23.names();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings23.getAsGroups(false);
        boolean boolean27 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = settings23.getAsMap();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settingsSetting5);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(sizeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strMap28);
    }

    @Test
    public void test5175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5175");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        indexSettings21.maxRescoreWindow = (byte) 1;
        indexSettings21.gcDeletesInMillis = 60000L;
        org.elasticsearch.common.unit.TimeValue timeValue32 = indexSettings21.globalCheckpointInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertNotNull(timeValue32);
    }

    @Test
    public void test5176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5176");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability23 = indexSettings21.getTranslogDurability();
        boolean boolean24 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings21.getALLOW_UNMAPPED();
        java.util.function.Predicate<java.lang.String> strPredicate26 = indexSettings21.getindexNameMatcher();
        indexSettings21.TTLPurgeDisabled = false;
        indexSettings21.setMaxRescoreWindow(10000);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = indexSettings21.indexMetaData;
        long long32 = indexMetaData31.getCreationDate();
        long long33 = indexMetaData31.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
    }

    @Test
    public void test5177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5177");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder1.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.creationDate((long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.removeAllAliases();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test5178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5178");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = indexSettings21.indexMetaData;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData26);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters28 = indexMetaData26.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters29 = indexMetaData26.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNull(discoveryNodeFilters28);
        org.junit.Assert.assertNull(discoveryNodeFilters29);
    }

    @Test
    public void test5179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5179");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.putMapping(mappingMetaData6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test5180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5180");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) (byte) -1);
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.settings(settings4);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = builder3.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test5181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5181");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        boolean boolean23 = indexSettings21.isIndexUsingShadowReplicas();
        boolean boolean24 = indexSettings21.queryStringAllowLeadingWildcard;
        int int25 = indexSettings21.getMaxResultWindow();
        boolean boolean26 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig27 = indexSettings21.mergeSchedulerConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig27);
    }

    @Test
    public void test5182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5182");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.getGlobalCheckpointInterval();
        java.lang.String str28 = indexSettings21.getNodeName();
        boolean boolean29 = indexSettings21.isShadowReplicaIndex;
        boolean boolean30 = indexSettings21.getisShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test5183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5183");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean23 = indexSettings21.TTLPurgeDisabled;
        boolean boolean24 = indexSettings21.hasCustomDataPath();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = indexSettings21.scopedSettings;
        boolean boolean26 = indexSettings21.TTLPurgeDisabled;
        boolean boolean27 = indexSettings21.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting28 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(booleanSetting28);
    }

    @Test
    public void test5184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5184");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean23 = indexSettings21.TTLPurgeDisabled;
        boolean boolean24 = indexSettings21.hasCustomDataPath();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = indexSettings21.scopedSettings;
        boolean boolean26 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.Version version27 = indexSettings21.getversion();
        indexSettings21.gcDeletesInMillis = ' ';
        java.lang.String str30 = indexSettings21.defaultField;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(version27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "_all" + "'", str30, "_all");
    }

    @Test
    public void test5185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5185");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        boolean boolean56 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        indexSettings78.setEnableWarmer(true);
        java.lang.String str81 = indexSettings78.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = indexSettings78.getIndexMetaData();
        indexSettings21.indexMetaData = indexMetaData82;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig84 = indexSettings21.getMergeSchedulerConfig();
        indexSettings21.setEnableWarmer(false);
        org.elasticsearch.common.settings.Settings settings87 = indexSettings21.getSettings();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig88 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.Version version89 = indexSettings21.version;
        org.elasticsearch.common.unit.TimeValue timeValue90 = indexSettings21.getsyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig84);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(mergePolicyConfig88);
        org.junit.Assert.assertNotNull(version89);
        org.junit.Assert.assertNotNull(timeValue90);
    }

    @Test
    public void test5186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5186");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability23 = indexSettings21.durability;
        boolean boolean24 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = null;
        indexSettings21.flushThresholdSize = byteSizeValue25;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test5187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5187");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getValue(settingsSetting17);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting19 = null; // flaky: indexSettings16.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        boolean boolean20 = false; // flaky: indexSettings16.getqueryStringLenient();
        org.elasticsearch.common.unit.TimeValue timeValue21 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
// flaky:         indexSettings16.setRefreshInterval(timeValue21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.isPrivateSetting("index.");
        boolean boolean28 = indexScopedSettings24.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray42 = settings30.getAsArray("", strArray40, (java.lang.Boolean) false);
        indexScopedSettings24.validate("index.shadow_replicas", settings30);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings30);
        boolean boolean46 = indexSettings44.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting47 = indexSettings44.getALLOW_UNMAPPED();
        org.elasticsearch.common.unit.TimeValue timeValue48 = indexSettings44.getRefreshInterval();
        org.elasticsearch.index.translog.Translog.Durability durability49 = indexSettings44.getTranslogDurability();
// flaky:         indexSettings16.setdurability(durability49);
        boolean boolean51 = false; // flaky: indexSettings16.isShadowReplicaIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean55 = indexScopedSettings53.isPrivateSetting("index.");
        boolean boolean57 = indexScopedSettings53.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings59.getGroups("index.uuid");
        java.lang.String[] strArray69 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray71 = settings59.getAsArray("", strArray69, (java.lang.Boolean) false);
        indexScopedSettings53.validate("index.shadow_replicas", settings59);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings59);
        org.elasticsearch.index.translog.Translog.Durability durability74 = null;
        indexSettings73.setTranslogDurability(durability74);
        org.elasticsearch.common.settings.Settings settings76 = indexSettings73.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting77 = indexSettings73.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = indexSettings73.scopedSettings;
        java.util.function.Predicate<java.lang.String> strPredicate79 = indexScopedSettings78.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings78.dryRun(settings80);
        java.lang.String[] strArray83 = settings80.getAsArray("index.blocks.read_only");
        java.util.Map<java.lang.String, java.lang.Object> strMap84 = settings80.getAsStructuredMap();
// flaky:         indexSettings16.settings = settings80;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(settingsSetting17);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(booleanSetting47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertTrue("'" + durability49 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability49.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(booleanSetting77);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
        org.junit.Assert.assertNotNull(strPredicate79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strMap84);
    }

    @Test
    public void test5188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5188");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        boolean boolean23 = indexSettings21.isShadowReplicaIndex;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher24 = indexSettings21.getParseFieldMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability25 = indexSettings21.durability;
        java.util.function.Predicate<java.lang.String> strPredicate26 = indexSettings21.indexNameMatcher;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting28 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher24);
        org.junit.Assert.assertTrue("'" + durability25 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability25.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertNotNull(booleanSetting28);
    }

    @Test
    public void test5189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5189");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
// flaky:         indexSettings16.setMaxResultWindow((int) '4');
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher19 = null; // flaky: indexSettings16.parseFieldMatcher;
        int int20 = 0; // flaky: indexSettings16.numberOfShards;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = null; // flaky: indexSettings16.scopedSettings;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting22 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.isPrivateSetting("index.");
        boolean boolean28 = indexScopedSettings24.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray42 = settings30.getAsArray("", strArray40, (java.lang.Boolean) false);
        indexScopedSettings24.validate("index.shadow_replicas", settings30);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings30);
        indexSettings44.setEnableWarmer(true);
        java.lang.String str47 = indexSettings44.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = indexSettings44.getIndexMetaData();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings52.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings49.applySettings(settings52);
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings57 = indexScopedSettings49.applySettings(settings56);
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings56);
        org.elasticsearch.common.unit.SizeValue sizeValue60 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue61 = settings56.getAsSize("index.shadow_replicas", sizeValue60);
        boolean boolean62 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings56);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings56);
        int int64 = indexMetaData48.getNumberOfReplicas();
// flaky:         indexSettings16.indexMetaData = indexMetaData48;
        org.elasticsearch.common.xcontent.XContentParser xContentParser66 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.isPrivateSetting("index.");
        boolean boolean72 = indexScopedSettings68.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap76 = settings74.getGroups("index.uuid");
        java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray86 = settings74.getAsArray("", strArray84, (java.lang.Boolean) false);
        indexScopedSettings68.validate("index.shadow_replicas", settings74);
        org.elasticsearch.index.IndexSettings indexSettings88 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings74);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings89 = indexSettings88.scopedSettings;
        org.elasticsearch.common.unit.TimeValue timeValue90 = indexSettings88.getsyncInterval();
        long long91 = indexSettings88.gcDeletesInMillis;
        org.elasticsearch.Version version92 = indexSettings88.getIndexVersionCreated();
        java.lang.String str93 = indexSettings88.getDefaultField();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher94 = indexSettings88.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData95 = indexMetaData48.fromXContent(xContentParser66, parseFieldMatcher94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
// flaky:         org.junit.Assert.assertNotNull(indexScopedSettings21);
// flaky:         org.junit.Assert.assertNotNull(strSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(sizeValue61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(indexScopedSettings89);
        org.junit.Assert.assertNotNull(timeValue90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 60000L + "'", long91 == 60000L);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "_all" + "'", str93, "_all");
        org.junit.Assert.assertNotNull(parseFieldMatcher94);
    }

    @Test
    public void test5190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5190");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings21.getsyncInterval();
        int int36 = indexSettings21.getMaxRescoreWindow();
        int int37 = indexSettings21.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig38 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting39 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = indexSettings21.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData42 = indexMetaData40.mappingOrDefault("index.auto_expand_replicas");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters43 = indexMetaData40.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig38);
        org.junit.Assert.assertNotNull(booleanSetting39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNull(mappingMetaData42);
        org.junit.Assert.assertNull(discoveryNodeFilters43);
    }

    @Test
    public void test5191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5191");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.queryStringLenient;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexSettings21.getScopedSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings28.applySettings(settings31);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings37 = settings35.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = settings37.getAsMap();
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings28.applySettings(settings37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings39);
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings40);
        java.lang.String str44 = settings40.get("state-", "index.shadow_replicas");
        indexScopedSettings26.validate("index.shadow_replicas", settings40);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "index.shadow_replicas" + "'", str44, "index.shadow_replicas");
    }

    @Test
    public void test5192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5192");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = settings4.getAsSettings("hi!");
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int10 = indexMetaData9.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings14.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings11.applySettings(settings14);
        java.lang.String str19 = settings14.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer23 = null;
        indexScopedSettings21.addSettingsUpdateConsumer(settingsSetting22, settingsConsumer23);
        org.elasticsearch.index.IndexSettings indexSettings25 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14, strPredicate20, indexScopedSettings21);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = null; // flaky: indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting28 = null; // flaky: indexSettings25.getDEFAULT_FIELD_SETTING();
        org.elasticsearch.common.settings.Settings settings29 = null; // flaky: indexSettings25.getNodeSettings();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = settings31.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        java.lang.String[] strArray49 = settings31.getAsArray("index.version.minimum_compatible", strArray45, (java.lang.Boolean) false);
        java.lang.Boolean boolean52 = settings31.getAsBoolean("index.version.minimum_compatible", (java.lang.Boolean) false);
        java.lang.String str54 = settings31.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings.Builder builder56 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("index.uuid", 0L);
        java.lang.String str61 = builder59.get("");
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder59.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder62.putNull("hi!");
        java.lang.String str66 = builder64.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder64.putNull("hi!");
        java.lang.String str70 = builder64.get("index.");
        org.elasticsearch.common.settings.Settings settings71 = builder64.build();
        org.elasticsearch.common.unit.SizeValue sizeValue73 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue74 = settings71.getAsSize("index.uuid", sizeValue73);
        org.elasticsearch.common.unit.SizeValue sizeValue75 = settings31.getAsSize("index.version.created_string", sizeValue74);
        org.elasticsearch.common.unit.SizeValue sizeValue76 = null; // flaky: settings29.getAsSize("index.number_of_replicas", sizeValue74);
        org.elasticsearch.common.unit.SizeValue sizeValue77 = settings4.getAsSize("index.version.upgraded_string", sizeValue76);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settingsSetting26);
// flaky:         org.junit.Assert.assertNotNull(settings27);
// flaky:         org.junit.Assert.assertNotNull(strSetting28);
// flaky:         org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertEquals("'" + boolean52 + "' != '" + false + "'", boolean52, false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(sizeValue74);
        org.junit.Assert.assertNotNull(sizeValue75);
// flaky:         org.junit.Assert.assertNotNull(sizeValue76);
// flaky:         org.junit.Assert.assertNotNull(sizeValue77);
    }

    @Test
    public void test5193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5193");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder6.put("index.version.created", (long) (short) 10);
        java.lang.String str13 = builder6.get("index.version.upgraded_string");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder6.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test5194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5194");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder8.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder8.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder8.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder8.put("archived.", "index.number_of_replicas");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test5195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5195");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder4.removeAlias("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.index("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.version(52L);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test5196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5196");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.putNull("hi!");
        java.lang.String str14 = builder8.get("index.");
        org.elasticsearch.common.settings.Settings settings15 = builder8.build();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings18 = settings16.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getGroups("index.uuid");
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray32 = settings20.getAsArray("", strArray30, (java.lang.Boolean) false);
        java.lang.String[] strArray34 = settings16.getAsArray("index.version.minimum_compatible", strArray30, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder8.put((java.lang.Object[]) strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder8.put("index.version.created_string", 1.0f);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("", false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test5197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5197");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig25 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = indexSettings21.getIndexMetaData();
        long long28 = indexMetaData27.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicyConfig25);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
    }

    @Test
    public void test5198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5198");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = indexSettings21.getIndexMetaData();
        long long29 = indexMetaData28.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData28.mapping("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData28.mapping("index.version.minimum_compatible");
        org.elasticsearch.index.Index index34 = indexMetaData28.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNull(index34);
    }

    @Test
    public void test5199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5199");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        int int28 = indexSettings21.maxResultWindow;
        org.elasticsearch.common.settings.Settings settings29 = indexSettings21.nodeSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int31 = indexMetaData30.getNumberOfShards();
        org.elasticsearch.Version version32 = indexMetaData30.getUpgradedVersion();
        int int33 = indexMetaData30.getNumberOfShards();
        indexSettings21.indexMetaData = indexMetaData30;
        indexSettings21.setMaxRescoreWindow((int) (byte) -1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(version32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test5200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5200");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue23 = null;
        indexSettings21.flushThresholdSize = byteSizeValue23;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig25 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings21.getsyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertNotNull(mergePolicyConfig25);
        org.junit.Assert.assertNotNull(timeValue26);
    }

    @Test
    public void test5201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5201");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean26 = indexSettings21.getisShadowReplicaIndex();
        boolean boolean27 = indexSettings21.hasCustomDataPath();
        long long28 = indexSettings21.getGcDeletesInMillis();
        boolean boolean29 = indexSettings21.getqueryStringAllowLeadingWildcard();
        boolean boolean31 = indexSettings21.matchesIndexName("active_allocations");
        indexSettings21.gcDeletesInMillis = 1;
        org.apache.lucene.index.MergePolicy mergePolicy34 = indexSettings21.getMergePolicy();
        boolean boolean36 = indexSettings21.matchesIndexName("index.version.created_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 60000L + "'", long28 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mergePolicy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test5202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5202");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.auto_expand_replicas", (float) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.uuid", 0L);
        java.lang.String str16 = builder14.get("");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder17.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.isPrivateSetting("index.");
        boolean boolean26 = indexScopedSettings22.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        indexScopedSettings22.validate("index.shadow_replicas", settings28);
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings28);
        org.elasticsearch.index.translog.Translog.Durability durability43 = null;
        indexSettings42.setTranslogDurability(durability43);
        org.elasticsearch.common.unit.TimeValue timeValue45 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings42.setGCDeletes(timeValue45);
        org.elasticsearch.Version version47 = indexSettings42.version;
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder17.put("index.blocks.read", version47);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder9.put("index.creation_date", version47);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.loadFromSource("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("index.blocks.read_only", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings settings56 = builder55.build();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.putNull("index.version.created");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder60 = builder58.put(objDictionary59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertNotNull(version47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test5203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5203");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder4.removeAlias("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.creationDate(0L);
        // The following exception was thrown during execution in test generation
        try {
            long long14 = builder10.primaryTerm(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test5204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5204");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = indexSettings21.indexMetaData;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig36 = indexSettings21.getmergePolicyConfig();
        java.util.function.Predicate<java.lang.String> strPredicate37 = indexSettings21.getindexNameMatcher();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting38 = indexSettings21.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher39 = indexSettings21.parseFieldMatcher;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = indexSettings21.indexMetaData;
        org.elasticsearch.common.unit.TimeValue timeValue41 = indexSettings21.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(mergePolicyConfig36);
        org.junit.Assert.assertNotNull(strPredicate37);
        org.junit.Assert.assertNotNull(intSetting38);
        org.junit.Assert.assertNotNull(parseFieldMatcher39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(timeValue41);
    }

    @Test
    public void test5205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5205");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings21.syncInterval;
        java.lang.String str27 = indexSettings21.defaultField;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue28 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability29 = indexSettings21.getdurability();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting30 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        boolean boolean31 = indexSettings21.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "_all" + "'", str27, "_all");
        org.junit.Assert.assertNotNull(byteSizeValue28);
        org.junit.Assert.assertTrue("'" + durability29 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability29.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValueSetting30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test5206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5206");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.queryStringAnalyzeWildcard;
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings21.getTranslogSyncInterval();
        boolean boolean27 = indexSettings21.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test5207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5207");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        java.lang.String str35 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting36 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = indexSettings21.indexMetaData;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.isPrivateSetting("index.");
        boolean boolean43 = indexScopedSettings39.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray57 = settings45.getAsArray("", strArray55, (java.lang.Boolean) false);
        indexScopedSettings39.validate("index.shadow_replicas", settings45);
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings45);
        org.elasticsearch.index.translog.Translog.Durability durability60 = null;
        indexSettings59.setTranslogDurability(durability60);
        org.elasticsearch.common.settings.Settings settings62 = indexSettings59.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting63 = indexSettings59.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean67 = indexScopedSettings65.isPrivateSetting("index.");
        boolean boolean69 = indexScopedSettings65.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap73 = settings71.getGroups("index.uuid");
        java.lang.String[] strArray81 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray83 = settings71.getAsArray("", strArray81, (java.lang.Boolean) false);
        indexScopedSettings65.validate("index.shadow_replicas", settings71);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings71);
        org.elasticsearch.common.settings.Settings settings86 = indexSettings85.getSettings();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue87 = indexSettings85.getFlushThresholdSize();
        indexSettings59.setTranslogFlushThresholdSize(byteSizeValue87);
        indexSettings21.setTranslogFlushThresholdSize(byteSizeValue87);
        boolean boolean90 = indexSettings21.queryStringLenient;
        java.lang.String str91 = indexSettings21.getNodeName();
        boolean boolean92 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings93 = indexSettings21.scopedSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(booleanSetting63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(byteSizeValue87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings93);
    }

    @Test
    public void test5208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5208");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getValue(settingsSetting17);
        int int19 = 0; // flaky: indexSettings16.numberOfShards;
        org.elasticsearch.common.logging.ESLogger eSLogger20 = null; // flaky: indexSettings16.logger;
        org.elasticsearch.common.settings.Settings settings21 = null; // flaky: indexSettings16.getSettings();
        org.elasticsearch.common.settings.Settings settings22 = null; // flaky: indexSettings16.nodeSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(settingsSetting17);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertNotNull(eSLogger20);
// flaky:         org.junit.Assert.assertNotNull(settings21);
// flaky:         org.junit.Assert.assertNotNull(settings22);
    }

    @Test
    public void test5209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5209");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings20.applySettings(settings23);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.applySettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexScopedSettings0.copy(settings28, indexMetaData29);
        long long31 = indexMetaData29.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings39);
        org.elasticsearch.common.settings.Settings settings54 = indexSettings53.getSettings();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue55 = indexSettings53.getFlushThresholdSize();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig56 = indexSettings53.getmergePolicyConfig();
        boolean boolean57 = indexMetaData29.equals((java.lang.Object) indexSettings53);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters58 = indexMetaData29.excludeFilters();
        int int59 = indexMetaData29.getNumberOfShards();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput60 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData29.writeTo(streamOutput60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(byteSizeValue55);
        org.junit.Assert.assertNotNull(mergePolicyConfig56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test5210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5210");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings21.syncInterval;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting27 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue28 = indexSettings21.getFlushThresholdSize();
        boolean boolean29 = indexSettings21.queryStringLenient;
        org.elasticsearch.index.translog.Translog.Durability durability30 = indexSettings21.getdurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(strSetting27);
        org.junit.Assert.assertNotNull(byteSizeValue28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + durability30 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability30.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test5211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5211");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability28 = indexSettings21.getdurability();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings29.applySettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings35.getGroups("index.creation_date", false);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean43 = indexScopedSettings41.isPrivateSetting("index.");
        boolean boolean45 = indexScopedSettings41.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap49 = settings47.getGroups("index.uuid");
        java.lang.String[] strArray57 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray59 = settings47.getAsArray("", strArray57, (java.lang.Boolean) false);
        indexScopedSettings41.validate("index.shadow_replicas", settings47);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings47);
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings61.getDEFAULT_REFRESH_INTERVAL();
        int int63 = indexSettings61.getMaxResultWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean67 = indexScopedSettings65.isPrivateSetting("index.");
        boolean boolean69 = indexScopedSettings65.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap73 = settings71.getGroups("index.uuid");
        java.lang.String[] strArray81 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray83 = settings71.getAsArray("", strArray81, (java.lang.Boolean) false);
        indexScopedSettings65.validate("index.shadow_replicas", settings71);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings71);
        org.elasticsearch.index.translog.Translog.Durability durability86 = null;
        indexSettings85.setTranslogDurability(durability86);
        boolean boolean88 = indexSettings85.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig89 = indexSettings85.getmergePolicyConfig();
        org.elasticsearch.common.unit.TimeValue timeValue90 = indexSettings85.getsyncInterval();
        indexSettings61.setRefreshInterval(timeValue90);
        org.elasticsearch.common.unit.TimeValue timeValue92 = settings35.getAsTime("index.version.created_string", timeValue90);
        indexSettings21.setGCDeletes(timeValue90);
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig94 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData95 = indexSettings21.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData97 = indexMetaData95.mappingOrDefault("index.data_path");
        org.elasticsearch.common.io.stream.StreamInput streamInput98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff99 = indexMetaData95.readDiffFrom(streamInput98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertTrue("'" + durability28 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability28.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10000 + "'", int63 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig89);
        org.junit.Assert.assertNotNull(timeValue90);
        org.junit.Assert.assertNotNull(timeValue92);
        org.junit.Assert.assertNotNull(mergePolicyConfig94);
        org.junit.Assert.assertNotNull(indexMetaData95);
        org.junit.Assert.assertNull(mappingMetaData97);
    }

    @Test
    public void test5212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5212");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        boolean boolean23 = indexSettings21.isShadowReplicaIndex;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.isPrivateSetting("index.");
        boolean boolean29 = indexScopedSettings25.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray43 = settings31.getAsArray("", strArray41, (java.lang.Boolean) false);
        indexScopedSettings25.validate("index.shadow_replicas", settings31);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings31);
        org.elasticsearch.common.settings.Settings settings46 = indexSettings45.getSettings();
        indexSettings45.maxResultWindow = (short) -1;
        boolean boolean49 = indexSettings45.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings45.syncInterval;
        indexSettings21.refreshInterval = timeValue50;
        boolean boolean52 = indexSettings21.isQueryStringLenient();
        boolean boolean53 = indexSettings21.isTTLPurgeDisabled();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig54 = indexSettings21.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig54);
    }

    @Test
    public void test5213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5213");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.index.translog.Translog.Durability durability35 = indexSettings21.getdurability();
        boolean boolean36 = indexSettings21.getqueryStringAllowLeadingWildcard();
        java.lang.String str37 = indexSettings21.defaultField;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = indexSettings21.indexMetaData;
        org.elasticsearch.common.io.stream.StreamOutput streamOutput39 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData38.writeTo(streamOutput39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNull(durability35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "_all" + "'", str37, "_all");
        org.junit.Assert.assertNotNull(indexMetaData38);
    }

    @Test
    public void test5214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5214");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getNodeSettings();
        boolean boolean29 = indexSettings21.matchesIndexName("_na_");
        boolean boolean30 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.common.unit.TimeValue timeValue31 = null;
        indexSettings21.setRefreshInterval(timeValue31);
        boolean boolean33 = indexSettings21.getqueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = indexSettings21.scopedSettings;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig35 = indexSettings21.mergeSchedulerConfig;
        indexSettings21.maxResultWindow = (short) 100;
        java.lang.String str38 = indexSettings21.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig35);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test5215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5215");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.unit.TimeValue timeValue26 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setRefreshInterval(timeValue26);
        indexSettings21.setEnableWarmer(false);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting30 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        boolean boolean31 = indexSettings21.warmerEnabled;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting32 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean36 = indexScopedSettings34.isPrivateSetting("index.");
        boolean boolean38 = indexScopedSettings34.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings40.getGroups("index.uuid");
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray52 = settings40.getAsArray("", strArray50, (java.lang.Boolean) false);
        indexScopedSettings34.validate("index.shadow_replicas", settings40);
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings40);
        boolean boolean55 = indexSettings54.isShadowReplicaIndex;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue56 = indexSettings54.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue56;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting58 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        int int59 = indexSettings21.maxRescoreWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(strSetting30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(booleanSetting32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteSizeValue56);
        org.junit.Assert.assertNotNull(booleanSetting58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
    }

    @Test
    public void test5216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5216");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        int int25 = indexSettings21.getMaxResultWindow();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting26 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger27 = indexSettings21.logger;
        boolean boolean28 = indexSettings21.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.logging.ESLogger eSLogger29 = indexSettings21.logger;
        java.lang.String str30 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy31 = indexSettings21.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertNotNull(timeValueSetting26);
        org.junit.Assert.assertNotNull(eSLogger27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(eSLogger29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(mergePolicy31);
    }

    @Test
    public void test5217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5217");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.Version version72 = indexSettings21.getversion();
        boolean boolean73 = indexSettings21.isIndexUsingShadowReplicas();
        int int74 = indexSettings21.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting75 = indexSettings21.getMAX_RESULT_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(version72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(intSetting75);
    }

    @Test
    public void test5218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5218");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean26 = indexSettings21.getisShadowReplicaIndex();
        boolean boolean27 = indexSettings21.hasCustomDataPath();
        long long28 = indexSettings21.getGcDeletesInMillis();
        boolean boolean29 = indexSettings21.getqueryStringAllowLeadingWildcard();
        boolean boolean31 = indexSettings21.matchesIndexName("active_allocations");
        indexSettings21.gcDeletesInMillis = 1;
        org.apache.lucene.index.MergePolicy mergePolicy34 = indexSettings21.getMergePolicy();
        boolean boolean35 = indexSettings21.getqueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 60000L + "'", long28 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mergePolicy34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test5219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5219");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
// flaky:         indexSettings16.setMaxResultWindow((int) '4');
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher19 = null; // flaky: indexSettings16.parseFieldMatcher;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting20 = null; // flaky: indexSettings16.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        boolean boolean21 = false; // flaky: indexSettings16.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = null; // flaky: indexSettings16.getScopedSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer25 = null;
        indexScopedSettings23.addSettingsUpdateConsumer(settingsSetting24, settingsConsumer25);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting28 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer29 = null;
        indexScopedSettings27.addSettingsUpdateConsumer(settingsSetting28, settingsConsumer29);
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings23.get(settingsSetting28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings32.applySettings(settings35);
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings40 = indexScopedSettings32.applySettings(settings39);
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings39);
        org.elasticsearch.common.unit.SizeValue sizeValue43 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue44 = settings39.getAsSize("index.shadow_replicas", sizeValue43);
        boolean boolean45 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings39);
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings23.dryRun(settings39);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings47.applySettings(settings50);
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings47.applySettings(settings54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = indexScopedSettings47.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = indexScopedSettings47.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean61 = indexScopedSettings59.isPrivateSetting("index.");
        boolean boolean63 = indexScopedSettings59.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings65.getGroups("index.uuid");
        java.lang.String[] strArray75 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray77 = settings65.getAsArray("", strArray75, (java.lang.Boolean) false);
        indexScopedSettings59.validate("index.shadow_replicas", settings65);
        org.elasticsearch.index.IndexSettings indexSettings79 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings65);
        org.elasticsearch.index.translog.Translog.Durability durability80 = null;
        indexSettings79.setTranslogDurability(durability80);
        boolean boolean82 = indexSettings79.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings83 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting84 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer85 = null;
        indexScopedSettings83.addSettingsUpdateConsumer(settingsSetting84, settingsConsumer85);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings87 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting88 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer89 = null;
        indexScopedSettings87.addSettingsUpdateConsumer(settingsSetting88, settingsConsumer89);
        org.elasticsearch.common.settings.Settings settings91 = indexScopedSettings83.get(settingsSetting88);
        org.elasticsearch.common.settings.Settings settings92 = indexSettings79.getValue(settingsSetting88);
        org.elasticsearch.common.settings.Settings settings93 = indexScopedSettings47.get(settingsSetting88);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer94 = null;
        indexScopedSettings23.addSettingsUpdateConsumer(settingsSetting88, settingsConsumer94);
        org.elasticsearch.common.settings.Settings settings96 = null; // flaky: indexScopedSettings22.get(settingsSetting88);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher19);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting20);
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settingsSetting28);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(sizeValue44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings83);
        org.junit.Assert.assertNotNull(settingsSetting84);
        org.junit.Assert.assertNotNull(indexScopedSettings87);
        org.junit.Assert.assertNotNull(settingsSetting88);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(settings93);
// flaky:         org.junit.Assert.assertNotNull(settings96);
    }

    @Test
    public void test5220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5220");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean25 = indexSettings21.getqueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting26 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        indexSettings21.setMaxResultWindow(10);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting29 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeValueSetting26);
        org.junit.Assert.assertNotNull(timeValueSetting29);
    }

    @Test
    public void test5221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5221");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        indexSettings21.maxRescoreWindow = 0;
        boolean boolean30 = indexSettings21.queryStringLenient;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig31 = indexSettings21.mergePolicyConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig31);
    }

    @Test
    public void test5222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5222");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getValue(settingsSetting17);
        int int19 = 0; // flaky: indexSettings16.numberOfShards;
        org.elasticsearch.common.logging.ESLogger eSLogger20 = null; // flaky: indexSettings16.logger;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting21 = null; // flaky: indexSettings16.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.isPrivateSetting("index.");
        boolean boolean27 = indexScopedSettings23.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getGroups("index.uuid");
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray41 = settings29.getAsArray("", strArray39, (java.lang.Boolean) false);
        indexScopedSettings23.validate("index.shadow_replicas", settings29);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings29);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData22.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap45 = indexMetaData22.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData22.getCustoms();
        boolean boolean47 = false; // flaky: indexSettings16.updateIndexMetaData(indexMetaData22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.isPrivateSetting("index.");
        boolean boolean53 = indexScopedSettings49.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.uuid");
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray67 = settings55.getAsArray("", strArray65, (java.lang.Boolean) false);
        indexScopedSettings49.validate("index.shadow_replicas", settings55);
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings55);
        org.elasticsearch.index.translog.Translog.Durability durability70 = null;
        indexSettings69.setTranslogDurability(durability70);
        boolean boolean72 = indexSettings69.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig73 = indexSettings69.getmergePolicyConfig();
        org.elasticsearch.common.unit.TimeValue timeValue74 = indexSettings69.getsyncInterval();
// flaky:         indexSettings16.refreshInterval = timeValue74;
        boolean boolean76 = false; // flaky: indexSettings16.isShadowReplicaIndex();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = null; // flaky: indexSettings16.scopedSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(settingsSetting17);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertNotNull(eSLogger20);
// flaky:         org.junit.Assert.assertNotNull(intSetting21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(strImmutableOpenMap45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig73);
        org.junit.Assert.assertNotNull(timeValue74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertNotNull(indexScopedSettings77);
    }

    @Test
    public void test5223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5223");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting4 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer5 = null;
        indexScopedSettings3.addSettingsUpdateConsumer(settingsSetting4, settingsConsumer5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer9 = null;
        indexScopedSettings7.addSettingsUpdateConsumer(settingsSetting8, settingsConsumer9);
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings3.get(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings3.dryRun(settings12);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings15.applySettings(settings18);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings15.applySettings(settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings15.get(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13, strPredicate14, indexScopedSettings15);
        long long27 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting28 = org.elasticsearch.index.IndexSettings.MAX_RESULT_WINDOW_SETTING;
        boolean boolean29 = indexMetaData0.equals((java.lang.Object) intSetting28);
        org.elasticsearch.common.settings.Settings settings30 = indexMetaData0.getSettings();
        org.elasticsearch.common.io.stream.StreamInput streamInput31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff32 = indexMetaData0.readDiffFrom(streamInput31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertNotNull(settingsSetting4);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(intSetting28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
    }

    @Test
    public void test5224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5224");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        boolean boolean27 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting28 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        boolean boolean34 = indexScopedSettings30.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.uuid");
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray48 = settings36.getAsArray("", strArray46, (java.lang.Boolean) false);
        indexScopedSettings30.validate("index.shadow_replicas", settings36);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings36);
        boolean boolean52 = indexSettings50.matchesIndexName("");
        boolean boolean53 = indexSettings50.TTLPurgeDisabled;
        org.elasticsearch.common.unit.TimeValue timeValue54 = indexSettings50.getDEFAULT_GC_DELETES();
        java.util.function.Predicate<java.lang.String> strPredicate55 = indexSettings50.indexNameMatcher;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.isPrivateSetting("index.");
        boolean boolean61 = indexScopedSettings57.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings63.getGroups("index.uuid");
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray75 = settings63.getAsArray("", strArray73, (java.lang.Boolean) false);
        indexScopedSettings57.validate("index.shadow_replicas", settings63);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings63);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting78 = indexSettings77.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue79 = null;
        indexSettings77.flushThresholdSize = byteSizeValue79;
        org.elasticsearch.index.translog.Translog.Durability durability81 = indexSettings77.getTranslogDurability();
        indexSettings50.durability = durability81;
        indexSettings21.setdurability(durability81);
        boolean boolean84 = indexSettings21.isQueryStringAnalyzeWildcard();
        int int85 = indexSettings21.getNumberOfReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue86 = indexSettings21.getsyncInterval();
        boolean boolean87 = indexSettings21.queryStringAnalyzeWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeValueSetting28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(strPredicate55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(timeValueSetting78);
        org.junit.Assert.assertTrue("'" + durability81 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability81.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(timeValue86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test5225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5225");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        boolean boolean26 = indexSettings21.isDefaultAllowUnmappedFields();
        java.lang.String str27 = indexSettings21.customDataPath();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Setting<?> wildcardSetting30 = indexScopedSettings28.get("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        boolean boolean36 = indexScopedSettings32.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        indexScopedSettings32.validate("index.shadow_replicas", settings38);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings38);
        indexSettings52.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue55 = indexSettings52.getsyncInterval();
        org.elasticsearch.common.settings.Settings settings56 = indexSettings52.getSettings();
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings28.validate(settings56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.version.created]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNull(wildcardSetting30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertNotNull(settings56);
    }

    @Test
    public void test5226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5226");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting72 = indexSettings21.getMAX_RESULT_WINDOW_SETTING();
        java.util.function.Predicate<java.lang.String> strPredicate73 = indexSettings21.indexNameMatcher;
        boolean boolean74 = indexSettings21.getqueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(intSetting72);
        org.junit.Assert.assertNotNull(strPredicate73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test5227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5227");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 index.version.created_string=5.0.0 ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 index.version.created_string=5.0.0 ]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test5228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5228");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray4 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList5);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.version.created", (double) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder15.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList20);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.version.created", (double) ' ');
        java.lang.Class<?> wildcardClass29 = builder28.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder13.put("index.version.created_string", (java.lang.Class) wildcardClass29);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("hi!", false);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder30.put("archived.", (long) '#');
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder36.putArray("", strArray50);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("primary_terms", (double) 5000099);
        java.lang.Class<?> wildcardClass55 = builder51.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test5229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5229");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap2 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.isPrivateSetting("index.");
        boolean boolean10 = indexScopedSettings6.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray24 = settings12.getAsArray("", strArray22, (java.lang.Boolean) false);
        indexScopedSettings6.validate("index.shadow_replicas", settings12);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap27 = indexMetaData5.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData5.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters29 = indexMetaData5.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting52 = indexSettings51.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters54 = indexMetaData53.includeFilters();
        indexSettings51.indexMetaData = indexMetaData53;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData53);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters57 = indexMetaData53.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff58 = indexMetaData5.diff(indexMetaData53);
        boolean boolean60 = indexMetaData53.isSameUUID("index.version.minimum_compatible");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff61 = indexMetaData0.diff(indexMetaData53);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean65 = indexScopedSettings63.isPrivateSetting("index.");
        boolean boolean67 = indexScopedSettings63.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap71 = settings69.getGroups("index.uuid");
        java.lang.String[] strArray79 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray81 = settings69.getAsArray("", strArray79, (java.lang.Boolean) false);
        indexScopedSettings63.validate("index.shadow_replicas", settings69);
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData62, settings69);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap84 = indexMetaData62.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap85 = indexMetaData62.getCustoms();
        java.util.Set<java.lang.String> strSet87 = null; // flaky: indexMetaData62.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.common.settings.Settings settings88 = indexMetaData62.getSettings();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff89 = indexMetaData0.diff(indexMetaData62);
        java.util.Set<java.lang.String> strSet91 = null; // flaky: indexMetaData0.activeAllocationIds(10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData93 = indexMetaData0.mappingOrDefault("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNull(discoveryNodeFilters29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(booleanSetting52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNull(discoveryNodeFilters54);
        org.junit.Assert.assertNull(discoveryNodeFilters57);
        org.junit.Assert.assertNotNull(indexMetaDataDiff58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strImmutableOpenMap84);
        org.junit.Assert.assertNotNull(strImmutableOpenMap85);
        org.junit.Assert.assertNull(strSet87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(indexMetaDataDiff89);
        org.junit.Assert.assertNull(strSet91);
        org.junit.Assert.assertNull(mappingMetaData93);
    }

    @Test
    public void test5230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5230");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int12 = builder11.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder14.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder14.numberOfReplicas((int) ' ');
        java.lang.String[] strArray40 = new java.lang.String[] { "index.blocks.read_only", "index.version.created", "index.", "index.uuid", "index.uuid", "index.uuid", "index.version.created_string", "index.", "index.", "_na_", "state-", "_na_", "state-", "index.shadow_replicas", "index.blocks.read_only", "index.shared_filesystem", "_na_", "index.blocks.read_only" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder14.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet41);
        long long44 = builder43.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder43.version((long) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.isPrivateSetting("index.");
        boolean boolean52 = indexScopedSettings48.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings54.getGroups("index.uuid");
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray66 = settings54.getAsArray("", strArray64, (java.lang.Boolean) false);
        indexScopedSettings48.validate("index.shadow_replicas", settings54);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings54);
        org.elasticsearch.index.translog.Translog.Durability durability69 = null;
        indexSettings68.setTranslogDurability(durability69);
        org.elasticsearch.common.unit.TimeValue timeValue71 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings68.setGCDeletes(timeValue71);
        org.elasticsearch.common.settings.Settings settings73 = indexSettings68.settings;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder43.settings(settings73);
        java.lang.Class<?> wildcardClass75 = settings73.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder6.put("index.version.created_string", (java.lang.Class) wildcardClass75);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder6.put("", "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder6.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(timeValue71);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test5231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5231");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig35 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting36 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting37 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.Version version38 = indexSettings21.getIndexVersionCreated();
        boolean boolean39 = indexSettings21.queryStringAnalyzeWildcard;
        indexSettings21.maxResultWindow = 5000099;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(mergePolicyConfig35);
        org.junit.Assert.assertNotNull(booleanSetting36);
        org.junit.Assert.assertNotNull(booleanSetting37);
        org.junit.Assert.assertNotNull(version38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test5232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5232");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(version6);
    }

    @Test
    public void test5233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5233");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.logging.ESLogger eSLogger30 = indexSettings21.logger;
        org.elasticsearch.Version version31 = indexSettings21.getversion();
        org.elasticsearch.common.unit.TimeValue timeValue32 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability33 = indexSettings21.getdurability();
        indexSettings21.maxRescoreWindow = (-1);
        java.lang.String str36 = indexSettings21.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(eSLogger30);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(timeValue32);
        org.junit.Assert.assertNull(durability33);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test5234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5234");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.version((long) (short) 1);
        long long6 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.removeAlias("index.blocks.write");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test5235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5235");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexSettings21.getScopedSettings();
        java.lang.String str27 = indexScopedSettings26.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int29 = indexMetaData28.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings30.applySettings(settings33);
        java.lang.String str38 = settings33.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting41 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer42 = null;
        indexScopedSettings40.addSettingsUpdateConsumer(settingsSetting41, settingsConsumer42);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData28, settings33, strPredicate39, indexScopedSettings40);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting45 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings46 = null; // flaky: indexSettings44.getValue(settingsSetting45);
        org.elasticsearch.common.settings.Settings settings47 = indexScopedSettings26.get(settingsSetting45);
        java.lang.String str48 = indexScopedSettings26.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int50 = indexMetaData49.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean53 = indexScopedSettings51.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings54.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings57 = indexScopedSettings51.applySettings(settings54);
        java.lang.String str59 = settings54.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate60 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.index.IndexSettings indexSettings65 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData49, settings54, strPredicate60, indexScopedSettings61);
        int int66 = 0; // flaky: indexSettings65.getNumberOfReplicas();
        int int67 = 0; // flaky: indexSettings65.getMaxRescoreWindow();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap73 = settings71.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings68.applySettings(settings71);
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings76 = indexScopedSettings68.applySettings(settings75);
        boolean boolean77 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings75);
// flaky:         indexSettings65.settings = settings75;
        org.elasticsearch.common.settings.Settings settings80 = settings75.getAsSettings("");
        indexScopedSettings26.validate(settings75);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(settingsSetting41);
        org.junit.Assert.assertNotNull(settingsSetting45);
// flaky:         org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10000 + "'", int67 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(settings80);
    }

    @Test
    public void test5236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5236");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings21.refreshInterval;
        boolean boolean27 = indexSettings21.isShadowReplicaIndex;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test5237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5237");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
// flaky:         indexSettings16.setMaxResultWindow(100);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting22 = null; // flaky: indexSettings16.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = null; // flaky: indexSettings16.indexMetaData;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.isPrivateSetting("index.");
        boolean boolean29 = indexScopedSettings25.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray43 = settings31.getAsArray("", strArray41, (java.lang.Boolean) false);
        indexScopedSettings25.validate("index.shadow_replicas", settings31);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings31);
        indexSettings45.setEnableWarmer(true);
        java.lang.String str48 = indexSettings45.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = indexSettings45.getIndexMetaData();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean52 = indexScopedSettings50.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings53.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings56 = indexScopedSettings50.applySettings(settings53);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings58 = indexScopedSettings50.applySettings(settings57);
        boolean boolean59 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings57);
        org.elasticsearch.common.unit.SizeValue sizeValue61 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue62 = settings57.getAsSize("index.shadow_replicas", sizeValue61);
        boolean boolean63 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings57);
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings57);
// flaky:         indexSettings16.settings = settings57;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue68 = settings57.getAsRatio("index.blocks.write", "index.version.upgraded_string");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.version.upgraded_string]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(intSetting22);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(sizeValue62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test5238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5238");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
// flaky:         indexSettings16.maxResultWindow = 0;
        boolean boolean22 = false; // flaky: indexSettings16.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings23 = null; // flaky: indexSettings16.getNodeSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = null; // flaky: settings23.getAsGroups();
        java.lang.Boolean boolean27 = null; // flaky: settings23.getAsBoolean("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertNotNull(settings23);
// flaky:         org.junit.Assert.assertNotNull(strMap24);
// flaky:         org.junit.Assert.assertEquals("'" + boolean27 + "' != '" + true + "'", boolean27, true);
    }

    @Test
    public void test5239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5239");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.isOnSharedFilesystem();
        boolean boolean26 = indexSettings21.isIndexUsingShadowReplicas();
        long long27 = indexSettings21.gcDeletesInMillis;
        boolean boolean28 = indexSettings21.getisShadowReplicaIndex();
        int int29 = indexSettings21.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 60000L + "'", long27 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
    }

    @Test
    public void test5240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5240");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder4.settings(settings27);
        java.lang.String str42 = settings27.get("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.isPrivateSetting("index.");
        boolean boolean47 = indexScopedSettings43.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings49.getGroups("index.uuid");
        java.lang.String[] strArray59 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray61 = settings49.getAsArray("", strArray59, (java.lang.Boolean) false);
        indexScopedSettings43.validate("index.shadow_replicas", settings49);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting64 = indexScopedSettings43.get("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int66 = indexMetaData65.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = new org.elasticsearch.common.settings.IndexScopedSettings(settings27, indexScopedSettings43, indexMetaData65);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters68 = indexMetaData65.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData70 = indexMetaData65.mapping("");
        long long71 = indexMetaData65.getVersion();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(wildcardSetting64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters68);
        org.junit.Assert.assertNull(mappingMetaData70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
    }

    @Test
    public void test5241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5241");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting4 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer5 = null;
        indexScopedSettings3.addSettingsUpdateConsumer(settingsSetting4, settingsConsumer5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer9 = null;
        indexScopedSettings7.addSettingsUpdateConsumer(settingsSetting8, settingsConsumer9);
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings3.get(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings3.dryRun(settings12);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings15.applySettings(settings18);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings15.applySettings(settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings15.get(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13, strPredicate14, indexScopedSettings15);
        boolean boolean27 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings13);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings29.applySettings(settings32);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray43 = settings35.getAsArray("index.version.created", strArray41, (java.lang.Boolean) false);
        java.lang.String[] strArray44 = settings13.getAsArray("index.data_path", strArray41);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertNotNull(settingsSetting4);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
    }

    @Test
    public void test5242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5242");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.syncInterval;
        int int28 = indexSettings21.maxRescoreWindow;
        java.lang.String str29 = indexSettings21.getUUID();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexSettings21.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        boolean boolean36 = indexScopedSettings32.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        indexScopedSettings32.validate("index.shadow_replicas", settings38);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings38);
        org.elasticsearch.common.settings.Settings settings53 = indexSettings52.getSettings();
        indexSettings52.maxResultWindow = (short) -1;
        boolean boolean56 = indexSettings52.warmerEnabled;
        org.elasticsearch.common.settings.Settings settings57 = indexSettings52.getNodeSettings();
        org.elasticsearch.common.unit.SizeValue sizeValue59 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue60 = settings57.getAsSize("index.version.minimum_compatible", sizeValue59);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap62 = settings57.getGroups("index.blocks.write");
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings30.dryRun(settings57);
        org.elasticsearch.common.settings.Settings settings65 = settings63.getAsSettings("index.shadow_replicas");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "_na_" + "'", str29, "_na_");
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNull(sizeValue60);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings65);
    }

    @Test
    public void test5243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5243");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting18 = null; // flaky: indexSettings16.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability19 = null;
// flaky:         indexSettings16.setTranslogDurability(durability19);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting21 = null; // flaky: indexSettings16.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int23 = indexMetaData22.getNumberOfShards();
        int int24 = indexMetaData22.getNumberOfReplicas();
        boolean boolean25 = false; // flaky: indexSettings16.updateIndexMetaData(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertNotNull(intSetting18);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test5244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5244");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings21.durability = durability27;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        boolean boolean34 = indexScopedSettings30.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.uuid");
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray48 = settings36.getAsArray("", strArray46, (java.lang.Boolean) false);
        indexScopedSettings30.validate("index.shadow_replicas", settings36);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings36);
        org.elasticsearch.index.translog.Translog.Durability durability51 = null;
        indexSettings50.setTranslogDurability(durability51);
        org.elasticsearch.common.unit.TimeValue timeValue53 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings50.setGCDeletes(timeValue53);
        indexSettings21.setRefreshInterval(timeValue53);
        boolean boolean56 = indexSettings21.warmerEnabled;
        boolean boolean57 = indexSettings21.hasCustomDataPath();
        boolean boolean58 = indexSettings21.getwarmerEnabled();
        boolean boolean59 = indexSettings21.queryStringLenient;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(timeValue53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test5245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5245");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting4 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer5 = null;
        indexScopedSettings3.addSettingsUpdateConsumer(settingsSetting4, settingsConsumer5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer9 = null;
        indexScopedSettings7.addSettingsUpdateConsumer(settingsSetting8, settingsConsumer9);
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings3.get(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings3.dryRun(settings12);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings15.applySettings(settings18);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings15.applySettings(settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings15.get(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13, strPredicate14, indexScopedSettings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters28 = indexMetaData27.includeFilters();
        long long29 = indexMetaData27.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData27.mappingOrDefault("state-");
        boolean boolean32 = false; // flaky: indexSettings26.updateIndexMetaData(indexMetaData27);
        org.elasticsearch.common.settings.Settings settings33 = null; // flaky: indexSettings26.nodeSettings;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig34 = null; // flaky: indexSettings26.mergeSchedulerConfig;
        org.elasticsearch.Version version35 = null; // flaky: indexSettings26.getversion();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.uuid");
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue40 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue41 = settings36.getAsBytesSize("index.auto_expand_replicas", byteSizeValue40);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings36.getGroups("index.shared_filesystem");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = settings36.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int47 = indexMetaData46.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings48.applySettings(settings51);
        java.lang.String str56 = settings51.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate57 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting59 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer60 = null;
        indexScopedSettings58.addSettingsUpdateConsumer(settingsSetting59, settingsConsumer60);
        org.elasticsearch.index.IndexSettings indexSettings62 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData46, settings51, strPredicate57, indexScopedSettings58);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting63 = null; // flaky: indexSettings62.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str64 = null; // flaky: indexSettings62.defaultField;
        boolean boolean65 = false; // flaky: indexSettings62.defaultAllowUnmappedFields;
// flaky:         indexSettings62.setMaxResultWindow(100);
        org.elasticsearch.common.unit.TimeValue timeValue68 = null; // flaky: indexSettings62.refreshInterval;
        org.elasticsearch.common.unit.TimeValue timeValue69 = settings36.getAsTime("archived.", timeValue68);
// flaky:         indexSettings26.refreshInterval = timeValue69;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertNotNull(settingsSetting4);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNull(discoveryNodeFilters28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertNotNull(settings33);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig34);
// flaky:         org.junit.Assert.assertNotNull(version35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNull(byteSizeValue41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertNotNull(settingsSetting59);
// flaky:         org.junit.Assert.assertNotNull(strSetting63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
// flaky:         org.junit.Assert.assertNotNull(timeValue68);
// flaky:         org.junit.Assert.assertNotNull(timeValue69);
    }

    @Test
    public void test5246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5246");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.nodeSettings;
        boolean boolean24 = indexSettings21.isQueryStringLenient();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        long long26 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getSettings();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting28 = indexSettings21.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 60000L + "'", long26 == 60000L);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(timeValueSetting28);
    }

    @Test
    public void test5247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5247");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting25 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting26 = indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        boolean boolean32 = indexScopedSettings28.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        indexScopedSettings28.validate("index.shadow_replicas", settings34);
        org.elasticsearch.common.settings.Settings settings49 = settings34.getAsSettings("_all");
        indexSettings21.settings = settings34;
        org.elasticsearch.Version version51 = indexSettings21.getIndexVersionCreated();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting52 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = indexSettings21.scopedSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeValueSetting25);
        org.junit.Assert.assertNotNull(intSetting26);
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(version51);
        org.junit.Assert.assertNotNull(timeValueSetting52);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
    }

    @Test
    public void test5248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5248");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.auto_expand_replicas", (float) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.uuid", 0L);
        java.lang.String str16 = builder14.get("");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder17.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.isPrivateSetting("index.");
        boolean boolean26 = indexScopedSettings22.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        indexScopedSettings22.validate("index.shadow_replicas", settings28);
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings28);
        org.elasticsearch.index.translog.Translog.Durability durability43 = null;
        indexSettings42.setTranslogDurability(durability43);
        org.elasticsearch.common.unit.TimeValue timeValue45 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings42.setGCDeletes(timeValue45);
        org.elasticsearch.Version version47 = indexSettings42.version;
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder17.put("index.blocks.read", version47);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder9.put("index.creation_date", version47);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.loadFromSource("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("index.number_of_replicas", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder52.put("index.", (double) 10.0f);
        java.util.Map<java.lang.String, java.lang.String> strMap59 = builder52.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertNotNull(version47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strMap59);
    }

    @Test
    public void test5249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5249");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue28 = null;
        indexSettings21.flushThresholdSize = byteSizeValue28;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexSettings21.scopedSettings;
        boolean boolean31 = indexSettings21.getdefaultAllowUnmappedFields();
        int int32 = indexSettings21.getMaxRescoreWindow();
        int int33 = indexSettings21.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10000 + "'", int32 == 10000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10000 + "'", int33 == 10000);
    }

    @Test
    public void test5250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5250");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting21 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer22 = null;
        indexScopedSettings20.addSettingsUpdateConsumer(settingsSetting21, settingsConsumer22);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting25 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer26 = null;
        indexScopedSettings24.addSettingsUpdateConsumer(settingsSetting25, settingsConsumer26);
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.get(settingsSetting25);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer29 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting25, settingsConsumer29, settingsConsumer30);
        java.util.function.Predicate<java.lang.String> strPredicate32 = indexScopedSettings0.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = indexScopedSettings33.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings54.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings58 = settings54.getAsSettings("");
        java.lang.Boolean boolean61 = settings58.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue63 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue64 = settings58.getAsBytesSize("index.", byteSizeValue63);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = null;
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings66.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings70 = settings66.getAsSettings("");
        java.lang.Boolean boolean73 = settings70.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue76 = settings70.getAsBytesSize("index.", byteSizeValue75);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder77 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params78 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder79 = settings70.toXContent(xContentBuilder77, params78);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder80 = settings58.toXContent(xContentBuilder65, params78);
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings53.dryRun(settings58);
        org.elasticsearch.common.settings.Settings settings82 = indexScopedSettings0.dryRun(settings58);
        java.util.Set<java.lang.String> strSet83 = settings58.names();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap85 = settings58.getGroups("hi!");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertNotNull(settingsSetting21);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settingsSetting25);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertEquals("'" + boolean61 + "' != '" + true + "'", boolean61, true);
        org.junit.Assert.assertNull(byteSizeValue64);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertEquals("'" + boolean73 + "' != '" + true + "'", boolean73, true);
        org.junit.Assert.assertNull(byteSizeValue76);
        org.junit.Assert.assertNotNull(params78);
        org.junit.Assert.assertNull(xContentBuilder79);
        org.junit.Assert.assertNull(xContentBuilder80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(strMap85);
    }

    @Test
    public void test5251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5251");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
// flaky:         indexSettings16.gcDeletesInMillis = (-1L);
// flaky:         indexSettings16.TTLPurgeDisabled = true;
        int int22 = 0; // flaky: indexSettings16.getMaxRescoreWindow();
        org.elasticsearch.index.translog.Translog.Durability durability23 = null; // flaky: indexSettings16.getdurability();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig24 = null; // flaky: indexSettings16.mergeSchedulerConfig;
        long long25 = 0L; // flaky: indexSettings16.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
// flaky:         org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig24);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    }

    @Test
    public void test5252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5252");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting4 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer5 = null;
        indexScopedSettings3.addSettingsUpdateConsumer(settingsSetting4, settingsConsumer5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer9 = null;
        indexScopedSettings7.addSettingsUpdateConsumer(settingsSetting8, settingsConsumer9);
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings3.get(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings3.dryRun(settings12);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings15.applySettings(settings18);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings15.applySettings(settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings15.get(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13, strPredicate14, indexScopedSettings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters28 = indexMetaData27.includeFilters();
        long long29 = indexMetaData27.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData27.mappingOrDefault("state-");
        boolean boolean32 = false; // flaky: indexSettings26.updateIndexMetaData(indexMetaData27);
        org.elasticsearch.Version version33 = null; // flaky: indexSettings26.getversion();
        java.lang.String str34 = null; // flaky: indexSettings26.getUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean38 = indexScopedSettings36.isPrivateSetting("index.");
        boolean boolean40 = indexScopedSettings36.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings42.getGroups("index.uuid");
        java.lang.String[] strArray52 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray54 = settings42.getAsArray("", strArray52, (java.lang.Boolean) false);
        indexScopedSettings36.validate("index.shadow_replicas", settings42);
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings42);
        org.elasticsearch.index.translog.Translog.Durability durability57 = null;
        indexSettings56.setTranslogDurability(durability57);
        org.elasticsearch.common.unit.TimeValue timeValue59 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings56.setGCDeletes(timeValue59);
        org.elasticsearch.common.settings.Settings settings61 = indexSettings56.settings;
        org.elasticsearch.index.translog.Translog.Durability durability62 = null;
        indexSettings56.durability = durability62;
        boolean boolean64 = indexSettings56.isWarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.isPrivateSetting("index.");
        boolean boolean70 = indexScopedSettings66.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings72.getGroups("index.uuid");
        java.lang.String[] strArray82 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray84 = settings72.getAsArray("", strArray82, (java.lang.Boolean) false);
        indexScopedSettings66.validate("index.shadow_replicas", settings72);
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData65, settings72);
        org.elasticsearch.common.unit.TimeValue timeValue87 = indexSettings86.getDEFAULT_REFRESH_INTERVAL();
        indexSettings56.setGCDeletes(timeValue87);
// flaky:         indexSettings26.refreshInterval = timeValue87;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertNotNull(settingsSetting4);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNull(discoveryNodeFilters28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertNotNull(version33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "_na_" + "'", str34, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(timeValue87);
    }

    @Test
    public void test5253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5253");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray4 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList5);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.shadow_replicas", (double) 10);
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.uuid", 0L);
        java.lang.String str19 = builder17.get("");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray35 = settings23.getAsArray("", strArray33, (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = settings23.getAsMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = indexScopedSettings37.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings62 = settings58.getAsSettings("");
        java.lang.Boolean boolean65 = settings62.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue67 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue68 = settings62.getAsBytesSize("index.", byteSizeValue67);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder69 = null;
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings70.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings74 = settings70.getAsSettings("");
        java.lang.Boolean boolean77 = settings74.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue79 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue80 = settings74.getAsBytesSize("index.", byteSizeValue79);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder81 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params82 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder83 = settings74.toXContent(xContentBuilder81, params82);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder84 = settings62.toXContent(xContentBuilder69, params82);
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings57.dryRun(settings62);
        java.util.function.Predicate<java.lang.String> strPredicate86 = indexScopedSettings57.getINDEX_SETTINGS_KEY_PREDICATE();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction87 = null;
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder22.putProperties(strMap36, strPredicate86, strFunction87);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder10.put(strMap36);
        java.util.concurrent.TimeUnit timeUnit92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder93 = builder89.put("1.0", 1000L, timeUnit92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertEquals("'" + boolean65 + "' != '" + true + "'", boolean65, true);
        org.junit.Assert.assertNull(byteSizeValue68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertEquals("'" + boolean77 + "' != '" + true + "'", boolean77, true);
        org.junit.Assert.assertNull(byteSizeValue80);
        org.junit.Assert.assertNotNull(params82);
        org.junit.Assert.assertNull(xContentBuilder83);
        org.junit.Assert.assertNull(xContentBuilder84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strPredicate86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test5254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5254");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability23 = indexSettings21.durability;
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        boolean boolean26 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap28 = indexMetaData27.getMappings();
        long long29 = indexMetaData27.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData27);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test5255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5255");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.data_path", "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder20.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int23 = indexMetaData22.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings24.applySettings(settings27);
        java.lang.String str32 = settings27.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting35 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer36 = null;
        indexScopedSettings34.addSettingsUpdateConsumer(settingsSetting35, settingsConsumer36);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData22, settings27, strPredicate33, indexScopedSettings34);
        int int39 = 0; // flaky: indexSettings38.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings40 = null; // flaky: indexSettings38.getSettings();
        org.elasticsearch.common.settings.Settings.Builder builder41 = null; // flaky: builder21.put(settings40);
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray46 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder42.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList47);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("index.shadow_replicas", (double) 10);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder55.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap57 = builder55.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean61 = indexScopedSettings59.isPrivateSetting("index.");
        boolean boolean63 = indexScopedSettings59.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings65.getGroups("index.uuid");
        java.lang.String[] strArray75 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray77 = settings65.getAsArray("", strArray75, (java.lang.Boolean) false);
        indexScopedSettings59.validate("index.shadow_replicas", settings65);
        org.elasticsearch.index.IndexSettings indexSettings79 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings65);
        boolean boolean81 = indexSettings79.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting82 = indexSettings79.getALLOW_UNMAPPED();
        boolean boolean83 = indexSettings79.getqueryStringAnalyzeWildcard();
        indexSettings79.setTTLPurgeDisabled(true);
        boolean boolean86 = indexSettings79.isDefaultAllowUnmappedFields();
        boolean boolean87 = indexSettings79.getqueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting88 = indexSettings79.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        java.util.function.Predicate<java.lang.String> strPredicate89 = indexSettings79.indexNameMatcher;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction90 = null;
        org.elasticsearch.common.settings.Settings.Builder builder91 = null; // flaky: builder41.putProperties(strMap57, strPredicate89, strFunction90);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settingsSetting35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
// flaky:         org.junit.Assert.assertNotNull(settings40);
// flaky:         org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(booleanSetting82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(timeValueSetting88);
        org.junit.Assert.assertNotNull(strPredicate89);
// flaky:         org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test5256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5256");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
// flaky:         indexSettings16.maxResultWindow = 0;
        boolean boolean22 = false; // flaky: indexSettings16.isQueryStringLenient();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting23 = null; // flaky: indexSettings16.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int26 = builder25.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder25.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = settings31.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        java.lang.String[] strArray49 = settings31.getAsArray("index.version.minimum_compatible", strArray45, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder28.settings(settings31);
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.uuid");
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray63 = settings51.getAsArray("", strArray61, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder28.settings(settings51);
        java.lang.String str66 = settings51.get("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean69 = indexScopedSettings67.isPrivateSetting("index.");
        boolean boolean71 = indexScopedSettings67.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap75 = settings73.getGroups("index.uuid");
        java.lang.String[] strArray83 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray85 = settings73.getAsArray("", strArray83, (java.lang.Boolean) false);
        indexScopedSettings67.validate("index.shadow_replicas", settings73);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting88 = indexScopedSettings67.get("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData89 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int90 = indexMetaData89.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings91 = new org.elasticsearch.common.settings.IndexScopedSettings(settings51, indexScopedSettings67, indexMetaData89);
        java.util.Set<java.lang.String> strSet93 = indexMetaData89.activeAllocationIds((int) (short) 0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap94 = indexMetaData89.getCustoms();
// flaky:         indexSettings16.indexMetaData = indexMetaData89;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNull(wildcardSetting88);
        org.junit.Assert.assertNotNull(indexMetaData89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNotNull(strImmutableOpenMap94);
    }

    @Test
    public void test5257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5257");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.isTTLPurgeDisabled();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig26 = indexSettings21.getmergePolicyConfig();
        indexSettings21.gcDeletesInMillis = (byte) 1;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig26);
    }

    @Test
    public void test5258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5258");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.put("index.shadow_replicas", "");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#index.version.created_string=5.0.0#", false);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean16 = indexScopedSettings14.isPrivateSetting("index.");
        boolean boolean18 = indexScopedSettings14.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getGroups("index.uuid");
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray32 = settings20.getAsArray("", strArray30, (java.lang.Boolean) false);
        indexScopedSettings14.validate("index.shadow_replicas", settings20);
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings20);
        indexSettings34.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings34.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue38 = indexSettings34.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean42 = indexScopedSettings40.isPrivateSetting("index.");
        boolean boolean44 = indexScopedSettings40.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings46.getGroups("index.uuid");
        java.lang.String[] strArray56 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray58 = settings46.getAsArray("", strArray56, (java.lang.Boolean) false);
        indexScopedSettings40.validate("index.shadow_replicas", settings46);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings46);
        indexSettings60.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings60.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue64 = indexSettings60.flushThresholdSize;
        indexSettings34.flushThresholdSize = byteSizeValue64;
        indexSettings34.TTLPurgeDisabled = false;
        int int68 = indexSettings34.maxRescoreWindow;
        org.elasticsearch.index.translog.Translog.Durability durability69 = indexSettings34.durability;
        indexSettings34.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting72 = indexSettings34.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        boolean boolean73 = indexSettings34.getisShadowReplicaIndex();
        org.elasticsearch.Version version74 = indexSettings34.getversion();
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder8.put("index.blocks.metadata", version74);
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder75.put("", (-1L));
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder78.normalizePrefix("index.blocks.metadata");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(timeValue37);
        org.junit.Assert.assertNotNull(byteSizeValue38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(byteSizeValue64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10000 + "'", int68 == 10000);
        org.junit.Assert.assertTrue("'" + durability69 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability69.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(booleanSetting72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(version74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test5259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5259");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getGlobalCheckpointInterval();
        int int23 = indexSettings21.maxResultWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
    }

    @Test
    public void test5260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5260");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder16.loadFromSource("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.isPrivateSetting("index.");
        boolean boolean25 = indexScopedSettings21.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        indexScopedSettings21.validate("index.shadow_replicas", settings27);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings27);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting42 = indexSettings41.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting44 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer45 = null;
        indexScopedSettings43.addSettingsUpdateConsumer(settingsSetting44, settingsConsumer45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting48 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer49 = null;
        indexScopedSettings47.addSettingsUpdateConsumer(settingsSetting48, settingsConsumer49);
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings43.get(settingsSetting48);
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings43.dryRun(settings52);
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings53);
        indexSettings41.settings = settings54;
        org.elasticsearch.common.unit.SizeValue sizeValue57 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue58 = settings54.getAsSize("_na_", sizeValue57);
        boolean boolean59 = settings54.isEmpty();
        java.lang.String[] strArray61 = settings54.getAsArray("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder18.extendArray("index.data_path", strArray61);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("archived.", (long) 100);
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings66.getGroups("index.uuid");
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue70 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue71 = settings66.getAsBytesSize("index.auto_expand_replicas", byteSizeValue70);
        boolean boolean72 = settings66.isEmpty();
        java.util.Map<java.lang.String, java.lang.Object> strMap73 = settings66.getAsStructuredMap();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap75 = settings66.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder62.put(settings66);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(booleanSetting42);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertNotNull(settingsSetting44);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertNotNull(settingsSetting48);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNull(sizeValue58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNull(byteSizeValue71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test5261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5261");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting25 = indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        int int26 = indexSettings21.getMaxRescoreWindow();
        org.elasticsearch.Version version27 = indexSettings21.getIndexVersionCreated();
        boolean boolean28 = indexSettings21.warmerEnabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(intSetting25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(version27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test5262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5262");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.nodeSettings;
        indexSettings21.maxRescoreWindow = 0;
        boolean boolean26 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getSettings();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting28 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        int int29 = indexSettings21.numberOfShards;
        java.lang.String str30 = indexSettings21.nodeName;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        boolean boolean36 = indexScopedSettings32.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        indexScopedSettings32.validate("index.shadow_replicas", settings38);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings38);
        indexSettings52.setEnableWarmer(true);
        java.lang.String str55 = indexSettings52.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = indexSettings52.getIndexMetaData();
        indexSettings21.indexMetaData = indexMetaData56;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData56);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(timeValueSetting28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(indexMetaData56);
    }

    @Test
    public void test5263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5263");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean23 = indexSettings21.TTLPurgeDisabled;
        boolean boolean24 = indexSettings21.hasCustomDataPath();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = indexSettings21.scopedSettings;
        int int26 = indexSettings21.getMaxResultWindow();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig27 = indexSettings21.getmergePolicyConfig();
        java.lang.String str28 = indexSettings21.getUUID();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig29 = indexSettings21.getmergePolicyConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(mergePolicyConfig27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_na_" + "'", str28, "_na_");
        org.junit.Assert.assertNotNull(mergePolicyConfig29);
    }

    @Test
    public void test5264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5264");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.isPrivateSetting("index.");
        boolean boolean61 = indexScopedSettings57.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings63.getGroups("index.uuid");
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray75 = settings63.getAsArray("", strArray73, (java.lang.Boolean) false);
        indexScopedSettings57.validate("index.shadow_replicas", settings63);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings63);
        indexSettings77.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue80 = indexSettings77.getsyncInterval();
        boolean boolean81 = indexSettings77.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig82 = indexSettings77.getmergePolicyConfig();
        indexSettings77.gcDeletesInMillis = '4';
        org.elasticsearch.common.logging.ESLogger eSLogger85 = indexSettings77.logger;
        org.elasticsearch.index.translog.Translog.Durability durability86 = indexSettings77.getTranslogDurability();
        indexSettings21.durability = durability86;
        org.elasticsearch.common.unit.TimeValue timeValue88 = indexSettings21.refreshInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(timeValue80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig82);
        org.junit.Assert.assertNotNull(eSLogger85);
        org.junit.Assert.assertTrue("'" + durability86 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability86.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue88);
    }

    @Test
    public void test5265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5265");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        boolean boolean12 = indexScopedSettings8.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings14.getGroups("index.uuid");
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray26 = settings14.getAsArray("", strArray24, (java.lang.Boolean) false);
        indexScopedSettings8.validate("index.shadow_replicas", settings14);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings14);
        org.elasticsearch.index.translog.Translog.Durability durability29 = null;
        indexSettings28.setTranslogDurability(durability29);
        org.elasticsearch.common.settings.Settings settings31 = indexSettings28.getSettings();
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder4.settings(settings31);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = builder33.mapping("index.data_path");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean38 = indexScopedSettings36.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings36.applySettings(settings39);
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = indexScopedSettings36.applySettings(settings43);
        boolean boolean45 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings43);
        org.elasticsearch.common.unit.SizeValue sizeValue47 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue48 = settings43.getAsSize("index.shadow_replicas", sizeValue47);
        java.lang.String str51 = settings43.get("_na_", "index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder33.settings(settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder33.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom55 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder33.putCustom("index.auto_expand_replicas", custom55);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = builder33.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [archived.]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(sizeValue48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "index.uuid" + "'", str51, "index.uuid");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test5266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5266");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) (short) 1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test5267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5267");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        int int18 = 0; // flaky: indexSettings16.getMaxRescoreWindow();
        org.elasticsearch.common.settings.Settings settings19 = null; // flaky: indexSettings16.getSettings();
// flaky:         indexSettings16.TTLPurgeDisabled = true;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null; // flaky: indexSettings16.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = null; // flaky: indexSettings16.getIndexMetaData();
        org.elasticsearch.common.xcontent.XContentParser xContentParser24 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        boolean boolean30 = indexScopedSettings26.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        indexScopedSettings26.validate("index.shadow_replicas", settings32);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings32);
        boolean boolean48 = indexSettings46.matchesIndexName("");
        boolean boolean49 = indexSettings46.TTLPurgeDisabled;
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings46.getDEFAULT_GC_DELETES();
        java.util.function.Predicate<java.lang.String> strPredicate51 = indexSettings46.indexNameMatcher;
        java.lang.String str52 = indexSettings46.getUUID();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting53 = indexSettings46.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        boolean boolean54 = indexSettings46.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher55 = indexSettings46.parseFieldMatcher;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = indexMetaData23.fromXContent(xContentParser24, parseFieldMatcher55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
// flaky:         org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNull(strPredicate22);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(strPredicate51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "_na_" + "'", str52, "_na_");
        org.junit.Assert.assertNotNull(byteSizeValueSetting53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(parseFieldMatcher55);
    }

    @Test
    public void test5268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5268");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig25 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig26 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig27 = indexSettings21.mergePolicyConfig;
        indexSettings21.maxRescoreWindow = 32;
        boolean boolean30 = indexSettings21.hasCustomDataPath();
        indexSettings21.TTLPurgeDisabled = true;
        indexSettings21.setTTLPurgeDisabled(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig25);
        org.junit.Assert.assertNotNull(mergePolicyConfig26);
        org.junit.Assert.assertNotNull(mergePolicyConfig27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test5269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5269");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue27 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability28 = indexSettings21.getdurability();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue29 = indexSettings21.getFlushThresholdSize();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteSizeValue27);
        org.junit.Assert.assertTrue("'" + durability28 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability28.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(byteSizeValue29);
    }

    @Test
    public void test5270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5270");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        boolean boolean18 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
        java.lang.String str19 = null; // flaky: indexSettings16.customDataPath();
        boolean boolean20 = false; // flaky: indexSettings16.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting21 = null; // flaky: indexSettings16.getMAX_RESCORE_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertNotNull(intSetting21);
    }

    @Test
    public void test5271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5271");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder3.loadFromSource("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int21 = indexMetaData20.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap22 = indexMetaData20.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData20.requireFilters();
        org.elasticsearch.Version version24 = indexMetaData20.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder3.put("hi!", version24);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.version.minimum_compatible", 0.0f);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray42 = settings30.getAsArray("", strArray40, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder28.extendArray("index.shared_filesystem", strArray42);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder28.loadFromSource("index.version.upgraded");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test5272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5272");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean73 = indexSettings21.getwarmerEnabled();
        java.lang.String str74 = indexSettings21.getDefaultField();
        org.elasticsearch.common.settings.Settings settings75 = indexSettings21.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "_all" + "'", str74, "_all");
        org.junit.Assert.assertNotNull(settings75);
    }

    @Test
    public void test5273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5273");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
        boolean boolean20 = false; // flaky: indexSettings16.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting21 = null; // flaky: indexSettings16.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting21);
    }

    @Test
    public void test5274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5274");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = indexSettings21.getScopedSettings();
        org.elasticsearch.common.settings.Settings settings36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings35.dryRun(settings36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
    }

    @Test
    public void test5275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5275");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings30.applySettings(settings33);
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = settings37.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings39.getAsMap();
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings30.applySettings(settings39);
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings45 = settings43.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = settings45.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.isPrivateSetting("index.");
        boolean boolean53 = indexScopedSettings49.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.uuid");
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray67 = settings55.getAsArray("", strArray65, (java.lang.Boolean) false);
        indexScopedSettings49.validate("index.shadow_replicas", settings55);
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings55);
        boolean boolean71 = indexSettings69.matchesIndexName("");
        long long72 = indexSettings69.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue73 = indexSettings69.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue74 = settings45.getAsBytesSize("primary_terms", byteSizeValue73);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = settings39.getAsBytesSize("index.priority", byteSizeValue73);
        indexSettings21.flushThresholdSize = byteSizeValue75;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = indexSettings21.getIndexMetaData();
        java.util.Set<java.lang.String> strSet79 = null; // flaky: indexMetaData77.activeAllocationIds((int) (short) 10);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters80 = indexMetaData77.excludeFilters();
        java.lang.String str81 = indexMetaData77.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters82 = indexMetaData77.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters83 = indexMetaData77.requireFilters();
        int int84 = indexMetaData77.getTotalNumberOfShards();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput85 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData77.writeTo(streamOutput85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 60000L + "'", long72 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue73);
        org.junit.Assert.assertNotNull(byteSizeValue74);
        org.junit.Assert.assertNotNull(byteSizeValue75);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNull(strSet79);
        org.junit.Assert.assertNull(discoveryNodeFilters80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "_na_" + "'", str81, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters82);
        org.junit.Assert.assertNull(discoveryNodeFilters83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test5276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5276");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        boolean boolean25 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig26 = indexSettings21.getmergePolicyConfig();
        indexSettings21.gcDeletesInMillis = '4';
        long long29 = indexSettings21.getGcDeletesInMillis();
        int int30 = indexSettings21.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        boolean boolean36 = indexScopedSettings32.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        indexScopedSettings32.validate("index.shadow_replicas", settings38);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings38);
        boolean boolean54 = indexSettings52.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting55 = indexSettings52.getALLOW_UNMAPPED();
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexSettings52.getRefreshInterval();
        org.elasticsearch.index.translog.Translog.Durability durability57 = indexSettings52.getTranslogDurability();
        indexSettings21.setTranslogDurability(durability57);
        java.util.function.Predicate<java.lang.String> strPredicate59 = indexSettings21.getindexNameMatcher();
        boolean boolean60 = indexSettings21.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(booleanSetting55);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertTrue("'" + durability57 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability57.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(booleanSetting61);
    }

    @Test
    public void test5277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5277");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings21.durability = durability27;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        boolean boolean34 = indexScopedSettings30.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.uuid");
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray48 = settings36.getAsArray("", strArray46, (java.lang.Boolean) false);
        indexScopedSettings30.validate("index.shadow_replicas", settings36);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings36);
        org.elasticsearch.index.translog.Translog.Durability durability51 = null;
        indexSettings50.setTranslogDurability(durability51);
        org.elasticsearch.common.unit.TimeValue timeValue53 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings50.setGCDeletes(timeValue53);
        indexSettings21.setRefreshInterval(timeValue53);
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexSettings21.globalCheckpointInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap79 = indexMetaData57.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap80 = indexMetaData57.getAliases();
        indexSettings21.indexMetaData = indexMetaData57;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData83 = indexMetaData57.mappingOrDefault("1");
        int int84 = indexMetaData57.getTotalNumberOfShards();
        java.util.Set<java.lang.String> strSet86 = null; // flaky: indexMetaData57.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.common.settings.Settings settings87 = indexMetaData57.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(timeValue53);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strImmutableOpenMap79);
        org.junit.Assert.assertNotNull(strImmutableOpenMap80);
        org.junit.Assert.assertNull(mappingMetaData83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNull(strSet86);
        org.junit.Assert.assertNotNull(settings87);
    }

    @Test
    public void test5278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5278");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting21 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer22 = null;
        indexScopedSettings20.addSettingsUpdateConsumer(settingsSetting21, settingsConsumer22);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting25 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer26 = null;
        indexScopedSettings24.addSettingsUpdateConsumer(settingsSetting25, settingsConsumer26);
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.get(settingsSetting25);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer29 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting25, settingsConsumer29, settingsConsumer30);
        java.util.function.Predicate<java.lang.String> strPredicate32 = indexScopedSettings0.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = indexScopedSettings33.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings54.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings58 = settings54.getAsSettings("");
        java.lang.Boolean boolean61 = settings58.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue63 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue64 = settings58.getAsBytesSize("index.", byteSizeValue63);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = null;
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings66.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings70 = settings66.getAsSettings("");
        java.lang.Boolean boolean73 = settings70.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue76 = settings70.getAsBytesSize("index.", byteSizeValue75);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder77 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params78 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder79 = settings70.toXContent(xContentBuilder77, params78);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder80 = settings58.toXContent(xContentBuilder65, params78);
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings53.dryRun(settings58);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings82 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean84 = indexScopedSettings82.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap87 = settings85.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings88 = indexScopedSettings82.applySettings(settings85);
        java.util.function.Predicate<java.lang.String> strPredicate89 = indexScopedSettings82.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.Settings settings90 = settings58.filter(strPredicate89);
        org.elasticsearch.common.settings.Settings settings91 = indexScopedSettings0.dryRun(settings58);
        java.lang.String str93 = settings58.get("1.0");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertNotNull(settingsSetting21);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settingsSetting25);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertEquals("'" + boolean61 + "' != '" + true + "'", boolean61, true);
        org.junit.Assert.assertNull(byteSizeValue64);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertEquals("'" + boolean73 + "' != '" + true + "'", boolean73, true);
        org.junit.Assert.assertNull(byteSizeValue76);
        org.junit.Assert.assertNotNull(params78);
        org.junit.Assert.assertNull(xContentBuilder79);
        org.junit.Assert.assertNull(xContentBuilder80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(indexScopedSettings82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strMap87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(strPredicate89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test5279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5279");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings21.getsyncInterval();
        int int36 = indexSettings21.getMaxRescoreWindow();
        int int37 = indexSettings21.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig38 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting39 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = indexSettings21.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData42 = indexMetaData40.mappingOrDefault("index.auto_expand_replicas");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters43 = indexMetaData40.requireFilters();
        org.elasticsearch.common.settings.Settings settings44 = indexMetaData40.getSettings();
        org.elasticsearch.Version version45 = indexMetaData40.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap46 = indexMetaData40.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig38);
        org.junit.Assert.assertNotNull(booleanSetting39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNull(mappingMetaData42);
        org.junit.Assert.assertNull(discoveryNodeFilters43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(version45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
    }

    @Test
    public void test5280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5280");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig26 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig27 = indexSettings21.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        boolean boolean33 = indexScopedSettings29.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        indexScopedSettings29.validate("index.shadow_replicas", settings35);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap50 = indexMetaData28.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap51 = indexMetaData28.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters52 = indexMetaData28.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean56 = indexScopedSettings54.isPrivateSetting("index.");
        boolean boolean58 = indexScopedSettings54.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap62 = settings60.getGroups("index.uuid");
        java.lang.String[] strArray70 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray72 = settings60.getAsArray("", strArray70, (java.lang.Boolean) false);
        indexScopedSettings54.validate("index.shadow_replicas", settings60);
        org.elasticsearch.index.IndexSettings indexSettings74 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings60);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting75 = indexSettings74.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters77 = indexMetaData76.includeFilters();
        indexSettings74.indexMetaData = indexMetaData76;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData76);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters80 = indexMetaData76.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff81 = indexMetaData28.diff(indexMetaData76);
        org.apache.lucene.util.Version version82 = indexMetaData76.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap83 = indexMetaData76.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters84 = indexMetaData76.requireFilters();
        boolean boolean85 = indexSettings21.updateIndexMetaData(indexMetaData76);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap86 = indexMetaData76.getCustoms();
        org.elasticsearch.common.io.stream.StreamInput streamInput87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff88 = indexMetaData76.readDiffFrom(streamInput87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig26);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertNull(discoveryNodeFilters52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(indexScopedSettings54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(booleanSetting75);
        org.junit.Assert.assertNotNull(indexMetaData76);
        org.junit.Assert.assertNull(discoveryNodeFilters77);
        org.junit.Assert.assertNull(discoveryNodeFilters80);
        org.junit.Assert.assertNotNull(indexMetaDataDiff81);
        org.junit.Assert.assertNull(version82);
        org.junit.Assert.assertNotNull(strImmutableOpenMap83);
        org.junit.Assert.assertNull(discoveryNodeFilters84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap86);
    }

    @Test
    public void test5281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5281");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        java.lang.String str10 = builder3.remove("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder3.put("index.version.minimum_compatible", (-1));
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.shared_filesystem", "_na_");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test5282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5282");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getValue(settingsSetting17);
        int int19 = 0; // flaky: indexSettings16.numberOfShards;
        org.elasticsearch.common.logging.ESLogger eSLogger20 = null; // flaky: indexSettings16.logger;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting21 = null; // flaky: indexSettings16.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = null; // flaky: indexSettings16.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher23 = null; // flaky: indexSettings16.parseFieldMatcher;
// flaky:         indexSettings16.TTLPurgeDisabled = false;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(settingsSetting17);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertNotNull(eSLogger20);
// flaky:         org.junit.Assert.assertNotNull(intSetting21);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting22);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher23);
    }

    @Test
    public void test5283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5283");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean26 = indexSettings21.getisShadowReplicaIndex();
        boolean boolean27 = indexSettings21.isQueryStringAnalyzeWildcard();
        indexSettings21.gcDeletesInMillis = 100;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting30 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher31 = indexSettings21.parseFieldMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSetting30);
        org.junit.Assert.assertNotNull(parseFieldMatcher31);
    }

    @Test
    public void test5284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5284");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("active_allocations");
    }

    @Test
    public void test5285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5285");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("index.uuid", 0L);
        java.lang.String str24 = builder22.get("");
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings34 = settings30.getAsSettings("");
        java.lang.Boolean boolean37 = settings34.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue39 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue40 = settings34.getAsBytesSize("index.", byteSizeValue39);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = null;
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings42.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings46 = settings42.getAsSettings("");
        java.lang.Boolean boolean49 = settings46.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue52 = settings46.getAsBytesSize("index.", byteSizeValue51);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params54 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = settings46.toXContent(xContentBuilder53, params54);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = settings34.toXContent(xContentBuilder41, params54);
        java.lang.Class<?> wildcardClass57 = settings34.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder28.put("index.version.upgraded_string", (java.lang.Class) wildcardClass57);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder17.put("_all", (java.lang.Class) wildcardClass57);
        java.lang.String[] strArray65 = new java.lang.String[] { "index.creation_date", "index.blocks.read_only", "index.shared_filesystem", "index.uuid" };
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder59.putArray("index.version.upgraded", strArray65);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder59.put("archived.", (int) ' ');
        java.lang.String str71 = builder59.remove("index.version.created");
        java.lang.Class<?> wildcardClass72 = builder59.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + boolean37 + "' != '" + true + "'", boolean37, true);
        org.junit.Assert.assertNull(byteSizeValue40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertEquals("'" + boolean49 + "' != '" + true + "'", boolean49, true);
        org.junit.Assert.assertNull(byteSizeValue52);
        org.junit.Assert.assertNotNull(params54);
        org.junit.Assert.assertNull(xContentBuilder55);
        org.junit.Assert.assertNull(xContentBuilder56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test5286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5286");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = indexSettings21.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger31 = indexSettings21.getlogger();
        int int32 = indexSettings21.maxResultWindow;
        int int33 = indexSettings21.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(booleanSetting30);
        org.junit.Assert.assertNotNull(eSLogger31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10000 + "'", int32 == 10000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test5287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5287");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet20 = indexScopedSettings0.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer23 = null;
        indexScopedSettings21.addSettingsUpdateConsumer(settingsSetting22, settingsConsumer23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings25.applySettings(settings28);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = settings32.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = settings34.getAsMap();
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings25.applySettings(settings34);
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings21.dryRun(settings34);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings37.getGroups("index.shadow_replicas", true);
        org.elasticsearch.common.settings.Settings settings42 = settings37.getByPrefix("_na_");
        indexScopedSettings0.validate(settings42);
        java.lang.String[] strArray45 = settings42.getAsArray("index.creation_date_string");
        boolean boolean46 = settings42.isEmpty();
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.Settings settings48 = settings42.filter(strPredicate47);
        java.lang.Boolean boolean51 = settings48.getAsBoolean("index.shared_filesystem", (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(wildcardSettingSet20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + boolean51 + "' != '" + true + "'", boolean51, true);
    }

    @Test
    public void test5288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5288");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder8.put("_na_", (double) 1);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder8.put("1.0", (float) '4');
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder8.normalizePrefix("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test5289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5289");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        boolean boolean12 = indexScopedSettings8.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings14.getGroups("index.uuid");
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray26 = settings14.getAsArray("", strArray24, (java.lang.Boolean) false);
        indexScopedSettings8.validate("index.shadow_replicas", settings14);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings14);
        org.elasticsearch.index.translog.Translog.Durability durability29 = null;
        indexSettings28.setTranslogDurability(durability29);
        org.elasticsearch.common.settings.Settings settings31 = indexSettings28.getSettings();
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder4.settings(settings31);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = builder33.mapping("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("index.uuid", 0L);
        java.lang.String str41 = builder39.get("");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder42.putNull("hi!");
        java.lang.String str46 = builder44.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder44.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder44.put("index.shared_filesystem", (double) (-1L));
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder44.putNull("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder44.put("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", "archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder33.settings(builder56);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test5290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5290");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting25 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting26 = indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        boolean boolean28 = indexSettings21.matchesIndexName("index.version.created");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting29 = indexSettings21.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        org.elasticsearch.common.unit.TimeValue timeValue52 = indexSettings51.getDEFAULT_REFRESH_INTERVAL();
        indexSettings51.maxResultWindow = (byte) -1;
        org.elasticsearch.index.translog.Translog.Durability durability55 = indexSettings51.getTranslogDurability();
        indexSettings21.durability = durability55;
        org.elasticsearch.common.logging.ESLogger eSLogger57 = indexSettings21.logger;
        boolean boolean58 = indexSettings21.TTLPurgeDisabled;
        boolean boolean59 = indexSettings21.isQueryStringLenient();
        int int60 = indexSettings21.maxResultWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeValueSetting25);
        org.junit.Assert.assertNotNull(intSetting26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeValueSetting29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(timeValue52);
        org.junit.Assert.assertTrue("'" + durability55 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability55.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(eSLogger57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10000 + "'", int60 == 10000);
    }

    @Test
    public void test5291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5291");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.Version version25 = indexSettings21.getversion();
        boolean boolean26 = indexSettings21.warmerEnabled;
        indexSettings21.setTTLPurgeDisabled(true);
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings21.syncInterval;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher30 = indexSettings21.getParseFieldMatcher();
        java.util.function.Predicate<java.lang.String> strPredicate31 = indexSettings21.getindexNameMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(parseFieldMatcher30);
        org.junit.Assert.assertNotNull(strPredicate31);
    }

    @Test
    public void test5292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5292");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.nodeSettings;
        indexSettings21.TTLPurgeDisabled = false;
        java.lang.String str26 = indexSettings21.getDefaultField();
        java.lang.String str27 = indexSettings21.getUUID();
        boolean boolean28 = indexSettings21.queryStringAnalyzeWildcard;
        org.elasticsearch.index.translog.Translog.Durability durability29 = indexSettings21.getdurability();
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings21.getsyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = indexSettings21.getIndexMetaData();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters32 = indexMetaData31.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "_all" + "'", str26, "_all");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "_na_" + "'", str27, "_na_");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + durability29 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability29.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(discoveryNodeFilters32);
    }

    @Test
    public void test5293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5293");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings21.getsyncInterval();
        int int36 = indexSettings21.getMaxRescoreWindow();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig37 = indexSettings21.getMergeSchedulerConfig();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters39 = indexMetaData38.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters40 = indexMetaData38.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData38);
        org.elasticsearch.Version version42 = indexMetaData38.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean46 = indexScopedSettings44.isPrivateSetting("index.");
        boolean boolean48 = indexScopedSettings44.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray62 = settings50.getAsArray("", strArray60, (java.lang.Boolean) false);
        indexScopedSettings44.validate("index.shadow_replicas", settings50);
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings50);
        org.elasticsearch.index.translog.Translog.Durability durability65 = null;
        indexSettings64.setTranslogDurability(durability65);
        boolean boolean67 = indexSettings64.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting69 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer70 = null;
        indexScopedSettings68.addSettingsUpdateConsumer(settingsSetting69, settingsConsumer70);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings72 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting73 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer74 = null;
        indexScopedSettings72.addSettingsUpdateConsumer(settingsSetting73, settingsConsumer74);
        org.elasticsearch.common.settings.Settings settings76 = indexScopedSettings68.get(settingsSetting73);
        org.elasticsearch.common.settings.Settings settings77 = indexSettings64.getValue(settingsSetting73);
        java.lang.String str78 = indexSettings64.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting79 = indexSettings64.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = indexSettings64.indexMetaData;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff81 = indexMetaData38.diff(indexMetaData80);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData80);
        boolean boolean83 = indexSettings21.updateIndexMetaData(indexMetaData80);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder84 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData80);
        long long85 = indexMetaData80.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData87 = indexMetaData80.mapping("index.shared_filesystem");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNull(discoveryNodeFilters39);
        org.junit.Assert.assertNull(discoveryNodeFilters40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertNotNull(settingsSetting69);
        org.junit.Assert.assertNotNull(indexScopedSettings72);
        org.junit.Assert.assertNotNull(settingsSetting73);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting79);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(indexMetaDataDiff81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1L + "'", long85 == 1L);
        org.junit.Assert.assertNull(mappingMetaData87);
    }

    @Test
    public void test5294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5294");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.Version version26 = indexSettings21.version;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting28 = indexSettings21.getALLOW_UNMAPPED();
        indexSettings21.setTTLPurgeDisabled(false);
        boolean boolean31 = indexSettings21.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting32 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.common.settings.Settings settings33 = indexSettings21.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting34 = indexSettings21.getALLOW_UNMAPPED();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(booleanSetting28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanSetting32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(booleanSetting34);
    }

    @Test
    public void test5295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5295");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        int int18 = 0; // flaky: indexSettings16.getMaxRescoreWindow();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings19.applySettings(settings22);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings19.applySettings(settings26);
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings26);
// flaky:         indexSettings16.settings = settings26;
        org.elasticsearch.common.settings.Settings settings31 = settings26.getAsSettings("");
        java.lang.String str33 = settings31.get("index.blocks.read");
        org.elasticsearch.common.settings.Settings settings35 = settings31.getAsSettings("index.version.minimum_compatible");
        java.lang.String str38 = settings31.get("index.blocks.read_only", "index.number_of_shards");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings31.getAsGroups();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue42 = settings31.getAsMemory("index.blocks.write", "");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.blocks.write] with value [] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "index.number_of_shards" + "'", str38, "index.number_of_shards");
        org.junit.Assert.assertNotNull(strMap39);
    }

    @Test
    public void test5296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5296");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder4.creationDate((long) 10);
        long long29 = builder28.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state31 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        byte byte32 = state31.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder30.state(state31);
        long long34 = builder30.version();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + state31 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state31.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 1 + "'", byte32 == (byte) 1);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
    }

    @Test
    public void test5297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5297");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.auto_expand_replicas", (float) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder6.put("index.version.upgraded_string", 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder6.put("index.shared_filesystem", (float) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder6.put("index.shared_filesystem", (double) 10);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder6.put("1", true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test5298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5298");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.putCustom("primary_terms", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder5.removeAlias("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder12.putCustom("index.version.upgraded", custom14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder15.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = builder15.build();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(indexMetaData17);
    }

    @Test
    public void test5299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5299");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        java.lang.String str5 = indexScopedSettings0.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int8 = builder7.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = settings13.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.uuid");
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray29 = settings17.getAsArray("", strArray27, (java.lang.Boolean) false);
        java.lang.String[] strArray31 = settings13.getAsArray("index.version.minimum_compatible", strArray27, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder10.settings(settings13);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder10.settings(settings33);
        java.lang.String str48 = settings33.get("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings49 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder50 = null;
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings55 = settings51.getAsSettings("");
        java.lang.Boolean boolean58 = settings55.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue61 = settings55.getAsBytesSize("index.", byteSizeValue60);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder62 = null;
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings63.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings67 = settings63.getAsSettings("");
        java.lang.Boolean boolean70 = settings67.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue72 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue73 = settings67.getAsBytesSize("index.", byteSizeValue72);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder74 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params75 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder76 = settings67.toXContent(xContentBuilder74, params75);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder77 = settings55.toXContent(xContentBuilder62, params75);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder78 = settings33.toXContent(xContentBuilder50, params75);
        boolean boolean79 = settings33.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings33.getGroups("1.0");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings33.getAsGroups();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + boolean58 + "' != '" + true + "'", boolean58, true);
        org.junit.Assert.assertNull(byteSizeValue61);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertEquals("'" + boolean70 + "' != '" + true + "'", boolean70, true);
        org.junit.Assert.assertNull(byteSizeValue73);
        org.junit.Assert.assertNotNull(params75);
        org.junit.Assert.assertNull(xContentBuilder76);
        org.junit.Assert.assertNull(xContentBuilder77);
        org.junit.Assert.assertNull(xContentBuilder78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
    }

    @Test
    public void test5300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5300");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getSettings();
        boolean boolean19 = false; // flaky: indexSettings16.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue20 = null; // flaky: indexSettings16.globalCheckpointInterval;
        boolean boolean21 = false; // flaky: indexSettings16.isQueryStringLenient();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = null; // flaky: indexSettings16.scopedSettings;
        org.elasticsearch.index.translog.Translog.Durability durability23 = null; // flaky: indexSettings16.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(indexScopedSettings22);
// flaky:         org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test5301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5301");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        indexSettings21.maxResultWindow = (byte) -1;
        org.elasticsearch.index.translog.Translog.Durability durability25 = indexSettings21.getTranslogDurability();
        boolean boolean26 = indexSettings21.isOnSharedFilesystem();
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = indexSettings21.updateIndexMetaData(indexMetaData28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + durability25 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability25.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test5302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5302");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.Version version26 = indexSettings21.version;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean28 = indexSettings21.getdefaultAllowUnmappedFields();
        java.util.function.Predicate<java.lang.String> strPredicate29 = indexSettings21.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings30 = indexSettings21.settings;
        org.elasticsearch.Version version31 = indexSettings21.getversion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(version31);
    }

    @Test
    public void test5303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5303");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        int int26 = indexSettings21.numberOfShards;
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.getTranslogSyncInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting28 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        boolean boolean29 = indexSettings21.getdefaultAllowUnmappedFields();
        boolean boolean30 = indexSettings21.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(booleanSetting28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test5304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5304");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Settings settings28 = indexSettings21.settings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(settings28);
    }

    @Test
    public void test5305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5305");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig35 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings43);
        org.elasticsearch.common.unit.TimeValue timeValue58 = indexSettings57.getDEFAULT_REFRESH_INTERVAL();
        indexSettings57.maxResultWindow = (byte) -1;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        indexSettings21.setdurability(durability61);
        boolean boolean64 = indexSettings21.matchesIndexName("index.version.minimum_compatible");
        int int65 = indexSettings21.numberOfShards;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(mergePolicyConfig35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(timeValue58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test5306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5306");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        int int26 = indexSettings21.numberOfShards;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        boolean boolean32 = indexScopedSettings28.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        indexScopedSettings28.validate("index.shadow_replicas", settings34);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings34);
        org.elasticsearch.common.settings.Settings settings49 = indexSettings48.getSettings();
        boolean boolean50 = indexSettings48.isIndexUsingShadowReplicas();
        boolean boolean51 = indexSettings48.queryStringAllowLeadingWildcard;
        int int52 = indexSettings48.getMaxResultWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean56 = indexScopedSettings54.isPrivateSetting("index.");
        boolean boolean58 = indexScopedSettings54.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap62 = settings60.getGroups("index.uuid");
        java.lang.String[] strArray70 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray72 = settings60.getAsArray("", strArray70, (java.lang.Boolean) false);
        indexScopedSettings54.validate("index.shadow_replicas", settings60);
        org.elasticsearch.index.IndexSettings indexSettings74 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings60);
        org.elasticsearch.index.translog.Translog.Durability durability75 = null;
        indexSettings74.setTranslogDurability(durability75);
        org.elasticsearch.common.unit.TimeValue timeValue77 = indexSettings74.getGlobalCheckpointInterval();
        indexSettings48.refreshInterval = timeValue77;
        indexSettings21.refreshInterval = timeValue77;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting80 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10000 + "'", int52 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(indexScopedSettings54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(timeValue77);
        org.junit.Assert.assertNotNull(booleanSetting80);
    }

    @Test
    public void test5307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5307");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        boolean boolean26 = indexSettings21.getqueryStringLenient();
        boolean boolean27 = indexSettings21.getdefaultAllowUnmappedFields();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher28 = indexSettings21.getParseFieldMatcher();
        boolean boolean29 = indexSettings21.isShadowReplicaIndex();
        boolean boolean30 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(parseFieldMatcher28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test5308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5308");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher18 = null; // flaky: indexSettings16.getParseFieldMatcher();
        org.elasticsearch.common.unit.TimeValue timeValue19 = null; // flaky: indexSettings16.refreshInterval;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig20 = null; // flaky: indexSettings16.mergeSchedulerConfig;
        boolean boolean21 = false; // flaky: indexSettings16.queryStringAllowLeadingWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher18);
// flaky:         org.junit.Assert.assertNotNull(timeValue19);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig20);
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test5309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5309");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.Version version25 = indexSettings21.getversion();
        boolean boolean26 = indexSettings21.warmerEnabled;
        java.lang.String str27 = indexSettings21.nodeName;
        int int28 = indexSettings21.getMaxResultWindow();
        indexSettings21.TTLPurgeDisabled = true;
        org.elasticsearch.common.unit.TimeValue timeValue31 = indexSettings21.getDEFAULT_GC_DELETES();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings39);
        indexSettings53.setEnableWarmer(true);
        java.lang.String str56 = indexSettings53.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = indexSettings53.getIndexMetaData();
        java.lang.String str58 = indexSettings53.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean62 = indexScopedSettings60.isPrivateSetting("index.");
        boolean boolean64 = indexScopedSettings60.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings66.getGroups("index.uuid");
        java.lang.String[] strArray76 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray78 = settings66.getAsArray("", strArray76, (java.lang.Boolean) false);
        indexScopedSettings60.validate("index.shadow_replicas", settings66);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData59, settings66);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting81 = indexSettings80.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability82 = indexSettings80.durability;
        org.elasticsearch.common.unit.TimeValue timeValue83 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings80.setGCDeletes(timeValue83);
        org.elasticsearch.common.unit.TimeValue timeValue85 = indexSettings80.refreshInterval;
        indexSettings53.setGCDeletes(timeValue85);
        indexSettings21.setRefreshInterval(timeValue85);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(timeValueSetting81);
        org.junit.Assert.assertTrue("'" + durability82 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability82.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue83);
        org.junit.Assert.assertNotNull(timeValue85);
    }

    @Test
    public void test5310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5310");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability23 = indexSettings21.getTranslogDurability();
        boolean boolean24 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.Version version26 = indexSettings21.version;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting27 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        boolean boolean33 = indexScopedSettings29.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        indexScopedSettings29.validate("index.shadow_replicas", settings35);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        org.elasticsearch.common.settings.Settings settings50 = indexSettings49.getSettings();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings49.getFlushThresholdSize();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig52 = indexSettings49.getmergePolicyConfig();
        org.elasticsearch.common.unit.TimeValue timeValue53 = indexSettings49.getRefreshInterval();
        indexSettings21.refreshInterval = timeValue53;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNotNull(timeValueSetting27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertNotNull(mergePolicyConfig52);
        org.junit.Assert.assertNotNull(timeValue53);
    }

    @Test
    public void test5311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5311");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean26 = indexSettings21.getisShadowReplicaIndex();
        boolean boolean27 = indexSettings21.isQueryStringAnalyzeWildcard();
        indexSettings21.gcDeletesInMillis = 100;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig30 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher31 = indexSettings21.getParseFieldMatcher();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting32 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig30);
        org.junit.Assert.assertNotNull(parseFieldMatcher31);
        org.junit.Assert.assertNotNull(timeValueSetting32);
    }

    @Test
    public void test5312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5312");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.refreshInterval;
        java.lang.String str28 = indexSettings21.getDefaultField();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = indexSettings21.indexMetaData;
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings21.getsyncInterval();
        boolean boolean31 = indexSettings21.queryStringAllowLeadingWildcard;
        int int32 = indexSettings21.maxRescoreWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_all" + "'", str28, "_all");
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10000 + "'", int32 == 10000);
    }

    @Test
    public void test5313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5313");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.syncInterval;
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings21.getRefreshInterval();
        org.elasticsearch.common.settings.Settings settings29 = indexSettings21.settings;
        java.lang.String str30 = indexSettings21.nodeName;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test5314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5314");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        boolean boolean25 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig26 = indexSettings21.getmergePolicyConfig();
        indexSettings21.gcDeletesInMillis = '4';
        long long29 = indexSettings21.getGcDeletesInMillis();
        int int30 = indexSettings21.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        boolean boolean36 = indexScopedSettings32.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        indexScopedSettings32.validate("index.shadow_replicas", settings38);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings38);
        indexSettings52.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue55 = indexSettings52.getsyncInterval();
        org.elasticsearch.common.settings.Settings settings56 = indexSettings52.getSettings();
        org.elasticsearch.index.translog.Translog.Durability durability57 = indexSettings52.durability;
        indexSettings21.durability = durability57;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings21.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertTrue("'" + durability57 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability57.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue59);
    }

    @Test
    public void test5315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5315");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        boolean boolean24 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        boolean boolean30 = indexScopedSettings26.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        indexScopedSettings26.validate("index.shadow_replicas", settings32);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings32);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting47 = indexSettings46.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData48.includeFilters();
        indexSettings46.indexMetaData = indexMetaData48;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters52 = indexMetaData48.includeFilters();
        indexSettings21.indexMetaData = indexMetaData48;
        org.apache.lucene.util.Version version54 = indexMetaData48.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap55 = indexMetaData48.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings56 = indexMetaData48.getSettings();
        org.elasticsearch.common.io.stream.StreamInput streamInput57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = indexMetaData48.readFrom(streamInput57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(booleanSetting47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
        org.junit.Assert.assertNull(discoveryNodeFilters52);
        org.junit.Assert.assertNull(version54);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap55);
        org.junit.Assert.assertNotNull(settings56);
    }

    @Test
    public void test5316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5316");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getTranslogDurability();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting28 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        boolean boolean29 = indexSettings21.isDefaultAllowUnmappedFields();
        int int30 = indexSettings21.maxResultWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValueSetting28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
    }

    @Test
    public void test5317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5317");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        boolean boolean19 = indexScopedSettings15.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings21.getGroups("index.uuid");
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray33 = settings21.getAsArray("", strArray31, (java.lang.Boolean) false);
        indexScopedSettings15.validate("index.shadow_replicas", settings21);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings21);
        org.elasticsearch.index.translog.Translog.Durability durability36 = null;
        indexSettings35.setTranslogDurability(durability36);
        org.elasticsearch.common.unit.TimeValue timeValue38 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings35.setGCDeletes(timeValue38);
        org.elasticsearch.Version version40 = indexSettings35.version;
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder8.put("active_allocations", version40);
        java.lang.String str43 = builder41.get("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder41.put("hi!", "state-");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(version40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test5318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5318");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder6.put("index.version.upgraded", (double) 10000);
        java.lang.String str13 = builder6.get("_all");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder6.put("1", 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder16.normalizePrefix("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test5319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5319");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.auto_expand_replicas", (float) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("index.version.minimum_compatible", "_all");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder9.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.isPrivateSetting("index.");
        boolean boolean20 = indexScopedSettings16.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings22.getGroups("index.uuid");
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray34 = settings22.getAsArray("", strArray32, (java.lang.Boolean) false);
        indexScopedSettings16.validate("index.shadow_replicas", settings22);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting37 = indexSettings36.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability38 = indexSettings36.durability;
        org.elasticsearch.common.unit.TimeValue timeValue39 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings36.setGCDeletes(timeValue39);
        java.lang.Class<?> wildcardClass41 = timeValue39.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder9.put("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", (java.lang.Class) wildcardClass41);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(timeValueSetting37);
        org.junit.Assert.assertTrue("'" + durability38 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability38.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test5320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5320");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings20.applySettings(settings23);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.applySettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexScopedSettings0.copy(settings28, indexMetaData29);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData32 = indexMetaData29.mappingOrDefault("index.version.minimum_compatible");
        int int33 = indexMetaData29.getNumberOfShards();
        java.lang.String str34 = indexMetaData29.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData29);
        long long36 = indexMetaData29.getCreationDate();
        long long37 = indexMetaData29.getVersion();
        long long38 = indexMetaData29.getCreationDate();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNull(mappingMetaData32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "_na_" + "'", str34, "_na_");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
    }

    @Test
    public void test5321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5321");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder3.put("index.version.upgraded_string", (float) 1);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("index.", 100.0f);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder18.put("hi!", (float) (short) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test5322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5322");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap27 = indexMetaData0.getCustoms();
        java.lang.String str28 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.uuid", 0L);
        java.lang.String str35 = builder33.get("");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder33.putNull("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.", (int) 'a');
        org.elasticsearch.common.settings.Settings settings42 = builder41.build();
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings42);
        long long44 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_na_" + "'", str28, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
    }

    @Test
    public void test5323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5323");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean25 = indexSettings21.getqueryStringAnalyzeWildcard();
        indexSettings21.setTTLPurgeDisabled(true);
        boolean boolean28 = indexSettings21.isDefaultAllowUnmappedFields();
        boolean boolean29 = indexSettings21.getqueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting30 = indexSettings21.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        boolean boolean31 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting32 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(timeValueSetting30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(timeValueSetting32);
    }

    @Test
    public void test5324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5324");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap2 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.isPrivateSetting("index.");
        boolean boolean10 = indexScopedSettings6.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray24 = settings12.getAsArray("", strArray22, (java.lang.Boolean) false);
        indexScopedSettings6.validate("index.shadow_replicas", settings12);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap27 = indexMetaData5.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData5.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters29 = indexMetaData5.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting52 = indexSettings51.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters54 = indexMetaData53.includeFilters();
        indexSettings51.indexMetaData = indexMetaData53;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData53);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters57 = indexMetaData53.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff58 = indexMetaData5.diff(indexMetaData53);
        boolean boolean60 = indexMetaData53.isSameUUID("index.version.minimum_compatible");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff61 = indexMetaData0.diff(indexMetaData53);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean65 = indexScopedSettings63.isPrivateSetting("index.");
        boolean boolean67 = indexScopedSettings63.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap71 = settings69.getGroups("index.uuid");
        java.lang.String[] strArray79 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray81 = settings69.getAsArray("", strArray79, (java.lang.Boolean) false);
        indexScopedSettings63.validate("index.shadow_replicas", settings69);
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData62, settings69);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap84 = indexMetaData62.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap85 = indexMetaData62.getCustoms();
        java.util.Set<java.lang.String> strSet87 = null; // flaky: indexMetaData62.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.common.settings.Settings settings88 = indexMetaData62.getSettings();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff89 = indexMetaData0.diff(indexMetaData62);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput90 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNull(discoveryNodeFilters29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(booleanSetting52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNull(discoveryNodeFilters54);
        org.junit.Assert.assertNull(discoveryNodeFilters57);
        org.junit.Assert.assertNotNull(indexMetaDataDiff58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strImmutableOpenMap84);
        org.junit.Assert.assertNotNull(strImmutableOpenMap85);
        org.junit.Assert.assertNull(strSet87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(indexMetaDataDiff89);
    }

    @Test
    public void test5325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5325");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        boolean boolean25 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig26 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.durability;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher28 = indexSettings21.getParseFieldMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = indexSettings21.getIndexMetaData();
        boolean boolean30 = indexSettings21.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig26);
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test5326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5326");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.auto_expand_replicas", (float) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.uuid", 0L);
        java.lang.String str16 = builder14.get("");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder17.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.isPrivateSetting("index.");
        boolean boolean26 = indexScopedSettings22.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        indexScopedSettings22.validate("index.shadow_replicas", settings28);
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings28);
        org.elasticsearch.index.translog.Translog.Durability durability43 = null;
        indexSettings42.setTranslogDurability(durability43);
        org.elasticsearch.common.unit.TimeValue timeValue45 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings42.setGCDeletes(timeValue45);
        org.elasticsearch.Version version47 = indexSettings42.version;
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder17.put("index.blocks.read", version47);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder9.put("index.creation_date", version47);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.loadFromSource("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("index.blocks.read_only", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings settings56 = builder55.build();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.putNull("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder55.put("index.uuid", "index.creation_date");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = builder55.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertNotNull(version47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(strMap62);
    }

    @Test
    public void test5327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5327");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.isOnSharedFilesystem();
        int int26 = indexSettings21.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = indexSettings21.indexMetaData;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        boolean boolean33 = indexScopedSettings29.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        indexScopedSettings29.validate("index.shadow_replicas", settings35);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        boolean boolean51 = indexSettings49.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting52 = indexSettings49.getALLOW_UNMAPPED();
        boolean boolean53 = indexSettings49.getqueryStringAnalyzeWildcard();
        boolean boolean54 = indexSettings49.defaultAllowUnmappedFields;
        java.util.function.Predicate<java.lang.String> strPredicate55 = indexSettings49.getindexNameMatcher();
        indexSettings49.maxRescoreWindow = (byte) 0;
        boolean boolean58 = indexSettings49.getwarmerEnabled();
        boolean boolean59 = indexSettings49.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting60 = indexSettings49.getINDEX_TTL_DISABLE_PURGE_SETTING();
        int int61 = indexSettings49.getNumberOfShards();
        boolean boolean62 = indexSettings49.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings49.getdurability();
        indexSettings21.durability = durability63;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher65 = indexSettings21.parseFieldMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(booleanSetting52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strPredicate55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(booleanSetting60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher65);
    }

    @Test
    public void test5328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5328");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int6 = indexMetaData5.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings10.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings7.applySettings(settings10);
        java.lang.String str15 = settings10.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer19 = null;
        indexScopedSettings17.addSettingsUpdateConsumer(settingsSetting18, settingsConsumer19);
        org.elasticsearch.index.IndexSettings indexSettings21 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData5, settings10, strPredicate16, indexScopedSettings17);
        int int22 = 0; // flaky: indexSettings21.getNumberOfReplicas();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting23 = null; // flaky: indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = null; // flaky: indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.isPrivateSetting("index.");
        boolean boolean29 = indexScopedSettings25.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray43 = settings31.getAsArray("", strArray41, (java.lang.Boolean) false);
        indexScopedSettings25.validate("index.shadow_replicas", settings31);
        boolean boolean46 = indexScopedSettings25.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings25.getScope();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings48.applySettings(settings51);
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings56 = indexScopedSettings48.applySettings(settings55);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting57 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings58 = indexScopedSettings48.get(settingsSetting57);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting60 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer61 = null;
        indexScopedSettings59.addSettingsUpdateConsumer(settingsSetting60, settingsConsumer61);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting64 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer65 = null;
        indexScopedSettings63.addSettingsUpdateConsumer(settingsSetting64, settingsConsumer65);
        org.elasticsearch.common.settings.Settings settings67 = indexScopedSettings59.get(settingsSetting64);
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings69 = indexScopedSettings59.dryRun(settings68);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting70 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings71 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting72 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer73 = null;
        indexScopedSettings71.addSettingsUpdateConsumer(settingsSetting72, settingsConsumer73);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings75 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting76 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer77 = null;
        indexScopedSettings75.addSettingsUpdateConsumer(settingsSetting76, settingsConsumer77);
        org.elasticsearch.common.settings.Settings settings79 = indexScopedSettings71.get(settingsSetting76);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer80 = null;
        indexScopedSettings59.addSettingsUpdateConsumer(settingsSetting70, settingsSetting76, settingsBiConsumer80);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer82 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting57, settingsSetting70, settingsBiConsumer82);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer84 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer85 = null;
// flaky:         indexScopedSettings24.addSettingsUpdateConsumer(settingsSetting57, settingsConsumer84, settingsConsumer85);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer87 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer88 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting57, settingsConsumer87, settingsConsumer88);
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet90 = indexScopedSettings0.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings91 = indexScopedSettings0.getDEFAULT_SCOPED_SETTINGS();
        java.util.function.Predicate<java.lang.String> strPredicate92 = indexScopedSettings91.getINDEX_SETTINGS_KEY_PREDICATE();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
// flaky:         org.junit.Assert.assertNotNull(intSetting23);
// flaky:         org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settingsSetting57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertNotNull(settingsSetting60);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertNotNull(settingsSetting64);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settingsSetting70);
        org.junit.Assert.assertNotNull(indexScopedSettings71);
        org.junit.Assert.assertNotNull(settingsSetting72);
        org.junit.Assert.assertNotNull(indexScopedSettings75);
        org.junit.Assert.assertNotNull(settingsSetting76);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(wildcardSettingSet90);
        org.junit.Assert.assertNotNull(indexScopedSettings91);
        org.junit.Assert.assertNotNull(strPredicate92);
    }

    @Test
    public void test5329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5329");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.nodeSettings;
        indexSettings21.maxRescoreWindow = 0;
        boolean boolean26 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = indexSettings21.scopedSettings;
        indexSettings21.setMaxRescoreWindow((int) '4');
        java.lang.String str31 = indexSettings21.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "_all" + "'", str31, "_all");
    }

    @Test
    public void test5330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5330");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.isPrivateSetting("index.");
        boolean boolean25 = indexScopedSettings21.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        indexScopedSettings21.validate("index.shadow_replicas", settings27);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings27);
        indexSettings41.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings41.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue45 = indexSettings41.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.isPrivateSetting("index.");
        boolean boolean51 = indexScopedSettings47.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings53.getGroups("index.uuid");
        java.lang.String[] strArray63 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray65 = settings53.getAsArray("", strArray63, (java.lang.Boolean) false);
        indexScopedSettings47.validate("index.shadow_replicas", settings53);
        org.elasticsearch.index.IndexSettings indexSettings67 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings53);
        indexSettings67.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue70 = indexSettings67.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue71 = indexSettings67.flushThresholdSize;
        indexSettings41.flushThresholdSize = byteSizeValue71;
        indexSettings41.TTLPurgeDisabled = false;
        int int75 = indexSettings41.maxRescoreWindow;
        int int76 = indexSettings41.getMaxResultWindow();
        org.elasticsearch.common.unit.TimeValue timeValue77 = indexSettings41.getTranslogSyncInterval();
// flaky:         indexSettings16.setRefreshInterval(timeValue77);
        org.elasticsearch.index.translog.Translog.Durability durability79 = null; // flaky: indexSettings16.getTranslogDurability();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting80 = null; // flaky: indexSettings16.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        int int81 = 0; // flaky: indexSettings16.numberOfShards;
        boolean boolean82 = false; // flaky: indexSettings16.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings83 = null; // flaky: indexSettings16.nodeSettings;
        boolean boolean84 = false; // flaky: indexSettings16.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(byteSizeValue45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(timeValue70);
        org.junit.Assert.assertNotNull(byteSizeValue71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10000 + "'", int75 == 10000);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10000 + "'", int76 == 10000);
        org.junit.Assert.assertNotNull(timeValue77);
// flaky:         org.junit.Assert.assertTrue("'" + durability79 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability79.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertNotNull(byteSizeValueSetting80);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
// flaky:         org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test5331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5331");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings20.applySettings(settings23);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.applySettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexScopedSettings0.copy(settings28, indexMetaData29);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap31 = indexMetaData29.getAliases();
        int int32 = indexMetaData29.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap33 = indexMetaData29.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = indexMetaData29.mapping("5000099");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNull(mappingMetaData35);
    }

    @Test
    public void test5332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5332");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.index.Index index23 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData0.mapping("index.blocks.read");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings26.applySettings(settings29);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings26.applySettings(settings33);
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.common.unit.SizeValue sizeValue37 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue38 = settings33.getAsSize("index.shadow_replicas", sizeValue37);
        java.util.Map<java.lang.String, java.lang.Object> strMap39 = settings33.getAsStructuredMap();
        java.lang.Boolean boolean42 = settings33.getAsBoolean("index.version.created", (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings33);
        org.elasticsearch.common.settings.Settings settings44 = indexSettings43.nodeSettings;
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings44);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(index23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(sizeValue38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + false + "'", boolean42, false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
    }

    @Test
    public void test5333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5333");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = builder4.mapping("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder4.index("5000099");
        int int11 = builder10.numberOfShards();
        long long12 = builder10.version();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
    }

    @Test
    public void test5334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5334");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean26 = indexSettings21.getisShadowReplicaIndex();
        boolean boolean27 = indexSettings21.isQueryStringAnalyzeWildcard();
        indexSettings21.gcDeletesInMillis = 100;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        indexSettings51.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue54 = indexSettings51.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue55 = indexSettings51.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.isPrivateSetting("index.");
        boolean boolean61 = indexScopedSettings57.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings63.getGroups("index.uuid");
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray75 = settings63.getAsArray("", strArray73, (java.lang.Boolean) false);
        indexScopedSettings57.validate("index.shadow_replicas", settings63);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings63);
        indexSettings77.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue80 = indexSettings77.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue81 = indexSettings77.flushThresholdSize;
        indexSettings51.flushThresholdSize = byteSizeValue81;
        indexSettings51.TTLPurgeDisabled = false;
        int int85 = indexSettings51.maxRescoreWindow;
        int int86 = indexSettings51.getMaxResultWindow();
        org.elasticsearch.common.unit.TimeValue timeValue87 = indexSettings51.getTranslogSyncInterval();
        indexSettings21.refreshInterval = timeValue87;
        indexSettings21.warmerEnabled = false;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(byteSizeValue55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(timeValue80);
        org.junit.Assert.assertNotNull(byteSizeValue81);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10000 + "'", int85 == 10000);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10000 + "'", int86 == 10000);
        org.junit.Assert.assertNotNull(timeValue87);
    }

    @Test
    public void test5335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5335");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData0.mappingOrDefault("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters27 = indexMetaData0.includeFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings28.applySettings(settings31);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.applySettings(settings35);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting37 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings28.get(settingsSetting37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.isPrivateSetting("index.");
        boolean boolean43 = indexScopedSettings39.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray57 = settings45.getAsArray("", strArray55, (java.lang.Boolean) false);
        indexScopedSettings39.validate("index.shadow_replicas", settings45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting60 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer61 = null;
        indexScopedSettings59.addSettingsUpdateConsumer(settingsSetting60, settingsConsumer61);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting64 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer65 = null;
        indexScopedSettings63.addSettingsUpdateConsumer(settingsSetting64, settingsConsumer65);
        org.elasticsearch.common.settings.Settings settings67 = indexScopedSettings59.get(settingsSetting64);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer68 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings39.addSettingsUpdateConsumer(settingsSetting64, settingsConsumer68, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings28.get(settingsSetting64);
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet72 = indexScopedSettings28.getBUILT_IN_INDEX_SETTINGS();
        boolean boolean74 = indexScopedSettings28.isPrivateSetting("index.");
        boolean boolean76 = indexScopedSettings28.isPrivateSetting("index.data_path");
        boolean boolean77 = indexMetaData0.equals((java.lang.Object) indexScopedSettings28);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters78 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(discoveryNodeFilters27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settingsSetting37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertNotNull(settingsSetting60);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertNotNull(settingsSetting64);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(wildcardSettingSet72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters78);
    }

    @Test
    public void test5336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5336");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.Version version26 = indexSettings21.version;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting28 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        boolean boolean29 = indexSettings21.getdefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings30 = indexSettings21.nodeSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertNotNull(strSetting28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(settings30);
    }

    @Test
    public void test5337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5337");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting48 = indexSettings47.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability49 = indexSettings47.durability;
        indexSettings21.setdurability(durability49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean54 = indexScopedSettings52.isPrivateSetting("index.");
        boolean boolean56 = indexScopedSettings52.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.uuid");
        java.lang.String[] strArray68 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray70 = settings58.getAsArray("", strArray68, (java.lang.Boolean) false);
        indexScopedSettings52.validate("index.shadow_replicas", settings58);
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings58);
        boolean boolean74 = indexSettings72.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting75 = indexSettings72.getALLOW_UNMAPPED();
        org.elasticsearch.common.unit.TimeValue timeValue76 = indexSettings72.getRefreshInterval();
        org.elasticsearch.index.translog.Translog.Durability durability77 = indexSettings72.getTranslogDurability();
        indexSettings21.durability = durability77;
        org.elasticsearch.common.settings.Settings settings79 = indexSettings21.getNodeSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap80 = settings79.getAsStructuredMap();
        java.util.Set<java.lang.String> strSet81 = settings79.names();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValueSetting48);
        org.junit.Assert.assertTrue("'" + durability49 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability49.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(booleanSetting75);
        org.junit.Assert.assertNotNull(timeValue76);
        org.junit.Assert.assertTrue("'" + durability77 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability77.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNotNull(strSet81);
    }

    @Test
    public void test5338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5338");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getValue(settingsSetting17);
        int int19 = 0; // flaky: indexSettings16.numberOfShards;
        org.elasticsearch.common.logging.ESLogger eSLogger20 = null; // flaky: indexSettings16.logger;
        org.elasticsearch.common.settings.Settings settings21 = null; // flaky: indexSettings16.getSettings();
        int int22 = 0; // flaky: indexSettings16.maxResultWindow;
        java.lang.String str23 = null; // flaky: indexSettings16.nodeName;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.isPrivateSetting("index.");
        boolean boolean29 = indexScopedSettings25.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray43 = settings31.getAsArray("", strArray41, (java.lang.Boolean) false);
        indexScopedSettings25.validate("index.shadow_replicas", settings31);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings31);
        indexSettings45.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue48 = indexSettings45.getsyncInterval();
        boolean boolean49 = indexSettings45.isIndexUsingShadowReplicas();
        java.lang.String str50 = indexSettings45.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean54 = indexScopedSettings52.isPrivateSetting("index.");
        boolean boolean56 = indexScopedSettings52.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.uuid");
        java.lang.String[] strArray68 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray70 = settings58.getAsArray("", strArray68, (java.lang.Boolean) false);
        indexScopedSettings52.validate("index.shadow_replicas", settings58);
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings58);
        org.elasticsearch.common.unit.TimeValue timeValue73 = indexSettings72.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability74 = indexSettings72.getTranslogDurability();
        indexSettings45.durability = durability74;
// flaky:         indexSettings16.setdurability(durability74);
        org.elasticsearch.common.settings.Settings settings77 = null; // flaky: indexSettings16.getNodeSettings();
// flaky:         indexSettings16.setEnableWarmer(true);
        long long80 = 0L; // flaky: indexSettings16.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(settingsSetting17);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertNotNull(eSLogger20);
// flaky:         org.junit.Assert.assertNotNull(settings21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(timeValue73);
        org.junit.Assert.assertTrue("'" + durability74 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability74.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertNotNull(settings77);
// flaky:         org.junit.Assert.assertTrue("'" + long80 + "' != '" + 60000L + "'", long80 == 60000L);
    }

    @Test
    public void test5339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5339");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.queryStringLenient;
        boolean boolean26 = indexSettings21.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test5340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5340");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting25 = indexSettings21.getMAX_RESULT_WINDOW_SETTING();
        int int26 = indexSettings21.getMaxResultWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue27 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings21.refreshInterval;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexScopedSettings29.getDEFAULT_SCOPED_SETTINGS();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(intSetting25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue27);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
    }

    @Test
    public void test5341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5341");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean25 = indexSettings21.queryStringAllowLeadingWildcard;
        java.lang.String str26 = indexSettings21.nodeName;
        int int27 = indexSettings21.getNumberOfShards();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue28 = indexSettings21.getFlushThresholdSize();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(byteSizeValue28);
    }

    @Test
    public void test5342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5342");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = null; // flaky: indexSettings16.getIndexMetaData();
        long long22 = 0L; // flaky: indexMetaData20.primaryTerm((int) (byte) 0);
        java.util.Set<java.lang.String> strSet24 = null; // flaky: indexMetaData20.activeAllocationIds(1);
        org.elasticsearch.Version version25 = null; // flaky: indexMetaData20.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        org.elasticsearch.Version version48 = indexMetaData26.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap49 = indexMetaData26.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters50 = indexMetaData26.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff51 = null; // flaky: indexMetaData20.diff(indexMetaData26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff53 = indexMetaData20.diff(indexMetaData52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNull(strSet24);
// flaky:         org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(version48);
        org.junit.Assert.assertNotNull(strImmutableOpenMap49);
        org.junit.Assert.assertNull(discoveryNodeFilters50);
// flaky:         org.junit.Assert.assertNotNull(indexMetaDataDiff51);
    }

    @Test
    public void test5343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5343");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings21.getsyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings21.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(timeValue29);
    }

    @Test
    public void test5344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5344");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        boolean boolean25 = indexSettings21.isShadowReplicaIndex();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher26 = indexSettings21.getParseFieldMatcher();
        boolean boolean27 = indexSettings21.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings21.getRefreshInterval();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting29 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int31 = indexMetaData30.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings32.applySettings(settings35);
        java.lang.String str40 = settings35.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate41 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting43 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer44 = null;
        indexScopedSettings42.addSettingsUpdateConsumer(settingsSetting43, settingsConsumer44);
        org.elasticsearch.index.IndexSettings indexSettings46 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData30, settings35, strPredicate41, indexScopedSettings42);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting47 = null; // flaky: indexSettings46.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher48 = null; // flaky: indexSettings46.getParseFieldMatcher();
        org.elasticsearch.common.unit.TimeValue timeValue49 = null; // flaky: indexSettings46.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean53 = indexScopedSettings51.isPrivateSetting("index.");
        boolean boolean55 = indexScopedSettings51.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap59 = settings57.getGroups("index.uuid");
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray69 = settings57.getAsArray("", strArray67, (java.lang.Boolean) false);
        indexScopedSettings51.validate("index.shadow_replicas", settings57);
        org.elasticsearch.index.IndexSettings indexSettings71 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings57);
        indexSettings71.setEnableWarmer(true);
        indexSettings71.maxResultWindow = (byte) 100;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue76 = indexSettings71.flushThresholdSize;
// flaky:         indexSettings46.flushThresholdSize = byteSizeValue76;
        indexSettings21.flushThresholdSize = byteSizeValue76;
        boolean boolean79 = indexSettings21.warmerEnabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(timeValueSetting29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertNotNull(settingsSetting43);
// flaky:         org.junit.Assert.assertNotNull(strSetting47);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher48);
// flaky:         org.junit.Assert.assertNotNull(timeValue49);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(byteSizeValue76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test5345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5345");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings21.globalCheckpointInterval;
        java.lang.String str27 = indexSettings21.nodeName;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting28 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig29 = indexSettings21.mergeSchedulerConfig;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig30 = indexSettings21.getMergeSchedulerConfig();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters32 = indexMetaData31.excludeFilters();
        java.lang.Object obj33 = null;
        boolean boolean34 = indexMetaData31.equals(obj33);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData31.mappingOrDefault("hi!");
        int int37 = indexMetaData31.getTotalNumberOfShards();
        int int38 = indexMetaData31.getNumberOfReplicas();
        indexSettings21.indexMetaData = indexMetaData31;
        org.elasticsearch.common.unit.TimeValue timeValue40 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting28);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig29);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(discoveryNodeFilters32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(timeValue40);
    }

    @Test
    public void test5346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5346");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.blocks.write", "_na_");
        java.lang.String str13 = builder11.remove("index.version.upgraded");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean16 = indexScopedSettings14.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings14.applySettings(settings17);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = settings21.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings14.applySettings(settings23);
        org.elasticsearch.common.settings.Setting.Property property26 = indexScopedSettings14.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.uuid", 0L);
        java.lang.String str32 = builder30.get("");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings settings37 = builder33.build();
        org.elasticsearch.common.settings.Settings settings39 = settings37.getByPrefix("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.uuid", 0L);
        java.lang.String str45 = builder43.get("");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder46.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder46.put("index.version.created", (long) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray57 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder53.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList58);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder51.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList58);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("index.uuid", 0L);
        java.lang.String str67 = builder65.get("");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder65.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder70.replacePropertyPlaceholders();
        boolean boolean73 = indexScopedSettings14.updateSettings(settings39, builder51, builder70, "");
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap76 = settings74.getGroups("index.uuid");
        org.elasticsearch.Version version78 = null;
        org.elasticsearch.Version version79 = settings74.getAsVersion("", version78);
        java.util.Map<java.lang.String, java.lang.String> strMap80 = settings74.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder70.put(strMap80);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder11.put(strMap80);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + property26 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property26.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNull(version79);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test5347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5347");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder6.put("index.version.upgraded", (double) 10000);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.loadFromSource("index.version.upgraded_string");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder13.putNull("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings19.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings16.applySettings(settings19);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = settings22.getAsStructuredMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        boolean boolean30 = indexScopedSettings26.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        indexScopedSettings26.validate("index.shadow_replicas", settings32);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings32);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting47 = indexSettings46.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer50 = null;
        indexScopedSettings48.addSettingsUpdateConsumer(settingsSetting49, settingsConsumer50);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.common.settings.Settings settings56 = indexScopedSettings48.get(settingsSetting53);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings58 = indexScopedSettings48.dryRun(settings57);
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings58);
        indexSettings46.settings = settings59;
        org.elasticsearch.common.unit.SizeValue sizeValue62 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue63 = settings59.getAsSize("_na_", sizeValue62);
        boolean boolean64 = settings59.isEmpty();
        java.lang.String[] strArray66 = settings59.getAsArray("index.number_of_shards");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap73 = settings71.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings68.applySettings(settings71);
        java.lang.String[] strArray80 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray82 = settings74.getAsArray("index.version.created", strArray80, (java.lang.Boolean) false);
        java.lang.String[] strArray83 = settings59.getAsArray("primary_terms", strArray80);
        java.lang.String[] strArray84 = settings22.getAsArray("_na_", strArray83);
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder13.put((java.lang.Object[]) strArray84);
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder85.put("state-", (double) (short) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(booleanSetting47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNull(sizeValue63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test5348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5348");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability28 = indexSettings21.getdurability();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting29 = indexSettings21.getMAX_RESULT_WINDOW_SETTING();
        boolean boolean30 = indexSettings21.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertTrue("'" + durability28 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability28.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(intSetting29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test5349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5349");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean25 = indexSettings21.getqueryStringAnalyzeWildcard();
        indexSettings21.setTTLPurgeDisabled(true);
        boolean boolean28 = indexSettings21.isDefaultAllowUnmappedFields();
        boolean boolean29 = indexSettings21.getqueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger31 = indexSettings21.logger;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(booleanSetting30);
        org.junit.Assert.assertNotNull(eSLogger31);
    }

    @Test
    public void test5350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5350");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int6 = builder5.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = settings11.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getGroups("index.uuid");
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray27 = settings15.getAsArray("", strArray25, (java.lang.Boolean) false);
        java.lang.String[] strArray29 = settings11.getAsArray("index.version.minimum_compatible", strArray25, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder8.settings(settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder8.creationDate((long) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int36 = builder35.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder35.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder38.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = settings41.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray57 = settings45.getAsArray("", strArray55, (java.lang.Boolean) false);
        java.lang.String[] strArray59 = settings41.getAsArray("index.version.minimum_compatible", strArray55, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder38.settings(settings41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder38.creationDate((long) 10);
        java.lang.String[] strArray84 = new java.lang.String[] { "index.", "index.version.upgraded_string", "", "index.creation_date", "index.shared_filesystem", "index.auto_expand_replicas", "index.version.upgraded_string", "archived.", "index.uuid", "archived.", "", "index.shared_filesystem.recover_on_any_node", "index.version.created_string", "_na_", "hi!", "index.blocks.read_only", "index.version.created_string", "index.creation_date", "index.version.minimum_compatible", "index.creation_date" };
        java.util.LinkedHashSet<java.lang.String> strSet85 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet85, strArray84);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = builder38.putActiveAllocationIds(10000, (java.util.Set<java.lang.String>) strSet85);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder88 = builder32.putActiveAllocationIds((int) (byte) 10, (java.util.Set<java.lang.String>) strSet85);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder89 = builder1.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet85);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder91 = builder89.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = builder89.numberOfShards((int) (short) 100);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder89.putMapping(mappingMetaData94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test5351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5351");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap2 = settings0.getGroups("index.uuid");
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue4 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = settings0.getAsBytesSize("index.auto_expand_replicas", byteSizeValue4);
        boolean boolean6 = settings0.isEmpty();
        java.lang.String str9 = settings0.get("index.auto_expand_replicas", "0");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(byteSizeValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
    }

    @Test
    public void test5352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5352");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean26 = indexSettings21.getisShadowReplicaIndex();
        boolean boolean27 = indexSettings21.hasCustomDataPath();
        long long28 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher29 = indexSettings21.getParseFieldMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 60000L + "'", long28 == 60000L);
        org.junit.Assert.assertNotNull(parseFieldMatcher29);
    }

    @Test
    public void test5353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5353");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean26 = indexSettings21.getisShadowReplicaIndex();
        boolean boolean27 = indexSettings21.hasCustomDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeValue28);
    }

    @Test
    public void test5354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5354");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder6.put("index.version.created", (long) (short) 10);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray24 = settings12.getAsArray("", strArray22, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder11.put((java.lang.Object[]) strArray24);
        org.elasticsearch.common.settings.Settings settings26 = builder25.build();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder25.put("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 index.version.created_string=5.0.0 ", (long) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.version.created", (int) 'a');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test5355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5355");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting25 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        org.elasticsearch.common.settings.Settings settings48 = indexSettings47.getSettings();
        indexSettings47.maxResultWindow = (short) -1;
        boolean boolean51 = indexSettings47.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue52 = indexSettings47.syncInterval;
        indexSettings21.setRefreshInterval(timeValue52);
        org.elasticsearch.index.translog.Translog.Durability durability54 = indexSettings21.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(timeValueSetting25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(timeValue52);
        org.junit.Assert.assertTrue("'" + durability54 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability54.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test5356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5356");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        boolean boolean19 = indexScopedSettings15.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings21.getGroups("index.uuid");
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray33 = settings21.getAsArray("", strArray31, (java.lang.Boolean) false);
        indexScopedSettings15.validate("index.shadow_replicas", settings21);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings21);
        org.elasticsearch.index.translog.Translog.Durability durability36 = null;
        indexSettings35.setTranslogDurability(durability36);
        org.elasticsearch.common.unit.TimeValue timeValue38 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings35.setGCDeletes(timeValue38);
        org.elasticsearch.Version version40 = indexSettings35.version;
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder8.put("active_allocations", version40);
        org.elasticsearch.common.settings.Settings settings42 = builder41.build();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder41.put("index.shared_filesystem", 100);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.version.upgraded", (float) (-1L));
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean52 = indexScopedSettings50.isPrivateSetting("index.");
        boolean boolean54 = indexScopedSettings50.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings56.getGroups("index.uuid");
        java.lang.String[] strArray66 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray68 = settings56.getAsArray("", strArray66, (java.lang.Boolean) false);
        indexScopedSettings50.validate("index.shadow_replicas", settings56);
        org.elasticsearch.index.IndexSettings indexSettings70 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings56);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap71 = indexMetaData49.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap72 = indexMetaData49.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData49.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap74 = indexMetaData49.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData49.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData49.getSettings();
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder45.put(settings76);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder45.putNull("index.version.created_string");
        org.elasticsearch.common.settings.Settings settings80 = builder79.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(version40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertNotNull(strImmutableOpenMap72);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNotNull(strImmutableOpenMap74);
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(settings80);
    }

    @Test
    public void test5357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5357");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean23 = indexSettings21.TTLPurgeDisabled;
        boolean boolean24 = indexSettings21.hasCustomDataPath();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = indexSettings21.scopedSettings;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue26 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue27 = null;
        indexSettings21.refreshInterval = timeValue27;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting29 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(byteSizeValue26);
        org.junit.Assert.assertNotNull(durabilitySetting29);
    }

    @Test
    public void test5358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5358");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getTranslogDurability();
        boolean boolean28 = indexSettings21.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting29 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str30 = indexSettings21.defaultField;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting31 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strSetting29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "_all" + "'", str30, "_all");
        org.junit.Assert.assertNotNull(booleanSetting31);
    }

    @Test
    public void test5359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5359");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "index.number_of_shards", "hi!", "archived.", "index.", "index.version.created", "index.data_path", "hi!", "index.version.upgraded_string", "index.shared_filesystem.recover_on_any_node", "primary_terms", "index.shared_filesystem.recover_on_any_node", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder3.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList27);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        org.elasticsearch.Version version46 = null;
        org.elasticsearch.Version version47 = settings32.getAsVersion("index.number_of_shards", version46);
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings32);
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray62 = settings50.getAsArray("", strArray60, (java.lang.Boolean) false);
        java.lang.String[] strArray63 = settings32.getAsArray("hi!", strArray60);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder30.putArray("primary_terms", strArray63);
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder30.normalizePrefix("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 index.version.created_string=5.0.0 ");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNull(version47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test5360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5360");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        org.elasticsearch.index.translog.Translog.Durability durability28 = indexSettings21.getdurability();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = indexSettings21.getScopedSettings();
        java.lang.String str30 = indexSettings21.customDataPath();
        indexSettings21.maxResultWindow = (-1);
        org.elasticsearch.common.settings.Settings settings33 = indexSettings21.getNodeSettings();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting34 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertNull(durability28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(durabilitySetting34);
    }

    @Test
    public void test5361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5361");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean73 = indexSettings21.getwarmerEnabled();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting74 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig75 = indexSettings21.getMergeSchedulerConfig();
        indexSettings21.setMaxResultWindow((int) (short) -1);
        int int78 = indexSettings21.getMaxResultWindow();
        boolean boolean79 = indexSettings21.isShadowReplicaIndex;
        boolean boolean80 = indexSettings21.isWarmerEnabled();
        boolean boolean81 = indexSettings21.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(booleanSetting74);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test5362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5362");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getNodeSettings();
        int int28 = indexSettings21.maxResultWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting30 = indexSettings21.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig31 = indexSettings21.mergeSchedulerConfig;
        int int32 = indexSettings21.maxResultWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(intSetting30);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10000 + "'", int32 == 10000);
    }

    @Test
    public void test5363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5363");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        int int25 = indexSettings21.getMaxResultWindow();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting26 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger27 = indexSettings21.logger;
        boolean boolean28 = indexSettings21.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.logging.ESLogger eSLogger29 = indexSettings21.logger;
        boolean boolean30 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        boolean boolean36 = indexScopedSettings32.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        indexScopedSettings32.validate("index.shadow_replicas", settings38);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings38);
        indexSettings52.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue55 = indexSettings52.getsyncInterval();
        boolean boolean56 = indexSettings52.getqueryStringLenient();
        java.util.function.Predicate<java.lang.String> strPredicate57 = indexSettings52.getindexNameMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability58 = indexSettings52.durability;
        indexSettings21.setTranslogDurability(durability58);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertNotNull(timeValueSetting26);
        org.junit.Assert.assertNotNull(eSLogger27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(eSLogger29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertTrue("'" + durability58 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability58.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test5364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5364");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        int int27 = builder26.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder26.version(0L);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test5365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5365");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.remove("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder7 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.uuid", 0L);
        java.lang.String str12 = builder10.get("");
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder13.putNull("hi!");
        java.lang.String str17 = builder15.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder15.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.isPrivateSetting("index.");
        boolean boolean26 = indexScopedSettings22.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        indexScopedSettings22.validate("index.shadow_replicas", settings28);
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings28);
        org.elasticsearch.index.translog.Translog.Durability durability43 = null;
        indexSettings42.setTranslogDurability(durability43);
        org.elasticsearch.common.unit.TimeValue timeValue45 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings42.setGCDeletes(timeValue45);
        org.elasticsearch.Version version47 = indexSettings42.version;
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder15.put("active_allocations", version47);
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray54 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder50.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList55);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList55);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder3.putArray("index.priority", (java.util.List<java.lang.String>) strList55);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertNotNull(version47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test5366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5366");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        boolean boolean23 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.Version version24 = indexSettings21.getIndexVersionCreated();
        org.elasticsearch.Version version25 = indexSettings21.version;
        org.elasticsearch.Version version26 = indexSettings21.getversion();
        org.elasticsearch.common.logging.ESLogger eSLogger27 = indexSettings21.logger;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting28 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        boolean boolean30 = indexSettings21.matchesIndexName("active_allocations");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNotNull(eSLogger27);
        org.junit.Assert.assertNotNull(timeValueSetting28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test5367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5367");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = settings4.getAsSettings("");
        java.lang.Boolean boolean11 = settings8.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = settings8.getAsBytesSize("index.", byteSizeValue13);
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.uuid", 0L);
        java.lang.String str20 = builder18.get("");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder18.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = settings24.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings26.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction29 = null;
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder18.putProperties(strMap27, strPredicate28, strFunction29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder18.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.uuid", 0L);
        java.lang.String str38 = builder36.get("");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder36.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = settings42.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings44.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction47 = null;
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder36.putProperties(strMap45, strPredicate46, strFunction47);
        boolean boolean50 = indexScopedSettings0.updateSettings(settings8, builder18, builder48, "index.uuid");
        java.lang.String str51 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting53 = indexScopedSettings0.get("index.shadow_replicas");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + boolean11 + "' != '" + true + "'", boolean11, true);
        org.junit.Assert.assertNull(byteSizeValue14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(wildcardSetting53);
    }

    @Test
    public void test5368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5368");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher23 = indexSettings21.parseFieldMatcher;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = indexSettings21.getScopedSettings();
        int int25 = indexSettings21.numberOfShards;
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings21.getRefreshInterval();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting27 = indexSettings21.getDEFAULT_FIELD_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger28 = indexSettings21.getlogger();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNotNull(parseFieldMatcher23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(strSetting27);
        org.junit.Assert.assertNotNull(eSLogger28);
    }

    @Test
    public void test5369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5369");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting21 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer22 = null;
        indexScopedSettings20.addSettingsUpdateConsumer(settingsSetting21, settingsConsumer22);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting25 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer26 = null;
        indexScopedSettings24.addSettingsUpdateConsumer(settingsSetting25, settingsConsumer26);
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.get(settingsSetting25);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer29 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting25, settingsConsumer29, settingsConsumer30);
        java.util.function.Predicate<java.lang.String> strPredicate32 = indexScopedSettings0.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = indexScopedSettings33.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings54.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings58 = settings54.getAsSettings("");
        java.lang.Boolean boolean61 = settings58.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue63 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue64 = settings58.getAsBytesSize("index.", byteSizeValue63);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = null;
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings66.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings70 = settings66.getAsSettings("");
        java.lang.Boolean boolean73 = settings70.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue76 = settings70.getAsBytesSize("index.", byteSizeValue75);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder77 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params78 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder79 = settings70.toXContent(xContentBuilder77, params78);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder80 = settings58.toXContent(xContentBuilder65, params78);
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings53.dryRun(settings58);
        org.elasticsearch.common.settings.Settings settings82 = indexScopedSettings0.dryRun(settings58);
        boolean boolean84 = indexScopedSettings0.isPrivateSetting("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertNotNull(settingsSetting21);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settingsSetting25);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertEquals("'" + boolean61 + "' != '" + true + "'", boolean61, true);
        org.junit.Assert.assertNull(byteSizeValue64);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertEquals("'" + boolean73 + "' != '" + true + "'", boolean73, true);
        org.junit.Assert.assertNull(byteSizeValue76);
        org.junit.Assert.assertNotNull(params78);
        org.junit.Assert.assertNull(xContentBuilder79);
        org.junit.Assert.assertNull(xContentBuilder80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test5370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5370");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.Version version26 = indexSettings21.version;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig28 = indexSettings21.getMergeSchedulerConfig();
        boolean boolean29 = indexSettings21.isQueryStringAllowLeadingWildcard();
        indexSettings21.setMaxRescoreWindow((int) 'a');
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        boolean boolean36 = indexScopedSettings32.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        indexScopedSettings32.validate("index.shadow_replicas", settings38);
        boolean boolean53 = indexScopedSettings32.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Setting.Property property54 = indexScopedSettings32.getScope();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean57 = indexScopedSettings55.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings55.applySettings(settings58);
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings55.applySettings(settings62);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting64 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings55.get(settingsSetting64);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting67 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer68 = null;
        indexScopedSettings66.addSettingsUpdateConsumer(settingsSetting67, settingsConsumer68);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings70 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting71 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer72 = null;
        indexScopedSettings70.addSettingsUpdateConsumer(settingsSetting71, settingsConsumer72);
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings66.get(settingsSetting71);
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings76 = indexScopedSettings66.dryRun(settings75);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting77 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting79 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer80 = null;
        indexScopedSettings78.addSettingsUpdateConsumer(settingsSetting79, settingsConsumer80);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings82 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting83 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer84 = null;
        indexScopedSettings82.addSettingsUpdateConsumer(settingsSetting83, settingsConsumer84);
        org.elasticsearch.common.settings.Settings settings86 = indexScopedSettings78.get(settingsSetting83);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer87 = null;
        indexScopedSettings66.addSettingsUpdateConsumer(settingsSetting77, settingsSetting83, settingsBiConsumer87);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer89 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting64, settingsSetting77, settingsBiConsumer89);
        org.elasticsearch.common.settings.Settings settings91 = indexSettings21.getValue(settingsSetting77);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData92 = indexSettings21.indexMetaData;
        long long93 = indexMetaData92.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + property54 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property54.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(indexScopedSettings55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settingsSetting64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertNotNull(settingsSetting67);
        org.junit.Assert.assertNotNull(indexScopedSettings70);
        org.junit.Assert.assertNotNull(settingsSetting71);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settingsSetting77);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
        org.junit.Assert.assertNotNull(settingsSetting79);
        org.junit.Assert.assertNotNull(indexScopedSettings82);
        org.junit.Assert.assertNotNull(settingsSetting83);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNotNull(indexMetaData92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
    }

    @Test
    public void test5371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5371");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        boolean boolean32 = indexScopedSettings28.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        indexScopedSettings28.validate("index.shadow_replicas", settings34);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings34);
        org.elasticsearch.index.translog.Translog.Durability durability49 = null;
        indexSettings48.setTranslogDurability(durability49);
        org.elasticsearch.common.unit.TimeValue timeValue51 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings48.setGCDeletes(timeValue51);
        org.elasticsearch.common.settings.Settings settings53 = indexSettings48.settings;
        boolean boolean54 = indexSettings48.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting55 = indexSettings48.getINDEX_TRANSLOG_DURABILITY_SETTING();
        indexSettings48.warmerEnabled = false;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings48.getParseFieldMatcher();
        boolean boolean59 = indexSettings48.warmerEnabled;
        org.elasticsearch.common.unit.TimeValue timeValue60 = indexSettings48.refreshInterval;
        boolean boolean61 = indexSettings48.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings48.getRefreshInterval();
        indexSettings21.refreshInterval = timeValue62;
        boolean boolean64 = indexSettings21.isDefaultAllowUnmappedFields();
        java.lang.Class<?> wildcardClass65 = indexSettings21.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(timeValue51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(durabilitySetting55);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(timeValue60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test5372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5372");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        long long7 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.numberOfShards(1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder6.state(state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder6.index("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.uuid", 0L);
        java.lang.String str20 = builder18.get("");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder18.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = settings24.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings26.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction29 = null;
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder18.putProperties(strMap27, strPredicate28, strFunction29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder18.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder31.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.uuid", 0L);
        java.lang.String str39 = builder37.get("");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings49 = settings45.getAsSettings("");
        java.lang.Boolean boolean52 = settings49.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue54 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue55 = settings49.getAsBytesSize("index.", byteSizeValue54);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = null;
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap59 = settings57.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings61 = settings57.getAsSettings("");
        java.lang.Boolean boolean64 = settings61.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue66 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue67 = settings61.getAsBytesSize("index.", byteSizeValue66);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder68 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params69 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder70 = settings61.toXContent(xContentBuilder68, params69);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder71 = settings49.toXContent(xContentBuilder56, params69);
        java.lang.Class<?> wildcardClass72 = settings49.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder43.put("index.version.upgraded_string", (java.lang.Class) wildcardClass72);
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder32.put("_all", (java.lang.Class) wildcardClass72);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder14.settings(builder32);
        int int76 = builder75.numberOfShards();
        java.lang.String str77 = builder75.index();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertEquals("'" + boolean52 + "' != '" + true + "'", boolean52, true);
        org.junit.Assert.assertNull(byteSizeValue55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertEquals("'" + boolean64 + "' != '" + true + "'", boolean64, true);
        org.junit.Assert.assertNull(byteSizeValue67);
        org.junit.Assert.assertNotNull(params69);
        org.junit.Assert.assertNull(xContentBuilder70);
        org.junit.Assert.assertNull(xContentBuilder71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "active_allocations" + "'", str77, "active_allocations");
    }

    @Test
    public void test5373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5373");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.common.settings.Settings settings26 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap27 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long29 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap30 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
    }

    @Test
    public void test5374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5374");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        indexSettings21.gcDeletesInMillis = (byte) 100;
        java.util.function.Predicate<java.lang.String> strPredicate28 = indexSettings21.indexNameMatcher;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher29 = indexSettings21.getParseFieldMatcher();
        org.elasticsearch.common.settings.Settings settings30 = indexSettings21.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(strPredicate28);
        org.junit.Assert.assertNotNull(parseFieldMatcher29);
        org.junit.Assert.assertNotNull(settings30);
    }

    @Test
    public void test5375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5375");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting28 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        boolean boolean29 = indexSettings21.isTTLPurgeDisabled();
        java.util.function.Predicate<java.lang.String> strPredicate30 = indexSettings21.indexNameMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertNotNull(timeValueSetting28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strPredicate30);
    }

    @Test
    public void test5376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5376");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.logging.ESLogger eSLogger30 = indexSettings21.logger;
        org.elasticsearch.Version version31 = indexSettings21.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = indexScopedSettings32.getDEFAULT_SCOPED_SETTINGS();
        java.lang.String str34 = indexScopedSettings33.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean38 = indexScopedSettings36.isPrivateSetting("index.");
        boolean boolean40 = indexScopedSettings36.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings42.getGroups("index.uuid");
        java.lang.String[] strArray52 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray54 = settings42.getAsArray("", strArray52, (java.lang.Boolean) false);
        indexScopedSettings36.validate("index.shadow_replicas", settings42);
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings42);
        org.elasticsearch.index.translog.Translog.Durability durability57 = null;
        indexSettings56.setTranslogDurability(durability57);
        org.elasticsearch.common.settings.Settings settings59 = indexSettings56.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting60 = indexSettings56.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = indexSettings56.scopedSettings;
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexScopedSettings61.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings64 = indexScopedSettings61.dryRun(settings63);
        indexScopedSettings33.validate(settings64);
        boolean boolean67 = indexScopedSettings33.hasDynamicSetting("primary_terms");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(eSLogger30);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(booleanSetting60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test5377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5377");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.numberOfReplicas(1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.numberOfReplicas(10);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test5378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5378");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        java.lang.String str35 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting36 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int38 = indexMetaData37.getNumberOfShards();
        org.elasticsearch.Version version39 = indexMetaData37.getUpgradedVersion();
        boolean boolean40 = indexSettings21.updateIndexMetaData(indexMetaData37);
        long long41 = indexMetaData37.getCreationDate();
        int int42 = indexMetaData37.getNumberOfReplicas();
        // The following exception was thrown during execution in test generation
        try {
            long long44 = indexMetaData37.primaryTerm(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(version39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test5379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5379");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        boolean boolean27 = indexSettings21.matchesIndexName("index.blocks.metadata");
        boolean boolean28 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.common.settings.Settings settings29 = indexSettings21.getNodeSettings();
        java.util.function.Predicate<java.lang.String> strPredicate30 = indexSettings21.getindexNameMatcher();
        java.lang.String str31 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings39);
        indexSettings53.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexSettings53.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue57 = indexSettings53.flushThresholdSize;
        boolean boolean59 = indexSettings53.matchesIndexName("index.blocks.metadata");
        boolean boolean60 = indexSettings53.isOnSharedFilesystem();
        org.elasticsearch.common.settings.Settings settings61 = indexSettings53.getNodeSettings();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings53.getindexNameMatcher();
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings53.getsyncInterval();
        indexSettings21.refreshInterval = timeValue63;
        indexSettings21.setMaxRescoreWindow(32);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertNotNull(byteSizeValue57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertNotNull(timeValue63);
    }

    @Test
    public void test5380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5380");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        org.elasticsearch.common.logging.ESLogger eSLogger56 = indexSettings21.logger;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig57 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig58 = indexSettings21.getMergeSchedulerConfig();
        long long59 = indexSettings21.gcDeletesInMillis;
        boolean boolean60 = indexSettings21.queryStringLenient;
        boolean boolean61 = indexSettings21.queryStringAnalyzeWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertNotNull(eSLogger56);
        org.junit.Assert.assertNotNull(mergePolicyConfig57);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 60000L + "'", long59 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test5381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5381");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.isPrivateSetting("index.");
        boolean boolean10 = indexScopedSettings6.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray24 = settings12.getAsArray("", strArray22, (java.lang.Boolean) false);
        indexScopedSettings6.validate("index.shadow_replicas", settings12);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings12);
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings26.setTranslogDurability(durability27);
        boolean boolean29 = indexSettings26.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer32 = null;
        indexScopedSettings30.addSettingsUpdateConsumer(settingsSetting31, settingsConsumer32);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting35 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer36 = null;
        indexScopedSettings34.addSettingsUpdateConsumer(settingsSetting35, settingsConsumer36);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings30.get(settingsSetting35);
        org.elasticsearch.common.settings.Settings settings39 = indexSettings26.getValue(settingsSetting35);
        java.lang.String str40 = indexSettings26.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting41 = indexSettings26.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = indexSettings26.indexMetaData;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff43 = indexMetaData0.diff(indexMetaData42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData42);
        java.lang.String str45 = indexMetaData42.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settingsSetting35);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaDataDiff43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "_na_" + "'", str45, "_na_");
    }

    @Test
    public void test5382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5382");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#index.version.created_string=5.0.0#");
        long long2 = builder1.version();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
    }

    @Test
    public void test5383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5383");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte8 = state7.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.state(state7);
        int int10 = builder9.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.putCustom("index.blocks.write", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("index.number_of_shards", custom15);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test5384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5384");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        boolean boolean28 = indexSettings21.isTTLPurgeDisabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        boolean boolean34 = indexScopedSettings30.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.uuid");
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray48 = settings36.getAsArray("", strArray46, (java.lang.Boolean) false);
        indexScopedSettings30.validate("index.shadow_replicas", settings36);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings36);
        boolean boolean52 = indexSettings50.matchesIndexName("");
        long long53 = indexSettings50.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue54 = indexSettings50.getGlobalCheckpointInterval();
        org.elasticsearch.index.translog.Translog.Durability durability55 = indexSettings50.getTranslogDurability();
        indexSettings21.setTranslogDurability(durability55);
        int int57 = indexSettings21.getMaxResultWindow();
        org.elasticsearch.common.unit.TimeValue timeValue58 = indexSettings21.refreshInterval;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting59 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting61 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 60000L + "'", long53 == 60000L);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertTrue("'" + durability55 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability55.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10000 + "'", int57 == 10000);
        org.junit.Assert.assertNotNull(timeValue58);
        org.junit.Assert.assertNotNull(timeValueSetting59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(durabilitySetting61);
    }

    @Test
    public void test5385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5385");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getValue(settingsSetting17);
        int int19 = 0; // flaky: indexSettings16.numberOfShards;
        org.elasticsearch.common.logging.ESLogger eSLogger20 = null; // flaky: indexSettings16.logger;
        org.elasticsearch.common.settings.Settings settings21 = null; // flaky: indexSettings16.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting22 = null; // flaky: indexSettings16.getMAX_RESCORE_WINDOW_SETTING();
// flaky:         indexSettings16.gcDeletesInMillis = '#';
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(settingsSetting17);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertNotNull(eSLogger20);
// flaky:         org.junit.Assert.assertNotNull(settings21);
// flaky:         org.junit.Assert.assertNotNull(intSetting22);
    }

    @Test
    public void test5386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5386");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "index.number_of_shards", "hi!", "archived.", "index.", "index.version.created", "index.data_path", "hi!", "index.version.upgraded_string", "index.shared_filesystem.recover_on_any_node", "primary_terms", "index.shared_filesystem.recover_on_any_node", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder3.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList27);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        org.elasticsearch.Version version46 = null;
        org.elasticsearch.Version version47 = settings32.getAsVersion("index.number_of_shards", version46);
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings32);
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray62 = settings50.getAsArray("", strArray60, (java.lang.Boolean) false);
        java.lang.String[] strArray63 = settings32.getAsArray("hi!", strArray60);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder30.putArray("primary_terms", strArray63);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder30.replacePropertyPlaceholders();
        java.lang.String str67 = builder65.get("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder65.put("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a", (double) 10000L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNull(version47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test5387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5387");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder4.settings(settings27);
        java.lang.String str42 = settings27.get("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.isPrivateSetting("index.");
        boolean boolean47 = indexScopedSettings43.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings49.getGroups("index.uuid");
        java.lang.String[] strArray59 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray61 = settings49.getAsArray("", strArray59, (java.lang.Boolean) false);
        indexScopedSettings43.validate("index.shadow_replicas", settings49);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting64 = indexScopedSettings43.get("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int66 = indexMetaData65.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = new org.elasticsearch.common.settings.IndexScopedSettings(settings27, indexScopedSettings43, indexMetaData65);
        boolean boolean69 = indexScopedSettings67.isPrivateSetting("hi!");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings70 = indexScopedSettings67.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting72 = indexScopedSettings67.get("index.data_path");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(wildcardSetting64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings70);
        org.junit.Assert.assertNotNull(wildcardSetting72);
    }

    @Test
    public void test5388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5388");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        indexSettings21.maxRescoreWindow = 0;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting52 = indexSettings51.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting54 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer55 = null;
        indexScopedSettings53.addSettingsUpdateConsumer(settingsSetting54, settingsConsumer55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings53.get(settingsSetting58);
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings53.dryRun(settings62);
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings63);
        indexSettings51.settings = settings64;
        indexSettings21.settings = settings64;
        org.elasticsearch.common.unit.TimeValue timeValue67 = indexSettings21.getTranslogSyncInterval();
        boolean boolean68 = indexSettings21.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(booleanSetting52);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertNotNull(settingsSetting54);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(timeValue67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test5389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5389");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder4.numberOfReplicas((int) ' ');
        java.lang.String[] strArray30 = new java.lang.String[] { "index.blocks.read_only", "index.version.created", "index.", "index.uuid", "index.uuid", "index.uuid", "index.version.created_string", "index.", "index.", "_na_", "state-", "_na_", "state-", "index.shadow_replicas", "index.blocks.read_only", "index.shared_filesystem", "_na_", "index.blocks.read_only" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder4.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet31);
        long long34 = builder33.version();
        // The following exception was thrown during execution in test generation
        try {
            long long36 = builder33.primaryTerm((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
    }

    @Test
    public void test5390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5390");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings21.getsyncInterval();
        int int36 = indexSettings21.getMaxRescoreWindow();
        int int37 = indexSettings21.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig38 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting39 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.common.settings.Settings settings40 = indexSettings21.getNodeSettings();
        java.util.function.Predicate<java.lang.String> strPredicate41 = null;
        org.elasticsearch.common.settings.Settings settings42 = settings40.filter(strPredicate41);
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings40);
        boolean boolean44 = settings43.isEmpty();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig38);
        org.junit.Assert.assertNotNull(booleanSetting39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test5391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5391");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher18 = null; // flaky: indexSettings16.getParseFieldMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue19 = null; // flaky: indexSettings16.getFlushThresholdSize();
// flaky:         indexSettings16.setTTLPurgeDisabled(true);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher22 = null; // flaky: indexSettings16.parseFieldMatcher;
        int int23 = 0; // flaky: indexSettings16.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher18);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue19);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
    }

    @Test
    public void test5392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5392");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting28 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        indexSettings21.setMaxRescoreWindow((int) ' ');
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting31 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int33 = indexMetaData32.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean36 = indexScopedSettings34.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings40 = indexScopedSettings34.applySettings(settings37);
        java.lang.String str42 = settings37.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate43 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting45 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer46 = null;
        indexScopedSettings44.addSettingsUpdateConsumer(settingsSetting45, settingsConsumer46);
        org.elasticsearch.index.IndexSettings indexSettings48 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData32, settings37, strPredicate43, indexScopedSettings44);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = null; // flaky: indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting51 = null; // flaky: indexSettings48.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        boolean boolean52 = false; // flaky: indexSettings48.getqueryStringLenient();
        org.elasticsearch.common.unit.TimeValue timeValue53 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
// flaky:         indexSettings48.setRefreshInterval(timeValue53);
        org.elasticsearch.index.translog.Translog.Durability durability55 = null; // flaky: indexSettings48.getdurability();
        indexSettings21.durability = durability55;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting57 = indexSettings21.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(durabilitySetting28);
        org.junit.Assert.assertNotNull(timeValueSetting31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertNotNull(settingsSetting45);
        org.junit.Assert.assertNotNull(settingsSetting49);
// flaky:         org.junit.Assert.assertNotNull(settings50);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(timeValue53);
// flaky:         org.junit.Assert.assertTrue("'" + durability55 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability55.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValueSetting57);
    }

    @Test
    public void test5393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5393");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        int int18 = 0; // flaky: indexSettings16.getMaxRescoreWindow();
        org.elasticsearch.common.settings.Settings settings19 = null; // flaky: indexSettings16.getSettings();
// flaky:         indexSettings16.TTLPurgeDisabled = true;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null; // flaky: indexSettings16.getindexNameMatcher();
// flaky:         indexSettings16.maxResultWindow = (byte) 10;
// flaky:         indexSettings16.setTTLPurgeDisabled(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
// flaky:         org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNull(strPredicate22);
    }

    @Test
    public void test5394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5394");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        boolean boolean19 = indexScopedSettings15.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings21.getGroups("index.uuid");
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray33 = settings21.getAsArray("", strArray31, (java.lang.Boolean) false);
        indexScopedSettings15.validate("index.shadow_replicas", settings21);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings21);
        org.elasticsearch.index.translog.Translog.Durability durability36 = null;
        indexSettings35.setTranslogDurability(durability36);
        org.elasticsearch.common.unit.TimeValue timeValue38 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings35.setGCDeletes(timeValue38);
        org.elasticsearch.Version version40 = indexSettings35.version;
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder8.put("active_allocations", version40);
        org.elasticsearch.common.settings.Settings settings42 = builder41.build();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder41.put("index.shared_filesystem", 100);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.number_of_shards", (float) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder45.put("", (int) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("", "index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 index.version.created_string=5.0.0 ");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(version40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test5395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5395");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.settings.Settings settings24 = indexSettings21.getSettings();
        java.lang.String str25 = indexSettings21.getDefaultField();
        boolean boolean26 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting28 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting29 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        indexSettings21.setMaxRescoreWindow(10);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "_all" + "'", str25, "_all");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(booleanSetting28);
        org.junit.Assert.assertNotNull(durabilitySetting29);
    }

    @Test
    public void test5396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5396");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getValue(settingsSetting17);
        int int19 = 0; // flaky: indexSettings16.numberOfShards;
        org.elasticsearch.common.logging.ESLogger eSLogger20 = null; // flaky: indexSettings16.logger;
        org.elasticsearch.common.settings.Settings settings21 = null; // flaky: indexSettings16.getSettings();
        int int22 = 0; // flaky: indexSettings16.maxResultWindow;
        java.lang.String str23 = null; // flaky: indexSettings16.nodeName;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.isPrivateSetting("index.");
        boolean boolean29 = indexScopedSettings25.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray43 = settings31.getAsArray("", strArray41, (java.lang.Boolean) false);
        indexScopedSettings25.validate("index.shadow_replicas", settings31);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings31);
        indexSettings45.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue48 = indexSettings45.getsyncInterval();
        boolean boolean49 = indexSettings45.isIndexUsingShadowReplicas();
        java.lang.String str50 = indexSettings45.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean54 = indexScopedSettings52.isPrivateSetting("index.");
        boolean boolean56 = indexScopedSettings52.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.uuid");
        java.lang.String[] strArray68 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray70 = settings58.getAsArray("", strArray68, (java.lang.Boolean) false);
        indexScopedSettings52.validate("index.shadow_replicas", settings58);
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings58);
        org.elasticsearch.common.unit.TimeValue timeValue73 = indexSettings72.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability74 = indexSettings72.getTranslogDurability();
        indexSettings45.durability = durability74;
// flaky:         indexSettings16.setdurability(durability74);
        org.elasticsearch.Version version77 = null; // flaky: indexSettings16.version;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(settingsSetting17);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertNotNull(eSLogger20);
// flaky:         org.junit.Assert.assertNotNull(settings21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(timeValue73);
        org.junit.Assert.assertTrue("'" + durability74 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability74.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertNotNull(version77);
    }

    @Test
    public void test5397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5397");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue23 = indexSettings21.globalCheckpointInterval;
        boolean boolean24 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        boolean boolean30 = indexScopedSettings26.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        indexScopedSettings26.validate("index.shadow_replicas", settings32);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings32);
        indexSettings46.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue49 = indexSettings46.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue50 = indexSettings46.flushThresholdSize;
        boolean boolean52 = indexSettings46.matchesIndexName("index.blocks.metadata");
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue53 = indexSettings46.flushThresholdSize;
        indexSettings21.setTranslogFlushThresholdSize(byteSizeValue53);
        boolean boolean55 = indexSettings21.isShadowReplicaIndex();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = indexSettings21.scopedSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNotNull(timeValue23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(timeValue49);
        org.junit.Assert.assertNotNull(byteSizeValue50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteSizeValue53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
    }

    @Test
    public void test5398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5398");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap2 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.Version version5 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        boolean boolean12 = indexScopedSettings8.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings14.getGroups("index.uuid");
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray26 = settings14.getAsArray("", strArray24, (java.lang.Boolean) false);
        indexScopedSettings8.validate("index.shadow_replicas", settings14);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings14);
        indexSettings28.setEnableWarmer(true);
        java.lang.String str31 = indexSettings28.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = indexSettings28.getIndexMetaData();
        java.lang.String str33 = indexSettings28.getNodeName();
        org.elasticsearch.common.settings.Settings settings34 = indexSettings28.getNodeSettings();
        boolean boolean36 = indexSettings28.matchesIndexName("_na_");
        org.elasticsearch.Version version37 = indexSettings28.getIndexVersionCreated();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting38 = indexSettings28.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig39 = indexSettings28.getmergePolicyConfig();
        boolean boolean40 = indexMetaData0.equals((java.lang.Object) indexSettings28);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig41 = indexSettings28.mergeSchedulerConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(version37);
        org.junit.Assert.assertNotNull(booleanSetting38);
        org.junit.Assert.assertNotNull(mergePolicyConfig39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig41);
    }

    @Test
    public void test5399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5399");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.isPrivateSetting("index.");
        boolean boolean10 = indexScopedSettings6.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray24 = settings12.getAsArray("", strArray22, (java.lang.Boolean) false);
        indexScopedSettings6.validate("index.shadow_replicas", settings12);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings12);
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings26.setTranslogDurability(durability27);
        boolean boolean29 = indexSettings26.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer32 = null;
        indexScopedSettings30.addSettingsUpdateConsumer(settingsSetting31, settingsConsumer32);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting35 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer36 = null;
        indexScopedSettings34.addSettingsUpdateConsumer(settingsSetting35, settingsConsumer36);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings30.get(settingsSetting35);
        org.elasticsearch.common.settings.Settings settings39 = indexSettings26.getValue(settingsSetting35);
        java.lang.String str40 = indexSettings26.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting41 = indexSettings26.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = indexSettings26.indexMetaData;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff43 = indexMetaData0.diff(indexMetaData42);
        int int44 = indexMetaData42.getNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData46 = indexMetaData42.mapping("active_allocations");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settingsSetting35);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaDataDiff43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(mappingMetaData46);
    }

    @Test
    public void test5400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5400");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        boolean boolean25 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig26 = indexSettings21.getmergePolicyConfig();
        boolean boolean27 = indexSettings21.defaultAllowUnmappedFields;
        boolean boolean28 = indexSettings21.queryStringLenient;
        org.elasticsearch.index.translog.Translog.Durability durability29 = indexSettings21.getdurability();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting30 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.common.settings.Settings settings31 = indexSettings21.getNodeSettings();
        indexSettings21.TTLPurgeDisabled = false;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + durability29 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability29.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValueSetting30);
        org.junit.Assert.assertNotNull(settings31);
    }

    @Test
    public void test5401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5401");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings21.durability = durability27;
        boolean boolean29 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting30 = indexSettings21.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        java.lang.String str31 = indexSettings21.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(timeValueSetting30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "_all" + "'", str31, "_all");
    }

    @Test
    public void test5402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5402");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.settings.Settings settings24 = indexSettings21.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexSettings21.scopedSettings;
        boolean boolean27 = indexSettings21.isWarmerEnabled();
        java.lang.String str28 = indexSettings21.defaultField;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting29 = indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue30 = indexSettings21.flushThresholdSize;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig31 = indexSettings21.getMergeSchedulerConfig();
        int int32 = indexSettings21.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_all" + "'", str28, "_all");
        org.junit.Assert.assertNotNull(intSetting29);
        org.junit.Assert.assertNotNull(byteSizeValue30);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test5403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5403");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting4 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer5 = null;
        indexScopedSettings3.addSettingsUpdateConsumer(settingsSetting4, settingsConsumer5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer9 = null;
        indexScopedSettings7.addSettingsUpdateConsumer(settingsSetting8, settingsConsumer9);
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings3.get(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings3.dryRun(settings12);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings15.applySettings(settings18);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings15.applySettings(settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings15.get(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13, strPredicate14, indexScopedSettings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        boolean boolean32 = indexScopedSettings28.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        indexScopedSettings28.validate("index.shadow_replicas", settings34);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings34);
        org.elasticsearch.index.translog.Translog.Durability durability49 = null;
        indexSettings48.setTranslogDurability(durability49);
        org.elasticsearch.common.unit.TimeValue timeValue51 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings48.setGCDeletes(timeValue51);
        org.elasticsearch.common.settings.Settings settings53 = indexSettings48.settings;
        org.elasticsearch.index.translog.Translog.Durability durability54 = null;
        indexSettings48.durability = durability54;
        boolean boolean56 = indexSettings48.isWarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        org.elasticsearch.common.unit.TimeValue timeValue79 = indexSettings78.getDEFAULT_REFRESH_INTERVAL();
        indexSettings48.setGCDeletes(timeValue79);
        boolean boolean81 = indexMetaData0.equals((java.lang.Object) timeValue79);
        java.lang.String str82 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertNotNull(settingsSetting4);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(timeValue51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(timeValue79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "_na_" + "'", str82, "_na_");
    }

    @Test
    public void test5404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5404");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int29 = indexMetaData28.getNumberOfShards();
        indexSettings21.indexMetaData = indexMetaData28;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData28.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters32 = indexMetaData28.excludeFilters();
        int int33 = indexMetaData28.getNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = indexMetaData28.mappingOrDefault("hi!");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData28.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertNull(discoveryNodeFilters32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
    }

    @Test
    public void test5405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5405");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = indexScopedSettings1.applySettings(settings4);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings8.applySettings(settings11);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = settings15.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = settings17.getAsMap();
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings8.applySettings(settings17);
        org.elasticsearch.common.settings.Setting.Property property20 = indexScopedSettings8.getScope();
        java.util.function.Predicate<java.lang.String> strPredicate21 = indexScopedSettings8.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.isPrivateSetting("index.");
        boolean boolean26 = indexScopedSettings22.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        indexScopedSettings22.validate("index.shadow_replicas", settings28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings42.applySettings(settings45);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings42.applySettings(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = indexScopedSettings22.copy(settings50, indexMetaData51);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean55 = indexScopedSettings53.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings56.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings53.applySettings(settings56);
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings53.applySettings(settings60);
        indexScopedSettings22.validate(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate21, indexScopedSettings22);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = null; // flaky: indexSettings63.scopedSettings;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting66 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings65.addSettingsUpdateConsumer(settingsSetting66, settingsConsumer67);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting70 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer71 = null;
        indexScopedSettings69.addSettingsUpdateConsumer(settingsSetting70, settingsConsumer71);
        org.elasticsearch.common.settings.Settings settings73 = indexScopedSettings65.get(settingsSetting70);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings74 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean76 = indexScopedSettings74.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings77.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings80 = indexScopedSettings74.applySettings(settings77);
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings82 = indexScopedSettings74.applySettings(settings81);
        boolean boolean83 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings81);
        org.elasticsearch.common.unit.SizeValue sizeValue85 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue86 = settings81.getAsSize("index.shadow_replicas", sizeValue85);
        boolean boolean87 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings81);
        org.elasticsearch.common.settings.Settings settings88 = indexScopedSettings65.dryRun(settings81);
        java.lang.Boolean boolean91 = settings88.getAsBoolean("index.priority", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings92 = null; // flaky: indexScopedSettings64.applySettings(settings88);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + property20 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property20.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
// flaky:         org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertNotNull(settingsSetting66);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertNotNull(settingsSetting70);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(indexScopedSettings74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(sizeValue86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertEquals("'" + boolean91 + "' != '" + false + "'", boolean91, false);
// flaky:         org.junit.Assert.assertNotNull(settings92);
    }

    @Test
    public void test5406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5406");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.isPrivateSetting("index.");
        boolean boolean14 = indexScopedSettings10.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings16.getGroups("index.uuid");
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray28 = settings16.getAsArray("", strArray26, (java.lang.Boolean) false);
        indexScopedSettings10.validate("index.shadow_replicas", settings16);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings16);
        org.elasticsearch.common.settings.Settings settings31 = indexSettings30.getSettings();
        boolean boolean32 = indexSettings30.isIndexUsingShadowReplicas();
        org.elasticsearch.Version version33 = indexSettings30.getIndexVersionCreated();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder6.put("index.blocks.read_only", version33);
        java.lang.String str36 = builder6.remove("1");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test5407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5407");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.globalCheckpointInterval;
        indexSettings21.warmerEnabled = false;
        indexSettings21.warmerEnabled = false;
        java.util.function.Predicate<java.lang.String> strPredicate30 = indexSettings21.getindexNameMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(strPredicate30);
    }

    @Test
    public void test5408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5408");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getNodeSettings();
        int int28 = indexSettings21.maxResultWindow;
        org.elasticsearch.index.translog.Translog.Durability durability29 = null;
        indexSettings21.setdurability(durability29);
        org.elasticsearch.common.settings.Settings settings31 = indexSettings21.settings;
        boolean boolean32 = indexSettings21.queryStringAllowLeadingWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test5409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5409");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = indexScopedSettings1.applySettings(settings4);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings8.applySettings(settings11);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = settings15.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = settings17.getAsMap();
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings8.applySettings(settings17);
        org.elasticsearch.common.settings.Setting.Property property20 = indexScopedSettings8.getScope();
        java.util.function.Predicate<java.lang.String> strPredicate21 = indexScopedSettings8.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.isPrivateSetting("index.");
        boolean boolean26 = indexScopedSettings22.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        indexScopedSettings22.validate("index.shadow_replicas", settings28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings42.applySettings(settings45);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings42.applySettings(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = indexScopedSettings22.copy(settings50, indexMetaData51);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean55 = indexScopedSettings53.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings56.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings53.applySettings(settings56);
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings53.applySettings(settings60);
        indexScopedSettings22.validate(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate21, indexScopedSettings22);
        int int64 = 0; // flaky: indexSettings63.getNumberOfReplicas();
        boolean boolean65 = false; // flaky: indexSettings63.getqueryStringLenient();
        org.elasticsearch.common.settings.Settings settings66 = null; // flaky: indexSettings63.getSettings();
        boolean boolean67 = false; // flaky: org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings66);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + property20 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property20.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
// flaky:         org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test5410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5410");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray4 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList5);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.version.created", (double) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder15.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList20);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.version.created", (double) ' ');
        java.lang.Class<?> wildcardClass29 = builder28.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder13.put("index.version.created_string", (java.lang.Class) wildcardClass29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder13.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder13.put("index.priority", (float) (byte) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test5411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5411");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int29 = indexMetaData28.getNumberOfShards();
        indexSettings21.indexMetaData = indexMetaData28;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData28.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData28.mapping("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings settings34 = indexMetaData28.getSettings();
        long long36 = indexMetaData28.primaryTerm((int) (short) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test5412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5412");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        int int18 = 0; // flaky: indexSettings16.getMaxRescoreWindow();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings19.applySettings(settings22);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings19.applySettings(settings26);
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings26);
// flaky:         indexSettings16.settings = settings26;
        org.elasticsearch.common.settings.Settings settings31 = settings26.getAsSettings("");
        java.lang.String str33 = settings31.get("index.blocks.read");
        java.lang.String str35 = settings31.get("active_allocations");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test5413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5413");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder8.put("index.blocks.read", 100L);
        java.io.InputStream inputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder18 = builder8.loadFromStream("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099aindex.version.created_string=5.0.0a", inputStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test5414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5414");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder7.removeAllAliases();
        long long9 = builder8.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.version((long) 52);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test5415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5415");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = indexScopedSettings1.applySettings(settings4);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings8.applySettings(settings11);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = settings15.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = settings17.getAsMap();
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings8.applySettings(settings17);
        org.elasticsearch.common.settings.Setting.Property property20 = indexScopedSettings8.getScope();
        java.util.function.Predicate<java.lang.String> strPredicate21 = indexScopedSettings8.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.isPrivateSetting("index.");
        boolean boolean26 = indexScopedSettings22.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        indexScopedSettings22.validate("index.shadow_replicas", settings28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings42.applySettings(settings45);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings42.applySettings(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = indexScopedSettings22.copy(settings50, indexMetaData51);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean55 = indexScopedSettings53.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings56.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings53.applySettings(settings56);
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings53.applySettings(settings60);
        indexScopedSettings22.validate(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate21, indexScopedSettings22);
        boolean boolean64 = false; // flaky: indexSettings63.isOnSharedFilesystem();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting65 = null; // flaky: indexSettings63.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        boolean boolean66 = false; // flaky: indexSettings63.defaultAllowUnmappedFields;
// flaky:         indexSettings63.setTTLPurgeDisabled(false);
        boolean boolean69 = false; // flaky: indexSettings63.getdefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + property20 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property20.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test5416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5416");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings21.durability = durability27;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        boolean boolean34 = indexScopedSettings30.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.uuid");
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray48 = settings36.getAsArray("", strArray46, (java.lang.Boolean) false);
        indexScopedSettings30.validate("index.shadow_replicas", settings36);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings36);
        org.elasticsearch.index.translog.Translog.Durability durability51 = null;
        indexSettings50.setTranslogDurability(durability51);
        org.elasticsearch.common.unit.TimeValue timeValue53 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings50.setGCDeletes(timeValue53);
        indexSettings21.setRefreshInterval(timeValue53);
        boolean boolean56 = indexSettings21.warmerEnabled;
        boolean boolean57 = indexSettings21.hasCustomDataPath();
        boolean boolean58 = indexSettings21.getwarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters60 = indexMetaData59.excludeFilters();
        org.elasticsearch.Version version61 = indexMetaData59.getUpgradedVersion();
        boolean boolean62 = indexSettings21.updateIndexMetaData(indexMetaData59);
        org.elasticsearch.Version version63 = indexMetaData59.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(timeValue53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNull(discoveryNodeFilters60);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(version63);
    }

    @Test
    public void test5417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5417");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        indexSettings21.maxResultWindow = (byte) 100;
        int int26 = indexSettings21.maxRescoreWindow;
        boolean boolean27 = indexSettings21.isShadowReplicaIndex();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig28 = indexSettings21.getMergeSchedulerConfig();
        boolean boolean29 = indexSettings21.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test5418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5418");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        java.lang.String str35 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting36 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int38 = indexMetaData37.getNumberOfShards();
        org.elasticsearch.Version version39 = indexMetaData37.getUpgradedVersion();
        boolean boolean40 = indexSettings21.updateIndexMetaData(indexMetaData37);
        org.elasticsearch.common.io.stream.StreamInput streamInput41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = indexMetaData37.readFrom(streamInput41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(version39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test5419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5419");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder3.loadFromSource("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int21 = indexMetaData20.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap22 = indexMetaData20.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData20.requireFilters();
        org.elasticsearch.Version version24 = indexMetaData20.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder3.put("hi!", version24);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.uuid", 0L);
        java.lang.String str31 = builder29.get("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = settings32.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = settings34.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction37 = null;
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder29.putProperties(strMap35, strPredicate36, strFunction37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder25.put(strMap35);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.put("index.", true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean46 = indexScopedSettings44.isPrivateSetting("index.");
        boolean boolean48 = indexScopedSettings44.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray62 = settings50.getAsArray("", strArray60, (java.lang.Boolean) false);
        indexScopedSettings44.validate("index.shadow_replicas", settings50);
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting65 = indexSettings64.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting67 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer68 = null;
        indexScopedSettings66.addSettingsUpdateConsumer(settingsSetting67, settingsConsumer68);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings70 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting71 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer72 = null;
        indexScopedSettings70.addSettingsUpdateConsumer(settingsSetting71, settingsConsumer72);
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings66.get(settingsSetting71);
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings76 = indexScopedSettings66.dryRun(settings75);
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings76);
        indexSettings64.settings = settings77;
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder42.put(settings77);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder42.put("", true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(booleanSetting65);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertNotNull(settingsSetting67);
        org.junit.Assert.assertNotNull(indexScopedSettings70);
        org.junit.Assert.assertNotNull(settingsSetting71);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test5420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5420");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting18 = null; // flaky: indexSettings16.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability19 = null;
// flaky:         indexSettings16.setTranslogDurability(durability19);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = null; // flaky: indexSettings16.getScopedSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertNotNull(intSetting18);
// flaky:         org.junit.Assert.assertNotNull(indexScopedSettings21);
    }

    @Test
    public void test5421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5421");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = null; // flaky: indexSettings16.indexMetaData;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData20);
    }

    @Test
    public void test5422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5422");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder1.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.version((long) (byte) 1);
        java.lang.String str9 = builder1.index();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "archived." + "'", str9, "archived.");
    }

    @Test
    public void test5423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5423");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        boolean boolean23 = indexSettings21.isIndexUsingShadowReplicas();
        int int24 = indexSettings21.getNumberOfShards();
        boolean boolean25 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig26 = indexSettings21.getMergeSchedulerConfig();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        boolean boolean32 = indexScopedSettings28.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        indexScopedSettings28.validate("index.shadow_replicas", settings34);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings34);
        indexSettings48.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue51 = indexSettings48.getsyncInterval();
        org.elasticsearch.common.settings.Settings settings52 = indexSettings48.getSettings();
        int int53 = indexSettings48.getNumberOfShards();
        org.elasticsearch.common.unit.TimeValue timeValue54 = indexSettings48.refreshInterval;
        indexSettings21.refreshInterval = timeValue54;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting56 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings21.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(timeValue51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(byteSizeValueSetting56);
        org.junit.Assert.assertNotNull(timeValue57);
    }

    @Test
    public void test5424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5424");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean23 = indexSettings21.TTLPurgeDisabled;
        boolean boolean24 = indexSettings21.hasCustomDataPath();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        boolean boolean33 = indexScopedSettings29.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        indexScopedSettings29.validate("index.shadow_replicas", settings35);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        boolean boolean51 = indexSettings49.matchesIndexName("");
        long long52 = indexSettings49.getGcDeletesInMillis();
        boolean boolean53 = indexSettings49.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue54 = indexSettings49.globalCheckpointInterval;
        org.elasticsearch.common.unit.TimeValue timeValue55 = settings26.getAsTime("index.blocks.metadata", timeValue54);
        boolean boolean56 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings26);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 60000L + "'", long52 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test5425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5425");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        boolean boolean25 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig26 = indexSettings21.getmergePolicyConfig();
        boolean boolean27 = indexSettings21.defaultAllowUnmappedFields;
        boolean boolean28 = indexSettings21.isShadowReplicaIndex;
        java.util.function.Predicate<java.lang.String> strPredicate29 = indexSettings21.indexNameMatcher;
        boolean boolean30 = indexSettings21.defaultAllowUnmappedFields;
        org.elasticsearch.common.unit.TimeValue timeValue31 = indexSettings21.getDEFAULT_GC_DELETES();
        boolean boolean32 = indexSettings21.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting33 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.index.translog.Translog.Durability durability34 = indexSettings21.getTranslogDurability();
        java.lang.String str35 = indexSettings21.nodeName;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(booleanSetting33);
        org.junit.Assert.assertTrue("'" + durability34 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability34.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test5426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5426");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        int int23 = indexSettings21.getNumberOfShards();
        indexSettings21.gcDeletesInMillis = (byte) 10;
        indexSettings21.maxResultWindow = 0;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig28 = indexSettings21.getMergeSchedulerConfig();
        boolean boolean29 = indexSettings21.getisShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting30 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSetting30);
    }

    @Test
    public void test5427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5427");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int29 = indexMetaData28.getNumberOfShards();
        indexSettings21.indexMetaData = indexMetaData28;
        boolean boolean31 = indexSettings21.getqueryStringAllowLeadingWildcard();
        boolean boolean32 = indexSettings21.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting33 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        java.util.function.Predicate<java.lang.String> strPredicate34 = indexSettings21.indexNameMatcher;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig35 = indexSettings21.mergeSchedulerConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(booleanSetting33);
        org.junit.Assert.assertNotNull(strPredicate34);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig35);
    }

    @Test
    public void test5428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5428");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder4.numberOfReplicas((int) ' ');
        java.lang.String[] strArray30 = new java.lang.String[] { "index.blocks.read_only", "index.version.created", "index.", "index.uuid", "index.uuid", "index.uuid", "index.version.created_string", "index.", "index.", "_na_", "state-", "_na_", "state-", "index.shadow_replicas", "index.blocks.read_only", "index.shared_filesystem", "_na_", "index.blocks.read_only" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder4.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom35 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder33.putCustom("archived.", custom35);
        int int37 = builder36.numberOfReplicas();
        int int38 = builder36.numberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean42 = indexScopedSettings40.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings40.applySettings(settings43);
        java.util.Set<java.lang.String> strSet47 = settings46.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder36.putActiveAllocationIds((int) '#', strSet47);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 32 + "'", int37 == 32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test5429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5429");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        org.elasticsearch.index.translog.Translog.Durability durability28 = indexSettings21.getdurability();
        java.lang.String str29 = indexSettings21.nodeName;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertNull(durability28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test5430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5430");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.isPrivateSetting("index.");
        boolean boolean7 = indexScopedSettings3.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings9.getGroups("index.uuid");
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray21 = settings9.getAsArray("", strArray19, (java.lang.Boolean) false);
        indexScopedSettings3.validate("index.shadow_replicas", settings9);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings9);
        org.elasticsearch.index.translog.Translog.Durability durability24 = null;
        indexSettings23.setTranslogDurability(durability24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings23.getNodeSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        boolean boolean33 = indexScopedSettings29.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        indexScopedSettings29.validate("index.shadow_replicas", settings35);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings49.getDEFAULT_REFRESH_INTERVAL();
        indexSettings49.maxResultWindow = (byte) -1;
        org.elasticsearch.common.unit.TimeValue timeValue53 = indexSettings49.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue54 = settings26.getAsTime("index.creation_date_string", timeValue53);
        org.elasticsearch.common.settings.Settings settings56 = settings26.getAsSettings("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean61 = indexScopedSettings59.isPrivateSetting("index.");
        boolean boolean63 = indexScopedSettings59.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings65.getGroups("index.uuid");
        java.lang.String[] strArray75 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray77 = settings65.getAsArray("", strArray75, (java.lang.Boolean) false);
        indexScopedSettings59.validate("index.shadow_replicas", settings65);
        org.elasticsearch.index.IndexSettings indexSettings79 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings65);
        org.elasticsearch.index.translog.Translog.Durability durability80 = null;
        indexSettings79.setTranslogDurability(durability80);
        org.elasticsearch.common.unit.TimeValue timeValue82 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings79.setGCDeletes(timeValue82);
        org.apache.lucene.index.MergePolicy mergePolicy84 = indexSettings79.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher85 = indexSettings79.getParseFieldMatcher();
        indexSettings79.setTTLPurgeDisabled(false);
        org.elasticsearch.common.logging.ESLogger eSLogger88 = indexSettings79.logger;
        org.elasticsearch.Version version89 = indexSettings79.getversion();
        org.elasticsearch.common.unit.TimeValue timeValue90 = indexSettings79.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue91 = indexSettings79.refreshInterval;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue92 = indexSettings79.flushThresholdSize;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue93 = settings56.getAsBytesSize("active_allocations", byteSizeValue92);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap95 = settings56.getAsGroups(false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder96 = builder1.settings(settings56);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder98 = builder96.index("index.version.created_string");
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(timeValue53);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(timeValue82);
        org.junit.Assert.assertNotNull(mergePolicy84);
        org.junit.Assert.assertNotNull(parseFieldMatcher85);
        org.junit.Assert.assertNotNull(eSLogger88);
        org.junit.Assert.assertNotNull(version89);
        org.junit.Assert.assertNotNull(timeValue90);
        org.junit.Assert.assertNotNull(timeValue91);
        org.junit.Assert.assertNotNull(byteSizeValue92);
        org.junit.Assert.assertNotNull(byteSizeValue93);
        org.junit.Assert.assertNotNull(strMap95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test5431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5431");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder3.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder3.loadFromSource("index.auto_expand_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder3.internalMap();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = builder3.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = settings24.getAsSettings("hi!");
        java.lang.Boolean boolean29 = settings24.getAsBoolean("index.shared_filesystem.recover_on_any_node", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings24.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings39);
        indexSettings53.setEnableWarmer(true);
        java.lang.String str56 = indexSettings53.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = indexSettings53.getIndexMetaData();
        java.lang.String str58 = indexSettings53.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy59 = indexSettings53.getMergePolicy();
        org.elasticsearch.common.logging.ESLogger eSLogger60 = indexSettings53.getlogger();
        org.elasticsearch.common.settings.Settings settings61 = indexSettings53.getSettings();
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings63.getGroups("index.uuid");
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray75 = settings63.getAsArray("", strArray73, (java.lang.Boolean) false);
        java.lang.String[] strArray76 = settings61.getAsArray("index.blocks.write", strArray73);
        java.lang.String[] strArray78 = settings24.getAsArray("_all", strArray73, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder3.extendArray("", strArray78);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder3.put("index.version.created", (double) 1000L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertEquals("'" + boolean29 + "' != '" + true + "'", boolean29, true);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(mergePolicy59);
        org.junit.Assert.assertNotNull(eSLogger60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test5432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5432");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.settings.Settings settings24 = indexSettings21.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters27 = indexMetaData26.includeFilters();
        long long28 = indexMetaData26.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting34 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer35 = null;
        indexScopedSettings33.addSettingsUpdateConsumer(settingsSetting34, settingsConsumer35);
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings29.get(settingsSetting34);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings29.dryRun(settings38);
        java.util.function.Predicate<java.lang.String> strPredicate40 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean43 = indexScopedSettings41.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings44.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings47 = indexScopedSettings41.applySettings(settings44);
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings49 = indexScopedSettings41.applySettings(settings48);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting50 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings41.get(settingsSetting50);
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData26, settings39, strPredicate40, indexScopedSettings41);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap53 = indexMetaData26.getAliases();
        java.util.Set<java.lang.String> strSet55 = null; // flaky: indexMetaData26.activeAllocationIds((int) (byte) -1);
        boolean boolean56 = indexSettings21.updateIndexMetaData(indexMetaData26);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNull(discoveryNodeFilters27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertNotNull(settingsSetting34);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strPredicate40);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settingsSetting50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test5433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5433");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        boolean boolean25 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig26 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.durability;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig28 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting29 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig26);
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergePolicyConfig28);
        org.junit.Assert.assertNotNull(booleanSetting29);
    }

    @Test
    public void test5434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5434");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.put("index.shadow_replicas", (float) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.isPrivateSetting("index.");
        boolean boolean15 = indexScopedSettings11.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.uuid");
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray29 = settings17.getAsArray("", strArray27, (java.lang.Boolean) false);
        indexScopedSettings11.validate("index.shadow_replicas", settings17);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings17);
        indexSettings31.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue34 = indexSettings31.getsyncInterval();
        boolean boolean35 = indexSettings31.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig36 = indexSettings31.getmergePolicyConfig();
        indexSettings31.gcDeletesInMillis = '4';
        long long39 = indexSettings31.getGcDeletesInMillis();
        int int40 = indexSettings31.getNumberOfReplicas();
        boolean boolean41 = indexSettings31.isIndexUsingShadowReplicas();
        org.elasticsearch.Version version42 = indexSettings31.version;
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder3.put("index.shared_filesystem", version42);
        java.util.concurrent.TimeUnit timeUnit46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder47 = builder43.put("1.0", (long) (short) 0, timeUnit46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(timeValue34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 52L + "'", long39 == 52L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test5435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5435");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue73 = indexSettings21.syncInterval;
        org.apache.lucene.index.MergePolicy mergePolicy74 = indexSettings21.getMergePolicy();
        java.lang.String str75 = indexSettings21.getUUID();
        org.elasticsearch.Version version76 = indexSettings21.getIndexVersionCreated();
        boolean boolean77 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertNotNull(timeValue73);
        org.junit.Assert.assertNotNull(mergePolicy74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "_na_" + "'", str75, "_na_");
        org.junit.Assert.assertNotNull(version76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test5436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5436");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting4 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer5 = null;
        indexScopedSettings3.addSettingsUpdateConsumer(settingsSetting4, settingsConsumer5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer9 = null;
        indexScopedSettings7.addSettingsUpdateConsumer(settingsSetting8, settingsConsumer9);
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings3.get(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings3.dryRun(settings12);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings15.applySettings(settings18);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings15.applySettings(settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings15.get(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13, strPredicate14, indexScopedSettings15);
        long long27 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters29 = indexMetaData28.excludeFilters();
        java.lang.Object obj30 = null;
        boolean boolean31 = indexMetaData28.equals(obj30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData28);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = indexMetaData28.mapping("state-");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff36 = indexMetaData0.diff(indexMetaData28);
        int int37 = indexMetaData28.getNumberOfShards();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput38 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData28.writeTo(streamOutput38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertNotNull(settingsSetting4);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNull(discoveryNodeFilters29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertNotNull(indexMetaDataDiff36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test5437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5437");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting27 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer28 = null;
        indexScopedSettings26.addSettingsUpdateConsumer(settingsSetting27, settingsConsumer28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer32 = null;
        indexScopedSettings30.addSettingsUpdateConsumer(settingsSetting31, settingsConsumer32);
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings26.get(settingsSetting31);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings26.dryRun(settings35);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting37 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting39 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer40 = null;
        indexScopedSettings38.addSettingsUpdateConsumer(settingsSetting39, settingsConsumer40);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting43 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer44 = null;
        indexScopedSettings42.addSettingsUpdateConsumer(settingsSetting43, settingsConsumer44);
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings38.get(settingsSetting43);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer47 = null;
        indexScopedSettings26.addSettingsUpdateConsumer(settingsSetting37, settingsSetting43, settingsBiConsumer47);
        org.elasticsearch.common.settings.Settings settings49 = indexScopedSettings25.get(settingsSetting37);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings25.get("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int54 = builder53.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder53.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder56.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = settings59.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings63.getGroups("index.uuid");
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray75 = settings63.getAsArray("", strArray73, (java.lang.Boolean) false);
        java.lang.String[] strArray77 = settings59.getAsArray("index.version.minimum_compatible", strArray73, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder56.settings(settings59);
        org.elasticsearch.common.settings.Settings settings79 = indexScopedSettings25.dryRun(settings59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings80 = indexScopedSettings25.getDEFAULT_SCOPED_SETTINGS();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(settingsSetting27);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settingsSetting37);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertNotNull(settingsSetting39);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertNotNull(settingsSetting43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(indexScopedSettings80);
    }

    @Test
    public void test5438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5438");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
// flaky:         indexSettings16.setMaxResultWindow((int) '4');
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher19 = null; // flaky: indexSettings16.parseFieldMatcher;
        int int20 = 0; // flaky: indexSettings16.numberOfShards;
        int int21 = 0; // flaky: indexSettings16.getMaxRescoreWindow();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting22 = null; // flaky: indexSettings16.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger23 = null; // flaky: indexSettings16.getlogger();
        org.elasticsearch.Version version24 = null; // flaky: indexSettings16.getversion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
// flaky:         org.junit.Assert.assertNotNull(durabilitySetting22);
// flaky:         org.junit.Assert.assertNotNull(eSLogger23);
// flaky:         org.junit.Assert.assertNotNull(version24);
    }

    @Test
    public void test5439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5439");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards(0);
        java.lang.String str4 = builder3.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean11 = indexScopedSettings9.isPrivateSetting("index.");
        boolean boolean13 = indexScopedSettings9.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getGroups("index.uuid");
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray27 = settings15.getAsArray("", strArray25, (java.lang.Boolean) false);
        indexScopedSettings9.validate("index.shadow_replicas", settings15);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings15);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = indexSettings29.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters32 = indexMetaData31.includeFilters();
        indexSettings29.indexMetaData = indexMetaData31;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData31);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters35 = indexMetaData31.includeFilters();
        org.elasticsearch.common.settings.Settings settings36 = indexMetaData31.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getAsGroups(false);
        java.util.Set<java.lang.String> strSet39 = settings36.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder6.putActiveAllocationIds((int) 'a', strSet39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder6.numberOfShards((int) 'a');
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(booleanSetting30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(discoveryNodeFilters32);
        org.junit.Assert.assertNull(discoveryNodeFilters35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test5440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5440");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        long long23 = indexSettings21.gcDeletesInMillis;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = indexSettings21.indexMetaData;
        long long25 = indexMetaData24.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 60000L + "'", long23 == 60000L);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    }

    @Test
    public void test5441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5441");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray4 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList5);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.version.created", (double) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder15.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList20);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.version.created", (double) ' ');
        java.lang.Class<?> wildcardClass29 = builder28.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder13.put("index.version.created_string", (java.lang.Class) wildcardClass29);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder13.put("index.uuid", (float) 'a');
        java.util.Map<java.lang.String, java.lang.String> strMap34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder35 = builder33.put(strMap34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test5442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5442");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings25.getAsGroups();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap26);
    }

    @Test
    public void test5443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5443");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.queryStringAnalyzeWildcard;
        boolean boolean26 = indexSettings21.warmerEnabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test5444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5444");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
// flaky:         indexSettings16.gcDeletesInMillis = (-1L);
// flaky:         indexSettings16.TTLPurgeDisabled = true;
        boolean boolean22 = false; // flaky: indexSettings16.warmerEnabled;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting23 = null; // flaky: indexSettings16.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
// flaky:         indexSettings16.setwarmerEnabled(false);
        org.elasticsearch.common.unit.TimeValue timeValue26 = null; // flaky: indexSettings16.syncInterval;
        long long27 = 0L; // flaky: indexSettings16.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting23);
// flaky:         org.junit.Assert.assertNotNull(timeValue26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
    }

    @Test
    public void test5445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5445");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        boolean boolean21 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean23 = indexScopedSettings0.isPrivateSetting("");
        java.util.function.Predicate<java.lang.String> strPredicate24 = indexScopedSettings0.getINDEX_SETTINGS_KEY_PREDICATE();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strPredicate24);
    }

    @Test
    public void test5446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5446");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting25 = indexSettings21.getMAX_RESULT_WINDOW_SETTING();
        java.util.function.Predicate<java.lang.String> strPredicate26 = indexSettings21.getindexNameMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings21.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(intSetting25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue28);
    }

    @Test
    public void test5447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5447");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.Version version26 = indexSettings21.version;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig27 = indexSettings21.getMergeSchedulerConfig();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = indexSettings21.getIndexMetaData();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig27);
        org.junit.Assert.assertNotNull(indexMetaData28);
    }

    @Test
    public void test5448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5448");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        boolean boolean12 = indexScopedSettings8.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings14.getGroups("index.uuid");
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray26 = settings14.getAsArray("", strArray24, (java.lang.Boolean) false);
        indexScopedSettings8.validate("index.shadow_replicas", settings14);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings14);
        org.elasticsearch.index.translog.Translog.Durability durability29 = null;
        indexSettings28.setTranslogDurability(durability29);
        org.elasticsearch.common.settings.Settings settings31 = indexSettings28.getSettings();
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder4.settings(settings31);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = builder33.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = builder33.build();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData38 = indexMetaData36.mappingOrDefault("index.creation_date_string");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData40 = indexMetaData36.mapping("index.");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData42 = indexMetaData36.mapping("index.creation_date_string");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNull(mappingMetaData38);
        org.junit.Assert.assertNull(mappingMetaData40);
        org.junit.Assert.assertNull(mappingMetaData42);
    }

    @Test
    public void test5449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5449");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder8.put("index.shared_filesystem", (double) (-1L));
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder8.putNull("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.version.minimum_compatible", (float) 'a');
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder17.put("index.creation_date", (int) (byte) -1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test5450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5450");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        int int5 = builder4.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int8 = builder7.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = builder7.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.index("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        byte byte16 = state15.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.state(state15);
        byte byte18 = state15.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder4.state(state15);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = builder4.mapping("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder4.numberOfReplicas((int) (short) 0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 1 + "'", byte16 == (byte) 1);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 1 + "'", byte18 == (byte) 1);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test5451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5451");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = indexScopedSettings12.getDEFAULT_SCOPED_SETTINGS();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
    }

    @Test
    public void test5452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5452");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "index.number_of_shards", "hi!", "archived.", "index.", "index.version.created", "index.data_path", "hi!", "index.version.upgraded_string", "index.shared_filesystem.recover_on_any_node", "primary_terms", "index.shared_filesystem.recover_on_any_node", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder3.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean53 = indexScopedSettings51.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings54.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings57 = indexScopedSettings51.applySettings(settings54);
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings51.applySettings(settings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = indexScopedSettings31.copy(settings59, indexMetaData60);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap62 = indexMetaData60.getAliases();
        org.elasticsearch.Version version63 = indexMetaData60.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder3.put("_na_", version63);
        java.lang.String str66 = builder3.remove("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder3.put("index.auto_expand_replicas", (long) (short) 10);
        java.lang.String str71 = builder69.get("index.number_of_replicas");
        java.util.concurrent.TimeUnit timeUnit74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder75 = builder69.put("index.priority", (long) (byte) 10, timeUnit74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(strImmutableOpenMap62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test5453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5453");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings30.applySettings(settings33);
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = settings37.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings39.getAsMap();
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings30.applySettings(settings39);
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings45 = settings43.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = settings45.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.isPrivateSetting("index.");
        boolean boolean53 = indexScopedSettings49.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.uuid");
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray67 = settings55.getAsArray("", strArray65, (java.lang.Boolean) false);
        indexScopedSettings49.validate("index.shadow_replicas", settings55);
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings55);
        boolean boolean71 = indexSettings69.matchesIndexName("");
        long long72 = indexSettings69.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue73 = indexSettings69.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue74 = settings45.getAsBytesSize("primary_terms", byteSizeValue73);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = settings39.getAsBytesSize("index.priority", byteSizeValue73);
        indexSettings21.flushThresholdSize = byteSizeValue75;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = indexSettings21.getIndexMetaData();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters78 = indexMetaData77.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData77);
        int int80 = indexMetaData77.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 60000L + "'", long72 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue73);
        org.junit.Assert.assertNotNull(byteSizeValue74);
        org.junit.Assert.assertNotNull(byteSizeValue75);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNull(discoveryNodeFilters78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test5454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5454");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting28 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        indexSettings21.setMaxResultWindow(0);
        boolean boolean31 = indexSettings21.queryStringLenient;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig32 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean36 = indexScopedSettings34.isPrivateSetting("index.");
        boolean boolean38 = indexScopedSettings34.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings40.getGroups("index.uuid");
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray52 = settings40.getAsArray("", strArray50, (java.lang.Boolean) false);
        indexScopedSettings34.validate("index.shadow_replicas", settings40);
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings40);
        org.elasticsearch.index.translog.Translog.Durability durability55 = null;
        indexSettings54.setTranslogDurability(durability55);
        boolean boolean57 = indexSettings54.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting58 = indexSettings54.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting59 = indexSettings54.getMAX_RESCORE_WINDOW_SETTING();
        boolean boolean61 = indexSettings54.matchesIndexName("index.version.created");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting62 = indexSettings54.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean66 = indexScopedSettings64.isPrivateSetting("index.");
        boolean boolean68 = indexScopedSettings64.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings70.getGroups("index.uuid");
        java.lang.String[] strArray80 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray82 = settings70.getAsArray("", strArray80, (java.lang.Boolean) false);
        indexScopedSettings64.validate("index.shadow_replicas", settings70);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings70);
        org.elasticsearch.common.unit.TimeValue timeValue85 = indexSettings84.getDEFAULT_REFRESH_INTERVAL();
        indexSettings84.maxResultWindow = (byte) -1;
        org.elasticsearch.index.translog.Translog.Durability durability88 = indexSettings84.getTranslogDurability();
        indexSettings54.durability = durability88;
        indexSettings21.durability = durability88;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(timeValueSetting28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(timeValueSetting58);
        org.junit.Assert.assertNotNull(intSetting59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(timeValueSetting62);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(timeValue85);
        org.junit.Assert.assertTrue("'" + durability88 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability88.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test5455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5455");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte8 = state7.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.state(state7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("hi!");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.putAlias(aliasMetaData14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test5456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5456");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder1.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putAlias(aliasMetaData7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test5457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5457");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean73 = indexSettings21.getwarmerEnabled();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting74 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig75 = indexSettings21.getMergeSchedulerConfig();
        indexSettings21.setMaxResultWindow((int) (short) -1);
        int int78 = indexSettings21.getMaxResultWindow();
        boolean boolean79 = indexSettings21.isShadowReplicaIndex;
        boolean boolean80 = indexSettings21.isWarmerEnabled();
        boolean boolean81 = indexSettings21.queryStringLenient;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(booleanSetting74);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test5458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5458");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData0.mappingOrDefault("index.number_of_shards");
        org.apache.lucene.util.Version version26 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        boolean boolean32 = indexScopedSettings28.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        indexScopedSettings28.validate("index.shadow_replicas", settings34);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings34);
        org.elasticsearch.Version version49 = indexMetaData27.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap50 = indexMetaData27.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state51 = indexMetaData27.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean55 = indexScopedSettings53.isPrivateSetting("index.");
        boolean boolean57 = indexScopedSettings53.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings59.getGroups("index.uuid");
        java.lang.String[] strArray69 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray71 = settings59.getAsArray("", strArray69, (java.lang.Boolean) false);
        indexScopedSettings53.validate("index.shadow_replicas", settings59);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings59);
        indexSettings73.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue76 = indexSettings73.getsyncInterval();
        boolean boolean77 = indexSettings73.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig78 = indexSettings73.getmergePolicyConfig();
        org.elasticsearch.index.translog.Translog.Durability durability79 = indexSettings73.durability;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher80 = indexSettings73.getParseFieldMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData81 = indexSettings73.getIndexMetaData();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff82 = indexMetaData27.diff(indexMetaData81);
        long long83 = indexMetaData81.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff84 = indexMetaData0.diff(indexMetaData81);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertNull(version26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(version49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertTrue("'" + state51 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state51.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(timeValue76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig78);
        org.junit.Assert.assertTrue("'" + durability79 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability79.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher80);
        org.junit.Assert.assertNotNull(indexMetaData81);
        org.junit.Assert.assertNotNull(indexMetaDataDiff82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff84);
    }

    @Test
    public void test5459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5459");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting48 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer49 = null;
        indexScopedSettings47.addSettingsUpdateConsumer(settingsSetting48, settingsConsumer49);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting52 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer53 = null;
        indexScopedSettings51.addSettingsUpdateConsumer(settingsSetting52, settingsConsumer53);
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings47.get(settingsSetting52);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer56 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer57 = null;
        indexScopedSettings27.addSettingsUpdateConsumer(settingsSetting52, settingsConsumer56, settingsConsumer57);
        boolean boolean59 = indexMetaData23.equals((java.lang.Object) settingsConsumer56);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean63 = indexScopedSettings61.isPrivateSetting("index.");
        boolean boolean65 = indexScopedSettings61.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap69 = settings67.getGroups("index.uuid");
        java.lang.String[] strArray77 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray79 = settings67.getAsArray("", strArray77, (java.lang.Boolean) false);
        indexScopedSettings61.validate("index.shadow_replicas", settings67);
        org.elasticsearch.index.IndexSettings indexSettings81 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings67);
        org.elasticsearch.common.settings.Settings settings82 = indexSettings81.getSettings();
        boolean boolean83 = indexSettings81.isShadowReplicaIndex;
        org.elasticsearch.common.logging.ESLogger eSLogger84 = indexSettings81.getlogger();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting85 = indexSettings81.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        boolean boolean86 = indexMetaData23.equals((java.lang.Object) indexSettings81);
        org.apache.lucene.util.Version version87 = indexMetaData23.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder88 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertNotNull(settingsSetting48);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertNotNull(settingsSetting52);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(eSLogger84);
        org.junit.Assert.assertNotNull(booleanSetting85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(version87);
    }

    @Test
    public void test5460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5460");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "index.number_of_shards", "hi!", "archived.", "index.", "index.version.created", "index.data_path", "hi!", "index.version.upgraded_string", "index.shared_filesystem.recover_on_any_node", "primary_terms", "index.shared_filesystem.recover_on_any_node", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder3.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList27);
        java.lang.String str31 = builder3.get("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder3.put("index.version.created_string", (-1));
        java.lang.String str36 = builder34.remove("index.blocks.read");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test5461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5461");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        int int23 = indexSettings21.getMaxResultWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.isPrivateSetting("index.");
        boolean boolean29 = indexScopedSettings25.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray43 = settings31.getAsArray("", strArray41, (java.lang.Boolean) false);
        indexScopedSettings25.validate("index.shadow_replicas", settings31);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings31);
        org.elasticsearch.index.translog.Translog.Durability durability46 = null;
        indexSettings45.setTranslogDurability(durability46);
        boolean boolean48 = indexSettings45.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig49 = indexSettings45.getmergePolicyConfig();
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings45.getsyncInterval();
        indexSettings21.setRefreshInterval(timeValue50);
        indexSettings21.gcDeletesInMillis = (byte) 0;
        indexSettings21.gcDeletesInMillis = (byte) -1;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue56 = indexSettings21.flushThresholdSize;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig49);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue56);
    }

    @Test
    public void test5462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5462");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = settings4.getAsSettings("");
        java.lang.Boolean boolean11 = settings8.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = settings8.getAsBytesSize("index.", byteSizeValue13);
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.uuid", 0L);
        java.lang.String str20 = builder18.get("");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder18.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = settings24.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings26.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction29 = null;
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder18.putProperties(strMap27, strPredicate28, strFunction29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder18.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.uuid", 0L);
        java.lang.String str38 = builder36.get("");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder36.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = settings42.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings44.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction47 = null;
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder36.putProperties(strMap45, strPredicate46, strFunction47);
        boolean boolean50 = indexScopedSettings0.updateSettings(settings8, builder18, builder48, "index.uuid");
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder18.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder18.putNull("index.number_of_replicas");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + boolean11 + "' != '" + true + "'", boolean11, true);
        org.junit.Assert.assertNull(byteSizeValue14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test5463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5463");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.queryStringLenient;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexSettings21.getScopedSettings();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        org.elasticsearch.common.settings.Settings settings28 = indexSettings21.getNodeSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = null;
        indexSettings21.indexMetaData = indexMetaData29;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(settings28);
    }

    @Test
    public void test5464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5464");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        boolean boolean28 = indexSettings21.isTTLPurgeDisabled();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig29 = indexSettings21.getMergeSchedulerConfig();
        boolean boolean30 = indexSettings21.getwarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test5465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5465");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings21.syncInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings28.applySettings(settings31);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings35.applySettings(settings38);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = settings42.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings35.applySettings(settings44);
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings35.getScope();
        java.util.function.Predicate<java.lang.String> strPredicate48 = indexScopedSettings35.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.isPrivateSetting("index.");
        boolean boolean53 = indexScopedSettings49.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.uuid");
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray67 = settings55.getAsArray("", strArray65, (java.lang.Boolean) false);
        indexScopedSettings49.validate("index.shadow_replicas", settings55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean71 = indexScopedSettings69.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings72.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings75 = indexScopedSettings69.applySettings(settings72);
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings77 = indexScopedSettings69.applySettings(settings76);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings79 = indexScopedSettings49.copy(settings77, indexMetaData78);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings80 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean82 = indexScopedSettings80.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings83 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap85 = settings83.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings86 = indexScopedSettings80.applySettings(settings83);
        org.elasticsearch.common.settings.Settings settings87 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings88 = indexScopedSettings80.applySettings(settings87);
        indexScopedSettings49.validate(settings88);
        org.elasticsearch.index.IndexSettings indexSettings90 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings31, strPredicate48, indexScopedSettings49);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting91 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer92 = null;
        indexScopedSettings49.addSettingsUpdateConsumer(settingsSetting91, settingsConsumer92);
        org.elasticsearch.common.settings.Settings settings94 = indexSettings21.getValue(settingsSetting91);
        org.elasticsearch.Version version95 = indexSettings21.getIndexVersionCreated();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig96 = indexSettings21.mergePolicyConfig;
        boolean boolean97 = indexSettings21.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting98 = indexSettings21.getINDEX_WARMER_ENABLED_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(strPredicate48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertNotNull(indexScopedSettings79);
        org.junit.Assert.assertNotNull(indexScopedSettings80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(settingsSetting91);
        org.junit.Assert.assertNotNull(settings94);
        org.junit.Assert.assertNotNull(version95);
        org.junit.Assert.assertNotNull(mergePolicyConfig96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(booleanSetting98);
    }

    @Test
    public void test5466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5466");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        boolean boolean28 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue29 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int31 = indexMetaData30.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap32 = indexMetaData30.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters33 = indexMetaData30.requireFilters();
        long long34 = indexMetaData30.getVersion();
        indexSettings21.indexMetaData = indexMetaData30;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteSizeValue29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertNull(discoveryNodeFilters33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
    }

    @Test
    public void test5467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5467");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        boolean boolean23 = indexSettings21.isShadowReplicaIndex;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.isPrivateSetting("index.");
        boolean boolean29 = indexScopedSettings25.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray43 = settings31.getAsArray("", strArray41, (java.lang.Boolean) false);
        indexScopedSettings25.validate("index.shadow_replicas", settings31);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings31);
        org.elasticsearch.common.settings.Settings settings46 = indexSettings45.getSettings();
        indexSettings45.maxResultWindow = (short) -1;
        boolean boolean49 = indexSettings45.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings45.syncInterval;
        indexSettings21.refreshInterval = timeValue50;
        indexSettings21.setMaxRescoreWindow(100);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting54 = indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        boolean boolean55 = indexSettings21.getisShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings56 = indexSettings21.nodeSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(intSetting54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings56);
    }

    @Test
    public void test5468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5468");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = indexSettings21.indexMetaData;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap36 = indexMetaData35.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters37 = indexMetaData35.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters38 = indexMetaData35.includeFilters();
        org.elasticsearch.index.Index index39 = indexMetaData35.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters40 = indexMetaData35.excludeFilters();
        int int41 = indexMetaData35.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNull(discoveryNodeFilters37);
        org.junit.Assert.assertNull(discoveryNodeFilters38);
        org.junit.Assert.assertNull(index39);
        org.junit.Assert.assertNull(discoveryNodeFilters40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test5469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5469");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue23 = indexSettings21.globalCheckpointInterval;
        boolean boolean24 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher25 = indexSettings21.getParseFieldMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int28 = builder27.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder27.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings35 = settings33.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        java.lang.String[] strArray51 = settings33.getAsArray("index.version.minimum_compatible", strArray47, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder30.settings(settings33);
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings53.getGroups("index.uuid");
        java.lang.String[] strArray63 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray65 = settings53.getAsArray("", strArray63, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder30.settings(settings53);
        java.lang.String str68 = settings53.get("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean71 = indexScopedSettings69.isPrivateSetting("index.");
        boolean boolean73 = indexScopedSettings69.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings75.getGroups("index.uuid");
        java.lang.String[] strArray85 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray87 = settings75.getAsArray("", strArray85, (java.lang.Boolean) false);
        indexScopedSettings69.validate("index.shadow_replicas", settings75);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting90 = indexScopedSettings69.get("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData91 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int92 = indexMetaData91.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings93 = new org.elasticsearch.common.settings.IndexScopedSettings(settings53, indexScopedSettings69, indexMetaData91);
        org.apache.lucene.util.Version version94 = indexMetaData91.getMinimumCompatibleVersion();
        boolean boolean96 = indexMetaData91.isSameUUID("index.blocks.read_only");
        boolean boolean97 = indexSettings21.updateIndexMetaData(indexMetaData91);
        java.lang.Object obj98 = null;
        boolean boolean99 = indexMetaData91.equals(obj98);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNotNull(timeValue23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNull(wildcardSetting90);
        org.junit.Assert.assertNotNull(indexMetaData91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNull(version94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test5470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5470");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.isQueryStringAnalyzeWildcard();
        int int26 = indexSettings21.getMaxResultWindow();
        indexSettings21.TTLPurgeDisabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability29 = indexSettings21.getdurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertTrue("'" + durability29 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability29.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test5471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5471");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue18 = null; // flaky: indexSettings16.getDEFAULT_GC_DELETES();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.isPrivateSetting("index.");
        boolean boolean24 = indexScopedSettings20.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings26.getGroups("index.uuid");
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray38 = settings26.getAsArray("", strArray36, (java.lang.Boolean) false);
        indexScopedSettings20.validate("index.shadow_replicas", settings26);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings26);
        boolean boolean42 = indexSettings40.matchesIndexName("");
        long long43 = indexSettings40.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings40.getGlobalCheckpointInterval();
        org.elasticsearch.index.translog.Translog.Durability durability45 = indexSettings40.getTranslogDurability();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting46 = indexSettings40.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue47 = indexSettings40.syncInterval;
// flaky:         indexSettings16.setGCDeletes(timeValue47);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 60000L + "'", long43 == 60000L);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertTrue("'" + durability45 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability45.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(byteSizeValueSetting46);
        org.junit.Assert.assertNotNull(timeValue47);
    }

    @Test
    public void test5472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5472");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.removeAlias("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int10 = builder9.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.index("index.");
        int int15 = builder12.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder12.index("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int22 = builder21.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = builder21.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder21.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.index("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state29 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        byte byte30 = state29.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder26.state(state29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder19.state(state29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder1.state(state29);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder33.primaryTerm(1, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + state29 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state29.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte30 + "' != '" + (byte) 1 + "'", byte30 == (byte) 1);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test5473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5473");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting18 = null; // flaky: indexSettings16.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability19 = null;
// flaky:         indexSettings16.setTranslogDurability(durability19);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting21 = null; // flaky: indexSettings16.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        int int22 = 0; // flaky: indexSettings16.getNumberOfShards();
        boolean boolean23 = false; // flaky: indexSettings16.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertNotNull(intSetting18);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test5474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5474");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        boolean boolean7 = settings3.isEmpty();
        java.lang.Boolean boolean10 = settings3.getAsBoolean("index.number_of_shards", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings3.getAsGroups(true);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + true + "'", boolean10, true);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test5475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5475");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean23 = indexSettings21.TTLPurgeDisabled;
        boolean boolean24 = indexSettings21.hasCustomDataPath();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = indexSettings21.scopedSettings;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue26 = indexSettings21.getFlushThresholdSize();
        java.lang.String str27 = indexSettings21.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(byteSizeValue26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test5476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5476");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability23 = indexSettings21.durability;
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        boolean boolean26 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting28 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig29 = indexSettings21.mergePolicyConfig;
        int int30 = indexSettings21.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = indexSettings21.getIndexMetaData();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(booleanSetting28);
        org.junit.Assert.assertNotNull(mergePolicyConfig29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(indexMetaData31);
    }

    @Test
    public void test5477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5477");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        boolean boolean30 = indexSettings21.getdefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting31 = indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        boolean boolean32 = indexSettings21.getwarmerEnabled();
        long long33 = indexSettings21.getGcDeletesInMillis();
        boolean boolean34 = indexSettings21.queryStringAllowLeadingWildcard;
        int int35 = indexSettings21.getNumberOfReplicas();
        org.elasticsearch.Version version36 = indexSettings21.version;
        boolean boolean37 = indexSettings21.getqueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(intSetting31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1000L + "'", long33 == 1000L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(version36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test5478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5478");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.unit.TimeValue timeValue26 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setRefreshInterval(timeValue26);
        indexSettings21.setEnableWarmer(false);
        indexSettings21.setwarmerEnabled(false);
        boolean boolean32 = indexSettings21.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting33 = indexSettings21.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        boolean boolean34 = indexSettings21.warmerEnabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = indexSettings21.getScopedSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(timeValueSetting33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
    }

    @Test
    public void test5479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5479");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder6.put("1.0", 32);
        java.util.concurrent.TimeUnit timeUnit14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder15 = builder11.put("_all", (long) 10000, timeUnit14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test5480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5480");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        int int26 = indexMetaData0.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet28 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) -1);
        java.lang.String str29 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "_na_" + "'", str29, "_na_");
    }

    @Test
    public void test5481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5481");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = indexSettings21.getIndexMetaData();
        long long29 = indexMetaData28.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData28.includeFilters();
        long long31 = indexMetaData28.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    }

    @Test
    public void test5482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5482");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean25 = indexSettings21.queryStringAllowLeadingWildcard;
        boolean boolean26 = indexSettings21.isShadowReplicaIndex;
        indexSettings21.maxResultWindow = 0;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting29 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(booleanSetting29);
    }

    @Test
    public void test5483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5483");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.logging.ESLogger eSLogger30 = indexSettings21.logger;
        boolean boolean31 = indexSettings21.getqueryStringAnalyzeWildcard();
        long long32 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting33 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(eSLogger30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1000L + "'", long32 == 1000L);
        org.junit.Assert.assertNotNull(durabilitySetting33);
    }

    @Test
    public void test5484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5484");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        boolean boolean21 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean23 = indexScopedSettings0.isPrivateSetting("index.uuid");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings24.getGroups("index.uuid");
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray36 = settings24.getAsArray("", strArray34, (java.lang.Boolean) false);
        org.elasticsearch.Version version38 = null;
        org.elasticsearch.Version version39 = settings24.getAsVersion("index.number_of_shards", version38);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings42.getGroups("index.uuid");
        java.lang.String[] strArray52 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray54 = settings42.getAsArray("", strArray52, (java.lang.Boolean) false);
        java.lang.String[] strArray55 = settings24.getAsArray("hi!", strArray52);
        org.elasticsearch.common.settings.Settings settings56 = indexScopedSettings0.dryRun(settings24);
        java.lang.String[] strArray58 = settings24.getAsArray("index.version.created");
        java.util.Map<java.lang.String, java.lang.Object> strMap59 = settings24.getAsStructuredMap();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNull(version39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strMap59);
    }

    @Test
    public void test5485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5485");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.settings.Settings settings24 = indexSettings21.getNodeSettings();
        java.lang.String str25 = indexSettings21.getUUID();
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.nodeSettings;
        org.elasticsearch.common.unit.RatioValue ratioValue29 = settings26.getAsRatio("index.version.created", "0");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        org.elasticsearch.index.translog.Translog.Durability durability52 = null;
        indexSettings51.setTranslogDurability(durability52);
        org.elasticsearch.common.unit.TimeValue timeValue54 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings51.setGCDeletes(timeValue54);
        org.elasticsearch.common.settings.Settings settings56 = indexSettings51.settings;
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings51.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int59 = indexMetaData58.getNumberOfShards();
        indexSettings51.indexMetaData = indexMetaData58;
        boolean boolean61 = indexSettings51.getqueryStringAllowLeadingWildcard();
        boolean boolean62 = indexSettings51.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting63 = indexSettings51.getINDEX_TTL_DISABLE_PURGE_SETTING();
        java.util.function.Predicate<java.lang.String> strPredicate64 = indexSettings51.indexNameMatcher;
        org.elasticsearch.common.settings.Settings settings65 = settings26.filter(strPredicate64);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "_na_" + "'", str25, "_na_");
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(ratioValue29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(booleanSetting63);
        org.junit.Assert.assertNotNull(strPredicate64);
        org.junit.Assert.assertNotNull(settings65);
    }

    @Test
    public void test5486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5486");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting18 = null; // flaky: indexSettings16.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = null; // flaky: indexSettings16.scopedSettings;
        org.elasticsearch.Version version20 = null; // flaky: indexSettings16.getversion();
        boolean boolean21 = false; // flaky: indexSettings16.getdefaultAllowUnmappedFields();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue22 = null; // flaky: indexSettings16.flushThresholdSize;
        org.elasticsearch.common.unit.TimeValue timeValue23 = null; // flaky: indexSettings16.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Settings settings24 = null; // flaky: indexSettings16.nodeSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertNotNull(intSetting18);
// flaky:         org.junit.Assert.assertNotNull(indexScopedSettings19);
// flaky:         org.junit.Assert.assertNotNull(version20);
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue22);
// flaky:         org.junit.Assert.assertNotNull(timeValue23);
// flaky:         org.junit.Assert.assertNotNull(settings24);
    }

    @Test
    public void test5487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5487");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.Version version26 = indexSettings21.version;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig28 = indexSettings21.getMergeSchedulerConfig();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings21.refreshInterval;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher30 = indexSettings21.getParseFieldMatcher();
        int int31 = indexSettings21.getNumberOfReplicas();
        int int32 = indexSettings21.getMaxResultWindow();
        boolean boolean33 = indexSettings21.isShadowReplicaIndex;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig34 = indexSettings21.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig28);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(parseFieldMatcher30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10000 + "'", int32 == 10000);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig34);
    }

    @Test
    public void test5488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5488");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters27 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData29 = indexMetaData0.mappingOrDefault("index.blocks.metadata");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertNull(discoveryNodeFilters27);
        org.junit.Assert.assertNull(mappingMetaData29);
    }

    @Test
    public void test5489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5489");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.settings.Settings settings24 = indexSettings21.getNodeSettings();
        java.lang.String str25 = indexSettings21.getUUID();
        boolean boolean26 = indexSettings21.isIndexUsingShadowReplicas();
        boolean boolean27 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "_na_" + "'", str25, "_na_");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test5490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5490");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings15 = settings11.getAsSettings("");
        java.lang.Boolean boolean18 = settings15.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue20 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue21 = settings15.getAsBytesSize("index.", byteSizeValue20);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = null;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings27 = settings23.getAsSettings("");
        java.lang.Boolean boolean30 = settings27.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue32 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue33 = settings27.getAsBytesSize("index.", byteSizeValue32);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params35 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings27.toXContent(xContentBuilder34, params35);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = settings15.toXContent(xContentBuilder22, params35);
        java.lang.Class<?> wildcardClass38 = settings15.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder9.put("index.version.upgraded_string", (java.lang.Class) wildcardClass38);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder9.put("index.shared_filesystem.recover_on_any_node", (long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean47 = indexScopedSettings45.isPrivateSetting("index.");
        boolean boolean49 = indexScopedSettings45.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.uuid");
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray63 = settings51.getAsArray("", strArray61, (java.lang.Boolean) false);
        indexScopedSettings45.validate("index.shadow_replicas", settings51);
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings51);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = indexSettings65.scopedSettings;
        org.elasticsearch.common.settings.Settings settings67 = indexSettings65.nodeSettings;
        indexSettings65.maxRescoreWindow = 0;
        boolean boolean70 = indexSettings65.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings71 = indexSettings65.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting72 = indexSettings65.getQUERY_STRING_LENIENT_SETTING();
        java.lang.Class<?> wildcardClass73 = indexSettings65.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder9.put("index.version.minimum_compatible", (java.lang.Class) wildcardClass73);
        java.nio.file.Path path75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder76 = builder9.loadFromPath(path75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertEquals("'" + boolean18 + "' != '" + true + "'", boolean18, true);
        org.junit.Assert.assertNull(byteSizeValue21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + true + "'", boolean30, true);
        org.junit.Assert.assertNull(byteSizeValue33);
        org.junit.Assert.assertNotNull(params35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNull(xContentBuilder37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(booleanSetting72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test5491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5491");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        java.lang.String str10 = builder3.remove("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder3.loadFromSource("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int16 = builder15.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder18.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder18.numberOfReplicas((int) ' ');
        java.lang.String[] strArray44 = new java.lang.String[] { "index.blocks.read_only", "index.version.created", "index.", "index.uuid", "index.uuid", "index.uuid", "index.version.created_string", "index.", "index.", "_na_", "state-", "_na_", "state-", "index.shadow_replicas", "index.blocks.read_only", "index.shared_filesystem", "_na_", "index.blocks.read_only" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder18.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet45);
        long long48 = builder47.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder47.version((long) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean54 = indexScopedSettings52.isPrivateSetting("index.");
        boolean boolean56 = indexScopedSettings52.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.uuid");
        java.lang.String[] strArray68 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray70 = settings58.getAsArray("", strArray68, (java.lang.Boolean) false);
        indexScopedSettings52.validate("index.shadow_replicas", settings58);
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings58);
        org.elasticsearch.index.translog.Translog.Durability durability73 = null;
        indexSettings72.setTranslogDurability(durability73);
        org.elasticsearch.common.unit.TimeValue timeValue75 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings72.setGCDeletes(timeValue75);
        org.elasticsearch.common.settings.Settings settings77 = indexSettings72.settings;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder47.settings(settings77);
        java.lang.Class<?> wildcardClass79 = settings77.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder12.put("", (java.lang.Class) wildcardClass79);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder80.normalizePrefix("state-");
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder80.put("index.shared_filesystem.recover_on_any_node", (int) (byte) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(timeValue75);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test5492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5492");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.nodeSettings;
        indexSettings21.maxRescoreWindow = 0;
        boolean boolean26 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getSettings();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting28 = indexSettings21.getINDEX_GC_DELETES_SETTING();
        int int29 = indexSettings21.numberOfShards;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        boolean boolean31 = indexSettings21.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(timeValueSetting28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(booleanSetting30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test5493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5493");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue23 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.Version version24 = indexSettings21.getIndexVersionCreated();
        long long25 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting26 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        indexSettings21.setMaxRescoreWindow(10);
        int int29 = indexSettings21.getMaxResultWindow();
        java.lang.String str30 = indexSettings21.nodeName;
        boolean boolean31 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(byteSizeValue23);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 60000L + "'", long25 == 60000L);
        org.junit.Assert.assertNotNull(strSetting26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test5494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5494");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder4.creationDate((long) 10);
        java.lang.String[] strArray50 = new java.lang.String[] { "index.", "index.version.upgraded_string", "", "index.creation_date", "index.shared_filesystem", "index.auto_expand_replicas", "index.version.upgraded_string", "archived.", "index.uuid", "archived.", "", "index.shared_filesystem.recover_on_any_node", "index.version.created_string", "_na_", "hi!", "index.blocks.read_only", "index.version.created_string", "index.creation_date", "index.version.minimum_compatible", "index.creation_date" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder4.putActiveAllocationIds(10000, (java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder4.numberOfReplicas(5000099);
        int int56 = builder55.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5000099 + "'", int56 == 5000099);
    }

    @Test
    public void test5495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5495");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting28 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        boolean boolean29 = indexSettings21.TTLPurgeDisabled;
        boolean boolean30 = indexSettings21.getwarmerEnabled();
        org.elasticsearch.common.settings.Settings settings31 = indexSettings21.settings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(durabilitySetting28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(settings31);
    }

    @Test
    public void test5496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5496");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer25 = null;
        indexScopedSettings23.addSettingsUpdateConsumer(settingsSetting24, settingsConsumer25);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting28 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer29 = null;
        indexScopedSettings27.addSettingsUpdateConsumer(settingsSetting28, settingsConsumer29);
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings23.get(settingsSetting28);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings23.dryRun(settings32);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings33);
        indexSettings21.settings = settings34;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting36 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting37 = indexSettings21.getMAX_RESULT_WINDOW_SETTING();
        indexSettings21.setwarmerEnabled(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settingsSetting28);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(byteSizeValueSetting36);
        org.junit.Assert.assertNotNull(intSetting37);
    }

    @Test
    public void test5497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5497");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getValue(settingsSetting17);
        int int19 = 0; // flaky: indexSettings16.numberOfShards;
        org.elasticsearch.common.logging.ESLogger eSLogger20 = null; // flaky: indexSettings16.logger;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting21 = null; // flaky: indexSettings16.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.isPrivateSetting("index.");
        boolean boolean27 = indexScopedSettings23.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getGroups("index.uuid");
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray41 = settings29.getAsArray("", strArray39, (java.lang.Boolean) false);
        indexScopedSettings23.validate("index.shadow_replicas", settings29);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings29);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData22.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap45 = indexMetaData22.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData22.getCustoms();
        boolean boolean47 = false; // flaky: indexSettings16.updateIndexMetaData(indexMetaData22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting48 = null; // flaky: indexSettings16.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        boolean boolean49 = false; // flaky: indexSettings16.isShadowReplicaIndex;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(settingsSetting17);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertNotNull(eSLogger20);
// flaky:         org.junit.Assert.assertNotNull(intSetting21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(strImmutableOpenMap45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test5498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5498");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue28 = null;
        indexSettings21.flushThresholdSize = byteSizeValue28;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexSettings21.scopedSettings;
        java.lang.String str31 = indexScopedSettings30.nodeName();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        boolean boolean54 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean56 = indexScopedSettings33.isPrivateSetting("index.uuid");
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap59 = settings57.getGroups("index.uuid");
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray69 = settings57.getAsArray("", strArray67, (java.lang.Boolean) false);
        org.elasticsearch.Version version71 = null;
        org.elasticsearch.Version version72 = settings57.getAsVersion("index.number_of_shards", version71);
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings57);
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings75.getGroups("index.uuid");
        java.lang.String[] strArray85 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray87 = settings75.getAsArray("", strArray85, (java.lang.Boolean) false);
        java.lang.String[] strArray88 = settings57.getAsArray("hi!", strArray85);
        org.elasticsearch.common.settings.Settings settings89 = indexScopedSettings33.dryRun(settings57);
        indexScopedSettings30.validate("index.number_of_shards", settings89);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings91 = indexScopedSettings30.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Settings settings92 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap94 = settings92.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings95 = indexScopedSettings91.archiveUnknownOrBrokenSettings(settings92);
        java.util.Map<java.lang.String, java.lang.Object> strMap96 = settings92.getAsStructuredMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNull(version72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(indexScopedSettings91);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(strMap94);
        org.junit.Assert.assertNotNull(settings95);
        org.junit.Assert.assertNotNull(strMap96);
    }

    @Test
    public void test5499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5499");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.common.settings.Settings.Builder builder3 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.uuid", 0L);
        java.lang.String str8 = builder6.get("");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.putNull("hi!");
        java.lang.String str13 = builder11.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder11.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean20 = indexScopedSettings18.isPrivateSetting("index.");
        boolean boolean22 = indexScopedSettings18.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings24.getGroups("index.uuid");
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray36 = settings24.getAsArray("", strArray34, (java.lang.Boolean) false);
        indexScopedSettings18.validate("index.shadow_replicas", settings24);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings24);
        org.elasticsearch.index.translog.Translog.Durability durability39 = null;
        indexSettings38.setTranslogDurability(durability39);
        org.elasticsearch.common.unit.TimeValue timeValue41 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings38.setGCDeletes(timeValue41);
        org.elasticsearch.Version version43 = indexSettings38.version;
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder11.put("active_allocations", version43);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.put("active_allocations", (float) 10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder1.settings(builder44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder48.numberOfReplicas((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder50.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder50.removeAllAliases();
        int int54 = builder50.numberOfReplicas();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.shared_filesystem" + "'", str2, "index.shared_filesystem");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(version43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
    }

    @Test
    public void test5500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5500");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        boolean boolean56 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        indexSettings78.setEnableWarmer(true);
        java.lang.String str81 = indexSettings78.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = indexSettings78.getIndexMetaData();
        indexSettings21.indexMetaData = indexMetaData82;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig84 = indexSettings21.getMergeSchedulerConfig();
        indexSettings21.setEnableWarmer(false);
        boolean boolean87 = indexSettings21.getwarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }
}
