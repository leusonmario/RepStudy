import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_VERSION_CREATED;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.version.created" + "'", str0, "index.version.created");
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        java.lang.String str0 = org.elasticsearch.common.settings.AbstractScopedSettings.ARCHIVED_SETTINGS_PREFIX;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "archived." + "'", str0, "archived.");
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_INDEX_UUID;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.uuid" + "'", str0, "index.uuid");
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_NUMBER_OF_REPLICAS_SETTING;
        org.junit.Assert.assertNotNull(intSetting0);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_SHARED_FILESYSTEM_SETTING;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.index.IndexSettings.QUERY_STRING_LENIENT_SETTING;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue3 = settings0.getAsMemory("index.version.created", "archived.");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.version.created] with value [archived.] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings0.getGroups("", false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: illegal setting prefix ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.index.IndexSettings.QUERY_STRING_ALLOW_LEADING_WILDCARD;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = new org.elasticsearch.common.settings.IndexScopedSettings(settings0, indexScopedSettings1, indexMetaData2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_READ_SETTING;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getGroups("index.uuid");
        java.util.function.Predicate<java.lang.String> strPredicate4 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1, strPredicate4, indexScopedSettings5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap2 = settings0.getGroups("index.uuid");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = settings0.getAsMemory("index.uuid", "");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.uuid] with value [] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap2);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_WRITE_SETTING;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.nio.file.Path path4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder5 = builder0.loadFromPath(path4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_METADATA_SETTING;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting0 = org.elasticsearch.index.IndexSettings.INDEX_TRANSLOG_DURABILITY_SETTING;
        org.junit.Assert.assertNotNull(durabilitySetting0);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.KEY_PRIMARY_TERMS;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "primary_terms" + "'", str0, "primary_terms");
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.primaryTerm((int) (short) -1, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap2 = settings0.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings4 = settings0.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = new org.elasticsearch.common.settings.IndexScopedSettings(settings0, indexScopedSettings5, indexMetaData6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(settings4);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_SHADOW_REPLICAS_SETTING;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.auto_expand_replicas" + "'", str0, "index.auto_expand_replicas");
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_SHARDS;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.number_of_shards" + "'", str0, "index.number_of_shards");
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for id [-1]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_SETTING_PREFIX;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index." + "'", str0, "index.");
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_VERSION_MINIMUM_COMPATIBLE;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.version.minimum_compatible" + "'", str0, "index.version.minimum_compatible");
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = settings9.getAsMap();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting11 = org.elasticsearch.index.IndexSettings.INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING;
        java.lang.Object[] objArray12 = new java.lang.Object[] { '4', settings9, byteSizeValueSetting11 };
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder13 = builder3.put(objArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: array settings of key + value order doesn't hold correct number of arguments (3)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(byteSizeValueSetting11);
        org.junit.Assert.assertNotNull(objArray12);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder1 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.uuid", 0L);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.uuid]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        java.nio.file.Path path6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder7 = builder3.loadFromPath(path6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_SHARED_FS_ALLOW_RECOVERY_ON_ANY_NODE;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.shared_filesystem.recover_on_any_node" + "'", str0, "index.shared_filesystem.recover_on_any_node");
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.index.IndexSettings.QUERY_STRING_ANALYZE_WILDCARD;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_DATA_PATH;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.data_path" + "'", str0, "index.data_path");
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.util.Map<java.lang.String, java.lang.String> strMap4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder5 = builder0.put(strMap4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings2 = settings0.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        java.lang.String[] strArray14 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray16 = settings4.getAsArray("", strArray14, (java.lang.Boolean) false);
        java.lang.String[] strArray18 = settings0.getAsArray("index.version.minimum_compatible", strArray14, (java.lang.Boolean) false);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings0, streamOutput19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.index.IndexSettings.ALLOW_UNMAPPED;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings2 = settings0.getAsSettings("hi!");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings2, streamOutput3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_SHADOW_REPLICAS;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.shadow_replicas" + "'", str0, "index.shadow_replicas");
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder26.primaryTerm((int) (short) 10, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.elasticsearch.gateway.MetaDataStateFormat<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataMetaDataStateFormat0 = org.elasticsearch.cluster.metadata.IndexMetaData.FORMAT;
        org.junit.Assert.assertNotNull(indexMetaDataMetaDataStateFormat0);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue9 = settings3.getAsRatio("index.version.created", "hi!");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [hi!]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet0 = org.elasticsearch.common.settings.IndexScopedSettings.BUILT_IN_INDEX_SETTINGS;
        org.junit.Assert.assertNotNull(wildcardSettingSet0);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = settings4.getAsSettings("");
        java.lang.Boolean boolean11 = settings8.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = settings8.getAsBytesSize("index.", byteSizeValue13);
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.uuid", 0L);
        java.lang.String str20 = builder18.get("");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder18.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = settings24.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings26.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction29 = null;
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder18.putProperties(strMap27, strPredicate28, strFunction29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder18.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.uuid", 0L);
        java.lang.String str38 = builder36.get("");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder36.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = settings42.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings44.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction47 = null;
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder36.putProperties(strMap45, strPredicate46, strFunction47);
        boolean boolean50 = indexScopedSettings0.updateSettings(settings8, builder18, builder48, "index.uuid");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue53 = settings8.getAsMemory("index.version.created", "");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.version.created] with value [] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + boolean11 + "' != '" + true + "'", boolean11, true);
        org.junit.Assert.assertNull(byteSizeValue14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray4 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList5);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.created", (int) (short) -1);
        java.util.concurrent.TimeUnit timeUnit13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder14 = builder10.put("index.shared_filesystem.recover_on_any_node", 1L, timeUnit13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_READ_BLOCK;
        org.junit.Assert.assertNotNull(clusterBlock0);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.applySettings(settings7);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue11 = settings7.getAsRatio("index.version.created", "index.shared_filesystem.recover_on_any_node");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.shared_filesystem.recover_on_any_node]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.util.concurrent.TimeUnit timeUnit6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder7 = builder3.put("index.auto_expand_replicas", 1L, timeUnit6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        int int7 = builder4.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.index("index.shadow_replicas");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder4.primaryTerm((int) (byte) 10, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.junit.Assert.assertNotNull(clusterBlock0);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_VERSION_UPGRADED_STRING;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.version.upgraded_string" + "'", str0, "index.version.upgraded_string");
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.version.created");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_SHARED_FS_ALLOW_RECOVERY_ON_ANY_NODE_SETTING;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting3 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer4 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting3, settingsConsumer4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Setting is not registered for key [index.routing.allocation.initial_recovery.]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settingsSetting3);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.putNull("hi!");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings15.applySettings(settings18);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray29 = settings21.getAsArray("index.version.created", strArray27, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray42 = settings30.getAsArray("", strArray40, (java.lang.Boolean) false);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder43 = builder12.put("index.data_path", "index.auto_expand_replicas", strArray29, strArray40);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.common.settings.SettingsException; message: The settings length must match the value length");
        } catch (org.elasticsearch.common.settings.SettingsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.io.stream.StreamInput streamInput1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff2 = indexMetaData0.readDiffFrom(streamInput1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting0 = org.elasticsearch.index.IndexSettings.INDEX_REFRESH_INTERVAL_SETTING;
        org.junit.Assert.assertNotNull(timeValueSetting0);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = indexMetaData0.primaryTerm((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.elasticsearch.common.io.stream.StreamInput streamInput0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.Builder.readFrom(streamInput0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.elasticsearch.common.xcontent.XContentParser xContentParser0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.Builder.fromXContent(xContentParser0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff3 = indexMetaData0.readDiffFrom(streamInput2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        java.nio.file.Path path11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.loadFromPath(path11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting0 = org.elasticsearch.index.IndexSettings.DEFAULT_FIELD_SETTING;
        org.junit.Assert.assertNotNull(strSetting0);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_CREATION_DATE;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.creation_date" + "'", str0, "index.creation_date");
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting0 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.junit.Assert.assertNotNull(timeValueSetting0);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_SHARED_FILESYSTEM;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.shared_filesystem" + "'", str0, "index.shared_filesystem");
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("hi!");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.blocks.read_only" + "'", str0, "index.blocks.read_only");
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.KEY_ACTIVE_ALLOCATIONS;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "active_allocations" + "'", str0, "active_allocations");
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput2 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting28 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(booleanSetting28);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder10 = builder3.put("index.shared_filesystem.recover_on_any_node", 60000L, byteSizeUnit9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate((long) 'a');
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.putAlias(builder7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings20.applySettings(settings23);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.applySettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexScopedSettings0.copy(settings28, indexMetaData29);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData32 = indexMetaData29.mappingOrDefault("index.version.minimum_compatible");
        org.elasticsearch.common.io.stream.StreamInput streamInput33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = indexMetaData29.readFrom(streamInput33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNull(mappingMetaData32);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.common.settings.Settings settings26 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings27.applySettings(settings30);
        java.util.function.Predicate<java.lang.String> strPredicate34 = indexScopedSettings27.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.isPrivateSetting("index.");
        boolean boolean39 = indexScopedSettings35.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings41.getGroups("index.uuid");
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray53 = settings41.getAsArray("", strArray51, (java.lang.Boolean) false);
        indexScopedSettings35.validate("index.shadow_replicas", settings41);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = indexScopedSettings35.getDEFAULT_SCOPED_SETTINGS();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings26, strPredicate34, indexScopedSettings55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strPredicate34);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(indexScopedSettings55);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder25 = builder8.put("index.creation_date", "active_allocations", strArray21, strArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder2 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params3 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder4 = indexMetaData0.toXContent(xContentBuilder2, params3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(params3);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean11 = indexScopedSettings9.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings9.applySettings(settings12);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray23 = settings15.getAsArray("index.version.created", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = settings24.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        java.lang.String[] strArray42 = settings24.getAsArray("index.version.minimum_compatible", strArray38, (java.lang.Boolean) false);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder43 = builder6.put("", "index.shared_filesystem", strArray23, strArray38);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.common.settings.SettingsException; message: The settings length must match the value length");
        } catch (org.elasticsearch.common.settings.SettingsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.io.stream.StreamInput streamInput17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexMetaData0.readFrom(streamInput17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = settings4.getAsSettings("");
        java.lang.Boolean boolean11 = settings8.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = settings8.getAsBytesSize("index.", byteSizeValue13);
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.uuid", 0L);
        java.lang.String str20 = builder18.get("");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder18.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = settings24.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings26.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction29 = null;
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder18.putProperties(strMap27, strPredicate28, strFunction29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder18.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.uuid", 0L);
        java.lang.String str38 = builder36.get("");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder36.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = settings42.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings44.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction47 = null;
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder36.putProperties(strMap45, strPredicate46, strFunction47);
        boolean boolean50 = indexScopedSettings0.updateSettings(settings8, builder18, builder48, "index.uuid");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder54 = builder48.put("", (long) 0, byteSizeUnit53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + boolean11 + "' != '" + true + "'", boolean11, true);
        org.junit.Assert.assertNull(byteSizeValue14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.Version version26 = indexSettings21.version;
        boolean boolean27 = indexSettings21.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap2 = settings0.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings4 = settings0.getAsSettings("");
        java.lang.Boolean boolean7 = settings4.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue9 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue10 = settings4.getAsBytesSize("index.", byteSizeValue9);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params12 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = settings4.toXContent(xContentBuilder11, params12);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings4, streamOutput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertEquals("'" + boolean7 + "' != '" + true + "'", boolean7, true);
        org.junit.Assert.assertNull(byteSizeValue10);
        org.junit.Assert.assertNotNull(params12);
        org.junit.Assert.assertNull(xContentBuilder13);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder1.mapping("index.creation_date");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.putMapping("index.version.minimum_compatible", "index.uuid");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(mappingMetaData4);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue74 = settings71.getAsRatio("index.auto_expand_replicas", "index.creation_date");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.creation_date]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_UUID_NA_VALUE;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "_na_" + "'", str0, "_na_");
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.io.stream.StreamInput streamInput2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff3 = indexMetaData0.readDiffFrom(streamInput2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = settings23.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        java.lang.String[] strArray41 = settings23.getAsArray("index.version.minimum_compatible", strArray37, (java.lang.Boolean) false);
        java.lang.String[] strArray43 = settings7.getAsArray("index.version.created", strArray41, (java.lang.Boolean) true);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue46 = settings7.getAsMemory("", "index.number_of_shards");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [] with value [index.number_of_shards] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("archived.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [archived.]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_PRIORITY_SETTING;
        org.junit.Assert.assertNotNull(intSetting0);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_VERSION_CREATED_STRING;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.version.created_string" + "'", str0, "index.version.created_string");
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.blocks.read" + "'", str0, "index.blocks.read");
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder4.settings(settings27);
        java.lang.String str42 = settings27.get("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.isPrivateSetting("index.");
        boolean boolean47 = indexScopedSettings43.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings49.getGroups("index.uuid");
        java.lang.String[] strArray59 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray61 = settings49.getAsArray("", strArray59, (java.lang.Boolean) false);
        indexScopedSettings43.validate("index.shadow_replicas", settings49);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting64 = indexScopedSettings43.get("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int66 = indexMetaData65.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = new org.elasticsearch.common.settings.IndexScopedSettings(settings27, indexScopedSettings43, indexMetaData65);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean71 = indexScopedSettings69.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings72.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings75 = indexScopedSettings69.applySettings(settings72);
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings77 = indexScopedSettings69.applySettings(settings76);
        boolean boolean78 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings76);
        org.elasticsearch.common.unit.SizeValue sizeValue80 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue81 = settings76.getAsSize("index.shadow_replicas", sizeValue80);
        java.util.Map<java.lang.String, java.lang.Object> strMap82 = settings76.getAsStructuredMap();
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings67.validate("archived.", settings76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [archived.]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(wildcardSetting64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(sizeValue81);
        org.junit.Assert.assertNotNull(strMap82);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.number_of_shards");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.number_of_shards]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = null;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings32 = settings28.getAsSettings("");
        java.lang.Boolean boolean35 = settings32.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue37 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue38 = settings32.getAsBytesSize("index.", byteSizeValue37);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = null;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings40.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings44 = settings40.getAsSettings("");
        java.lang.Boolean boolean47 = settings44.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue49 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue50 = settings44.getAsBytesSize("index.", byteSizeValue49);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder51 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params52 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = settings44.toXContent(xContentBuilder51, params52);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder54 = settings32.toXContent(xContentBuilder39, params52);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = settings26.toXContent(xContentBuilder27, params52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertEquals("'" + boolean35 + "' != '" + true + "'", boolean35, true);
        org.junit.Assert.assertNull(byteSizeValue38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertEquals("'" + boolean47 + "' != '" + true + "'", boolean47, true);
        org.junit.Assert.assertNull(byteSizeValue50);
        org.junit.Assert.assertNotNull(params52);
        org.junit.Assert.assertNull(xContentBuilder53);
        org.junit.Assert.assertNull(xContentBuilder54);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        // The following exception was thrown during execution in test generation
        try {
            long long3 = indexMetaData0.primaryTerm((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.version.created", "hi!");
        java.lang.String[] strArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.putArray("index.version.created_string", strArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.remove("archived.");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder7 = builder3.put(objDictionary6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_SHRINK_SOURCE_UUID;
        org.junit.Assert.assertNotNull(strSetting0);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = settings4.getAsSettings("");
        java.lang.Boolean boolean11 = settings8.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = settings8.getAsBytesSize("index.", byteSizeValue13);
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.uuid", 0L);
        java.lang.String str20 = builder18.get("");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder18.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = settings24.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings26.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction29 = null;
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder18.putProperties(strMap27, strPredicate28, strFunction29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder18.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.uuid", 0L);
        java.lang.String str38 = builder36.get("");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder36.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = settings42.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings44.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction47 = null;
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder36.putProperties(strMap45, strPredicate46, strFunction47);
        boolean boolean50 = indexScopedSettings0.updateSettings(settings8, builder18, builder48, "index.uuid");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting52 = indexScopedSettings0.get("hi!");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + boolean11 + "' != '" + true + "'", boolean11, true);
        org.junit.Assert.assertNull(byteSizeValue14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(wildcardSetting52);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData28.getMappings();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput30 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData28.writeTo(streamOutput30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = null;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings27 = settings23.getAsSettings("");
        java.lang.Boolean boolean30 = settings27.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue32 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue33 = settings27.getAsBytesSize("index.", byteSizeValue32);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params35 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings27.toXContent(xContentBuilder34, params35);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = null;
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings42 = settings38.getAsSettings("");
        java.lang.Boolean boolean45 = settings42.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue47 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue48 = settings42.getAsBytesSize("index.", byteSizeValue47);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder49 = null;
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = settings50.getAsSettings("");
        java.lang.Boolean boolean57 = settings54.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = settings54.getAsBytesSize("index.", byteSizeValue59);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder61 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params62 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = settings54.toXContent(xContentBuilder61, params62);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = settings42.toXContent(xContentBuilder49, params62);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = settings27.toXContent(xContentBuilder37, params62);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder66 = indexMetaData0.toXContent(xContentBuilder22, params62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + true + "'", boolean30, true);
        org.junit.Assert.assertNull(byteSizeValue33);
        org.junit.Assert.assertNotNull(params35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertEquals("'" + boolean45 + "' != '" + true + "'", boolean45, true);
        org.junit.Assert.assertNull(byteSizeValue48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertEquals("'" + boolean57 + "' != '" + true + "'", boolean57, true);
        org.junit.Assert.assertNull(byteSizeValue60);
        org.junit.Assert.assertNotNull(params62);
        org.junit.Assert.assertNull(xContentBuilder63);
        org.junit.Assert.assertNull(xContentBuilder64);
        org.junit.Assert.assertNull(xContentBuilder65);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap2 = settings0.getGroups("index.uuid");
        org.elasticsearch.Version version4 = null;
        org.elasticsearch.Version version5 = settings0.getAsVersion("", version4);
        boolean boolean6 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = new org.elasticsearch.common.settings.IndexScopedSettings(settings0, indexScopedSettings7, indexMetaData8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput27 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData23.writeTo(streamOutput27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData28.getMappings();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = null;
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings35 = settings31.getAsSettings("");
        java.lang.Boolean boolean38 = settings35.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue40 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue41 = settings35.getAsBytesSize("index.", byteSizeValue40);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder42 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params43 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = settings35.toXContent(xContentBuilder42, params43);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder45 = indexMetaData28.toXContent(xContentBuilder30, params43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertEquals("'" + boolean38 + "' != '" + true + "'", boolean38, true);
        org.junit.Assert.assertNull(byteSizeValue41);
        org.junit.Assert.assertNotNull(params43);
        org.junit.Assert.assertNull(xContentBuilder44);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting0 = org.elasticsearch.index.IndexSettings.INDEX_TRANSLOG_SYNC_INTERVAL_SETTING;
        org.junit.Assert.assertNotNull(timeValueSetting0);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = settings9.getAsMap();
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings9, streamOutput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings11);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_STATE_FILE_PREFIX;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "state-" + "'", str0, "state-");
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder4.putMapping("index.shadow_replicas", "primary_terms");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "index.number_of_shards", "hi!", "archived.", "index.", "index.version.created", "index.data_path", "hi!", "index.version.upgraded_string", "index.shared_filesystem.recover_on_any_node", "primary_terms", "index.shared_filesystem.recover_on_any_node", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder3.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList27);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder31 = builder29.put(objDictionary30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.xcontent.XContentParser xContentParser23 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.isPrivateSetting("index.");
        boolean boolean29 = indexScopedSettings25.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray43 = settings31.getAsArray("", strArray41, (java.lang.Boolean) false);
        indexScopedSettings25.validate("index.shadow_replicas", settings31);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings31);
        org.elasticsearch.index.translog.Translog.Durability durability46 = null;
        indexSettings45.setTranslogDurability(durability46);
        org.elasticsearch.common.unit.TimeValue timeValue48 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings45.setGCDeletes(timeValue48);
        org.apache.lucene.index.MergePolicy mergePolicy50 = indexSettings45.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher51 = indexSettings45.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = indexMetaData0.fromXContent(xContentParser23, parseFieldMatcher51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(mergePolicy50);
        org.junit.Assert.assertNotNull(parseFieldMatcher51);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        java.lang.String str25 = indexSettings21.nodeName;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("index.shared_filesystem", (int) (byte) 0);
        java.util.concurrent.TimeUnit timeUnit15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder16 = builder9.put("", (long) 0, timeUnit15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params27 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = settings25.toXContent(xContentBuilder26, params27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(params27);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.version.created", custom1);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_WRITE_BLOCK;
        org.junit.Assert.assertNotNull(clusterBlock0);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_PRIORITY;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.priority" + "'", str0, "index.priority");
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder2 = null;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = settings3.getAsSettings("");
        java.lang.Boolean boolean10 = settings7.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue12 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = settings7.getAsBytesSize("index.", byteSizeValue12);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder14 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params15 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = settings7.toXContent(xContentBuilder14, params15);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = indexMetaData0.toXContent(xContentBuilder2, params15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + true + "'", boolean10, true);
        org.junit.Assert.assertNull(byteSizeValue13);
        org.junit.Assert.assertNotNull(params15);
        org.junit.Assert.assertNull(xContentBuilder16);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder4.settings(settings27);
        java.lang.String str42 = settings27.get("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.isPrivateSetting("index.");
        boolean boolean47 = indexScopedSettings43.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings49.getGroups("index.uuid");
        java.lang.String[] strArray59 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray61 = settings49.getAsArray("", strArray59, (java.lang.Boolean) false);
        indexScopedSettings43.validate("index.shadow_replicas", settings49);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting64 = indexScopedSettings43.get("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int66 = indexMetaData65.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = new org.elasticsearch.common.settings.IndexScopedSettings(settings27, indexScopedSettings43, indexMetaData65);
        boolean boolean69 = indexMetaData65.isSameUUID("index.version.created_string");
        org.elasticsearch.common.io.stream.StreamInput streamInput70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = indexMetaData65.readFrom(streamInput70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(wildcardSetting64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_READ_ONLY_BLOCK;
        org.junit.Assert.assertNotNull(clusterBlock0);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean75 = indexScopedSettings73.isPrivateSetting("index.");
        boolean boolean77 = indexScopedSettings73.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings79.getGroups("index.uuid");
        java.lang.String[] strArray89 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray91 = settings79.getAsArray("", strArray89, (java.lang.Boolean) false);
        indexScopedSettings73.validate("index.shadow_replicas", settings79);
        org.elasticsearch.index.IndexSettings indexSettings93 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings79);
        org.elasticsearch.index.translog.Translog.Durability durability94 = null;
        indexSettings93.setTranslogDurability(durability94);
        org.elasticsearch.common.unit.TimeValue timeValue96 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings93.setGCDeletes(timeValue96);
        indexSettings21.refreshInterval = timeValue96;
        org.elasticsearch.index.translog.Translog.Durability durability99 = indexSettings21.durability;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(timeValue96);
        org.junit.Assert.assertNull(durability99);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings20.applySettings(settings23);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.applySettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexScopedSettings0.copy(settings28, indexMetaData29);
        long long31 = indexMetaData29.getCreationDate();
        org.elasticsearch.common.io.stream.StreamInput streamInput32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = indexMetaData29.readFrom(streamInput32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting0 = org.elasticsearch.index.IndexSettings.INDEX_CHECK_ON_STARTUP;
        org.junit.Assert.assertNotNull(strSetting0);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap2 = settings0.getGroups("index.uuid");
        java.lang.String[] strArray10 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray12 = settings0.getAsArray("", strArray10, (java.lang.Boolean) false);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue15 = settings0.getAsMemory("_all", "state-");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [_all] with value [state-] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray12);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings4.applySettings(settings7);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = settings11.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = settings13.getAsMap();
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings4.applySettings(settings13);
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings0.dryRun(settings13);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue19 = settings16.getAsMemory("index.version.minimum_compatible", "index.shared_filesystem.recover_on_any_node");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.version.minimum_compatible] with value [index.shared_filesystem.recover_on_any_node] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.putNull("hi!");
        java.nio.file.Path path13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder14 = builder8.loadFromPath(path13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getValue(settingsSetting17);
        int int19 = 0; // flaky: indexSettings16.numberOfShards;
        org.elasticsearch.common.logging.ESLogger eSLogger20 = null; // flaky: indexSettings16.logger;
        org.elasticsearch.common.settings.Settings settings21 = null; // flaky: indexSettings16.getSettings();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings21, streamOutput22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(settingsSetting17);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertNotNull(eSLogger20);
// flaky:         org.junit.Assert.assertNotNull(settings21);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_DATA_PATH_SETTING;
        org.junit.Assert.assertNotNull(strSetting0);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_METADATA;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.blocks.metadata" + "'", str0, "index.blocks.metadata");
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        boolean boolean30 = indexScopedSettings26.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        indexScopedSettings26.validate("index.shadow_replicas", settings32);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings32);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting47 = indexSettings46.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData48.includeFilters();
        indexSettings46.indexMetaData = indexMetaData48;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters52 = indexMetaData48.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff53 = indexMetaData0.diff(indexMetaData48);
        // The following exception was thrown during execution in test generation
        try {
            long long55 = indexMetaData0.primaryTerm((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(booleanSetting47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
        org.junit.Assert.assertNull(discoveryNodeFilters52);
        org.junit.Assert.assertNotNull(indexMetaDataDiff53);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings4.applySettings(settings7);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = settings11.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = settings13.getAsMap();
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings4.applySettings(settings13);
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings0.dryRun(settings13);
        org.elasticsearch.common.settings.Settings settings17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean75 = indexScopedSettings73.isPrivateSetting("index.");
        boolean boolean77 = indexScopedSettings73.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings79.getGroups("index.uuid");
        java.lang.String[] strArray89 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray91 = settings79.getAsArray("", strArray89, (java.lang.Boolean) false);
        indexScopedSettings73.validate("index.shadow_replicas", settings79);
        org.elasticsearch.index.IndexSettings indexSettings93 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings79);
        org.elasticsearch.index.translog.Translog.Durability durability94 = null;
        indexSettings93.setTranslogDurability(durability94);
        org.elasticsearch.common.unit.TimeValue timeValue96 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings93.setGCDeletes(timeValue96);
        indexSettings21.refreshInterval = timeValue96;
        boolean boolean99 = indexSettings21.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(timeValue96);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        boolean boolean19 = indexScopedSettings15.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings21.getGroups("index.uuid");
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray33 = settings21.getAsArray("", strArray31, (java.lang.Boolean) false);
        indexScopedSettings15.validate("index.shadow_replicas", settings21);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings21);
        org.elasticsearch.index.translog.Translog.Durability durability36 = null;
        indexSettings35.setTranslogDurability(durability36);
        org.elasticsearch.common.unit.TimeValue timeValue38 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings35.setGCDeletes(timeValue38);
        org.elasticsearch.Version version40 = indexSettings35.version;
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder8.put("active_allocations", version40);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("active_allocations", (float) 10000);
        java.util.concurrent.TimeUnit timeUnit47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder48 = builder41.put("hi!", (long) (byte) 100, timeUnit47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(version40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.isPrivateSetting("index.");
        boolean boolean16 = indexScopedSettings12.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray30 = settings18.getAsArray("", strArray28, (java.lang.Boolean) false);
        indexScopedSettings12.validate("index.shadow_replicas", settings18);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings18);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = indexSettings32.scopedSettings;
        org.elasticsearch.common.settings.Settings settings34 = indexSettings32.nodeSettings;
        java.lang.String[] strArray36 = settings34.getAsArray("index.number_of_shards");
        java.lang.String[] strArray37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder38 = builder8.put("index.version.created", "index.creation_date", strArray36, strArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strArray36);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_CREATION_DATE_STRING;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.creation_date_string" + "'", str0, "index.creation_date_string");
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_REPLICAS;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.number_of_replicas" + "'", str0, "index.number_of_replicas");
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder4.creationDate((long) 10);
        java.lang.String[] strArray50 = new java.lang.String[] { "index.", "index.version.upgraded_string", "", "index.creation_date", "index.shared_filesystem", "index.auto_expand_replicas", "index.version.upgraded_string", "archived.", "index.uuid", "archived.", "", "index.shared_filesystem.recover_on_any_node", "index.version.created_string", "_na_", "hi!", "index.blocks.read_only", "index.version.created_string", "index.creation_date", "index.version.minimum_compatible", "index.creation_date" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder4.putActiveAllocationIds(10000, (java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder4.putAlias(aliasMetaData54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("index.shared_filesystem", (int) (byte) 0);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder16 = builder9.put("index.uuid", (long) (short) 0, byteSizeUnit15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings19 = settings17.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings21.getGroups("index.uuid");
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray33 = settings21.getAsArray("", strArray31, (java.lang.Boolean) false);
        java.lang.String[] strArray35 = settings17.getAsArray("index.version.minimum_compatible", strArray31, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder3.extendArray("", strArray35);
        java.io.InputStream inputStream38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.loadFromStream("", inputStream38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.uuid", 0L);
        java.lang.String str22 = builder20.get("");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder20.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder25.replacePropertyPlaceholders();
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings12.validate(builder25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.uuid]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.blocks.metadata");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.blocks.metadata]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder18 = builder3.put(objDictionary17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData0.includeFilters();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long27 = indexMetaData0.primaryTerm((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNull(strSet25);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        boolean boolean6 = indexScopedSettings2.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings8.getGroups("index.uuid");
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray20 = settings8.getAsArray("", strArray18, (java.lang.Boolean) false);
        indexScopedSettings2.validate("index.shadow_replicas", settings8);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings8);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = settings24.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        java.lang.String[] strArray42 = settings24.getAsArray("index.version.minimum_compatible", strArray38, (java.lang.Boolean) false);
        java.lang.String[] strArray44 = settings8.getAsArray("index.version.created", strArray42, (java.lang.Boolean) true);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput23 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.blocks.write" + "'", str0, "index.blocks.write");
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.applySettings(settings7);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings8.getAsGroups();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.upgraded_string");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings8, streamOutput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean75 = indexScopedSettings73.isPrivateSetting("index.");
        boolean boolean77 = indexScopedSettings73.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings79.getGroups("index.uuid");
        java.lang.String[] strArray89 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray91 = settings79.getAsArray("", strArray89, (java.lang.Boolean) false);
        indexScopedSettings73.validate("index.shadow_replicas", settings79);
        org.elasticsearch.index.IndexSettings indexSettings93 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings79);
        org.elasticsearch.index.translog.Translog.Durability durability94 = null;
        indexSettings93.setTranslogDurability(durability94);
        org.elasticsearch.common.unit.TimeValue timeValue96 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings93.setGCDeletes(timeValue96);
        indexSettings21.refreshInterval = timeValue96;
        long long99 = indexSettings21.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(timeValue96);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 1000L + "'", long99 == 1000L);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings20.applySettings(settings23);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.applySettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexScopedSettings0.copy(settings28, indexMetaData29);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings31.applySettings(settings34);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings31.applySettings(settings38);
        indexScopedSettings0.validate(settings39);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue42 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue43 = settings39.getAsBytesSize("index.priority", byteSizeValue42);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue46 = settings39.getAsRatio("", "");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage []");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNull(byteSizeValue43);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_VERSION_UPGRADED;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.version.upgraded" + "'", str0, "index.version.upgraded");
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        int int7 = builder4.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.index("index.priority");
        // The following exception was thrown during execution in test generation
        try {
            long long13 = builder4.primaryTerm((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting26 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        java.lang.String str27 = indexSettings21.defaultField;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(timeValueSetting26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "_all" + "'", str27, "_all");
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        int int25 = indexSettings21.getMaxResultWindow();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getValue(settingsSetting26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting5 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer6 = null;
        indexScopedSettings4.addSettingsUpdateConsumer(settingsSetting5, settingsConsumer6);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.get(settingsSetting5);
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("index.uuid", 0L);
        java.lang.String str14 = builder12.get("");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder12.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings20 = settings18.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings20.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder12.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder12.put("index.version.upgraded_string", (float) 1);
        java.lang.String str29 = builder12.remove("index.number_of_shards");
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settingsSetting5);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting48 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer49 = null;
        indexScopedSettings47.addSettingsUpdateConsumer(settingsSetting48, settingsConsumer49);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting52 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer53 = null;
        indexScopedSettings51.addSettingsUpdateConsumer(settingsSetting52, settingsConsumer53);
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings47.get(settingsSetting52);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer56 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer57 = null;
        indexScopedSettings27.addSettingsUpdateConsumer(settingsSetting52, settingsConsumer56, settingsConsumer57);
        boolean boolean59 = indexMetaData23.equals((java.lang.Object) settingsConsumer56);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder60 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params61 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder62 = indexMetaData23.toXContent(xContentBuilder60, params61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertNotNull(settingsSetting48);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertNotNull(settingsSetting52);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(params61);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.logging.ESLogger eSLogger28 = indexSettings21.getlogger();
        java.util.function.Predicate<java.lang.String> strPredicate29 = indexSettings21.getindexNameMatcher();
        int int30 = indexSettings21.getMaxResultWindow();
        indexSettings21.setEnableWarmer(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertNotNull(eSLogger28);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.applySettings(settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.get(settingsSetting9);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = settings11.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = settings13.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.isPrivateSetting("index.");
        boolean boolean21 = indexScopedSettings17.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray35 = settings23.getAsArray("", strArray33, (java.lang.Boolean) false);
        indexScopedSettings17.validate("index.shadow_replicas", settings23);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings23);
        boolean boolean39 = indexSettings37.matchesIndexName("");
        long long40 = indexSettings37.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue41 = indexSettings37.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue42 = settings13.getAsBytesSize("primary_terms", byteSizeValue41);
        org.elasticsearch.common.settings.Settings.Builder builder43 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.put("index.uuid", 0L);
        java.lang.String str48 = builder46.get("");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder49.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder55 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("index.uuid", 0L);
        java.lang.String str60 = builder58.get("");
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder58.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder58.put("", true);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder58.put("primary_terms", 100.0f);
        boolean boolean71 = indexScopedSettings0.updateSettings(settings13, builder54, builder58, "");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap73 = settings13.getAsGroups(false);
        java.lang.Boolean boolean76 = settings13.getAsBoolean("index.version.upgraded_string", (java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settingsSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 60000L + "'", long40 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue41);
        org.junit.Assert.assertNotNull(byteSizeValue42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertEquals("'" + boolean76 + "' != '" + false + "'", boolean76, false);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput27 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData23.writeTo(streamOutput27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.applySettings(settings7);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings7);
        org.elasticsearch.common.unit.SizeValue sizeValue11 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue12 = settings7.getAsSize("index.shadow_replicas", sizeValue11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = settings7.getAsStructuredMap();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings7.getGroups("", true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: illegal setting prefix ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(sizeValue12);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.nodeSettings;
        indexSettings21.maxRescoreWindow = 0;
        boolean boolean26 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        boolean boolean33 = indexScopedSettings29.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        indexScopedSettings29.validate("index.shadow_replicas", settings35);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        indexSettings49.setEnableWarmer(true);
        java.lang.String str52 = indexSettings49.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = indexSettings49.getIndexMetaData();
        java.lang.String str54 = indexSettings49.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy55 = indexSettings49.getMergePolicy();
        org.elasticsearch.common.logging.ESLogger eSLogger56 = indexSettings49.getlogger();
        java.util.function.Predicate<java.lang.String> strPredicate57 = indexSettings49.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings58 = settings27.filter(strPredicate57);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings27.getGroups("state-", false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(mergePolicy55);
        org.junit.Assert.assertNotNull(eSLogger56);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap61);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        int int23 = indexSettings21.getMaxResultWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.isPrivateSetting("index.");
        boolean boolean29 = indexScopedSettings25.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray43 = settings31.getAsArray("", strArray41, (java.lang.Boolean) false);
        indexScopedSettings25.validate("index.shadow_replicas", settings31);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings31);
        org.elasticsearch.index.translog.Translog.Durability durability46 = null;
        indexSettings45.setTranslogDurability(durability46);
        boolean boolean48 = indexSettings45.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig49 = indexSettings45.getmergePolicyConfig();
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings45.getsyncInterval();
        indexSettings21.setRefreshInterval(timeValue50);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting52 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig49);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(booleanSetting52);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder4.creationDate((long) 10);
        long long29 = builder28.version();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder28.putAlias(builder30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.common.io.stream.StreamOutput streamOutput26 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(strSet25);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = settings4.getAsSettings("");
        java.lang.Boolean boolean11 = settings8.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = settings8.getAsBytesSize("index.", byteSizeValue13);
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.uuid", 0L);
        java.lang.String str20 = builder18.get("");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder18.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = settings24.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings26.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction29 = null;
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder18.putProperties(strMap27, strPredicate28, strFunction29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder18.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.uuid", 0L);
        java.lang.String str38 = builder36.get("");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder36.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = settings42.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings44.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction47 = null;
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder36.putProperties(strMap45, strPredicate46, strFunction47);
        boolean boolean50 = indexScopedSettings0.updateSettings(settings8, builder18, builder48, "index.uuid");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder52 = builder48.put(objDictionary51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + boolean11 + "' != '" + true + "'", boolean11, true);
        org.junit.Assert.assertNull(byteSizeValue14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "index.number_of_shards", "hi!", "archived.", "index.", "index.version.created", "index.data_path", "hi!", "index.version.upgraded_string", "index.shared_filesystem.recover_on_any_node", "primary_terms", "index.shared_filesystem.recover_on_any_node", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder3.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList27);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        org.elasticsearch.Version version46 = null;
        org.elasticsearch.Version version47 = settings32.getAsVersion("index.number_of_shards", version46);
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings32);
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray62 = settings50.getAsArray("", strArray60, (java.lang.Boolean) false);
        java.lang.String[] strArray63 = settings32.getAsArray("hi!", strArray60);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder30.putArray("primary_terms", strArray63);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.isPrivateSetting("index.");
        boolean boolean70 = indexScopedSettings66.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings72.getGroups("index.uuid");
        java.lang.String[] strArray82 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray84 = settings72.getAsArray("", strArray82, (java.lang.Boolean) false);
        indexScopedSettings66.validate("index.shadow_replicas", settings72);
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData65, settings72);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings87 = indexSettings86.scopedSettings;
        org.elasticsearch.common.settings.Settings settings88 = indexSettings86.nodeSettings;
        java.lang.String[] strArray90 = settings88.getAsArray("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder30.put((java.lang.Object[]) strArray90);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNull(version47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(indexScopedSettings87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_READ_ONLY_SETTING;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray4 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList5);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder10.loadFromSource("");
        java.nio.file.Path path13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder14 = builder10.loadFromPath(path13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.applySettings(settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.get(settingsSetting9);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = settings11.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = settings13.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.isPrivateSetting("index.");
        boolean boolean21 = indexScopedSettings17.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray35 = settings23.getAsArray("", strArray33, (java.lang.Boolean) false);
        indexScopedSettings17.validate("index.shadow_replicas", settings23);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings23);
        boolean boolean39 = indexSettings37.matchesIndexName("");
        long long40 = indexSettings37.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue41 = indexSettings37.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue42 = settings13.getAsBytesSize("primary_terms", byteSizeValue41);
        org.elasticsearch.common.settings.Settings.Builder builder43 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.put("index.uuid", 0L);
        java.lang.String str48 = builder46.get("");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder49.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder55 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("index.uuid", 0L);
        java.lang.String str60 = builder58.get("");
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder58.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder58.put("", true);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder58.put("primary_terms", 100.0f);
        boolean boolean71 = indexScopedSettings0.updateSettings(settings13, builder54, builder58, "");
        java.util.Map<java.lang.String, java.lang.String> strMap72 = builder58.internalMap();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settingsSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 60000L + "'", long40 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue41);
        org.junit.Assert.assertNotNull(byteSizeValue42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strMap72);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray4 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList5);
        java.lang.Object[] objArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.put(objArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder1.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("index.version.created");
        long long7 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.creationDate((long) '#');
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.putNull("hi!");
        java.io.InputStream inputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder15 = builder8.loadFromStream("index.blocks.metadata", inputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        boolean boolean30 = indexScopedSettings26.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        indexScopedSettings26.validate("index.shadow_replicas", settings32);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings32);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting47 = indexSettings46.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData48.includeFilters();
        indexSettings46.indexMetaData = indexMetaData48;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters52 = indexMetaData48.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff53 = indexMetaData0.diff(indexMetaData48);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters54 = indexMetaData0.requireFilters();
        org.elasticsearch.common.xcontent.XContentParser xContentParser55 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.isPrivateSetting("index.");
        boolean boolean61 = indexScopedSettings57.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings63.getGroups("index.uuid");
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray75 = settings63.getAsArray("", strArray73, (java.lang.Boolean) false);
        indexScopedSettings57.validate("index.shadow_replicas", settings63);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings63);
        org.elasticsearch.index.translog.Translog.Durability durability78 = null;
        indexSettings77.setTranslogDurability(durability78);
        org.elasticsearch.common.unit.TimeValue timeValue80 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings77.setGCDeletes(timeValue80);
        org.apache.lucene.index.MergePolicy mergePolicy82 = indexSettings77.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher83 = indexSettings77.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData84 = indexMetaData0.fromXContent(xContentParser55, parseFieldMatcher83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(booleanSetting47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
        org.junit.Assert.assertNull(discoveryNodeFilters52);
        org.junit.Assert.assertNotNull(indexMetaDataDiff53);
        org.junit.Assert.assertNull(discoveryNodeFilters54);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(timeValue80);
        org.junit.Assert.assertNotNull(mergePolicy82);
        org.junit.Assert.assertNotNull(parseFieldMatcher83);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder1.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.index("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        byte byte10 = state9.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.state(state9);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.putMapping(mappingMetaData12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 1 + "'", byte10 == (byte) 1);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.blocks.write");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.blocks.write]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean75 = indexScopedSettings73.isPrivateSetting("index.");
        boolean boolean77 = indexScopedSettings73.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings79.getGroups("index.uuid");
        java.lang.String[] strArray89 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray91 = settings79.getAsArray("", strArray89, (java.lang.Boolean) false);
        indexScopedSettings73.validate("index.shadow_replicas", settings79);
        org.elasticsearch.index.IndexSettings indexSettings93 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings79);
        org.elasticsearch.index.translog.Translog.Durability durability94 = null;
        indexSettings93.setTranslogDurability(durability94);
        org.elasticsearch.common.unit.TimeValue timeValue96 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings93.setGCDeletes(timeValue96);
        indexSettings21.refreshInterval = timeValue96;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings99 = indexSettings21.scopedSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(timeValue96);
        org.junit.Assert.assertNotNull(indexScopedSettings99);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        java.lang.String str23 = indexSettings21.customDataPath();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig24 = indexSettings21.mergeSchedulerConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig24);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder5 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params6 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder5, params6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(params6);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.creation_date");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.logging.ESLogger eSLogger28 = indexSettings21.getlogger();
        boolean boolean29 = indexSettings21.getqueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertNotNull(eSLogger28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.putNull("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings12.applySettings(settings15);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray26 = settings18.getAsArray("index.version.created", strArray24, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder6.extendArray("index.version.created_string", strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder6.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder29.normalizePrefix("primary_terms");
        java.nio.file.Path path32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder33 = builder31.loadFromPath(path32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        // The following exception was thrown during execution in test generation
        try {
            long long3 = builder1.primaryTerm((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        int int27 = builder26.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder26.numberOfShards(0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.creation_date", false);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.isPrivateSetting("index.");
        boolean boolean16 = indexScopedSettings12.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray30 = settings18.getAsArray("", strArray28, (java.lang.Boolean) false);
        indexScopedSettings12.validate("index.shadow_replicas", settings18);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings18);
        org.elasticsearch.common.unit.TimeValue timeValue33 = indexSettings32.getDEFAULT_REFRESH_INTERVAL();
        int int34 = indexSettings32.getMaxResultWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean38 = indexScopedSettings36.isPrivateSetting("index.");
        boolean boolean40 = indexScopedSettings36.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings42.getGroups("index.uuid");
        java.lang.String[] strArray52 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray54 = settings42.getAsArray("", strArray52, (java.lang.Boolean) false);
        indexScopedSettings36.validate("index.shadow_replicas", settings42);
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings42);
        org.elasticsearch.index.translog.Translog.Durability durability57 = null;
        indexSettings56.setTranslogDurability(durability57);
        boolean boolean59 = indexSettings56.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig60 = indexSettings56.getmergePolicyConfig();
        org.elasticsearch.common.unit.TimeValue timeValue61 = indexSettings56.getsyncInterval();
        indexSettings32.setRefreshInterval(timeValue61);
        org.elasticsearch.common.unit.TimeValue timeValue63 = settings6.getAsTime("index.version.created_string", timeValue61);
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings65.getGroups("index.uuid");
        boolean boolean68 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings65);
        org.elasticsearch.common.settings.Settings.Builder builder70 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder70.put("index.uuid", 0L);
        java.lang.String str75 = builder73.get("");
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder73.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder76.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder76.putNull("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings82 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean84 = indexScopedSettings82.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap87 = settings85.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings88 = indexScopedSettings82.applySettings(settings85);
        java.lang.String[] strArray94 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray96 = settings88.getAsArray("index.version.created", strArray94, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder97 = builder76.extendArray("index.version.created_string", strArray96);
        java.lang.String[] strArray98 = settings65.getAsArray("index.number_of_shards", strArray96);
        java.lang.String[] strArray99 = settings6.getAsArray("index.", strArray96);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(timeValue33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10000 + "'", int34 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig60);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(indexScopedSettings82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strMap87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(strArray98);
        org.junit.Assert.assertNotNull(strArray99);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder4.creationDate((long) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int32 = builder31.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder31.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder34.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = settings37.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings41.getGroups("index.uuid");
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray53 = settings41.getAsArray("", strArray51, (java.lang.Boolean) false);
        java.lang.String[] strArray55 = settings37.getAsArray("index.version.minimum_compatible", strArray51, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder34.settings(settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder34.creationDate((long) 10);
        java.lang.String[] strArray80 = new java.lang.String[] { "index.", "index.version.upgraded_string", "", "index.creation_date", "index.shared_filesystem", "index.auto_expand_replicas", "index.version.upgraded_string", "archived.", "index.uuid", "archived.", "", "index.shared_filesystem.recover_on_any_node", "index.version.created_string", "_na_", "hi!", "index.blocks.read_only", "index.version.created_string", "index.creation_date", "index.version.minimum_compatible", "index.creation_date" };
        java.util.LinkedHashSet<java.lang.String> strSet81 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = builder34.putActiveAllocationIds(10000, (java.util.Set<java.lang.String>) strSet81);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder84 = builder28.putActiveAllocationIds((int) (byte) 10, (java.util.Set<java.lang.String>) strSet81);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder86 = builder84.version((long) 10000);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData88 = builder86.mapping("archived.");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(mappingMetaData88);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder3.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder3.loadFromSource("index.auto_expand_replicas");
        java.nio.file.Path path20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder21 = builder3.loadFromPath(path20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = indexSettings21.scopedSettings;
        long long26 = indexSettings21.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 60000L + "'", long26 == 60000L);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        long long7 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.numberOfShards(1);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.putAlias(aliasMetaData10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean28 = indexSettings21.getisShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean25 = indexSettings21.getqueryStringAnalyzeWildcard();
        indexSettings21.setMaxRescoreWindow((int) '4');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getNodeSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("active_allocations");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        int int27 = indexSettings21.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.shadow_replicas");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.shadow_replicas]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = indexSettings21.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue31 = indexSettings21.getsyncInterval();
        boolean boolean32 = indexSettings21.TTLPurgeDisabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(booleanSetting30);
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = null; // flaky: indexSettings16.getIndexMetaData();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput21 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData20.writeTo(streamOutput21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData20);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData28.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap52 = indexMetaData30.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData30.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters54 = indexMetaData30.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean58 = indexScopedSettings56.isPrivateSetting("index.");
        boolean boolean60 = indexScopedSettings56.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings62.getGroups("index.uuid");
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray74 = settings62.getAsArray("", strArray72, (java.lang.Boolean) false);
        indexScopedSettings56.validate("index.shadow_replicas", settings62);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings62);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting77 = indexSettings76.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters79 = indexMetaData78.includeFilters();
        indexSettings76.indexMetaData = indexMetaData78;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData78);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters82 = indexMetaData78.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff83 = indexMetaData30.diff(indexMetaData78);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff84 = indexMetaData28.diff(indexMetaData30);
        org.elasticsearch.index.Index index85 = indexMetaData28.getMergeSourceIndex();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput86 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData28.writeTo(streamOutput86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNull(discoveryNodeFilters54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(booleanSetting77);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertNull(discoveryNodeFilters79);
        org.junit.Assert.assertNull(discoveryNodeFilters82);
        org.junit.Assert.assertNotNull(indexMetaDataDiff83);
        org.junit.Assert.assertNotNull(indexMetaDataDiff84);
        org.junit.Assert.assertNull(index85);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        int int7 = builder4.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.index("index.shadow_replicas");
        // The following exception was thrown during execution in test generation
        try {
            long long11 = builder9.primaryTerm(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("index.blocks.read_only");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(wildcardSetting5);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.uuid", 0L);
        java.lang.String str31 = builder29.get("");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder29.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings37 = settings35.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = settings37.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction40 = null;
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder29.putProperties(strMap38, strPredicate39, strFunction40);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder29.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("index.blocks.metadata", (long) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings25.validate(builder42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Failed to parse value [-1] cannot be parsed to boolean [ true/1/on/yes OR false/0/off/no ]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff28 = indexMetaData0.readDiffFrom(streamInput27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap27 = indexMetaData0.getCustoms();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput28 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_SHRINK_SOURCE_NAME;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder1 = null;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings2.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = settings2.getAsSettings("");
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue12 = settings6.getAsBytesSize("index.", byteSizeValue11);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params14 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = settings6.toXContent(xContentBuilder13, params14);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = strSetting0.toXContent(xContentBuilder1, params14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSetting0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNull(byteSizeValue12);
        org.junit.Assert.assertNotNull(params14);
        org.junit.Assert.assertNull(xContentBuilder15);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.isPrivateSetting("index.");
        boolean boolean10 = indexScopedSettings6.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray24 = settings12.getAsArray("", strArray22, (java.lang.Boolean) false);
        indexScopedSettings6.validate("index.shadow_replicas", settings12);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings12);
        org.elasticsearch.index.translog.Translog.Durability durability27 = null;
        indexSettings26.setTranslogDurability(durability27);
        boolean boolean29 = indexSettings26.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer32 = null;
        indexScopedSettings30.addSettingsUpdateConsumer(settingsSetting31, settingsConsumer32);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting35 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer36 = null;
        indexScopedSettings34.addSettingsUpdateConsumer(settingsSetting35, settingsConsumer36);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings30.get(settingsSetting35);
        org.elasticsearch.common.settings.Settings settings39 = indexSettings26.getValue(settingsSetting35);
        java.lang.String str40 = indexSettings26.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting41 = indexSettings26.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = indexSettings26.indexMetaData;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff43 = indexMetaData0.diff(indexMetaData42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData42);
        org.elasticsearch.common.io.stream.StreamInput streamInput45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = indexMetaData42.readFrom(streamInput45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settingsSetting35);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaDataDiff43);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.nodeSettings;
        indexSettings21.maxRescoreWindow = 0;
        boolean boolean26 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        boolean boolean33 = indexScopedSettings29.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        indexScopedSettings29.validate("index.shadow_replicas", settings35);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        org.elasticsearch.index.translog.Translog.Durability durability50 = null;
        indexSettings49.setTranslogDurability(durability50);
        org.elasticsearch.common.settings.Settings settings52 = indexSettings49.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting53 = indexSettings49.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = indexSettings49.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters56 = indexMetaData55.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters57 = indexMetaData55.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData55);
        org.elasticsearch.Version version59 = indexMetaData55.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean63 = indexScopedSettings61.isPrivateSetting("index.");
        boolean boolean65 = indexScopedSettings61.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap69 = settings67.getGroups("index.uuid");
        java.lang.String[] strArray77 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray79 = settings67.getAsArray("", strArray77, (java.lang.Boolean) false);
        indexScopedSettings61.validate("index.shadow_replicas", settings67);
        org.elasticsearch.index.IndexSettings indexSettings81 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings67);
        org.elasticsearch.index.translog.Translog.Durability durability82 = null;
        indexSettings81.setTranslogDurability(durability82);
        boolean boolean84 = indexSettings81.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings85 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting86 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer87 = null;
        indexScopedSettings85.addSettingsUpdateConsumer(settingsSetting86, settingsConsumer87);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings89 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting90 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer91 = null;
        indexScopedSettings89.addSettingsUpdateConsumer(settingsSetting90, settingsConsumer91);
        org.elasticsearch.common.settings.Settings settings93 = indexScopedSettings85.get(settingsSetting90);
        org.elasticsearch.common.settings.Settings settings94 = indexSettings81.getValue(settingsSetting90);
        java.lang.String str95 = indexSettings81.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting96 = indexSettings81.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData97 = indexSettings81.indexMetaData;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff98 = indexMetaData55.diff(indexMetaData97);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings99 = new org.elasticsearch.common.settings.IndexScopedSettings(settings27, indexScopedSettings54, indexMetaData55);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(booleanSetting53);
        org.junit.Assert.assertNotNull(indexScopedSettings54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNull(discoveryNodeFilters56);
        org.junit.Assert.assertNull(discoveryNodeFilters57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings85);
        org.junit.Assert.assertNotNull(settingsSetting86);
        org.junit.Assert.assertNotNull(indexScopedSettings89);
        org.junit.Assert.assertNotNull(settingsSetting90);
        org.junit.Assert.assertNotNull(settings93);
        org.junit.Assert.assertNotNull(settings94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting96);
        org.junit.Assert.assertNotNull(indexMetaData97);
        org.junit.Assert.assertNotNull(indexMetaDataDiff98);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.elasticsearch.common.io.stream.StreamInput streamInput0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.readSettingsFromStream(streamInput0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "index.number_of_shards", "hi!", "archived.", "index.", "index.version.created", "index.data_path", "hi!", "index.version.upgraded_string", "index.shared_filesystem.recover_on_any_node", "primary_terms", "index.shared_filesystem.recover_on_any_node", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder3.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList27);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        org.elasticsearch.Version version46 = null;
        org.elasticsearch.Version version47 = settings32.getAsVersion("index.number_of_shards", version46);
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings32);
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray62 = settings50.getAsArray("", strArray60, (java.lang.Boolean) false);
        java.lang.String[] strArray63 = settings32.getAsArray("hi!", strArray60);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder30.putArray("primary_terms", strArray63);
        java.lang.String[] strArray66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder67 = builder30.putArray("index.creation_date", strArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNull(version47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte8 = state7.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.state(state7);
        int int10 = builder9.numberOfShards();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.putAlias(builder11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings26.applySettings(settings29);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings26.applySettings(settings33);
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.common.unit.SizeValue sizeValue37 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue38 = settings33.getAsSize("index.shadow_replicas", sizeValue37);
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings33);
        java.lang.String str42 = settings33.get("state-");
        java.lang.String str45 = settings33.get("index.version.minimum_compatible", "index.shared_filesystem.recover_on_any_node");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings33.getAsGroups(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(sizeValue38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "index.shared_filesystem.recover_on_any_node" + "'", str45, "index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(strMap47);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings17.applySettings(settings20);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings17.applySettings(settings24);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings17.get(settingsSetting26);
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings30 = settings28.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings30.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean36 = indexScopedSettings34.isPrivateSetting("index.");
        boolean boolean38 = indexScopedSettings34.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings40.getGroups("index.uuid");
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray52 = settings40.getAsArray("", strArray50, (java.lang.Boolean) false);
        indexScopedSettings34.validate("index.shadow_replicas", settings40);
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings40);
        boolean boolean56 = indexSettings54.matchesIndexName("");
        long long57 = indexSettings54.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue58 = indexSettings54.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = settings30.getAsBytesSize("primary_terms", byteSizeValue58);
        org.elasticsearch.common.settings.Settings.Builder builder60 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder60.put("index.uuid", 0L);
        java.lang.String str65 = builder63.get("");
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder66.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder66.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder66.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder72 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder72.put("index.uuid", 0L);
        java.lang.String str77 = builder75.get("");
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder75.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder75.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder75.put("", true);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder75.put("primary_terms", 100.0f);
        boolean boolean88 = indexScopedSettings17.updateSettings(settings30, builder71, builder75, "");
        org.elasticsearch.common.settings.Settings settings90 = settings30.getByPrefix("index.shared_filesystem.recover_on_any_node");
        indexScopedSettings12.validate(settings90);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 60000L + "'", long57 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue58);
        org.junit.Assert.assertNotNull(byteSizeValue59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(settings90);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = indexScopedSettings0.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings21.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings25 = settings21.getAsSettings("");
        java.lang.Boolean boolean28 = settings25.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue30 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue31 = settings25.getAsBytesSize("index.", byteSizeValue30);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = null;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings37 = settings33.getAsSettings("");
        java.lang.Boolean boolean40 = settings37.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue42 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue43 = settings37.getAsBytesSize("index.", byteSizeValue42);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params45 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = settings37.toXContent(xContentBuilder44, params45);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder47 = settings25.toXContent(xContentBuilder32, params45);
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings20.dryRun(settings25);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings25.getAsGroups(false);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + boolean28 + "' != '" + true + "'", boolean28, true);
        org.junit.Assert.assertNull(byteSizeValue31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertEquals("'" + boolean40 + "' != '" + true + "'", boolean40, true);
        org.junit.Assert.assertNull(byteSizeValue43);
        org.junit.Assert.assertNotNull(params45);
        org.junit.Assert.assertNull(xContentBuilder46);
        org.junit.Assert.assertNull(xContentBuilder47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(strMap50);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        boolean boolean12 = indexScopedSettings8.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings14.getGroups("index.uuid");
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray26 = settings14.getAsArray("", strArray24, (java.lang.Boolean) false);
        indexScopedSettings8.validate("index.shadow_replicas", settings14);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings14);
        org.elasticsearch.index.translog.Translog.Durability durability29 = null;
        indexSettings28.setTranslogDurability(durability29);
        org.elasticsearch.common.settings.Settings settings31 = indexSettings28.getSettings();
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder4.settings(settings31);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.putAlias(aliasMetaData34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder4.creationDate((long) 10);
        long long29 = builder28.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.removeAllAliases();
        long long31 = builder30.version();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder30.primaryTerm((int) (short) 10, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder4.settings(settings27);
        java.lang.String str42 = settings27.get("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.isPrivateSetting("index.");
        boolean boolean47 = indexScopedSettings43.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings49.getGroups("index.uuid");
        java.lang.String[] strArray59 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray61 = settings49.getAsArray("", strArray59, (java.lang.Boolean) false);
        indexScopedSettings43.validate("index.shadow_replicas", settings49);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting64 = indexScopedSettings43.get("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int66 = indexMetaData65.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = new org.elasticsearch.common.settings.IndexScopedSettings(settings27, indexScopedSettings43, indexMetaData65);
        boolean boolean69 = indexMetaData65.isSameUUID("index.version.created_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap70 = indexMetaData65.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap71 = indexMetaData65.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters72 = indexMetaData65.excludeFilters();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(wildcardSetting64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertNull(discoveryNodeFilters72);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig35 = indexSettings21.getmergePolicyConfig();
        boolean boolean36 = indexSettings21.queryStringAllowLeadingWildcard;
        java.util.function.Predicate<java.lang.String> strPredicate37 = indexSettings21.indexNameMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(mergePolicyConfig35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strPredicate37);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.settings.Settings settings24 = indexSettings21.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        long long26 = indexSettings21.gcDeletesInMillis;
        indexSettings21.setMaxResultWindow((int) ' ');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 60000L + "'", long26 == 60000L);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.shadow_replicas");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.version((long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.shadow_replicas]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.applySettings(settings7);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings8.getAsGroups();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.upgraded_string");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = settings8.getAsMemory("index.version.upgraded", "hi!");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.version.upgraded] with value [hi!] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        long long7 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.numberOfShards(1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder6.state(state11);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder6.putMapping(mappingMetaData13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder4.creationDate((long) 10);
        java.lang.String[] strArray50 = new java.lang.String[] { "index.", "index.version.upgraded_string", "", "index.creation_date", "index.shared_filesystem", "index.auto_expand_replicas", "index.version.upgraded_string", "archived.", "index.uuid", "archived.", "", "index.shared_filesystem.recover_on_any_node", "index.version.created_string", "_na_", "hi!", "index.blocks.read_only", "index.version.created_string", "index.creation_date", "index.version.minimum_compatible", "index.creation_date" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder4.putActiveAllocationIds(10000, (java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder4.putMapping(mappingMetaData54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting4 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer5 = null;
        indexScopedSettings3.addSettingsUpdateConsumer(settingsSetting4, settingsConsumer5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer9 = null;
        indexScopedSettings7.addSettingsUpdateConsumer(settingsSetting8, settingsConsumer9);
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings3.get(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings3.dryRun(settings12);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings15.applySettings(settings18);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings15.applySettings(settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings15.get(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13, strPredicate14, indexScopedSettings15);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = indexScopedSettings15.getDEFAULT_SCOPED_SETTINGS();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertNotNull(settingsSetting4);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder3.put("index.version.upgraded_string", (float) 1);
        java.lang.String str20 = builder3.remove("index.number_of_shards");
        org.elasticsearch.common.settings.Settings settings21 = builder3.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(settings21);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.excludeFilters();
        java.lang.Object obj2 = null;
        boolean boolean3 = indexMetaData0.equals(obj2);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mappingOrDefault("hi!");
        int int6 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.common.xcontent.XContentParser xContentParser8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.isPrivateSetting("index.");
        boolean boolean14 = indexScopedSettings10.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings16.getGroups("index.uuid");
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray28 = settings16.getAsArray("", strArray26, (java.lang.Boolean) false);
        indexScopedSettings10.validate("index.shadow_replicas", settings16);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings16);
        org.elasticsearch.index.translog.Translog.Durability durability31 = null;
        indexSettings30.setTranslogDurability(durability31);
        org.elasticsearch.common.unit.TimeValue timeValue33 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings30.setGCDeletes(timeValue33);
        org.apache.lucene.index.MergePolicy mergePolicy35 = indexSettings30.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher36 = indexSettings30.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = indexMetaData0.fromXContent(xContentParser8, parseFieldMatcher36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(timeValue33);
        org.junit.Assert.assertNotNull(mergePolicy35);
        org.junit.Assert.assertNotNull(parseFieldMatcher36);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getTranslogDurability();
        boolean boolean28 = indexSettings21.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting29 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.unit.TimeValue timeValue30 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexSettings21.setGCDeletes(timeValue30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strSetting29);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.index.Index index3 = indexMetaData0.getIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(index3);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.creationDate((long) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long10 = builder8.primaryTerm((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.common.settings.Settings settings26 = indexMetaData0.getSettings();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = null;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings32 = settings28.getAsSettings("");
        java.lang.Boolean boolean35 = settings32.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue37 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue38 = settings32.getAsBytesSize("index.", byteSizeValue37);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params40 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = settings32.toXContent(xContentBuilder39, params40);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder27, params40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertEquals("'" + boolean35 + "' != '" + true + "'", boolean35, true);
        org.junit.Assert.assertNull(byteSizeValue38);
        org.junit.Assert.assertNotNull(params40);
        org.junit.Assert.assertNull(xContentBuilder41);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        boolean boolean21 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int24 = builder23.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder23.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.creationDate((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        boolean boolean34 = indexScopedSettings30.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.uuid");
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray48 = settings36.getAsArray("", strArray46, (java.lang.Boolean) false);
        indexScopedSettings30.validate("index.shadow_replicas", settings36);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings36);
        org.elasticsearch.index.translog.Translog.Durability durability51 = null;
        indexSettings50.setTranslogDurability(durability51);
        org.elasticsearch.common.settings.Settings settings53 = indexSettings50.getSettings();
        boolean boolean54 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings53);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder26.settings(settings53);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(settings53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.version.created]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean23 = indexSettings21.TTLPurgeDisabled;
        boolean boolean24 = indexSettings21.hasCustomDataPath();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings28.applySettings(settings31);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings35.applySettings(settings38);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = settings42.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings35.applySettings(settings44);
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings35.getScope();
        java.util.function.Predicate<java.lang.String> strPredicate48 = indexScopedSettings35.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.isPrivateSetting("index.");
        boolean boolean53 = indexScopedSettings49.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.uuid");
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray67 = settings55.getAsArray("", strArray65, (java.lang.Boolean) false);
        indexScopedSettings49.validate("index.shadow_replicas", settings55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean71 = indexScopedSettings69.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings72.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings75 = indexScopedSettings69.applySettings(settings72);
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings77 = indexScopedSettings69.applySettings(settings76);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings79 = indexScopedSettings49.copy(settings77, indexMetaData78);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings80 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean82 = indexScopedSettings80.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings83 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap85 = settings83.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings86 = indexScopedSettings80.applySettings(settings83);
        org.elasticsearch.common.settings.Settings settings87 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings88 = indexScopedSettings80.applySettings(settings87);
        indexScopedSettings49.validate(settings88);
        org.elasticsearch.index.IndexSettings indexSettings90 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings31, strPredicate48, indexScopedSettings49);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting91 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer92 = null;
        indexScopedSettings49.addSettingsUpdateConsumer(settingsSetting91, settingsConsumer92);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer94 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsSetting91, settingsBiConsumer94);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(strPredicate48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertNotNull(indexScopedSettings79);
        org.junit.Assert.assertNotNull(indexScopedSettings80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(settingsSetting91);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder4.numberOfReplicas((int) ' ');
        java.lang.String[] strArray30 = new java.lang.String[] { "index.blocks.read_only", "index.version.created", "index.", "index.uuid", "index.uuid", "index.uuid", "index.version.created_string", "index.", "index.", "_na_", "state-", "_na_", "state-", "index.shadow_replicas", "index.blocks.read_only", "index.shared_filesystem", "_na_", "index.blocks.read_only" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder4.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet31);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = builder33.primaryTerm((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        boolean boolean12 = indexScopedSettings8.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings14.getGroups("index.uuid");
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray26 = settings14.getAsArray("", strArray24, (java.lang.Boolean) false);
        indexScopedSettings8.validate("index.shadow_replicas", settings14);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings14);
        org.elasticsearch.index.translog.Translog.Durability durability29 = null;
        indexSettings28.setTranslogDurability(durability29);
        org.elasticsearch.common.settings.Settings settings31 = indexSettings28.getSettings();
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder4.settings(settings31);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder4.putAlias(aliasMetaData34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        java.lang.String[] strArray30 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.", "index.blocks.read", "index.auto_expand_replicas", "index.blocks.read_only", "index.blocks.read", "state-", "index.uuid", "index.version.upgraded_string", "index.auto_expand_replicas", "archived.", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder16.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList31);
        java.io.InputStream inputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder36 = builder16.loadFromStream("index.blocks.read", inputStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean75 = indexScopedSettings73.isPrivateSetting("index.");
        boolean boolean77 = indexScopedSettings73.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings79.getGroups("index.uuid");
        java.lang.String[] strArray89 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray91 = settings79.getAsArray("", strArray89, (java.lang.Boolean) false);
        indexScopedSettings73.validate("index.shadow_replicas", settings79);
        org.elasticsearch.index.IndexSettings indexSettings93 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings79);
        org.elasticsearch.index.translog.Translog.Durability durability94 = null;
        indexSettings93.setTranslogDurability(durability94);
        org.elasticsearch.common.unit.TimeValue timeValue96 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings93.setGCDeletes(timeValue96);
        indexSettings21.refreshInterval = timeValue96;
        boolean boolean99 = indexSettings21.TTLPurgeDisabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(timeValue96);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder4.creationDate((long) 10);
        long long29 = builder28.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.removeAllAliases();
        int int31 = builder28.numberOfReplicas();
        int int32 = builder28.numberOfReplicas();
        long long33 = builder28.version();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = settings4.getAsSettings("");
        java.lang.Boolean boolean11 = settings8.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = settings8.getAsBytesSize("index.", byteSizeValue13);
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.uuid", 0L);
        java.lang.String str20 = builder18.get("");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder18.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = settings24.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings26.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction29 = null;
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder18.putProperties(strMap27, strPredicate28, strFunction29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder18.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.uuid", 0L);
        java.lang.String str38 = builder36.get("");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder36.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = settings42.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings44.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction47 = null;
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder36.putProperties(strMap45, strPredicate46, strFunction47);
        boolean boolean50 = indexScopedSettings0.updateSettings(settings8, builder18, builder48, "index.uuid");
        boolean boolean51 = settings8.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings8.getAsGroups();
        org.elasticsearch.common.unit.SizeValue sizeValue54 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue55 = settings8.getAsSize("hi!", sizeValue54);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + boolean11 + "' != '" + true + "'", boolean11, true);
        org.junit.Assert.assertNull(byteSizeValue14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNull(sizeValue55);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting4 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer5 = null;
        indexScopedSettings3.addSettingsUpdateConsumer(settingsSetting4, settingsConsumer5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer9 = null;
        indexScopedSettings7.addSettingsUpdateConsumer(settingsSetting8, settingsConsumer9);
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings3.get(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings3.dryRun(settings12);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings15.applySettings(settings18);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings15.applySettings(settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings15.get(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13, strPredicate14, indexScopedSettings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters28 = indexMetaData27.includeFilters();
        long long29 = indexMetaData27.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData27.mappingOrDefault("state-");
        boolean boolean32 = false; // flaky: indexSettings26.updateIndexMetaData(indexMetaData27);
        org.elasticsearch.common.io.stream.StreamInput streamInput33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff34 = indexMetaData27.readDiffFrom(streamInput33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertNotNull(settingsSetting4);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNull(discoveryNodeFilters28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.syncInterval;
        int int28 = indexSettings21.maxResultWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean23 = indexSettings21.isShadowReplicaIndex;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "index.number_of_shards", "hi!", "archived.", "index.", "index.version.created", "index.data_path", "hi!", "index.version.upgraded_string", "index.shared_filesystem.recover_on_any_node", "primary_terms", "index.shared_filesystem.recover_on_any_node", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder3.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList27);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        org.elasticsearch.Version version46 = null;
        org.elasticsearch.Version version47 = settings32.getAsVersion("index.number_of_shards", version46);
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings32);
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray62 = settings50.getAsArray("", strArray60, (java.lang.Boolean) false);
        java.lang.String[] strArray63 = settings32.getAsArray("hi!", strArray60);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder30.putArray("primary_terms", strArray63);
        java.nio.file.Path path65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder66 = builder64.loadFromPath(path65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNull(version47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.isPrivateSetting("index.");
        boolean boolean10 = indexScopedSettings6.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray24 = settings12.getAsArray("", strArray22, (java.lang.Boolean) false);
        indexScopedSettings6.validate("index.shadow_replicas", settings12);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings12);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = indexSettings26.scopedSettings;
        org.elasticsearch.common.settings.Settings settings28 = indexSettings26.nodeSettings;
        java.lang.String[] strArray30 = settings28.getAsArray("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder31 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem");
        java.lang.String str34 = builder33.index();
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.uuid", 0L);
        java.lang.String str40 = builder38.get("");
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder41.putNull("hi!");
        java.lang.String str45 = builder43.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder43.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean52 = indexScopedSettings50.isPrivateSetting("index.");
        boolean boolean54 = indexScopedSettings50.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings56.getGroups("index.uuid");
        java.lang.String[] strArray66 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray68 = settings56.getAsArray("", strArray66, (java.lang.Boolean) false);
        indexScopedSettings50.validate("index.shadow_replicas", settings56);
        org.elasticsearch.index.IndexSettings indexSettings70 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings56);
        org.elasticsearch.index.translog.Translog.Durability durability71 = null;
        indexSettings70.setTranslogDurability(durability71);
        org.elasticsearch.common.unit.TimeValue timeValue73 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings70.setGCDeletes(timeValue73);
        org.elasticsearch.Version version75 = indexSettings70.version;
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder43.put("active_allocations", version75);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder76.put("active_allocations", (float) 10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder80 = builder33.settings(builder76);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = indexScopedSettings0.updateDynamicSettings(settings28, builder31, builder76, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "index.shared_filesystem" + "'", str34, "index.shared_filesystem");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(timeValue73);
        org.junit.Assert.assertNotNull(version75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.applySettings(settings7);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue11 = settings7.getAsRatio("index.uuid", "index.auto_expand_replicas");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.auto_expand_replicas]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        long long7 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.numberOfShards(1);
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.uuid", 0L);
        java.lang.String str15 = builder13.get("");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.version.created", "hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder6.settings(builder19);
        java.util.Set<java.lang.String> strSet22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder20.putActiveAllocationIds((int) (byte) 1, strSet22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        boolean boolean25 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig26 = indexSettings21.getmergePolicyConfig();
        boolean boolean27 = indexSettings21.defaultAllowUnmappedFields;
        boolean boolean28 = indexSettings21.isShadowReplicaIndex;
        java.lang.Class<?> wildcardClass29 = indexSettings21.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        int int26 = indexSettings21.getNumberOfShards();
        long long27 = indexSettings21.gcDeletesInMillis;
        boolean boolean28 = indexSettings21.isWarmerEnabled();
        indexSettings21.setTTLPurgeDisabled(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 60000L + "'", long27 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder1.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("index.version.created");
        // The following exception was thrown during execution in test generation
        try {
            long long8 = builder6.primaryTerm((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem");
        java.lang.String str2 = builder1.index();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putMapping("index.number_of_replicas", "index.version.created");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.shared_filesystem" + "'", str2, "index.shared_filesystem");
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher18 = null; // flaky: indexSettings16.getParseFieldMatcher();
        org.elasticsearch.common.unit.TimeValue timeValue19 = null; // flaky: indexSettings16.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.isPrivateSetting("index.");
        boolean boolean25 = indexScopedSettings21.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        indexScopedSettings21.validate("index.shadow_replicas", settings27);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings27);
        indexSettings41.setEnableWarmer(true);
        indexSettings41.maxResultWindow = (byte) 100;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue46 = indexSettings41.flushThresholdSize;
// flaky:         indexSettings16.flushThresholdSize = byteSizeValue46;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting48 = null; // flaky: indexSettings16.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher18);
// flaky:         org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(byteSizeValue46);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting48);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        indexSettings21.warmerEnabled = false;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters27 = indexMetaData23.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData29 = indexMetaData23.mapping("index.number_of_shards");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNull(discoveryNodeFilters27);
        org.junit.Assert.assertNull(mappingMetaData29);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.applySettings(settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.get(settingsSetting9);
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.uuid", 0L);
        java.lang.String str16 = builder14.get("");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder14.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder19.replacePropertyPlaceholders();
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.uuid]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settingsSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        indexSettings21.maxRescoreWindow = 0;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting52 = indexSettings51.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting54 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer55 = null;
        indexScopedSettings53.addSettingsUpdateConsumer(settingsSetting54, settingsConsumer55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings53.get(settingsSetting58);
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings53.dryRun(settings62);
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings63);
        indexSettings51.settings = settings64;
        indexSettings21.settings = settings64;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting67 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(booleanSetting52);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertNotNull(settingsSetting54);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(booleanSetting67);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        boolean boolean56 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        indexSettings78.setEnableWarmer(true);
        java.lang.String str81 = indexSettings78.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = indexSettings78.getIndexMetaData();
        indexSettings21.indexMetaData = indexMetaData82;
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap84 = indexMetaData82.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters85 = indexMetaData82.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap86 = indexMetaData82.getMappings();
        // The following exception was thrown during execution in test generation
        try {
            long long88 = indexMetaData82.primaryTerm((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap84);
        org.junit.Assert.assertNull(discoveryNodeFilters85);
        org.junit.Assert.assertNotNull(strImmutableOpenMap86);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder4.settings(settings27);
        java.lang.String str42 = settings27.get("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.isPrivateSetting("index.");
        boolean boolean47 = indexScopedSettings43.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings49.getGroups("index.uuid");
        java.lang.String[] strArray59 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray61 = settings49.getAsArray("", strArray59, (java.lang.Boolean) false);
        indexScopedSettings43.validate("index.shadow_replicas", settings49);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting64 = indexScopedSettings43.get("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int66 = indexMetaData65.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = new org.elasticsearch.common.settings.IndexScopedSettings(settings27, indexScopedSettings43, indexMetaData65);
        boolean boolean69 = indexMetaData65.isSameUUID("index.version.created_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap70 = indexMetaData65.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap71 = indexMetaData65.getMappings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData73 = indexMetaData65.mapping("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(wildcardSetting64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertNull(mappingMetaData73);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        boolean boolean56 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        indexSettings78.setEnableWarmer(true);
        java.lang.String str81 = indexSettings78.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = indexSettings78.getIndexMetaData();
        indexSettings21.indexMetaData = indexMetaData82;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder84 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData82, xContentBuilder84, params85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(indexMetaData82);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder4.creationDate((long) 10);
        long long29 = builder28.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.removeAllAliases();
        long long31 = builder30.version();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder30.putAlias(aliasMetaData32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexSettings21.getScopedSettings();
        java.util.function.Predicate<java.lang.String> strPredicate27 = indexScopedSettings26.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int29 = indexMetaData28.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings30.applySettings(settings33);
        java.lang.String str38 = settings33.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting41 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer42 = null;
        indexScopedSettings40.addSettingsUpdateConsumer(settingsSetting41, settingsConsumer42);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData28, settings33, strPredicate39, indexScopedSettings40);
        org.elasticsearch.common.settings.Settings.Builder builder45 = null;
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.uuid", 0L);
        java.lang.String str51 = builder49.get("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder49.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings57 = settings55.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap58 = settings57.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate59 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction60 = null;
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder49.putProperties(strMap58, strPredicate59, strFunction60);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder49.replacePropertyPlaceholders();
        java.lang.String[] strArray76 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.", "index.blocks.read", "index.auto_expand_replicas", "index.blocks.read_only", "index.blocks.read", "state-", "index.uuid", "index.version.upgraded_string", "index.auto_expand_replicas", "archived.", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder62.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList77);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean81 = indexScopedSettings26.updateDynamicSettings(settings33, builder45, builder79, "index.version.created_string");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(strPredicate27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(settingsSetting41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        int int7 = builder4.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.state(state8);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder4.primaryTerm(100, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte8 = state7.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.state(state7);
        long long10 = builder4.version();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean26 = indexSettings21.getisShadowReplicaIndex();
        boolean boolean27 = indexSettings21.queryStringLenient;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.hasDynamicSetting("index.shared_filesystem");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.common.settings.Settings settings26 = indexMetaData0.getSettings();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue29 = settings26.getAsRatio("index.version.created", "index.blocks.read_only");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Ratio should be in [0-1.0], got [5000099.0]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(settings26);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        int int27 = builder26.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom29 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder26.putCustom("index.number_of_shards", custom29);
        int int31 = builder30.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.applySettings(settings7);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings7);
        org.elasticsearch.common.unit.SizeValue sizeValue11 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue12 = settings7.getAsSize("index.shadow_replicas", sizeValue11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = settings7.getAsStructuredMap();
        java.lang.Boolean boolean16 = settings7.getAsBoolean("index.version.created", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue18 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue19 = settings7.getAsSize("index.version.upgraded", sizeValue18);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(sizeValue12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + false + "'", boolean16, false);
        org.junit.Assert.assertNull(sizeValue19);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.version.created_string");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = indexSettings21.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue31 = indexSettings21.getsyncInterval();
        java.lang.String str32 = indexSettings21.customDataPath();
        boolean boolean33 = indexSettings21.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(booleanSetting30);
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        int int7 = builder4.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.state(state8);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.putMapping(mappingMetaData10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData0.mappingOrDefault("index.shared_filesystem");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput4 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData3);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability23 = indexSettings21.durability;
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        boolean boolean26 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = indexSettings21.getIndexMetaData();
        indexSettings21.maxRescoreWindow = (short) 100;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(indexMetaData27);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = indexSettings21.updateIndexMetaData(indexMetaData27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(booleanSetting26);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting25 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting26 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(timeValueSetting25);
        org.junit.Assert.assertNotNull(timeValueSetting26);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        indexSettings21.maxResultWindow = (byte) -1;
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        int int26 = indexSettings21.maxResultWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting5 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer6 = null;
        indexScopedSettings4.addSettingsUpdateConsumer(settingsSetting5, settingsConsumer6);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.get(settingsSetting5);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.dryRun(settings9);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean16 = indexScopedSettings14.isPrivateSetting("index.");
        boolean boolean18 = indexScopedSettings14.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getGroups("index.uuid");
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray32 = settings20.getAsArray("", strArray30, (java.lang.Boolean) false);
        indexScopedSettings14.validate("index.shadow_replicas", settings20);
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings20);
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings34.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue36 = indexSettings34.globalCheckpointInterval;
        org.elasticsearch.common.unit.TimeValue timeValue37 = settings11.getAsTime("index.version.created", timeValue36);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue40 = settings11.getAsRatio("index.shared_filesystem.recover_on_any_node", "index.data_path");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.data_path]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settingsSetting5);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertNotNull(timeValue37);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        boolean boolean56 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        indexSettings78.setEnableWarmer(true);
        java.lang.String str81 = indexSettings78.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = indexSettings78.getIndexMetaData();
        indexSettings21.indexMetaData = indexMetaData82;
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap84 = indexMetaData82.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData86 = indexMetaData82.mapping("index.blocks.metadata");
        org.elasticsearch.common.io.stream.StreamInput streamInput87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff88 = indexMetaData82.readDiffFrom(streamInput87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap84);
        org.junit.Assert.assertNull(mappingMetaData86);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.isPrivateSetting("index.");
        boolean boolean8 = indexScopedSettings4.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings10.getGroups("index.uuid");
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray22 = settings10.getAsArray("", strArray20, (java.lang.Boolean) false);
        indexScopedSettings4.validate("index.shadow_replicas", settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting25 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer26 = null;
        indexScopedSettings24.addSettingsUpdateConsumer(settingsSetting25, settingsConsumer26);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings24.get(settingsSetting29);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer33 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings4.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer33, settingsConsumer34);
        java.util.function.Predicate<java.lang.String> strPredicate36 = indexScopedSettings4.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = indexScopedSettings37.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings62 = settings58.getAsSettings("");
        java.lang.Boolean boolean65 = settings62.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue67 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue68 = settings62.getAsBytesSize("index.", byteSizeValue67);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder69 = null;
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings70.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings74 = settings70.getAsSettings("");
        java.lang.Boolean boolean77 = settings74.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue79 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue80 = settings74.getAsBytesSize("index.", byteSizeValue79);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder81 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params82 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder83 = settings74.toXContent(xContentBuilder81, params82);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder84 = settings62.toXContent(xContentBuilder69, params82);
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings57.dryRun(settings62);
        org.elasticsearch.common.settings.Settings settings86 = indexScopedSettings4.dryRun(settings62);
        indexScopedSettings0.validate(settings86);
        java.util.Map<java.lang.String, java.lang.String> strMap88 = settings86.getAsMap();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settingsSetting25);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertEquals("'" + boolean65 + "' != '" + true + "'", boolean65, true);
        org.junit.Assert.assertNull(byteSizeValue68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertEquals("'" + boolean77 + "' != '" + true + "'", boolean77, true);
        org.junit.Assert.assertNull(byteSizeValue80);
        org.junit.Assert.assertNotNull(params82);
        org.junit.Assert.assertNull(xContentBuilder83);
        org.junit.Assert.assertNull(xContentBuilder84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(strMap88);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        boolean boolean12 = indexScopedSettings8.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings14.getGroups("index.uuid");
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray26 = settings14.getAsArray("", strArray24, (java.lang.Boolean) false);
        indexScopedSettings8.validate("index.shadow_replicas", settings14);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings14);
        org.elasticsearch.index.translog.Translog.Durability durability29 = null;
        indexSettings28.setTranslogDurability(durability29);
        org.elasticsearch.common.settings.Settings settings31 = indexSettings28.getSettings();
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder4.settings(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.creationDate((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder33.creationDate(1000L);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.putAlias(aliasMetaData38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.io.stream.StreamOutput streamOutput1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings0, streamOutput1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.blocks.read_only");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.blocks.read_only]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        boolean boolean30 = indexScopedSettings26.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        indexScopedSettings26.validate("index.shadow_replicas", settings32);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings32);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting47 = indexSettings46.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData48.includeFilters();
        indexSettings46.indexMetaData = indexMetaData48;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters52 = indexMetaData48.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff53 = indexMetaData0.diff(indexMetaData48);
        boolean boolean55 = indexMetaData48.isSameUUID("index.version.minimum_compatible");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData48, xContentBuilder56, params57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(booleanSetting47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
        org.junit.Assert.assertNull(discoveryNodeFilters52);
        org.junit.Assert.assertNotNull(indexMetaDataDiff53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.xcontent.XContentParser xContentParser2 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.isPrivateSetting("index.");
        boolean boolean8 = indexScopedSettings4.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings10.getGroups("index.uuid");
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray22 = settings10.getAsArray("", strArray20, (java.lang.Boolean) false);
        indexScopedSettings4.validate("index.shadow_replicas", settings10);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings10);
        indexSettings24.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings24.getsyncInterval();
        boolean boolean28 = indexSettings24.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig29 = indexSettings24.getmergePolicyConfig();
        org.elasticsearch.index.translog.Translog.Durability durability30 = indexSettings24.durability;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher31 = indexSettings24.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = indexMetaData0.fromXContent(xContentParser2, parseFieldMatcher31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig29);
        org.junit.Assert.assertTrue("'" + durability30 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability30.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher31);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        int int7 = builder4.numberOfShards();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.putAlias(aliasMetaData8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting25 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertNotNull(byteSizeValueSetting25);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "index.number_of_shards", "hi!", "archived.", "index.", "index.version.created", "index.data_path", "hi!", "index.version.upgraded_string", "index.shared_filesystem.recover_on_any_node", "primary_terms", "index.shared_filesystem.recover_on_any_node", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder3.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList27);
        java.nio.file.Path path30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder31 = builder29.loadFromPath(path30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("index.uuid", 0L);
        java.lang.String str24 = builder22.get("");
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings34 = settings30.getAsSettings("");
        java.lang.Boolean boolean37 = settings34.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue39 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue40 = settings34.getAsBytesSize("index.", byteSizeValue39);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = null;
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings42.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings46 = settings42.getAsSettings("");
        java.lang.Boolean boolean49 = settings46.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue52 = settings46.getAsBytesSize("index.", byteSizeValue51);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params54 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = settings46.toXContent(xContentBuilder53, params54);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = settings34.toXContent(xContentBuilder41, params54);
        java.lang.Class<?> wildcardClass57 = settings34.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder28.put("index.version.upgraded_string", (java.lang.Class) wildcardClass57);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder17.put("_all", (java.lang.Class) wildcardClass57);
        java.lang.String[] strArray65 = new java.lang.String[] { "index.creation_date", "index.blocks.read_only", "index.shared_filesystem", "index.uuid" };
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder59.putArray("index.version.upgraded", strArray65);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean71 = indexScopedSettings69.isPrivateSetting("index.");
        boolean boolean73 = indexScopedSettings69.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings75.getGroups("index.uuid");
        java.lang.String[] strArray85 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray87 = settings75.getAsArray("", strArray85, (java.lang.Boolean) false);
        indexScopedSettings69.validate("index.shadow_replicas", settings75);
        org.elasticsearch.index.IndexSettings indexSettings89 = new org.elasticsearch.index.IndexSettings(indexMetaData68, settings75);
        org.elasticsearch.index.translog.Translog.Durability durability90 = null;
        indexSettings89.setTranslogDurability(durability90);
        org.elasticsearch.common.unit.TimeValue timeValue92 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings89.setGCDeletes(timeValue92);
        org.elasticsearch.Version version94 = indexSettings89.getversion();
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder66.put("index.version.minimum_compatible", version94);
        java.lang.String str97 = builder66.get("index.blocks.write");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + boolean37 + "' != '" + true + "'", boolean37, true);
        org.junit.Assert.assertNull(byteSizeValue40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertEquals("'" + boolean49 + "' != '" + true + "'", boolean49, true);
        org.junit.Assert.assertNull(byteSizeValue52);
        org.junit.Assert.assertNotNull(params54);
        org.junit.Assert.assertNull(xContentBuilder55);
        org.junit.Assert.assertNull(xContentBuilder56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(timeValue92);
        org.junit.Assert.assertNotNull(version94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.data_path");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.data_path]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
// flaky:         indexSettings16.maxResultWindow = 0;
        boolean boolean22 = false; // flaky: indexSettings16.isQueryStringLenient();
        boolean boolean23 = false; // flaky: indexSettings16.getqueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig35 = indexSettings21.getmergePolicyConfig();
        boolean boolean36 = indexSettings21.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting37 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(mergePolicyConfig35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(timeValueSetting37);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.Version version26 = indexSettings21.version;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings21.getTranslogSyncInterval();
        long long29 = indexSettings21.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1000L + "'", long29 == 1000L);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "index.number_of_shards", "hi!", "archived.", "index.", "index.version.created", "index.data_path", "hi!", "index.version.upgraded_string", "index.shared_filesystem.recover_on_any_node", "primary_terms", "index.shared_filesystem.recover_on_any_node", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder3.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean53 = indexScopedSettings51.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings54.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings57 = indexScopedSettings51.applySettings(settings54);
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings51.applySettings(settings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = indexScopedSettings31.copy(settings59, indexMetaData60);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap62 = indexMetaData60.getAliases();
        org.elasticsearch.Version version63 = indexMetaData60.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder3.put("_na_", version63);
        java.io.InputStream inputStream66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder67 = builder64.loadFromStream("index.version.created", inputStream66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(strImmutableOpenMap62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.applySettings(settings7);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings7);
        org.elasticsearch.common.unit.SizeValue sizeValue11 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue12 = settings7.getAsSize("index.shadow_replicas", sizeValue11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = settings7.getAsStructuredMap();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue16 = settings7.getAsRatio("index.version.created_string", "archived.");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [archived.]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(sizeValue12);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.blocks.metadata", (long) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.uuid", 0L);
        java.lang.String str25 = builder23.get("");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.uuid", 0L);
        java.lang.String str36 = builder34.get("");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.shared_filesystem", (int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings48 = settings46.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.uuid");
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray62 = settings50.getAsArray("", strArray60, (java.lang.Boolean) false);
        java.lang.String[] strArray64 = settings46.getAsArray("index.version.minimum_compatible", strArray60, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings65.getGroups("index.uuid");
        java.lang.String[] strArray75 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray77 = settings65.getAsArray("", strArray75, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder40.put("", "state-", strArray60, strArray75);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder29.extendArray("archived.", strArray75);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder16.put((java.lang.Object[]) strArray75);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder82 = builder16.put(objDictionary81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        boolean boolean25 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getsyncInterval();
        boolean boolean51 = indexSettings47.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig52 = indexSettings47.getmergePolicyConfig();
        org.elasticsearch.index.translog.Translog.Durability durability53 = indexSettings47.durability;
        indexSettings21.setdurability(durability53);
        int int55 = indexSettings21.getMaxResultWindow();
        org.elasticsearch.common.settings.Settings settings56 = indexSettings21.nodeSettings;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue59 = settings56.getAsRatio("index.creation_date_string", "primary_terms");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [primary_terms]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig52);
        org.junit.Assert.assertTrue("'" + durability53 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability53.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertNotNull(settings56);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        int int27 = builder26.numberOfReplicas();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = builder26.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [archived.]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig25 = indexSettings21.mergeSchedulerConfig;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher26 = indexSettings21.parseFieldMatcher;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        boolean boolean32 = indexScopedSettings28.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        indexScopedSettings28.validate("index.shadow_replicas", settings34);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings34);
        org.elasticsearch.index.translog.Translog.Durability durability49 = null;
        indexSettings48.setTranslogDurability(durability49);
        org.elasticsearch.common.unit.TimeValue timeValue51 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings48.setGCDeletes(timeValue51);
        org.elasticsearch.common.settings.Settings settings53 = indexSettings48.settings;
        boolean boolean54 = indexSettings48.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting56 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer57 = null;
        indexScopedSettings55.addSettingsUpdateConsumer(settingsSetting56, settingsConsumer57);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting60 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer61 = null;
        indexScopedSettings59.addSettingsUpdateConsumer(settingsSetting60, settingsConsumer61);
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings55.get(settingsSetting60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean66 = indexScopedSettings64.isPrivateSetting("index.");
        boolean boolean68 = indexScopedSettings64.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings70.getGroups("index.uuid");
        java.lang.String[] strArray80 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray82 = settings70.getAsArray("", strArray80, (java.lang.Boolean) false);
        indexScopedSettings64.validate("index.shadow_replicas", settings70);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings84 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting85 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer86 = null;
        indexScopedSettings84.addSettingsUpdateConsumer(settingsSetting85, settingsConsumer86);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings88 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting89 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer90 = null;
        indexScopedSettings88.addSettingsUpdateConsumer(settingsSetting89, settingsConsumer90);
        org.elasticsearch.common.settings.Settings settings92 = indexScopedSettings84.get(settingsSetting89);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer93 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer94 = null;
        indexScopedSettings64.addSettingsUpdateConsumer(settingsSetting89, settingsConsumer93, settingsConsumer94);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer96 = null;
        indexScopedSettings55.addSettingsUpdateConsumer(settingsSetting89, settingsConsumer96);
        org.elasticsearch.common.settings.Settings settings98 = indexSettings48.getValue(settingsSetting89);
        indexSettings21.settings = settings98;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig25);
        org.junit.Assert.assertNotNull(parseFieldMatcher26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(timeValue51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings55);
        org.junit.Assert.assertNotNull(settingsSetting56);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertNotNull(settingsSetting60);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(indexScopedSettings84);
        org.junit.Assert.assertNotNull(settingsSetting85);
        org.junit.Assert.assertNotNull(indexScopedSettings88);
        org.junit.Assert.assertNotNull(settingsSetting89);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(settings98);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.putNull("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings12.applySettings(settings15);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray26 = settings18.getAsArray("index.version.created", strArray24, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder6.extendArray("index.version.created_string", strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.creation_date_string", (long) (byte) 100);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder34 = builder27.put("index.priority", 0L, byteSizeUnit33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        java.lang.String str35 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting36 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = indexSettings21.indexMetaData;
        java.util.function.Predicate<java.lang.String> strPredicate38 = indexSettings21.indexNameMatcher;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting39 = indexSettings21.getMAX_RESCORE_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strPredicate38);
        org.junit.Assert.assertNotNull(intSetting39);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.common.settings.Settings settings27 = indexMetaData23.getSettings();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings27, streamOutput28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(settings27);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability23 = indexSettings21.durability;
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        boolean boolean26 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = indexSettings21.getIndexMetaData();
        long long28 = indexMetaData27.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        int int26 = indexSettings21.getNumberOfShards();
        long long27 = indexSettings21.gcDeletesInMillis;
        java.lang.String str28 = indexSettings21.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 60000L + "'", long27 == 60000L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = indexSettings21.scopedSettings;
        java.lang.String str26 = indexScopedSettings25.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting27 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings25.get(settingsSetting27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: settings scope doesn't match the setting scope [IndexScope] not in [[]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settingsSetting27);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.isPrivateSetting("index.");
        boolean boolean10 = indexScopedSettings6.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.uuid");
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray24 = settings12.getAsArray("", strArray22, (java.lang.Boolean) false);
        indexScopedSettings6.validate("index.shadow_replicas", settings12);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings12);
        indexSettings26.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings26.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexSettings26.scopedSettings;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting32 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer33 = null;
        indexScopedSettings31.addSettingsUpdateConsumer(settingsSetting32, settingsConsumer33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting36 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer37 = null;
        indexScopedSettings35.addSettingsUpdateConsumer(settingsSetting36, settingsConsumer37);
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings31.get(settingsSetting36);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings31.dryRun(settings40);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting42 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting44 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer45 = null;
        indexScopedSettings43.addSettingsUpdateConsumer(settingsSetting44, settingsConsumer45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting48 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer49 = null;
        indexScopedSettings47.addSettingsUpdateConsumer(settingsSetting48, settingsConsumer49);
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings43.get(settingsSetting48);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer52 = null;
        indexScopedSettings31.addSettingsUpdateConsumer(settingsSetting42, settingsSetting48, settingsBiConsumer52);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings30.get(settingsSetting42);
        indexScopedSettings0.validate("index.shared_filesystem", settings54);
        java.lang.String str57 = settings54.toDelimitedString('#');
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertNotNull(settingsSetting32);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertNotNull(settingsSetting36);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settingsSetting42);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertNotNull(settingsSetting44);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertNotNull(settingsSetting48);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.auto_expand_replicas", (float) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder6.put("index.version.upgraded_string", 0.0f);
        java.lang.String str14 = builder12.get("index.blocks.read");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder1.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("index.version.created");
        // The following exception was thrown during execution in test generation
        try {
            long long8 = builder1.primaryTerm(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = indexScopedSettings0.getDEFAULT_SCOPED_SETTINGS();
        java.lang.String str21 = indexScopedSettings20.nodeName();
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings20.getScope();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings26.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings23.applySettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings29.getGroups("index.creation_date", false);
        org.elasticsearch.common.settings.Settings.Builder builder33 = null;
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray38 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder34.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList39);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.put("index.version.created", (double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean49 = indexScopedSettings20.updateSettings(settings29, builder33, builder47, "index.blocks.write");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.Version version22 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings24.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings28 = settings24.getAsSettings("");
        java.lang.Boolean boolean31 = settings28.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue33 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue34 = settings28.getAsBytesSize("index.", byteSizeValue33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder35 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params36 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = settings28.toXContent(xContentBuilder35, params36);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder23, params36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(version22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertEquals("'" + boolean31 + "' != '" + true + "'", boolean31, true);
        org.junit.Assert.assertNull(byteSizeValue34);
        org.junit.Assert.assertNotNull(params36);
        org.junit.Assert.assertNull(xContentBuilder37);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = settings9.getAsMap();
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property12 = indexScopedSettings0.getScope();
        java.util.function.Predicate<java.lang.String> strPredicate13 = indexScopedSettings0.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean16 = indexScopedSettings14.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings14.applySettings(settings17);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings14.applySettings(settings21);
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = settings23.getAsSettings("hi!");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings25.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings0.diff(settings22, settings25);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.uuid", 0L);
        java.lang.String str34 = builder32.get("");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings40.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings44 = settings40.getAsSettings("");
        java.lang.Boolean boolean47 = settings44.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue49 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue50 = settings44.getAsBytesSize("index.", byteSizeValue49);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder51 = null;
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings52.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings56 = settings52.getAsSettings("");
        java.lang.Boolean boolean59 = settings56.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue61 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue62 = settings56.getAsBytesSize("index.", byteSizeValue61);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params64 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = settings56.toXContent(xContentBuilder63, params64);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder66 = settings44.toXContent(xContentBuilder51, params64);
        java.lang.Class<?> wildcardClass67 = settings44.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder38.put("index.version.upgraded_string", (java.lang.Class) wildcardClass67);
        org.elasticsearch.common.settings.Settings settings69 = builder68.build();
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.uuid]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + property12 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property12.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertEquals("'" + boolean47 + "' != '" + true + "'", boolean47, true);
        org.junit.Assert.assertNull(byteSizeValue50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + boolean59 + "' != '" + true + "'", boolean59, true);
        org.junit.Assert.assertNull(byteSizeValue62);
        org.junit.Assert.assertNotNull(params64);
        org.junit.Assert.assertNull(xContentBuilder65);
        org.junit.Assert.assertNull(xContentBuilder66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(settings69);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        boolean boolean19 = indexScopedSettings15.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings21.getGroups("index.uuid");
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray33 = settings21.getAsArray("", strArray31, (java.lang.Boolean) false);
        indexScopedSettings15.validate("index.shadow_replicas", settings21);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings21);
        org.elasticsearch.index.translog.Translog.Durability durability36 = null;
        indexSettings35.setTranslogDurability(durability36);
        org.elasticsearch.common.unit.TimeValue timeValue38 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings35.setGCDeletes(timeValue38);
        org.elasticsearch.Version version40 = indexSettings35.version;
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder8.put("active_allocations", version40);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("active_allocations", (float) 10000);
        java.io.InputStream inputStream46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder47 = builder41.loadFromStream("index.data_path", inputStream46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(version40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig25 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = indexSettings21.indexMetaData;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings28.applySettings(settings31);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.applySettings(settings35);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings36.getAsGroups();
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.isPrivateSetting("index.");
        boolean boolean43 = indexScopedSettings39.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray57 = settings45.getAsArray("", strArray55, (java.lang.Boolean) false);
        indexScopedSettings39.validate("index.shadow_replicas", settings45);
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings59.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings63 = settings59.getAsSettings("");
        java.lang.Boolean boolean66 = settings63.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue68 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue69 = settings63.getAsBytesSize("index.", byteSizeValue68);
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings39.dryRun(settings63);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings36, strPredicate38, indexScopedSettings39);
        // The following exception was thrown during execution in test generation
        try {
            long long73 = indexMetaData27.primaryTerm((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicyConfig25);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertEquals("'" + boolean66 + "' != '" + true + "'", boolean66, true);
        org.junit.Assert.assertNull(byteSizeValue69);
        org.junit.Assert.assertNotNull(settings70);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.auto_expand_replicas");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        boolean boolean56 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig57 = indexSettings21.getMergeSchedulerConfig();
        boolean boolean58 = indexSettings21.warmerEnabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings20.applySettings(settings23);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.applySettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexScopedSettings0.copy(settings28, indexMetaData29);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings31.applySettings(settings34);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings31.applySettings(settings38);
        indexScopedSettings0.validate(settings39);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings39, streamOutput41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.isPrivateSetting("index.");
        boolean boolean8 = indexScopedSettings4.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings10.getGroups("index.uuid");
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray22 = settings10.getAsArray("", strArray20, (java.lang.Boolean) false);
        indexScopedSettings4.validate("index.shadow_replicas", settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting25 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer26 = null;
        indexScopedSettings24.addSettingsUpdateConsumer(settingsSetting25, settingsConsumer26);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings24.get(settingsSetting29);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer33 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings4.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer33, settingsConsumer34);
        java.util.function.Predicate<java.lang.String> strPredicate36 = indexScopedSettings4.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = indexScopedSettings37.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings62 = settings58.getAsSettings("");
        java.lang.Boolean boolean65 = settings62.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue67 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue68 = settings62.getAsBytesSize("index.", byteSizeValue67);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder69 = null;
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings70.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings74 = settings70.getAsSettings("");
        java.lang.Boolean boolean77 = settings74.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue79 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue80 = settings74.getAsBytesSize("index.", byteSizeValue79);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder81 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params82 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder83 = settings74.toXContent(xContentBuilder81, params82);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder84 = settings62.toXContent(xContentBuilder69, params82);
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings57.dryRun(settings62);
        org.elasticsearch.common.settings.Settings settings86 = indexScopedSettings4.dryRun(settings62);
        indexScopedSettings0.validate(settings86);
        java.lang.String str88 = indexScopedSettings0.nodeName();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settingsSetting25);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertEquals("'" + boolean65 + "' != '" + true + "'", boolean65, true);
        org.junit.Assert.assertNull(byteSizeValue68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertEquals("'" + boolean77 + "' != '" + true + "'", boolean77, true);
        org.junit.Assert.assertNull(byteSizeValue80);
        org.junit.Assert.assertNotNull(params82);
        org.junit.Assert.assertNull(xContentBuilder83);
        org.junit.Assert.assertNull(xContentBuilder84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        boolean boolean30 = indexScopedSettings26.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        indexScopedSettings26.validate("index.shadow_replicas", settings32);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings32);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting47 = indexSettings46.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData48.includeFilters();
        indexSettings46.indexMetaData = indexMetaData48;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters52 = indexMetaData48.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff53 = indexMetaData0.diff(indexMetaData48);
        java.lang.String str54 = indexMetaData48.getIndexUUID();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput55 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData48.writeTo(streamOutput55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(booleanSetting47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
        org.junit.Assert.assertNull(discoveryNodeFilters52);
        org.junit.Assert.assertNotNull(indexMetaDataDiff53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "_na_" + "'", str54, "_na_");
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        boolean boolean7 = settings3.isEmpty();
        java.lang.String str9 = settings3.toDelimitedString('a');
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = indexSettings21.indexMetaData;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap36 = indexMetaData35.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters37 = indexMetaData35.requireFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff39 = indexMetaData35.readDiffFrom(streamInput38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNull(discoveryNodeFilters37);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean28 = indexSettings21.getdefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = null; // flaky: indexSettings16.getIndexMetaData();
        long long22 = 0L; // flaky: indexMetaData20.primaryTerm((int) (byte) 0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = settings24.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings26.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        boolean boolean34 = indexScopedSettings30.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.uuid");
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray48 = settings36.getAsArray("", strArray46, (java.lang.Boolean) false);
        indexScopedSettings30.validate("index.shadow_replicas", settings36);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings36);
        boolean boolean52 = indexSettings50.matchesIndexName("");
        long long53 = indexSettings50.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue54 = indexSettings50.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue55 = settings26.getAsBytesSize("primary_terms", byteSizeValue54);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = null;
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap59 = settings57.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings61 = settings57.getAsSettings("");
        java.lang.Boolean boolean64 = settings61.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue66 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue67 = settings61.getAsBytesSize("index.", byteSizeValue66);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder68 = null;
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap71 = settings69.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings73 = settings69.getAsSettings("");
        java.lang.Boolean boolean76 = settings73.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue78 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue79 = settings73.getAsBytesSize("index.", byteSizeValue78);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder80 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params81 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder82 = settings73.toXContent(xContentBuilder80, params81);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder83 = settings61.toXContent(xContentBuilder68, params81);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder84 = settings26.toXContent(xContentBuilder56, params81);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData20, xContentBuilder23, params81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 60000L + "'", long53 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue54);
        org.junit.Assert.assertNotNull(byteSizeValue55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertEquals("'" + boolean64 + "' != '" + true + "'", boolean64, true);
        org.junit.Assert.assertNull(byteSizeValue67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertEquals("'" + boolean76 + "' != '" + true + "'", boolean76, true);
        org.junit.Assert.assertNull(byteSizeValue79);
        org.junit.Assert.assertNotNull(params81);
        org.junit.Assert.assertNull(xContentBuilder82);
        org.junit.Assert.assertNull(xContentBuilder83);
        org.junit.Assert.assertNull(xContentBuilder84);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean75 = indexScopedSettings73.isPrivateSetting("index.");
        boolean boolean77 = indexScopedSettings73.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings79.getGroups("index.uuid");
        java.lang.String[] strArray89 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray91 = settings79.getAsArray("", strArray89, (java.lang.Boolean) false);
        indexScopedSettings73.validate("index.shadow_replicas", settings79);
        org.elasticsearch.index.IndexSettings indexSettings93 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings79);
        org.elasticsearch.index.translog.Translog.Durability durability94 = null;
        indexSettings93.setTranslogDurability(durability94);
        org.elasticsearch.common.unit.TimeValue timeValue96 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings93.setGCDeletes(timeValue96);
        indexSettings21.refreshInterval = timeValue96;
        org.elasticsearch.common.unit.TimeValue timeValue99 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(timeValue96);
        org.junit.Assert.assertNotNull(timeValue99);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting4 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer5 = null;
        indexScopedSettings3.addSettingsUpdateConsumer(settingsSetting4, settingsConsumer5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer9 = null;
        indexScopedSettings7.addSettingsUpdateConsumer(settingsSetting8, settingsConsumer9);
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings3.get(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings3.dryRun(settings12);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings15.applySettings(settings18);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings15.applySettings(settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings15.get(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13, strPredicate14, indexScopedSettings15);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput27 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertNotNull(settingsSetting4);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.version.upgraded");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.version.upgraded]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting28 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        indexSettings21.setMaxRescoreWindow((int) ' ');
        boolean boolean31 = indexSettings21.isIndexUsingShadowReplicas();
        boolean boolean32 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.Version version33 = indexSettings21.getIndexVersionCreated();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher34 = indexSettings21.getParseFieldMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(durabilitySetting28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(parseFieldMatcher34);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.data_path");
        long long2 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.creationDate((long) 'a');
        int int5 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.putAlias(builder6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.queryStringLenient;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexSettings21.getScopedSettings();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting27 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer28 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings26.addSettingsUpdateConsumer(settingsSetting27, settingsConsumer28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Setting is not registered for key [index.routing.allocation.initial_recovery.]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(settingsSetting27);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        boolean boolean30 = indexSettings21.getqueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.blocks.read_only");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.Settings.Builder builder20 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        boolean boolean21 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean23 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting25 = indexScopedSettings0.get("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int27 = indexMetaData26.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings28.applySettings(settings31);
        java.lang.String str36 = settings31.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting39 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer40 = null;
        indexScopedSettings38.addSettingsUpdateConsumer(settingsSetting39, settingsConsumer40);
        org.elasticsearch.index.IndexSettings indexSettings42 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData26, settings31, strPredicate37, indexScopedSettings38);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting43 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings44 = null; // flaky: indexSettings42.getValue(settingsSetting43);
        int int45 = 0; // flaky: indexSettings42.numberOfShards;
        org.elasticsearch.common.logging.ESLogger eSLogger46 = null; // flaky: indexSettings42.logger;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting47 = null; // flaky: indexSettings42.getMAX_RESULT_WINDOW_SETTING();
// flaky:         indexScopedSettings0.validateSettingKey((org.elasticsearch.common.settings.Setting) intSetting47);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING;
        indexScopedSettings0.validateSettingKey((org.elasticsearch.common.settings.Setting) intSetting49);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardSetting25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertNotNull(settingsSetting39);
        org.junit.Assert.assertNotNull(settingsSetting43);
// flaky:         org.junit.Assert.assertNotNull(settings44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
// flaky:         org.junit.Assert.assertNotNull(eSLogger46);
// flaky:         org.junit.Assert.assertNotNull(intSetting47);
        org.junit.Assert.assertNotNull(intSetting49);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher18 = null; // flaky: indexSettings16.getParseFieldMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue19 = null; // flaky: indexSettings16.getFlushThresholdSize();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig20 = null; // flaky: indexSettings16.getmergePolicyConfig();
// flaky:         indexSettings16.warmerEnabled = false;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher18);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue19);
// flaky:         org.junit.Assert.assertNotNull(mergePolicyConfig20);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.putMapping("index.blocks.write", "index.blocks.read");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.isPrivateSetting("index.");
        boolean boolean11 = indexScopedSettings7.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings13.getGroups("index.uuid");
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray25 = settings13.getAsArray("", strArray23, (java.lang.Boolean) false);
        indexScopedSettings7.validate("index.shadow_replicas", settings13);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings13);
        indexSettings27.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings27.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue31 = indexSettings27.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings39);
        indexSettings53.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexSettings53.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue57 = indexSettings53.flushThresholdSize;
        indexSettings27.flushThresholdSize = byteSizeValue57;
        indexSettings27.TTLPurgeDisabled = false;
        int int61 = indexSettings27.maxRescoreWindow;
        boolean boolean62 = indexSettings27.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean66 = indexScopedSettings64.isPrivateSetting("index.");
        boolean boolean68 = indexScopedSettings64.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings70.getGroups("index.uuid");
        java.lang.String[] strArray80 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray82 = settings70.getAsArray("", strArray80, (java.lang.Boolean) false);
        indexScopedSettings64.validate("index.shadow_replicas", settings70);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings70);
        indexSettings84.setEnableWarmer(true);
        java.lang.String str87 = indexSettings84.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData88 = indexSettings84.getIndexMetaData();
        indexSettings27.indexMetaData = indexMetaData88;
        java.util.Set<java.lang.String> strSet91 = indexMetaData88.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder92 = builder4.putActiveAllocationIds(1, strSet91);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder94 = builder4.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder96 = builder4.numberOfShards((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            long long98 = builder4.primaryTerm(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(byteSizeValue31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertNotNull(byteSizeValue57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10000 + "'", int61 == 10000);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(indexMetaData88);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.numberOfShards(10000);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder28.primaryTerm((-1), (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        int int17 = 0; // flaky: indexSettings16.getNumberOfReplicas();
        int int18 = 0; // flaky: indexSettings16.getMaxRescoreWindow();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings19.applySettings(settings22);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings19.applySettings(settings26);
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings26);
// flaky:         indexSettings16.settings = settings26;
        org.elasticsearch.common.settings.Settings settings31 = settings26.getAsSettings("");
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = settings26.getAsStructuredMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap32);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean74 = indexSettings21.matchesIndexName("index.");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder1.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.index("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        byte byte10 = state9.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.state(state9);
        byte byte12 = state9.id();
        byte byte13 = state9.id();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 1 + "'", byte10 == (byte) 1);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 1 + "'", byte12 == (byte) 1);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 1 + "'", byte13 == (byte) 1);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        boolean boolean24 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getDEFAULT_GC_DELETES();
        java.util.function.Predicate<java.lang.String> strPredicate26 = indexSettings21.indexNameMatcher;
        java.lang.String str27 = indexSettings21.getUUID();
        indexSettings21.setMaxRescoreWindow((int) (byte) 1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "_na_" + "'", str27, "_na_");
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.putNull("hi!");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.isPrivateSetting("index.");
        boolean boolean17 = indexScopedSettings13.isPrivateSetting("");
        java.lang.String str18 = indexScopedSettings13.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int21 = builder20.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder20.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = settings26.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray42 = settings30.getAsArray("", strArray40, (java.lang.Boolean) false);
        java.lang.String[] strArray44 = settings26.getAsArray("index.version.minimum_compatible", strArray40, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder23.settings(settings26);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings46.getGroups("index.uuid");
        java.lang.String[] strArray56 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray58 = settings46.getAsArray("", strArray56, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder23.settings(settings46);
        java.lang.String str61 = settings46.get("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings62 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings46);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = null;
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings68 = settings64.getAsSettings("");
        java.lang.Boolean boolean71 = settings68.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue73 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue74 = settings68.getAsBytesSize("index.", byteSizeValue73);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder75 = null;
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap78 = settings76.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings80 = settings76.getAsSettings("");
        java.lang.Boolean boolean83 = settings80.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue85 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue86 = settings80.getAsBytesSize("index.", byteSizeValue85);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder87 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params88 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder89 = settings80.toXContent(xContentBuilder87, params88);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder90 = settings68.toXContent(xContentBuilder75, params88);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder91 = settings46.toXContent(xContentBuilder63, params88);
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder8.put(settings46);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder96 = builder8.put("index.shared_filesystem", (-1L), byteSizeUnit95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertEquals("'" + boolean71 + "' != '" + true + "'", boolean71, true);
        org.junit.Assert.assertNull(byteSizeValue74);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertEquals("'" + boolean83 + "' != '" + true + "'", boolean83, true);
        org.junit.Assert.assertNull(byteSizeValue86);
        org.junit.Assert.assertNotNull(params88);
        org.junit.Assert.assertNull(xContentBuilder89);
        org.junit.Assert.assertNull(xContentBuilder90);
        org.junit.Assert.assertNull(xContentBuilder91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getNodeSettings();
        int int28 = indexSettings21.maxResultWindow;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting29 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(booleanSetting29);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.putNull("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings12.applySettings(settings15);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray26 = settings18.getAsArray("index.version.created", strArray24, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder6.extendArray("index.version.created_string", strArray26);
        java.util.concurrent.TimeUnit timeUnit30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder31 = builder6.put("active_allocations", 0L, timeUnit30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting28 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(booleanSetting28);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte8 = state7.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.state(state7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.putAlias(aliasMetaData12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings20.applySettings(settings23);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.applySettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexScopedSettings0.copy(settings28, indexMetaData29);
        long long31 = indexMetaData29.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings39);
        org.elasticsearch.common.settings.Settings settings54 = indexSettings53.getSettings();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue55 = indexSettings53.getFlushThresholdSize();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig56 = indexSettings53.getmergePolicyConfig();
        boolean boolean57 = indexMetaData29.equals((java.lang.Object) indexSettings53);
        java.util.Set<java.lang.String> strSet59 = null; // flaky: indexMetaData29.activeAllocationIds((int) (byte) 10);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(byteSizeValue55);
        org.junit.Assert.assertNotNull(mergePolicyConfig56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(strSet59);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting5 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer6 = null;
        indexScopedSettings4.addSettingsUpdateConsumer(settingsSetting5, settingsConsumer6);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.get(settingsSetting5);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings9.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings9.getAsSettings("");
        java.lang.Boolean boolean16 = settings13.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue19 = settings13.getAsBytesSize("index.", byteSizeValue18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings13.toXContent(xContentBuilder20, params21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.isPrivateSetting("index.");
        boolean boolean28 = indexScopedSettings24.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray42 = settings30.getAsArray("", strArray40, (java.lang.Boolean) false);
        indexScopedSettings24.validate("index.shadow_replicas", settings30);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings30);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap45 = indexMetaData23.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData23.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters47 = indexMetaData23.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.isPrivateSetting("index.");
        boolean boolean53 = indexScopedSettings49.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.uuid");
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray67 = settings55.getAsArray("", strArray65, (java.lang.Boolean) false);
        indexScopedSettings49.validate("index.shadow_replicas", settings55);
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings55);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting70 = indexSettings69.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters72 = indexMetaData71.includeFilters();
        indexSettings69.indexMetaData = indexMetaData71;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData71);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData71.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff76 = indexMetaData23.diff(indexMetaData71);
        boolean boolean78 = indexMetaData71.isSameUUID("index.version.minimum_compatible");
        org.elasticsearch.Version version79 = indexMetaData71.getCreationVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings80 = indexScopedSettings0.copy(settings13, indexMetaData71);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings81 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting82 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer83 = null;
        indexScopedSettings81.addSettingsUpdateConsumer(settingsSetting82, settingsConsumer83);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer85 = null;
        indexScopedSettings80.addSettingsUpdateConsumer(settingsSetting82, settingsConsumer85);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settingsSetting5);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + true + "'", boolean16, true);
        org.junit.Assert.assertNull(byteSizeValue19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strImmutableOpenMap45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNull(discoveryNodeFilters47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(booleanSetting70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNull(discoveryNodeFilters72);
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertNotNull(indexMetaDataDiff76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(version79);
        org.junit.Assert.assertNotNull(indexScopedSettings80);
        org.junit.Assert.assertNotNull(indexScopedSettings81);
        org.junit.Assert.assertNotNull(settingsSetting82);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        // The following exception was thrown during execution in test generation
        try {
            long long28 = indexMetaData23.primaryTerm((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.common.settings.Settings.Builder builder3 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.uuid", 0L);
        java.lang.String str8 = builder6.get("");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.putNull("hi!");
        java.lang.String str13 = builder11.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder11.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean20 = indexScopedSettings18.isPrivateSetting("index.");
        boolean boolean22 = indexScopedSettings18.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings24.getGroups("index.uuid");
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray36 = settings24.getAsArray("", strArray34, (java.lang.Boolean) false);
        indexScopedSettings18.validate("index.shadow_replicas", settings24);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings24);
        org.elasticsearch.index.translog.Translog.Durability durability39 = null;
        indexSettings38.setTranslogDurability(durability39);
        org.elasticsearch.common.unit.TimeValue timeValue41 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings38.setGCDeletes(timeValue41);
        org.elasticsearch.Version version43 = indexSettings38.version;
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder11.put("active_allocations", version43);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.put("active_allocations", (float) 10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder1.settings(builder44);
        org.elasticsearch.common.settings.Settings settings49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder50 = builder44.put(settings49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.shared_filesystem" + "'", str2, "index.shared_filesystem");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(version43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate(1L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.putMapping("index.priority", "index.blocks.metadata");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder1.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putMapping(mappingMetaData5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(mappingMetaData4);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_replicas");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.primaryTerm((-1), (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        indexSettings21.maxRescoreWindow = (byte) 1;
        indexSettings21.TTLPurgeDisabled = false;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate(1L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.putMapping("index.version.created_string", "hi!");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexSettings21.getScopedSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        long long28 = indexSettings21.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 60000L + "'", long28 == 60000L);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.isPrivateSetting("index.");
        boolean boolean11 = indexScopedSettings7.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings13.getGroups("index.uuid");
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray25 = settings13.getAsArray("", strArray23, (java.lang.Boolean) false);
        indexScopedSettings7.validate("index.shadow_replicas", settings13);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings13);
        indexSettings27.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings27.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue31 = indexSettings27.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings39);
        indexSettings53.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexSettings53.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue57 = indexSettings53.flushThresholdSize;
        indexSettings27.flushThresholdSize = byteSizeValue57;
        indexSettings27.TTLPurgeDisabled = false;
        int int61 = indexSettings27.maxRescoreWindow;
        boolean boolean62 = indexSettings27.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean66 = indexScopedSettings64.isPrivateSetting("index.");
        boolean boolean68 = indexScopedSettings64.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings70.getGroups("index.uuid");
        java.lang.String[] strArray80 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray82 = settings70.getAsArray("", strArray80, (java.lang.Boolean) false);
        indexScopedSettings64.validate("index.shadow_replicas", settings70);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings70);
        indexSettings84.setEnableWarmer(true);
        java.lang.String str87 = indexSettings84.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData88 = indexSettings84.getIndexMetaData();
        indexSettings27.indexMetaData = indexMetaData88;
        java.util.Set<java.lang.String> strSet91 = indexMetaData88.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder92 = builder4.putActiveAllocationIds(1, strSet91);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder94 = builder4.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder96 = builder4.numberOfShards((int) '#');
        int int97 = builder96.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(byteSizeValue31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertNotNull(byteSizeValue57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10000 + "'", int61 == 10000);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(indexMetaData88);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 35 + "'", int97 == 35);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.elasticsearch.common.settings.Settings settings0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean25 = indexSettings21.getqueryStringAnalyzeWildcard();
        boolean boolean26 = indexSettings21.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings27.applySettings(settings30);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = settings34.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = settings36.getAsMap();
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings27.applySettings(settings36);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = settings40.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = settings42.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean48 = indexScopedSettings46.isPrivateSetting("index.");
        boolean boolean50 = indexScopedSettings46.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings52.getGroups("index.uuid");
        java.lang.String[] strArray62 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray64 = settings52.getAsArray("", strArray62, (java.lang.Boolean) false);
        indexScopedSettings46.validate("index.shadow_replicas", settings52);
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings52);
        boolean boolean68 = indexSettings66.matchesIndexName("");
        long long69 = indexSettings66.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue70 = indexSettings66.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue71 = settings42.getAsBytesSize("primary_terms", byteSizeValue70);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue72 = settings36.getAsBytesSize("index.priority", byteSizeValue70);
        indexSettings21.setTranslogFlushThresholdSize(byteSizeValue70);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings74 = indexSettings21.scopedSettings;
        org.elasticsearch.index.translog.Translog.Durability durability75 = indexSettings21.durability;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 60000L + "'", long69 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue70);
        org.junit.Assert.assertNotNull(byteSizeValue71);
        org.junit.Assert.assertNotNull(byteSizeValue72);
        org.junit.Assert.assertNotNull(indexScopedSettings74);
        org.junit.Assert.assertTrue("'" + durability75 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability75.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData0.mappingOrDefault("index.number_of_shards");
        org.elasticsearch.common.settings.Settings settings26 = indexMetaData0.getSettings();
        org.elasticsearch.common.io.stream.StreamInput streamInput27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = indexMetaData0.readFrom(streamInput27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertNotNull(settings26);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings26.applySettings(settings29);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings26.applySettings(settings33);
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.common.unit.SizeValue sizeValue37 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue38 = settings33.getAsSize("index.shadow_replicas", sizeValue37);
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings33);
        // The following exception was thrown during execution in test generation
        try {
            long long42 = indexMetaData25.primaryTerm(10000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(sizeValue38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int29 = indexMetaData28.getNumberOfShards();
        indexSettings21.indexMetaData = indexMetaData28;
        org.elasticsearch.common.io.stream.StreamInput streamInput31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff32 = indexMetaData28.readDiffFrom(streamInput31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        java.lang.String str10 = builder3.remove("index.version.created");
        java.lang.String str12 = builder3.remove("");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.put("index.blocks.metadata", (long) ' ', byteSizeUnit15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        long long7 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.numberOfShards(1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder6.state(state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder6.index("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.uuid", 0L);
        java.lang.String str20 = builder18.get("");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder18.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = settings24.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings26.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction29 = null;
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder18.putProperties(strMap27, strPredicate28, strFunction29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder18.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder31.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.uuid", 0L);
        java.lang.String str39 = builder37.get("");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings49 = settings45.getAsSettings("");
        java.lang.Boolean boolean52 = settings49.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue54 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue55 = settings49.getAsBytesSize("index.", byteSizeValue54);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = null;
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap59 = settings57.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings61 = settings57.getAsSettings("");
        java.lang.Boolean boolean64 = settings61.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue66 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue67 = settings61.getAsBytesSize("index.", byteSizeValue66);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder68 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params69 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder70 = settings61.toXContent(xContentBuilder68, params69);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder71 = settings49.toXContent(xContentBuilder56, params69);
        java.lang.Class<?> wildcardClass72 = settings49.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder43.put("index.version.upgraded_string", (java.lang.Class) wildcardClass72);
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder32.put("_all", (java.lang.Class) wildcardClass72);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder14.settings(builder32);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder75.putMapping("index.number_of_shards", "hi!");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertEquals("'" + boolean52 + "' != '" + true + "'", boolean52, true);
        org.junit.Assert.assertNull(byteSizeValue55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertEquals("'" + boolean64 + "' != '" + true + "'", boolean64, true);
        org.junit.Assert.assertNull(byteSizeValue67);
        org.junit.Assert.assertNotNull(params69);
        org.junit.Assert.assertNull(xContentBuilder70);
        org.junit.Assert.assertNull(xContentBuilder71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        boolean boolean27 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting28 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings21.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeValueSetting28);
        org.junit.Assert.assertNotNull(timeValue29);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.number_of_replicas", custom1);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for id [10]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData0.mappingOrDefault("index.number_of_shards");
        org.apache.lucene.util.Version version26 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.xcontent.XContentParser xContentParser27 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        boolean boolean33 = indexScopedSettings29.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        indexScopedSettings29.validate("index.shadow_replicas", settings35);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        boolean boolean51 = indexSettings49.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting52 = indexSettings49.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher53 = indexSettings49.parseFieldMatcher;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = indexMetaData0.fromXContent(xContentParser27, parseFieldMatcher53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertNull(version26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(booleanSetting52);
        org.junit.Assert.assertNotNull(parseFieldMatcher53);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.isPrivateSetting("index.");
        boolean boolean11 = indexScopedSettings7.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings13.getGroups("index.uuid");
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray25 = settings13.getAsArray("", strArray23, (java.lang.Boolean) false);
        indexScopedSettings7.validate("index.shadow_replicas", settings13);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings13);
        indexSettings27.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings27.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue31 = indexSettings27.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings39);
        indexSettings53.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexSettings53.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue57 = indexSettings53.flushThresholdSize;
        indexSettings27.flushThresholdSize = byteSizeValue57;
        indexSettings27.TTLPurgeDisabled = false;
        int int61 = indexSettings27.maxRescoreWindow;
        boolean boolean62 = indexSettings27.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean66 = indexScopedSettings64.isPrivateSetting("index.");
        boolean boolean68 = indexScopedSettings64.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings70.getGroups("index.uuid");
        java.lang.String[] strArray80 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray82 = settings70.getAsArray("", strArray80, (java.lang.Boolean) false);
        indexScopedSettings64.validate("index.shadow_replicas", settings70);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings70);
        indexSettings84.setEnableWarmer(true);
        java.lang.String str87 = indexSettings84.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData88 = indexSettings84.getIndexMetaData();
        indexSettings27.indexMetaData = indexMetaData88;
        java.util.Set<java.lang.String> strSet91 = indexMetaData88.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder92 = builder4.putActiveAllocationIds(1, strSet91);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder92.putMapping("index.shared_filesystem.recover_on_any_node", "index.blocks.read");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(byteSizeValue31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertNotNull(byteSizeValue57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10000 + "'", int61 == 10000);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(indexMetaData88);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = indexScopedSettings0.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings21.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings25 = settings21.getAsSettings("");
        java.lang.Boolean boolean28 = settings25.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue30 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue31 = settings25.getAsBytesSize("index.", byteSizeValue30);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = null;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings37 = settings33.getAsSettings("");
        java.lang.Boolean boolean40 = settings37.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue42 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue43 = settings37.getAsBytesSize("index.", byteSizeValue42);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params45 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = settings37.toXContent(xContentBuilder44, params45);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder47 = settings25.toXContent(xContentBuilder32, params45);
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings20.dryRun(settings25);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings25.getGroups("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: illegal setting prefix ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + boolean28 + "' != '" + true + "'", boolean28, true);
        org.junit.Assert.assertNull(byteSizeValue31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertEquals("'" + boolean40 + "' != '" + true + "'", boolean40, true);
        org.junit.Assert.assertNull(byteSizeValue43);
        org.junit.Assert.assertNotNull(params45);
        org.junit.Assert.assertNull(xContentBuilder46);
        org.junit.Assert.assertNull(xContentBuilder47);
        org.junit.Assert.assertNotNull(settings48);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting27 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer28 = null;
        indexScopedSettings26.addSettingsUpdateConsumer(settingsSetting27, settingsConsumer28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer32 = null;
        indexScopedSettings30.addSettingsUpdateConsumer(settingsSetting31, settingsConsumer32);
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings26.get(settingsSetting31);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings26.dryRun(settings35);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting37 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting39 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer40 = null;
        indexScopedSettings38.addSettingsUpdateConsumer(settingsSetting39, settingsConsumer40);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting43 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer44 = null;
        indexScopedSettings42.addSettingsUpdateConsumer(settingsSetting43, settingsConsumer44);
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings38.get(settingsSetting43);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer47 = null;
        indexScopedSettings26.addSettingsUpdateConsumer(settingsSetting37, settingsSetting43, settingsBiConsumer47);
        org.elasticsearch.common.settings.Settings settings49 = indexScopedSettings25.get(settingsSetting37);
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = settings49.getAsStructuredMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(settingsSetting27);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settingsSetting37);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertNotNull(settingsSetting39);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertNotNull(settingsSetting43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap50);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings20.applySettings(settings23);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.applySettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexScopedSettings0.copy(settings28, indexMetaData29);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state31 = indexMetaData29.getState();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput32 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData29.writeTo(streamOutput32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + state31 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state31.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.version.created_string");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        boolean boolean56 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        indexSettings78.setEnableWarmer(true);
        java.lang.String str81 = indexSettings78.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = indexSettings78.getIndexMetaData();
        indexSettings21.indexMetaData = indexMetaData82;
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap84 = indexMetaData82.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters85 = indexMetaData82.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap86 = indexMetaData82.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap87 = indexMetaData82.getCustoms();
        org.elasticsearch.common.io.stream.StreamInput streamInput88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData89 = indexMetaData82.readFrom(streamInput88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap84);
        org.junit.Assert.assertNull(discoveryNodeFilters85);
        org.junit.Assert.assertNotNull(strImmutableOpenMap86);
        org.junit.Assert.assertNotNull(strImmutableOpenMap87);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder4.numberOfReplicas((int) ' ');
        long long11 = builder4.version();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.creationDate((long) (short) 1);
        int int9 = builder8.numberOfReplicas();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder8.putMapping("index.priority", "index.version.upgraded");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        java.io.InputStream inputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder14 = builder3.loadFromStream("index.data_path", inputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getValue(settingsSetting17);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting19 = null; // flaky: indexSettings16.getDEFAULT_FIELD_SETTING();
        boolean boolean20 = false; // flaky: indexSettings16.isShadowReplicaIndex;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(settingsSetting17);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertNotNull(strSetting19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.index.Index index23 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData0.mapping("index.blocks.read");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = null;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings29 = settings27.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = settings29.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings39);
        boolean boolean55 = indexSettings53.matchesIndexName("");
        long long56 = indexSettings53.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue57 = indexSettings53.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue58 = settings29.getAsBytesSize("primary_terms", byteSizeValue57);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder59 = null;
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap62 = settings60.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings64 = settings60.getAsSettings("");
        java.lang.Boolean boolean67 = settings64.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue69 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue70 = settings64.getAsBytesSize("index.", byteSizeValue69);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder71 = null;
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings72.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings76 = settings72.getAsSettings("");
        java.lang.Boolean boolean79 = settings76.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue81 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue82 = settings76.getAsBytesSize("index.", byteSizeValue81);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder83 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params84 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder85 = settings76.toXContent(xContentBuilder83, params84);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder86 = settings64.toXContent(xContentBuilder71, params84);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder87 = settings29.toXContent(xContentBuilder59, params84);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder26, params84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(index23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 60000L + "'", long56 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue57);
        org.junit.Assert.assertNotNull(byteSizeValue58);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertEquals("'" + boolean67 + "' != '" + true + "'", boolean67, true);
        org.junit.Assert.assertNull(byteSizeValue70);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertEquals("'" + boolean79 + "' != '" + true + "'", boolean79, true);
        org.junit.Assert.assertNull(byteSizeValue82);
        org.junit.Assert.assertNotNull(params84);
        org.junit.Assert.assertNull(xContentBuilder85);
        org.junit.Assert.assertNull(xContentBuilder86);
        org.junit.Assert.assertNull(xContentBuilder87);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = builder6.primaryTerm(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        indexSettings21.TTLPurgeDisabled = false;
        boolean boolean28 = indexSettings21.defaultAllowUnmappedFields;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = indexSettings21.indexMetaData;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap36 = indexMetaData35.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters37 = indexMetaData35.requireFilters();
        int int38 = indexMetaData35.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNull(discoveryNodeFilters37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        indexSettings21.setMaxResultWindow((int) (byte) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = settings9.getAsMap();
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property12 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.uuid", 0L);
        java.lang.String str18 = builder16.get("");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder16.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings24 = settings22.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings24.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction27 = null;
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder16.putProperties(strMap25, strPredicate26, strFunction27);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder16.replacePropertyPlaceholders();
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.uuid]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + property12 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property12.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.settings.Settings settings24 = indexSettings21.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        org.elasticsearch.common.settings.Settings settings48 = indexSettings47.getSettings();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue49 = indexSettings47.getFlushThresholdSize();
        indexSettings21.setTranslogFlushThresholdSize(byteSizeValue49);
        org.elasticsearch.common.unit.TimeValue timeValue51 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue52 = indexSettings21.globalCheckpointInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(byteSizeValue49);
        org.junit.Assert.assertNotNull(timeValue51);
        org.junit.Assert.assertNotNull(timeValue52);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = indexSettings21.scopedSettings;
        org.elasticsearch.common.logging.ESLogger eSLogger26 = indexSettings21.getlogger();
        int int27 = indexSettings21.numberOfShards;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        boolean boolean33 = indexScopedSettings29.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        indexScopedSettings29.validate("index.shadow_replicas", settings35);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting50 = indexSettings49.getINDEX_REFRESH_INTERVAL_SETTING();
        boolean boolean51 = indexSettings49.isShadowReplicaIndex;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher52 = indexSettings49.getParseFieldMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability53 = indexSettings49.durability;
        indexSettings21.setdurability(durability53);
        java.lang.String str55 = indexSettings21.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(eSLogger26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(timeValueSetting50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher52);
        org.junit.Assert.assertTrue("'" + durability53 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability53.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "_na_" + "'", str55, "_na_");
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings21.getParseFieldMatcher();
        indexSettings21.setTTLPurgeDisabled(false);
        org.elasticsearch.common.logging.ESLogger eSLogger30 = indexSettings21.logger;
        org.elasticsearch.Version version31 = indexSettings21.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = indexSettings21.scopedSettings;
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet33 = indexScopedSettings32.getBUILT_IN_INDEX_SETTINGS();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(eSLogger30);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(wildcardSettingSet33);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder4.settings(settings27);
        java.lang.String str42 = settings27.get("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.isPrivateSetting("index.");
        boolean boolean47 = indexScopedSettings43.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings49.getGroups("index.uuid");
        java.lang.String[] strArray59 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray61 = settings49.getAsArray("", strArray59, (java.lang.Boolean) false);
        indexScopedSettings43.validate("index.shadow_replicas", settings49);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting64 = indexScopedSettings43.get("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int66 = indexMetaData65.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = new org.elasticsearch.common.settings.IndexScopedSettings(settings27, indexScopedSettings43, indexMetaData65);
        boolean boolean69 = indexScopedSettings67.isPrivateSetting("hi!");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting70 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer71 = null;
        indexScopedSettings67.addSettingsUpdateConsumer(settingsSetting70, settingsConsumer71);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(wildcardSetting64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(settingsSetting70);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        indexSettings21.maxResultWindow = (byte) -1;
        org.elasticsearch.Version version25 = indexSettings21.getIndexVersionCreated();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting26 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertNotNull(timeValueSetting26);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean75 = indexScopedSettings73.isPrivateSetting("index.");
        boolean boolean77 = indexScopedSettings73.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings79.getGroups("index.uuid");
        java.lang.String[] strArray89 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray91 = settings79.getAsArray("", strArray89, (java.lang.Boolean) false);
        indexScopedSettings73.validate("index.shadow_replicas", settings79);
        org.elasticsearch.index.IndexSettings indexSettings93 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings79);
        org.elasticsearch.index.translog.Translog.Durability durability94 = null;
        indexSettings93.setTranslogDurability(durability94);
        org.elasticsearch.common.unit.TimeValue timeValue96 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings93.setGCDeletes(timeValue96);
        indexSettings21.refreshInterval = timeValue96;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher99 = indexSettings21.parseFieldMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(timeValue96);
        org.junit.Assert.assertNotNull(parseFieldMatcher99);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        boolean boolean30 = indexScopedSettings26.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        indexScopedSettings26.validate("index.shadow_replicas", settings32);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings32);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting47 = indexSettings46.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData48.includeFilters();
        indexSettings46.indexMetaData = indexMetaData48;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters52 = indexMetaData48.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff53 = indexMetaData0.diff(indexMetaData48);
        org.apache.lucene.util.Version version54 = indexMetaData48.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap55 = indexMetaData48.getCustoms();
        org.elasticsearch.common.xcontent.XContentParser xContentParser56 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        boolean boolean80 = indexSettings78.matchesIndexName("");
        boolean boolean81 = indexSettings78.TTLPurgeDisabled;
        org.elasticsearch.common.unit.TimeValue timeValue82 = indexSettings78.getDEFAULT_GC_DELETES();
        java.util.function.Predicate<java.lang.String> strPredicate83 = indexSettings78.indexNameMatcher;
        java.lang.String str84 = indexSettings78.getUUID();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting85 = indexSettings78.getALLOW_UNMAPPED();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher86 = indexSettings78.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData87 = indexMetaData48.fromXContent(xContentParser56, parseFieldMatcher86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(booleanSetting47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
        org.junit.Assert.assertNull(discoveryNodeFilters52);
        org.junit.Assert.assertNotNull(indexMetaDataDiff53);
        org.junit.Assert.assertNull(version54);
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(timeValue82);
        org.junit.Assert.assertNotNull(strPredicate83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "_na_" + "'", str84, "_na_");
        org.junit.Assert.assertNotNull(booleanSetting85);
        org.junit.Assert.assertNotNull(parseFieldMatcher86);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("");
        org.elasticsearch.common.xcontent.XContentParser xContentParser8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.isPrivateSetting("index.");
        boolean boolean14 = indexScopedSettings10.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings16.getGroups("index.uuid");
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray28 = settings16.getAsArray("", strArray26, (java.lang.Boolean) false);
        indexScopedSettings10.validate("index.shadow_replicas", settings16);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings16);
        indexSettings30.setEnableWarmer(true);
        indexSettings30.maxResultWindow = (byte) 100;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue35 = indexSettings30.flushThresholdSize;
        java.lang.String str36 = indexSettings30.defaultField;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher37 = indexSettings30.parseFieldMatcher;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = indexMetaData0.fromXContent(xContentParser8, parseFieldMatcher37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteSizeValue35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "_all" + "'", str36, "_all");
        org.junit.Assert.assertNotNull(parseFieldMatcher37);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting48 = indexSettings47.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability49 = indexSettings47.durability;
        indexSettings21.setdurability(durability49);
        boolean boolean52 = indexSettings21.matchesIndexName("index.priority");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValueSetting48);
        org.junit.Assert.assertTrue("'" + durability49 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability49.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.shadow_replicas");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.version((long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.putMapping("index.blocks.read", "index.creation_date");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData23.includeFilters();
        indexSettings21.indexMetaData = indexMetaData23;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.numberOfShards(10000);
        int int29 = builder28.numberOfReplicas();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder28.putAlias(aliasMetaData30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.putNull("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings12.applySettings(settings15);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray26 = settings18.getAsArray("index.version.created", strArray24, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder6.extendArray("index.version.created_string", strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder6.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder29.normalizePrefix("primary_terms");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder35 = builder31.put("index.number_of_shards", (long) (short) 100, byteSizeUnit34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.Version version72 = indexSettings21.getversion();
        boolean boolean73 = indexSettings21.isIndexUsingShadowReplicas();
        java.lang.String str74 = indexSettings21.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(version72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig25 = indexSettings21.getmergePolicyConfig();
        indexSettings21.setMaxRescoreWindow((int) '#');
        boolean boolean28 = indexSettings21.TTLPurgeDisabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        java.lang.String str26 = indexSettings21.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings21.getMergePolicy();
        boolean boolean28 = indexSettings21.hasCustomDataPath();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher29 = indexSettings21.parseFieldMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher29);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = indexScopedSettings1.applySettings(settings4);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings8.applySettings(settings11);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = settings15.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = settings17.getAsMap();
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings8.applySettings(settings17);
        org.elasticsearch.common.settings.Setting.Property property20 = indexScopedSettings8.getScope();
        java.util.function.Predicate<java.lang.String> strPredicate21 = indexScopedSettings8.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.isPrivateSetting("index.");
        boolean boolean26 = indexScopedSettings22.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        indexScopedSettings22.validate("index.shadow_replicas", settings28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings42.applySettings(settings45);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings42.applySettings(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = indexScopedSettings22.copy(settings50, indexMetaData51);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean55 = indexScopedSettings53.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings56.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings53.applySettings(settings56);
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings53.applySettings(settings60);
        indexScopedSettings22.validate(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate21, indexScopedSettings22);
        boolean boolean64 = false; // flaky: indexSettings63.getwarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = null; // flaky: indexSettings63.indexMetaData;
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap66 = null; // flaky: indexMetaData65.getActiveAllocationIds();
        org.elasticsearch.common.io.stream.StreamInput streamInput67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = indexMetaData65.readFrom(streamInput67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + property20 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property20.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData65);
// flaky:         org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap66);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder4.numberOfReplicas((int) ' ');
        java.lang.String[] strArray30 = new java.lang.String[] { "index.blocks.read_only", "index.version.created", "index.", "index.uuid", "index.uuid", "index.uuid", "index.version.created_string", "index.", "index.", "_na_", "state-", "_na_", "state-", "index.shadow_replicas", "index.blocks.read_only", "index.shared_filesystem", "_na_", "index.blocks.read_only" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder4.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet31);
        long long34 = builder33.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder33.version((long) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long38 = builder33.primaryTerm((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexSettings21.getScopedSettings();
        java.util.function.Predicate<java.lang.String> strPredicate27 = indexScopedSettings26.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.isPrivateSetting("index.");
        boolean boolean33 = indexScopedSettings29.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getGroups("index.uuid");
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray47 = settings35.getAsArray("", strArray45, (java.lang.Boolean) false);
        indexScopedSettings29.validate("index.shadow_replicas", settings35);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings26.validate("index.creation_date_string", settings35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.creation_date_string]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(strPredicate27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        java.util.function.Predicate<java.lang.String> strPredicate21 = indexScopedSettings1.getINDEX_SETTINGS_KEY_PREDICATE();
        boolean boolean23 = indexScopedSettings1.isPrivateSetting("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData24.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData24.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData24);
        org.elasticsearch.Version version28 = indexMetaData24.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters29 = indexMetaData24.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData24.mapping("");
        org.elasticsearch.Version version32 = indexMetaData24.getUpgradedVersion();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = new org.elasticsearch.common.settings.IndexScopedSettings(settings0, indexScopedSettings1, indexMetaData24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(version28);
        org.junit.Assert.assertNull(discoveryNodeFilters29);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertNotNull(version32);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.isPrivateSetting("index.");
        boolean boolean12 = indexScopedSettings8.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings14.getGroups("index.uuid");
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray26 = settings14.getAsArray("", strArray24, (java.lang.Boolean) false);
        indexScopedSettings8.validate("index.shadow_replicas", settings14);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings14);
        org.elasticsearch.index.translog.Translog.Durability durability29 = null;
        indexSettings28.setTranslogDurability(durability29);
        org.elasticsearch.common.settings.Settings settings31 = indexSettings28.getSettings();
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder4.settings(settings31);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = builder33.mapping("index.data_path");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData37 = builder33.mapping("index.creation_date_string");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertNull(mappingMetaData37);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.Version version22 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = indexMetaData0.getState();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = null;
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings26.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings30 = settings26.getAsSettings("");
        java.lang.Boolean boolean33 = settings30.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue35 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue36 = settings30.getAsBytesSize("index.", byteSizeValue35);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params38 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = settings30.toXContent(xContentBuilder37, params38);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder40 = null;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings41.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings45 = settings41.getAsSettings("");
        java.lang.Boolean boolean48 = settings45.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue50 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = settings45.getAsBytesSize("index.", byteSizeValue50);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder52 = null;
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings53.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings57 = settings53.getAsSettings("");
        java.lang.Boolean boolean60 = settings57.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue62 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue63 = settings57.getAsBytesSize("index.", byteSizeValue62);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params65 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder66 = settings57.toXContent(xContentBuilder64, params65);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = settings45.toXContent(xContentBuilder52, params65);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder68 = settings30.toXContent(xContentBuilder40, params65);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder69 = indexMetaData0.toXContent(xContentBuilder25, params65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(version22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertEquals("'" + boolean33 + "' != '" + true + "'", boolean33, true);
        org.junit.Assert.assertNull(byteSizeValue36);
        org.junit.Assert.assertNotNull(params38);
        org.junit.Assert.assertNull(xContentBuilder39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertEquals("'" + boolean48 + "' != '" + true + "'", boolean48, true);
        org.junit.Assert.assertNull(byteSizeValue51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertEquals("'" + boolean60 + "' != '" + true + "'", boolean60, true);
        org.junit.Assert.assertNull(byteSizeValue63);
        org.junit.Assert.assertNotNull(params65);
        org.junit.Assert.assertNull(xContentBuilder66);
        org.junit.Assert.assertNull(xContentBuilder67);
        org.junit.Assert.assertNull(xContentBuilder68);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.isPrivateSetting("index.");
        boolean boolean8 = indexScopedSettings4.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings10.getGroups("index.uuid");
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray22 = settings10.getAsArray("", strArray20, (java.lang.Boolean) false);
        indexScopedSettings4.validate("index.shadow_replicas", settings10);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings10);
        indexScopedSettings0.validate(settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexScopedSettings0.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting28 = indexScopedSettings0.get("index.creation_date");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings30.applySettings(settings33);
        java.util.function.Predicate<java.lang.String> strPredicate37 = indexScopedSettings30.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        org.elasticsearch.Version version42 = null;
        org.elasticsearch.Version version43 = settings38.getAsVersion("", version42);
        boolean boolean44 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings38);
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings38);
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings30.archiveUnknownOrBrokenSettings(settings45);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate("index.creation_date", settings45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.creation_date]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNull(wildcardSetting28);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strPredicate37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNull(version43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings46);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.isPrivateSetting("index.");
        boolean boolean8 = indexScopedSettings4.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings10.getGroups("index.uuid");
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray22 = settings10.getAsArray("", strArray20, (java.lang.Boolean) false);
        indexScopedSettings4.validate("index.shadow_replicas", settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting25 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer26 = null;
        indexScopedSettings24.addSettingsUpdateConsumer(settingsSetting25, settingsConsumer26);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings24.get(settingsSetting29);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer33 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings4.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer33, settingsConsumer34);
        java.util.function.Predicate<java.lang.String> strPredicate36 = indexScopedSettings4.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = indexScopedSettings37.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings62 = settings58.getAsSettings("");
        java.lang.Boolean boolean65 = settings62.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue67 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue68 = settings62.getAsBytesSize("index.", byteSizeValue67);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder69 = null;
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings70.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings74 = settings70.getAsSettings("");
        java.lang.Boolean boolean77 = settings74.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue79 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue80 = settings74.getAsBytesSize("index.", byteSizeValue79);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder81 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params82 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder83 = settings74.toXContent(xContentBuilder81, params82);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder84 = settings62.toXContent(xContentBuilder69, params82);
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings57.dryRun(settings62);
        org.elasticsearch.common.settings.Settings settings86 = indexScopedSettings4.dryRun(settings62);
        indexScopedSettings0.validate(settings86);
        boolean boolean89 = indexScopedSettings0.isPrivateSetting("index.priority");
        boolean boolean91 = indexScopedSettings0.isPrivateSetting("index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settingsSetting25);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertEquals("'" + boolean65 + "' != '" + true + "'", boolean65, true);
        org.junit.Assert.assertNull(byteSizeValue68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertEquals("'" + boolean77 + "' != '" + true + "'", boolean77, true);
        org.junit.Assert.assertNull(byteSizeValue80);
        org.junit.Assert.assertNotNull(params82);
        org.junit.Assert.assertNull(xContentBuilder83);
        org.junit.Assert.assertNull(xContentBuilder84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean16 = indexScopedSettings14.isPrivateSetting("index.");
        boolean boolean18 = indexScopedSettings14.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getGroups("index.uuid");
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray32 = settings20.getAsArray("", strArray30, (java.lang.Boolean) false);
        indexScopedSettings14.validate("index.shadow_replicas", settings20);
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings20);
        org.elasticsearch.common.settings.Settings settings35 = indexSettings34.getSettings();
        boolean boolean36 = indexSettings34.isIndexUsingShadowReplicas();
        org.elasticsearch.Version version37 = indexSettings34.getIndexVersionCreated();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder6.put("index.creation_date_string", version37);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder40 = builder6.put(objDictionary39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(version37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("active_allocations");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        indexSettings21.setwarmerEnabled(true);
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.getSettings();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings27, streamOutput28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings27);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        boolean boolean25 = indexSettings21.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings21.syncInterval;
        java.lang.String str27 = indexSettings21.defaultField;
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings21.getsyncInterval();
        indexSettings21.maxRescoreWindow = 10000;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "_all" + "'", str27, "_all");
        org.junit.Assert.assertNotNull(timeValue28);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting4 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer5 = null;
        indexScopedSettings3.addSettingsUpdateConsumer(settingsSetting4, settingsConsumer5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer9 = null;
        indexScopedSettings7.addSettingsUpdateConsumer(settingsSetting8, settingsConsumer9);
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings3.get(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings3.dryRun(settings12);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings15.applySettings(settings18);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings15.applySettings(settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings15.get(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13, strPredicate14, indexScopedSettings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters29 = indexMetaData28.includeFilters();
        long long30 = indexMetaData28.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting32 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer33 = null;
        indexScopedSettings31.addSettingsUpdateConsumer(settingsSetting32, settingsConsumer33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting36 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer37 = null;
        indexScopedSettings35.addSettingsUpdateConsumer(settingsSetting36, settingsConsumer37);
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings31.get(settingsSetting36);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings31.dryRun(settings40);
        java.util.function.Predicate<java.lang.String> strPredicate42 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings46.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings49 = indexScopedSettings43.applySettings(settings46);
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings43.applySettings(settings50);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting52 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings43.get(settingsSetting52);
        org.elasticsearch.index.IndexSettings indexSettings54 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData28, settings41, strPredicate42, indexScopedSettings43);
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings41);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings15.validate("state-", settings55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [state-]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertNotNull(settingsSetting4);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNull(discoveryNodeFilters29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertNotNull(settingsSetting32);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertNotNull(settingsSetting36);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strPredicate42);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settingsSetting52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings55);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig25 = indexSettings21.getmergePolicyConfig();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings21.getsyncInterval();
        int int27 = indexSettings21.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig25);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.isPrivateSetting("index.");
        boolean boolean8 = indexScopedSettings4.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings10.getGroups("index.uuid");
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray22 = settings10.getAsArray("", strArray20, (java.lang.Boolean) false);
        indexScopedSettings4.validate("index.shadow_replicas", settings10);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings10);
        indexScopedSettings0.validate(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int28 = builder27.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder27.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings35 = settings33.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        java.lang.String[] strArray51 = settings33.getAsArray("index.version.minimum_compatible", strArray47, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder30.settings(settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder30.creationDate((long) 10);
        boolean boolean55 = settings10.equals((java.lang.Object) builder54);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings10.getAsGroups();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strMap56);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        boolean boolean21 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean23 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting25 = indexScopedSettings0.get("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int27 = indexMetaData26.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings28.applySettings(settings31);
        java.lang.String str36 = settings31.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting39 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer40 = null;
        indexScopedSettings38.addSettingsUpdateConsumer(settingsSetting39, settingsConsumer40);
        org.elasticsearch.index.IndexSettings indexSettings42 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData26, settings31, strPredicate37, indexScopedSettings38);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting43 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings44 = null; // flaky: indexSettings42.getValue(settingsSetting43);
        int int45 = 0; // flaky: indexSettings42.numberOfShards;
        org.elasticsearch.common.logging.ESLogger eSLogger46 = null; // flaky: indexSettings42.logger;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting47 = null; // flaky: indexSettings42.getMAX_RESULT_WINDOW_SETTING();
// flaky:         indexScopedSettings0.validateSettingKey((org.elasticsearch.common.settings.Setting) intSetting47);
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("index.uuid", 0L);
        java.lang.String str54 = builder52.get("");
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("index.version.created", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.uuid]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardSetting25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertNotNull(settingsSetting39);
        org.junit.Assert.assertNotNull(settingsSetting43);
// flaky:         org.junit.Assert.assertNotNull(settings44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
// flaky:         org.junit.Assert.assertNotNull(eSLogger46);
// flaky:         org.junit.Assert.assertNotNull(intSetting47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean25 = indexSettings21.getqueryStringAnalyzeWildcard();
        boolean boolean26 = indexSettings21.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings27.applySettings(settings30);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = settings34.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = settings36.getAsMap();
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings27.applySettings(settings36);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = settings40.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = settings42.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean48 = indexScopedSettings46.isPrivateSetting("index.");
        boolean boolean50 = indexScopedSettings46.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings52.getGroups("index.uuid");
        java.lang.String[] strArray62 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray64 = settings52.getAsArray("", strArray62, (java.lang.Boolean) false);
        indexScopedSettings46.validate("index.shadow_replicas", settings52);
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings52);
        boolean boolean68 = indexSettings66.matchesIndexName("");
        long long69 = indexSettings66.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue70 = indexSettings66.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue71 = settings42.getAsBytesSize("primary_terms", byteSizeValue70);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue72 = settings36.getAsBytesSize("index.priority", byteSizeValue70);
        indexSettings21.setTranslogFlushThresholdSize(byteSizeValue70);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings74 = indexSettings21.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData75 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int76 = indexMetaData75.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean79 = indexScopedSettings77.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings80.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings83 = indexScopedSettings77.applySettings(settings80);
        java.lang.String str85 = settings80.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate86 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings87 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting88 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer89 = null;
        indexScopedSettings87.addSettingsUpdateConsumer(settingsSetting88, settingsConsumer89);
        org.elasticsearch.index.IndexSettings indexSettings91 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData75, settings80, strPredicate86, indexScopedSettings87);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting92 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings93 = null; // flaky: indexSettings91.getValue(settingsSetting92);
        org.elasticsearch.common.settings.Settings settings94 = indexScopedSettings74.get(settingsSetting92);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue97 = settings94.getAsRatio("_na_", "index.blocks.read");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.blocks.read]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 60000L + "'", long69 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue70);
        org.junit.Assert.assertNotNull(byteSizeValue71);
        org.junit.Assert.assertNotNull(byteSizeValue72);
        org.junit.Assert.assertNotNull(indexScopedSettings74);
        org.junit.Assert.assertNotNull(indexMetaData75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(indexScopedSettings87);
        org.junit.Assert.assertNotNull(settingsSetting88);
        org.junit.Assert.assertNotNull(settingsSetting92);
// flaky:         org.junit.Assert.assertNotNull(settings93);
        org.junit.Assert.assertNotNull(settings94);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings settings9 = builder6.build();
        org.elasticsearch.common.settings.Settings settings10 = builder6.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        boolean boolean30 = indexScopedSettings26.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        indexScopedSettings26.validate("index.shadow_replicas", settings32);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings32);
        boolean boolean48 = indexSettings46.matchesIndexName("");
        long long49 = indexSettings46.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings46.getGlobalCheckpointInterval();
        indexSettings21.setRefreshInterval(timeValue50);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = indexSettings21.getScopedSettings();
        boolean boolean53 = indexSettings21.queryStringLenient;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 60000L + "'", long49 == 60000L);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray4 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList5);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder10.loadFromSource("");
        org.elasticsearch.common.settings.Settings settings13 = builder12.build();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.version.upgraded_string", false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            long long6 = builder1.primaryTerm((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        java.lang.String[] strArray30 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.", "index.blocks.read", "index.auto_expand_replicas", "index.blocks.read_only", "index.blocks.read", "state-", "index.uuid", "index.version.upgraded_string", "index.auto_expand_replicas", "archived.", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder16.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList31);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder35 = builder16.put(objDictionary34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        boolean boolean30 = indexScopedSettings26.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        indexScopedSettings26.validate("index.shadow_replicas", settings32);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings32);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting47 = indexSettings46.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData48.includeFilters();
        indexSettings46.indexMetaData = indexMetaData48;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters52 = indexMetaData48.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff53 = indexMetaData0.diff(indexMetaData48);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters54 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap55 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(booleanSetting47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
        org.junit.Assert.assertNull(discoveryNodeFilters52);
        org.junit.Assert.assertNotNull(indexMetaDataDiff53);
        org.junit.Assert.assertNull(discoveryNodeFilters54);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap55);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        java.lang.String str35 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting36 = indexSettings21.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = indexSettings21.indexMetaData;
        java.util.function.Predicate<java.lang.String> strPredicate38 = indexSettings21.indexNameMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue39 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean40 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger41 = indexSettings21.getlogger();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig42 = indexSettings21.mergePolicyConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strPredicate38);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(eSLogger41);
        org.junit.Assert.assertNotNull(mergePolicyConfig42);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.uuid", custom1);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.version.upgraded_string");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.version.upgraded_string]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.version.created");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.version.created]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder4.numberOfReplicas((int) ' ');
        java.lang.String[] strArray30 = new java.lang.String[] { "index.blocks.read_only", "index.version.created", "index.", "index.uuid", "index.uuid", "index.uuid", "index.version.created_string", "index.", "index.", "_na_", "state-", "_na_", "state-", "index.shadow_replicas", "index.blocks.read_only", "index.shared_filesystem", "_na_", "index.blocks.read_only" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder4.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet31);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder4.primaryTerm(10, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings21.getsyncInterval();
        int int36 = indexSettings21.getMaxRescoreWindow();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig37 = indexSettings21.getMergeSchedulerConfig();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting38 = indexSettings21.getALLOW_UNMAPPED();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig37);
        org.junit.Assert.assertNotNull(booleanSetting38);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
// flaky:         indexSettings16.gcDeletesInMillis = (-1L);
// flaky:         indexSettings16.TTLPurgeDisabled = true;
// flaky:         indexSettings16.gcDeletesInMillis = 0L;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        int int23 = indexSettings21.getNumberOfShards();
        indexSettings21.gcDeletesInMillis = (byte) 10;
        indexSettings21.maxResultWindow = 0;
        boolean boolean28 = indexSettings21.queryStringAllowLeadingWildcard;
        int int29 = indexSettings21.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        indexSettings51.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue54 = indexSettings51.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Settings settings55 = indexSettings51.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.isPrivateSetting("index.");
        boolean boolean61 = indexScopedSettings57.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings63.getGroups("index.uuid");
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray75 = settings63.getAsArray("", strArray73, (java.lang.Boolean) false);
        indexScopedSettings57.validate("index.shadow_replicas", settings63);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings63);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting78 = indexSettings77.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability79 = indexSettings77.durability;
        indexSettings51.setdurability(durability79);
        indexSettings21.durability = durability79;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher82 = indexSettings21.getParseFieldMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(timeValueSetting78);
        org.junit.Assert.assertTrue("'" + durability79 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability79.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher82);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "index.number_of_shards", "hi!", "archived.", "index.", "index.version.created", "index.data_path", "hi!", "index.version.upgraded_string", "index.shared_filesystem.recover_on_any_node", "primary_terms", "index.shared_filesystem.recover_on_any_node", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder3.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList27);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.uuid", 0L);
        java.lang.String str36 = builder34.get("");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder34.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder34.put("", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "index.shadow_replicas", "index.number_of_shards", "hi!", "archived.", "index.", "index.version.created", "index.data_path", "hi!", "index.version.upgraded_string", "index.shared_filesystem.recover_on_any_node", "primary_terms", "index.shared_filesystem.recover_on_any_node", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder34.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList58);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean64 = indexScopedSettings62.isPrivateSetting("index.");
        boolean boolean66 = indexScopedSettings62.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap70 = settings68.getGroups("index.uuid");
        java.lang.String[] strArray78 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray80 = settings68.getAsArray("", strArray78, (java.lang.Boolean) false);
        indexScopedSettings62.validate("index.shadow_replicas", settings68);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings82 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean84 = indexScopedSettings82.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap87 = settings85.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings88 = indexScopedSettings82.applySettings(settings85);
        org.elasticsearch.common.settings.Settings settings89 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings90 = indexScopedSettings82.applySettings(settings89);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData91 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings92 = indexScopedSettings62.copy(settings90, indexMetaData91);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap93 = indexMetaData91.getAliases();
        org.elasticsearch.Version version94 = indexMetaData91.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder34.put("_na_", version94);
        java.lang.String str97 = builder34.remove("index.creation_date_string");
        java.util.Map<java.lang.String, java.lang.String> strMap98 = builder34.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder99 = builder30.put(strMap98);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(indexScopedSettings82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strMap87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(indexMetaData91);
        org.junit.Assert.assertNotNull(indexScopedSettings92);
        org.junit.Assert.assertNotNull(strImmutableOpenMap93);
        org.junit.Assert.assertNotNull(version94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertNotNull(strMap98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings20.applySettings(settings23);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.applySettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexScopedSettings0.copy(settings28, indexMetaData29);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings31.applySettings(settings34);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings31.applySettings(settings38);
        indexScopedSettings0.validate(settings39);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting41 = org.elasticsearch.index.IndexSettings.INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING;
        indexScopedSettings0.validateSettingKey((org.elasticsearch.common.settings.Setting) byteSizeValueSetting41);
        org.elasticsearch.common.settings.Settings.Builder builder43 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.put("index.uuid", 0L);
        java.lang.String str48 = builder46.get("");
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder46.put("index.version.created", (long) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder46.put("index.shadow_replicas", false);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.uuid]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(byteSizeValueSetting41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        boolean boolean25 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig26 = indexSettings21.getmergePolicyConfig();
        indexSettings21.warmerEnabled = true;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig26);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        int int26 = indexSettings21.getNumberOfShards();
        long long27 = indexSettings21.gcDeletesInMillis;
        boolean boolean28 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        boolean boolean34 = indexScopedSettings30.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.uuid");
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray48 = settings36.getAsArray("", strArray46, (java.lang.Boolean) false);
        indexScopedSettings30.validate("index.shadow_replicas", settings36);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings36);
        indexSettings50.setEnableWarmer(true);
        java.lang.String str53 = indexSettings50.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = indexSettings50.getIndexMetaData();
        java.lang.String str55 = indexSettings50.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy56 = indexSettings50.getMergePolicy();
        org.elasticsearch.common.logging.ESLogger eSLogger57 = indexSettings50.getlogger();
        org.elasticsearch.common.settings.Settings settings58 = indexSettings50.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean63 = indexScopedSettings61.isPrivateSetting("index.");
        boolean boolean65 = indexScopedSettings61.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap69 = settings67.getGroups("index.uuid");
        java.lang.String[] strArray77 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray79 = settings67.getAsArray("", strArray77, (java.lang.Boolean) false);
        indexScopedSettings61.validate("index.shadow_replicas", settings67);
        org.elasticsearch.index.IndexSettings indexSettings81 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings67);
        org.elasticsearch.common.unit.TimeValue timeValue82 = indexSettings81.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue83 = settings58.getAsTime("index.data_path", timeValue82);
        indexSettings21.refreshInterval = timeValue82;
        long long85 = indexSettings21.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 60000L + "'", long27 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(mergePolicy56);
        org.junit.Assert.assertNotNull(eSLogger57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(timeValue82);
        org.junit.Assert.assertNotNull(timeValue83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 60000L + "'", long85 == 60000L);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.excludeFilters();
        java.lang.Object obj2 = null;
        boolean boolean3 = indexMetaData0.equals(obj2);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mappingOrDefault("hi!");
        int int6 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = null;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings8.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings12 = settings8.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = null;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings14.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings18 = settings14.getAsSettings("");
        java.lang.Boolean boolean21 = settings18.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue23 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue24 = settings18.getAsBytesSize("index.", byteSizeValue23);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params26 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = settings18.toXContent(xContentBuilder25, params26);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = null;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings33 = settings29.getAsSettings("");
        java.lang.Boolean boolean36 = settings33.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue38 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue39 = settings33.getAsBytesSize("index.", byteSizeValue38);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder40 = null;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings41.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings45 = settings41.getAsSettings("");
        java.lang.Boolean boolean48 = settings45.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue50 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = settings45.getAsBytesSize("index.", byteSizeValue50);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder52 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params53 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder54 = settings45.toXContent(xContentBuilder52, params53);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = settings33.toXContent(xContentBuilder40, params53);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = settings18.toXContent(xContentBuilder28, params53);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings12.toXContent(xContentBuilder13, params53);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder7, params53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + true + "'", boolean21, true);
        org.junit.Assert.assertNull(byteSizeValue24);
        org.junit.Assert.assertNotNull(params26);
        org.junit.Assert.assertNull(xContentBuilder27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + boolean36 + "' != '" + true + "'", boolean36, true);
        org.junit.Assert.assertNull(byteSizeValue39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertEquals("'" + boolean48 + "' != '" + true + "'", boolean48, true);
        org.junit.Assert.assertNull(byteSizeValue51);
        org.junit.Assert.assertNotNull(params53);
        org.junit.Assert.assertNull(xContentBuilder54);
        org.junit.Assert.assertNull(xContentBuilder55);
        org.junit.Assert.assertNull(xContentBuilder56);
        org.junit.Assert.assertNull(xContentBuilder57);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue23 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.Version version24 = indexSettings21.getIndexVersionCreated();
        long long25 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting26 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        boolean boolean27 = indexSettings21.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(byteSizeValue23);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 60000L + "'", long25 == 60000L);
        org.junit.Assert.assertNotNull(strSetting26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("index.uuid", 0L);
        java.lang.String str24 = builder22.get("");
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings34 = settings30.getAsSettings("");
        java.lang.Boolean boolean37 = settings34.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue39 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue40 = settings34.getAsBytesSize("index.", byteSizeValue39);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = null;
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings42.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings46 = settings42.getAsSettings("");
        java.lang.Boolean boolean49 = settings46.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue52 = settings46.getAsBytesSize("index.", byteSizeValue51);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params54 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = settings46.toXContent(xContentBuilder53, params54);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = settings34.toXContent(xContentBuilder41, params54);
        java.lang.Class<?> wildcardClass57 = settings34.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder28.put("index.version.upgraded_string", (java.lang.Class) wildcardClass57);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder17.put("_all", (java.lang.Class) wildcardClass57);
        java.lang.String[] strArray65 = new java.lang.String[] { "index.creation_date", "index.blocks.read_only", "index.shared_filesystem", "index.uuid" };
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder59.putArray("index.version.upgraded", strArray65);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean71 = indexScopedSettings69.isPrivateSetting("index.");
        boolean boolean73 = indexScopedSettings69.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings75.getGroups("index.uuid");
        java.lang.String[] strArray85 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray87 = settings75.getAsArray("", strArray85, (java.lang.Boolean) false);
        indexScopedSettings69.validate("index.shadow_replicas", settings75);
        org.elasticsearch.index.IndexSettings indexSettings89 = new org.elasticsearch.index.IndexSettings(indexMetaData68, settings75);
        org.elasticsearch.index.translog.Translog.Durability durability90 = null;
        indexSettings89.setTranslogDurability(durability90);
        org.elasticsearch.common.unit.TimeValue timeValue92 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings89.setGCDeletes(timeValue92);
        org.elasticsearch.Version version94 = indexSettings89.getversion();
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder66.put("index.version.minimum_compatible", version94);
        java.lang.String str97 = builder95.remove("index.blocks.write");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + boolean37 + "' != '" + true + "'", boolean37, true);
        org.junit.Assert.assertNull(byteSizeValue40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertEquals("'" + boolean49 + "' != '" + true + "'", boolean49, true);
        org.junit.Assert.assertNull(byteSizeValue52);
        org.junit.Assert.assertNotNull(params54);
        org.junit.Assert.assertNull(xContentBuilder55);
        org.junit.Assert.assertNull(xContentBuilder56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(timeValue92);
        org.junit.Assert.assertNotNull(version94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        java.lang.String str35 = indexSettings21.getNodeName();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = indexSettings21.scopedSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(indexScopedSettings36);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.uuid", 0L);
        java.lang.String str16 = builder14.get("");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem", (int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = settings26.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray42 = settings30.getAsArray("", strArray40, (java.lang.Boolean) false);
        java.lang.String[] strArray44 = settings26.getAsArray("index.version.minimum_compatible", strArray40, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray57 = settings45.getAsArray("", strArray55, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder20.put("", "state-", strArray40, strArray55);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder9.extendArray("archived.", strArray55);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder9.put("", (int) '#');
        java.io.InputStream inputStream64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.loadFromStream("index.creation_date_string", inputStream64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.isPrivateSetting("index.");
        boolean boolean8 = indexScopedSettings4.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings10.getGroups("index.uuid");
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray22 = settings10.getAsArray("", strArray20, (java.lang.Boolean) false);
        indexScopedSettings4.validate("index.shadow_replicas", settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting25 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer26 = null;
        indexScopedSettings24.addSettingsUpdateConsumer(settingsSetting25, settingsConsumer26);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings24.get(settingsSetting29);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer33 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings4.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer33, settingsConsumer34);
        java.util.function.Predicate<java.lang.String> strPredicate36 = indexScopedSettings4.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = indexScopedSettings37.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings62 = settings58.getAsSettings("");
        java.lang.Boolean boolean65 = settings62.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue67 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue68 = settings62.getAsBytesSize("index.", byteSizeValue67);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder69 = null;
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings70.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings74 = settings70.getAsSettings("");
        java.lang.Boolean boolean77 = settings74.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue79 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue80 = settings74.getAsBytesSize("index.", byteSizeValue79);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder81 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params82 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder83 = settings74.toXContent(xContentBuilder81, params82);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder84 = settings62.toXContent(xContentBuilder69, params82);
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings57.dryRun(settings62);
        org.elasticsearch.common.settings.Settings settings86 = indexScopedSettings4.dryRun(settings62);
        indexScopedSettings0.validate(settings86);
        boolean boolean89 = indexScopedSettings0.isPrivateSetting("index.priority");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting90 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer91 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer92 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting90, settingsConsumer91, settingsConsumer92);
        boolean boolean95 = indexScopedSettings0.isPrivateSetting("index.version.upgraded");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settingsSetting25);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertEquals("'" + boolean65 + "' != '" + true + "'", boolean65, true);
        org.junit.Assert.assertNull(byteSizeValue68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertEquals("'" + boolean77 + "' != '" + true + "'", boolean77, true);
        org.junit.Assert.assertNull(byteSizeValue80);
        org.junit.Assert.assertNotNull(params82);
        org.junit.Assert.assertNull(xContentBuilder83);
        org.junit.Assert.assertNull(xContentBuilder84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(settingsSetting90);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder3.loadFromSource("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int21 = indexMetaData20.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap22 = indexMetaData20.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData20.requireFilters();
        org.elasticsearch.Version version24 = indexMetaData20.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder3.put("hi!", version24);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.uuid", 0L);
        java.lang.String str31 = builder29.get("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = settings32.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = settings34.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction37 = null;
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder29.putProperties(strMap35, strPredicate36, strFunction37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder25.put(strMap35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int41 = indexMetaData40.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings42.applySettings(settings45);
        java.lang.String str50 = settings45.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45, strPredicate51, indexScopedSettings52);
        int int57 = 0; // flaky: indexSettings56.getNumberOfReplicas();
        int int58 = 0; // flaky: indexSettings56.getMaxRescoreWindow();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean61 = indexScopedSettings59.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings62.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings59.applySettings(settings62);
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings67 = indexScopedSettings59.applySettings(settings66);
        boolean boolean68 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings66);
// flaky:         indexSettings56.settings = settings66;
        org.elasticsearch.common.settings.Settings settings71 = settings66.getAsSettings("");
        java.lang.String str73 = settings71.get("index.blocks.read");
        org.elasticsearch.common.settings.Settings settings75 = settings71.getAsSettings("index.version.minimum_compatible");
        java.util.Map<java.lang.String, java.lang.String> strMap76 = settings71.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder39.put(strMap76);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10000 + "'", int58 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.version.created_string");
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.putAlias(builder6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.putNull("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings12.applySettings(settings15);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "index.uuid", "index.number_of_shards" };
        java.lang.String[] strArray26 = settings18.getAsArray("index.version.created", strArray24, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder6.extendArray("index.version.created_string", strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.uuid", 0L);
        java.lang.String str34 = builder32.get("");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.uuid", 0L);
        java.lang.String str45 = builder43.get("");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("index.shared_filesystem", (int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings57 = settings55.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings59.getGroups("index.uuid");
        java.lang.String[] strArray69 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray71 = settings59.getAsArray("", strArray69, (java.lang.Boolean) false);
        java.lang.String[] strArray73 = settings55.getAsArray("index.version.minimum_compatible", strArray69, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap76 = settings74.getGroups("index.uuid");
        java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray86 = settings74.getAsArray("", strArray84, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder49.put("", "state-", strArray69, strArray84);
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder38.extendArray("archived.", strArray84);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder6.putArray("archived.", strArray84);
        java.nio.file.Path path90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder91 = builder6.loadFromPath(path90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean73 = indexSettings21.getwarmerEnabled();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting74 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        java.lang.String str75 = indexSettings21.nodeName;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(booleanSetting74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting28 = indexSettings21.getINDEX_TRANSLOG_DURABILITY_SETTING();
        indexSettings21.setMaxRescoreWindow((int) ' ');
        boolean boolean31 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.isPrivateSetting("index.");
        boolean boolean37 = indexScopedSettings33.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.uuid");
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray51 = settings39.getAsArray("", strArray49, (java.lang.Boolean) false);
        indexScopedSettings33.validate("index.shadow_replicas", settings39);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings39);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap54 = indexMetaData32.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap55 = indexMetaData32.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters56 = indexMetaData32.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting79 = indexSettings78.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters81 = indexMetaData80.includeFilters();
        indexSettings78.indexMetaData = indexMetaData80;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData80);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters84 = indexMetaData80.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff85 = indexMetaData32.diff(indexMetaData80);
        boolean boolean87 = indexMetaData80.isSameUUID("index.version.minimum_compatible");
        indexSettings21.indexMetaData = indexMetaData80;
        long long89 = indexMetaData80.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(durabilitySetting28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strImmutableOpenMap54);
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertNull(discoveryNodeFilters56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(booleanSetting79);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNull(discoveryNodeFilters81);
        org.junit.Assert.assertNull(discoveryNodeFilters84);
        org.junit.Assert.assertNotNull(indexMetaDataDiff85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1L + "'", long89 == 1L);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting23 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.isPrivateSetting("index.");
        boolean boolean28 = indexScopedSettings24.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray42 = settings30.getAsArray("", strArray40, (java.lang.Boolean) false);
        indexScopedSettings24.validate("index.shadow_replicas", settings30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean46 = indexScopedSettings44.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap49 = settings47.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings44.applySettings(settings47);
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings44.applySettings(settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = indexScopedSettings24.copy(settings52, indexMetaData53);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean57 = indexScopedSettings55.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings55.applySettings(settings58);
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings55.applySettings(settings62);
        indexScopedSettings24.validate(settings63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting66 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings65.addSettingsUpdateConsumer(settingsSetting66, settingsConsumer67);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting70 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer71 = null;
        indexScopedSettings69.addSettingsUpdateConsumer(settingsSetting70, settingsConsumer71);
        org.elasticsearch.common.settings.Settings settings73 = indexScopedSettings65.get(settingsSetting70);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings74 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting75 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer76 = null;
        indexScopedSettings74.addSettingsUpdateConsumer(settingsSetting75, settingsConsumer76);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer78 = null;
        indexScopedSettings24.addSettingsUpdateConsumer(settingsSetting70, settingsSetting75, settingsBiConsumer78);
        java.util.function.BiConsumer<org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Settings> settingsBiConsumer80 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings22.addSettingsUpdateConsumer(settingsSetting23, settingsSetting75, settingsBiConsumer80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(indexScopedSettings54);
        org.junit.Assert.assertNotNull(indexScopedSettings55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertNotNull(settingsSetting66);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertNotNull(settingsSetting70);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(indexScopedSettings74);
        org.junit.Assert.assertNotNull(settingsSetting75);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings9.getGroups("index.uuid");
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray21 = settings9.getAsArray("", strArray19, (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.String> strMap22 = settings9.getAsMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.isPrivateSetting("index.");
        boolean boolean27 = indexScopedSettings23.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getGroups("index.uuid");
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray41 = settings29.getAsArray("", strArray39, (java.lang.Boolean) false);
        indexScopedSettings23.validate("index.shadow_replicas", settings29);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = indexScopedSettings23.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings44.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings48 = settings44.getAsSettings("");
        java.lang.Boolean boolean51 = settings48.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue53 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue54 = settings48.getAsBytesSize("index.", byteSizeValue53);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings56.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings60 = settings56.getAsSettings("");
        java.lang.Boolean boolean63 = settings60.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue65 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue66 = settings60.getAsBytesSize("index.", byteSizeValue65);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params68 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder69 = settings60.toXContent(xContentBuilder67, params68);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder70 = settings48.toXContent(xContentBuilder55, params68);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings43.dryRun(settings48);
        java.util.function.Predicate<java.lang.String> strPredicate72 = indexScopedSettings43.getINDEX_SETTINGS_KEY_PREDICATE();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction73 = null;
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder8.putProperties(strMap22, strPredicate72, strFunction73);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder76 = builder74.put(objDictionary75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + boolean51 + "' != '" + true + "'", boolean51, true);
        org.junit.Assert.assertNull(byteSizeValue54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertEquals("'" + boolean63 + "' != '" + true + "'", boolean63, true);
        org.junit.Assert.assertNull(byteSizeValue66);
        org.junit.Assert.assertNotNull(params68);
        org.junit.Assert.assertNull(xContentBuilder69);
        org.junit.Assert.assertNull(xContentBuilder70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strPredicate72);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings27.applySettings(settings30);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings27.applySettings(settings34);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting36 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings27.get(settingsSetting36);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.isPrivateSetting("index.");
        boolean boolean42 = indexScopedSettings38.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings44.getGroups("index.uuid");
        java.lang.String[] strArray54 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray56 = settings44.getAsArray("", strArray54, (java.lang.Boolean) false);
        indexScopedSettings38.validate("index.shadow_replicas", settings44);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting59 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer60 = null;
        indexScopedSettings58.addSettingsUpdateConsumer(settingsSetting59, settingsConsumer60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting63 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer64 = null;
        indexScopedSettings62.addSettingsUpdateConsumer(settingsSetting63, settingsConsumer64);
        org.elasticsearch.common.settings.Settings settings66 = indexScopedSettings58.get(settingsSetting63);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer68 = null;
        indexScopedSettings38.addSettingsUpdateConsumer(settingsSetting63, settingsConsumer67, settingsConsumer68);
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings27.get(settingsSetting63);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings72 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean74 = indexScopedSettings72.isPrivateSetting("index.");
        boolean boolean76 = indexScopedSettings72.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap80 = settings78.getGroups("index.uuid");
        java.lang.String[] strArray88 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray90 = settings78.getAsArray("", strArray88, (java.lang.Boolean) false);
        indexScopedSettings72.validate("index.shadow_replicas", settings78);
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings78);
        indexSettings92.setEnableWarmer(true);
        java.lang.String str95 = indexSettings92.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData96 = indexSettings92.getIndexMetaData();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings97 = new org.elasticsearch.common.settings.IndexScopedSettings(settings26, indexScopedSettings27, indexMetaData96);
        java.lang.String str98 = indexScopedSettings27.nodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settingsSetting36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertNotNull(settingsSetting59);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertNotNull(settingsSetting63);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(indexScopedSettings72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNotNull(indexMetaData96);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        boolean boolean24 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getDEFAULT_GC_DELETES();
        java.util.function.Predicate<java.lang.String> strPredicate26 = indexSettings21.indexNameMatcher;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig27 = indexSettings21.mergePolicyConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(mergePolicyConfig27);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability23 = indexSettings21.durability;
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        boolean boolean26 = indexSettings21.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.isPrivateSetting("index.");
        boolean boolean32 = indexScopedSettings28.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.uuid");
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray46 = settings34.getAsArray("", strArray44, (java.lang.Boolean) false);
        indexScopedSettings28.validate("index.shadow_replicas", settings34);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings34);
        indexSettings48.setEnableWarmer(true);
        java.lang.String str51 = indexSettings48.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = indexSettings48.getIndexMetaData();
        java.lang.String str53 = indexSettings48.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability54 = indexSettings48.getTranslogDurability();
        indexSettings21.setdurability(durability54);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting56 = indexSettings21.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + durability54 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability54.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(booleanSetting56);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        int int56 = indexSettings21.getMaxResultWindow();
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings21.getTranslogSyncInterval();
        java.lang.String str58 = indexSettings21.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10000 + "'", int56 == 10000);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder3.loadFromSource("index.number_of_shards");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder19 = builder3.put(objDictionary18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting26 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        indexSettings21.setMaxRescoreWindow((int) (short) 10);
        boolean boolean29 = indexSettings21.getqueryStringAnalyzeWildcard();
        int int30 = indexSettings21.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(timeValueSetting26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        boolean boolean23 = indexSettings21.isIndexUsingShadowReplicas();
        int int24 = indexSettings21.getNumberOfShards();
        java.lang.String str25 = indexSettings21.nodeName;
        indexSettings21.setMaxResultWindow(0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.isPrivateSetting("index.");
        boolean boolean14 = indexScopedSettings10.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings16.getGroups("index.uuid");
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray28 = settings16.getAsArray("", strArray26, (java.lang.Boolean) false);
        indexScopedSettings10.validate("index.shadow_replicas", settings16);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings16);
        indexSettings30.setEnableWarmer(true);
        java.lang.String str33 = indexSettings30.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = indexSettings30.getIndexMetaData();
        java.lang.String str35 = indexSettings30.getNodeName();
        org.elasticsearch.common.settings.Settings settings36 = indexSettings30.getNodeSettings();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder8.put(settings36);
        java.io.InputStream inputStream39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.loadFromStream("index.creation_date_string", inputStream39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        boolean boolean56 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        indexSettings78.setEnableWarmer(true);
        java.lang.String str81 = indexSettings78.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = indexSettings78.getIndexMetaData();
        indexSettings21.indexMetaData = indexMetaData82;
        java.util.Set<java.lang.String> strSet85 = indexMetaData82.activeAllocationIds((int) (short) 0);
        org.elasticsearch.index.Index index86 = indexMetaData82.getMergeSourceIndex();
        org.elasticsearch.common.io.stream.StreamInput streamInput87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData88 = indexMetaData82.readFrom(streamInput87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNull(index86);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
// flaky:         indexSettings16.gcDeletesInMillis = (-1L);
// flaky:         indexSettings16.TTLPurgeDisabled = true;
        int int22 = 0; // flaky: indexSettings16.getMaxRescoreWindow();
        org.elasticsearch.index.translog.Translog.Durability durability23 = null; // flaky: indexSettings16.getdurability();
        boolean boolean24 = false; // flaky: indexSettings16.queryStringAllowLeadingWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
// flaky:         org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray39 = settings27.getAsArray("", strArray37, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder4.settings(settings27);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder40.putAlias(builder41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(settingsSetting33, settingsConsumer34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.get(settingsSetting33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer59 = null;
        indexScopedSettings57.addSettingsUpdateConsumer(settingsSetting58, settingsConsumer59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings57.get(settingsSetting62);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer66, settingsConsumer67);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer69);
        org.elasticsearch.common.settings.Settings settings71 = indexSettings21.getValue(settingsSetting62);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting72 = indexSettings21.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData73 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings74 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean76 = indexScopedSettings74.isPrivateSetting("index.");
        boolean boolean78 = indexScopedSettings74.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings80.getGroups("index.uuid");
        java.lang.String[] strArray90 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray92 = settings80.getAsArray("", strArray90, (java.lang.Boolean) false);
        indexScopedSettings74.validate("index.shadow_replicas", settings80);
        org.elasticsearch.index.IndexSettings indexSettings94 = new org.elasticsearch.index.IndexSettings(indexMetaData73, settings80);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting95 = indexSettings94.getINDEX_REFRESH_INTERVAL_SETTING();
        boolean boolean96 = indexSettings94.isShadowReplicaIndex;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher97 = indexSettings94.getParseFieldMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability98 = indexSettings94.durability;
        indexSettings21.setTranslogDurability(durability98);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(intSetting72);
        org.junit.Assert.assertNotNull(indexMetaData73);
        org.junit.Assert.assertNotNull(indexScopedSettings74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(timeValueSetting95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher97);
        org.junit.Assert.assertTrue("'" + durability98 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability98.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        int int23 = indexSettings21.getNumberOfShards();
        indexSettings21.gcDeletesInMillis = (byte) 10;
        indexSettings21.maxResultWindow = 0;
        boolean boolean28 = indexSettings21.queryStringAllowLeadingWildcard;
        int int29 = indexSettings21.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.isPrivateSetting("index.");
        boolean boolean35 = indexScopedSettings31.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        indexScopedSettings31.validate("index.shadow_replicas", settings37);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings37);
        indexSettings51.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue54 = indexSettings51.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Settings settings55 = indexSettings51.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.isPrivateSetting("index.");
        boolean boolean61 = indexScopedSettings57.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings63.getGroups("index.uuid");
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray75 = settings63.getAsArray("", strArray73, (java.lang.Boolean) false);
        indexScopedSettings57.validate("index.shadow_replicas", settings63);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings63);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting78 = indexSettings77.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability79 = indexSettings77.durability;
        indexSettings51.setdurability(durability79);
        indexSettings21.durability = durability79;
        org.elasticsearch.common.settings.Settings settings82 = indexSettings21.nodeSettings;
        indexSettings21.maxResultWindow = 1;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(timeValueSetting78);
        org.junit.Assert.assertTrue("'" + durability79 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability79.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings82);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.excludeFilters();
        java.lang.Object obj2 = null;
        boolean boolean3 = indexMetaData0.equals(obj2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.version.upgraded_string");
        org.elasticsearch.common.io.stream.StreamInput streamInput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.readDiffFrom(streamInput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(mappingMetaData6);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue28 = null;
        indexSettings21.flushThresholdSize = byteSizeValue28;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = indexSettings21.scopedSettings;
        java.lang.String str31 = indexScopedSettings30.nodeName();
        org.elasticsearch.common.settings.Settings settings32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings30.dryRun(settings32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.auto_expand_replicas");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
// flaky:         indexSettings16.gcDeletesInMillis = (-1L);
// flaky:         indexSettings16.TTLPurgeDisabled = true;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting22 = null; // flaky: indexSettings16.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = indexSettings16.matchesIndexName("index.blocks.read");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValueSetting22);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig25 = indexSettings21.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = indexSettings21.indexMetaData;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = indexMetaData27.getState();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput29 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData27.writeTo(streamOutput29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(mergePolicyConfig25);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.isPrivateSetting("index.");
        boolean boolean8 = indexScopedSettings4.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings10.getGroups("index.uuid");
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray22 = settings10.getAsArray("", strArray20, (java.lang.Boolean) false);
        indexScopedSettings4.validate("index.shadow_replicas", settings10);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings10);
        indexScopedSettings0.validate(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int28 = builder27.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder27.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings35 = settings33.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray49 = settings37.getAsArray("", strArray47, (java.lang.Boolean) false);
        java.lang.String[] strArray51 = settings33.getAsArray("index.version.minimum_compatible", strArray47, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder30.settings(settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder30.creationDate((long) 10);
        boolean boolean55 = settings10.equals((java.lang.Object) builder54);
        boolean boolean56 = settings10.isEmpty();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray4 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList5);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.created", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.shadow_replicas", (double) 10);
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.uuid", 0L);
        java.lang.String str19 = builder17.get("");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray35 = settings23.getAsArray("", strArray33, (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = settings23.getAsMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.isPrivateSetting("index.");
        boolean boolean41 = indexScopedSettings37.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.uuid");
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray55 = settings43.getAsArray("", strArray53, (java.lang.Boolean) false);
        indexScopedSettings37.validate("index.shadow_replicas", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = indexScopedSettings37.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings62 = settings58.getAsSettings("");
        java.lang.Boolean boolean65 = settings62.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue67 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue68 = settings62.getAsBytesSize("index.", byteSizeValue67);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder69 = null;
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings70.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings74 = settings70.getAsSettings("");
        java.lang.Boolean boolean77 = settings74.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue79 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue80 = settings74.getAsBytesSize("index.", byteSizeValue79);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder81 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params82 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder83 = settings74.toXContent(xContentBuilder81, params82);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder84 = settings62.toXContent(xContentBuilder69, params82);
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings57.dryRun(settings62);
        java.util.function.Predicate<java.lang.String> strPredicate86 = indexScopedSettings57.getINDEX_SETTINGS_KEY_PREDICATE();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction87 = null;
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder22.putProperties(strMap36, strPredicate86, strFunction87);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder10.put(strMap36);
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder89.loadFromSource("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder89.put("index.version.minimum_compatible", (double) '4');
        org.elasticsearch.common.settings.Settings.Builder builder96 = builder94.loadFromSource("index.priority");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertEquals("'" + boolean65 + "' != '" + true + "'", boolean65, true);
        org.junit.Assert.assertNull(byteSizeValue68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertEquals("'" + boolean77 + "' != '" + true + "'", boolean77, true);
        org.junit.Assert.assertNull(byteSizeValue80);
        org.junit.Assert.assertNotNull(params82);
        org.junit.Assert.assertNull(xContentBuilder83);
        org.junit.Assert.assertNull(xContentBuilder84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strPredicate86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        int int26 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings27 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters29 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version30 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(discoveryNodeFilters29);
        org.junit.Assert.assertNotNull(version30);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.putMapping("index.shadow_replicas", "index.creation_date");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        boolean boolean30 = indexScopedSettings26.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings32.getGroups("index.uuid");
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray44 = settings32.getAsArray("", strArray42, (java.lang.Boolean) false);
        indexScopedSettings26.validate("index.shadow_replicas", settings32);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings32);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting47 = indexSettings46.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData48.includeFilters();
        indexSettings46.indexMetaData = indexMetaData48;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters52 = indexMetaData48.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff53 = indexMetaData0.diff(indexMetaData48);
        boolean boolean55 = indexMetaData48.isSameUUID("index.version.minimum_compatible");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap56 = indexMetaData48.getMappings();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput57 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData48.writeTo(streamOutput57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(booleanSetting47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
        org.junit.Assert.assertNull(discoveryNodeFilters52);
        org.junit.Assert.assertNotNull(indexMetaDataDiff53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap56);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings26.applySettings(settings29);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings26.applySettings(settings33);
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.common.unit.SizeValue sizeValue37 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue38 = settings33.getAsSize("index.shadow_replicas", sizeValue37);
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings33);
        java.lang.Boolean boolean43 = settings33.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(sizeValue38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + boolean43 + "' != '" + false + "'", boolean43, false);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.common.settings.Settings.Builder builder3 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.uuid", 0L);
        java.lang.String str8 = builder6.get("");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.putNull("hi!");
        java.lang.String str13 = builder11.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder11.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean20 = indexScopedSettings18.isPrivateSetting("index.");
        boolean boolean22 = indexScopedSettings18.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings24.getGroups("index.uuid");
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray36 = settings24.getAsArray("", strArray34, (java.lang.Boolean) false);
        indexScopedSettings18.validate("index.shadow_replicas", settings24);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings24);
        org.elasticsearch.index.translog.Translog.Durability durability39 = null;
        indexSettings38.setTranslogDurability(durability39);
        org.elasticsearch.common.unit.TimeValue timeValue41 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings38.setGCDeletes(timeValue41);
        org.elasticsearch.Version version43 = indexSettings38.version;
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder11.put("active_allocations", version43);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.put("active_allocations", (float) 10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder1.settings(builder44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("index.uuid", 0L);
        java.lang.String str54 = builder52.get("");
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder52.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder52.put("", true);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder52.put("primary_terms", 100.0f);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder1.settings(builder63);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.shared_filesystem" + "'", str2, "index.shared_filesystem");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(version43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings21.getdurability();
        org.elasticsearch.index.translog.Translog.Durability durability28 = indexSettings21.getdurability();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = indexSettings21.getScopedSettings();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting30 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(durability27);
        org.junit.Assert.assertNull(durability28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(strSetting30);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.data_path");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.primaryTerm(0, 52L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings21.scopedSettings;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer25 = null;
        indexScopedSettings23.addSettingsUpdateConsumer(settingsSetting24, settingsConsumer25);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings31 = settings27.getAsSettings("");
        java.lang.Boolean boolean34 = settings31.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue36 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue37 = settings31.getAsBytesSize("index.", byteSizeValue36);
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.uuid", 0L);
        java.lang.String str43 = builder41.get("");
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder41.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings49 = settings47.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap50 = settings49.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction52 = null;
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder41.putProperties(strMap50, strPredicate51, strFunction52);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder41.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder56 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("index.uuid", 0L);
        java.lang.String str61 = builder59.get("");
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder59.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder59.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings67 = settings65.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap68 = settings67.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction70 = null;
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder59.putProperties(strMap68, strPredicate69, strFunction70);
        boolean boolean73 = indexScopedSettings23.updateSettings(settings31, builder41, builder71, "index.uuid");
        boolean boolean74 = settings31.isEmpty();
        indexScopedSettings22.validate(settings31);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings31.getGroups("primary_terms");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertEquals("'" + boolean34 + "' != '" + true + "'", boolean34, true);
        org.junit.Assert.assertNull(byteSizeValue37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strMap77);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings15 = settings11.getAsSettings("");
        java.lang.Boolean boolean18 = settings15.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue20 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue21 = settings15.getAsBytesSize("index.", byteSizeValue20);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = null;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings27 = settings23.getAsSettings("");
        java.lang.Boolean boolean30 = settings27.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue32 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue33 = settings27.getAsBytesSize("index.", byteSizeValue32);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params35 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings27.toXContent(xContentBuilder34, params35);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = settings15.toXContent(xContentBuilder22, params35);
        java.lang.Class<?> wildcardClass38 = settings15.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder9.put("index.version.upgraded_string", (java.lang.Class) wildcardClass38);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder43 = builder39.put("index.creation_date_string", (long) 0, byteSizeUnit42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertEquals("'" + boolean18 + "' != '" + true + "'", boolean18, true);
        org.junit.Assert.assertNull(byteSizeValue21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + true + "'", boolean30, true);
        org.junit.Assert.assertNull(byteSizeValue33);
        org.junit.Assert.assertNotNull(params35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNull(xContentBuilder37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = null; // flaky: indexSettings16.getValue(settingsSetting17);
        int int19 = 0; // flaky: indexSettings16.numberOfShards;
        org.elasticsearch.common.logging.ESLogger eSLogger20 = null; // flaky: indexSettings16.logger;
        org.elasticsearch.common.settings.Settings settings21 = null; // flaky: indexSettings16.getSettings();
        int int22 = 0; // flaky: indexSettings16.maxResultWindow;
        java.lang.String str23 = null; // flaky: indexSettings16.nodeName;
        org.elasticsearch.common.unit.TimeValue timeValue24 = null; // flaky: indexSettings16.getDEFAULT_REFRESH_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(settingsSetting17);
// flaky:         org.junit.Assert.assertNotNull(settings18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertNotNull(eSLogger20);
// flaky:         org.junit.Assert.assertNotNull(settings21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
// flaky:         org.junit.Assert.assertNotNull(timeValue24);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("hi!");
        java.lang.String str10 = builder8.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.isPrivateSetting("index.");
        boolean boolean19 = indexScopedSettings15.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings21.getGroups("index.uuid");
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray33 = settings21.getAsArray("", strArray31, (java.lang.Boolean) false);
        indexScopedSettings15.validate("index.shadow_replicas", settings21);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings21);
        org.elasticsearch.index.translog.Translog.Durability durability36 = null;
        indexSettings35.setTranslogDurability(durability36);
        org.elasticsearch.common.unit.TimeValue timeValue38 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings35.setGCDeletes(timeValue38);
        org.elasticsearch.Version version40 = indexSettings35.version;
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder8.put("active_allocations", version40);
        org.elasticsearch.common.settings.Settings settings42 = builder41.build();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder41.put("index.shared_filesystem", 100);
        java.lang.Object[] objArray46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder47 = builder45.put(objArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(version40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings2.applySettings(settings5);
        java.lang.String str10 = settings5.toDelimitedString('a');
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer14 = null;
        indexScopedSettings12.addSettingsUpdateConsumer(settingsSetting13, settingsConsumer14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate11, indexScopedSettings12);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting17 = null; // flaky: indexSettings16.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str18 = null; // flaky: indexSettings16.defaultField;
        boolean boolean19 = false; // flaky: indexSettings16.defaultAllowUnmappedFields;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = null; // flaky: indexSettings16.getIndexMetaData();
        long long22 = 0L; // flaky: indexMetaData20.primaryTerm((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.isPrivateSetting("index.");
        boolean boolean28 = indexScopedSettings24.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray42 = settings30.getAsArray("", strArray40, (java.lang.Boolean) false);
        indexScopedSettings24.validate("index.shadow_replicas", settings30);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings30);
        boolean boolean46 = indexSettings44.matchesIndexName("");
        boolean boolean47 = indexSettings44.TTLPurgeDisabled;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.isPrivateSetting("index.");
        boolean boolean53 = indexScopedSettings49.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.uuid");
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray67 = settings55.getAsArray("", strArray65, (java.lang.Boolean) false);
        indexScopedSettings49.validate("index.shadow_replicas", settings55);
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings55);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting70 = indexSettings69.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters72 = indexMetaData71.includeFilters();
        indexSettings69.indexMetaData = indexMetaData71;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData71);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData71.includeFilters();
        indexSettings44.indexMetaData = indexMetaData71;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData71);
        boolean boolean78 = false; // flaky: indexMetaData20.equals((java.lang.Object) builder77);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput79 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData20.writeTo(streamOutput79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settingsSetting13);
// flaky:         org.junit.Assert.assertNotNull(strSetting17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(booleanSetting70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNull(discoveryNodeFilters72);
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Settings settings22 = indexSettings21.getSettings();
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getAsGroups(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings26.applySettings(settings29);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings26.applySettings(settings33);
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.common.unit.SizeValue sizeValue37 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue38 = settings33.getAsSize("index.shadow_replicas", sizeValue37);
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings33);
        java.lang.String str41 = indexMetaData25.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.isPrivateSetting("index.");
        boolean boolean47 = indexScopedSettings43.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings49.getGroups("index.uuid");
        java.lang.String[] strArray59 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray61 = settings49.getAsArray("", strArray59, (java.lang.Boolean) false);
        indexScopedSettings43.validate("index.shadow_replicas", settings49);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings49);
        org.elasticsearch.index.translog.Translog.Durability durability64 = null;
        indexSettings63.setTranslogDurability(durability64);
        boolean boolean66 = indexSettings63.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting68 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer69 = null;
        indexScopedSettings67.addSettingsUpdateConsumer(settingsSetting68, settingsConsumer69);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings71 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting72 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer73 = null;
        indexScopedSettings71.addSettingsUpdateConsumer(settingsSetting72, settingsConsumer73);
        org.elasticsearch.common.settings.Settings settings75 = indexScopedSettings67.get(settingsSetting72);
        org.elasticsearch.common.settings.Settings settings76 = indexSettings63.getValue(settingsSetting72);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = indexSettings63.indexMetaData;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap78 = indexMetaData77.getAliases();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff79 = indexMetaData25.diff(indexMetaData77);
        java.lang.String str80 = indexMetaData77.getIndexUUID();
        long long82 = indexMetaData77.primaryTerm(0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(sizeValue38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "_na_" + "'", str41, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNotNull(settingsSetting68);
        org.junit.Assert.assertNotNull(indexScopedSettings71);
        org.junit.Assert.assertNotNull(settingsSetting72);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNotNull(strImmutableOpenMap78);
        org.junit.Assert.assertNotNull(indexMetaDataDiff79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "_na_" + "'", str80, "_na_");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.auto_expand_replicas", (float) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.uuid", 0L);
        java.lang.String str16 = builder14.get("");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder17.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.isPrivateSetting("index.");
        boolean boolean26 = indexScopedSettings22.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray40 = settings28.getAsArray("", strArray38, (java.lang.Boolean) false);
        indexScopedSettings22.validate("index.shadow_replicas", settings28);
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings28);
        org.elasticsearch.index.translog.Translog.Durability durability43 = null;
        indexSettings42.setTranslogDurability(durability43);
        org.elasticsearch.common.unit.TimeValue timeValue45 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings42.setGCDeletes(timeValue45);
        org.elasticsearch.Version version47 = indexSettings42.version;
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder17.put("index.blocks.read", version47);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder9.put("index.creation_date", version47);
        java.lang.String str51 = builder9.remove("index.blocks.read_only");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertNotNull(version47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        int int26 = indexSettings21.getNumberOfShards();
        indexSettings21.maxRescoreWindow = (byte) 1;
        boolean boolean29 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting30 = indexSettings21.getINDEX_CHECK_ON_STARTUP();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strSetting30);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "index.number_of_shards", "hi!", "archived.", "index.", "index.version.created", "index.data_path", "hi!", "index.version.upgraded_string", "index.shared_filesystem.recover_on_any_node", "primary_terms", "index.shared_filesystem.recover_on_any_node", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder3.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList27);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder3.replacePropertyPlaceholders();
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder32 = builder3.put(objDictionary31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("index.uuid", 0L);
        java.lang.String str24 = builder22.get("");
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.version.created", "hi!");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings34 = settings30.getAsSettings("");
        java.lang.Boolean boolean37 = settings34.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue39 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue40 = settings34.getAsBytesSize("index.", byteSizeValue39);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = null;
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings42.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings46 = settings42.getAsSettings("");
        java.lang.Boolean boolean49 = settings46.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue52 = settings46.getAsBytesSize("index.", byteSizeValue51);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params54 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = settings46.toXContent(xContentBuilder53, params54);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = settings34.toXContent(xContentBuilder41, params54);
        java.lang.Class<?> wildcardClass57 = settings34.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder28.put("index.version.upgraded_string", (java.lang.Class) wildcardClass57);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder17.put("_all", (java.lang.Class) wildcardClass57);
        java.lang.String[] strArray65 = new java.lang.String[] { "index.creation_date", "index.blocks.read_only", "index.shared_filesystem", "index.uuid" };
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder59.putArray("index.version.upgraded", strArray65);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean71 = indexScopedSettings69.isPrivateSetting("index.");
        boolean boolean73 = indexScopedSettings69.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings75.getGroups("index.uuid");
        java.lang.String[] strArray85 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray87 = settings75.getAsArray("", strArray85, (java.lang.Boolean) false);
        indexScopedSettings69.validate("index.shadow_replicas", settings75);
        org.elasticsearch.index.IndexSettings indexSettings89 = new org.elasticsearch.index.IndexSettings(indexMetaData68, settings75);
        org.elasticsearch.index.translog.Translog.Durability durability90 = null;
        indexSettings89.setTranslogDurability(durability90);
        org.elasticsearch.common.unit.TimeValue timeValue92 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings89.setGCDeletes(timeValue92);
        org.elasticsearch.Version version94 = indexSettings89.getversion();
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder66.put("index.version.minimum_compatible", version94);
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder66.put("_na_", 0.0f);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + boolean37 + "' != '" + true + "'", boolean37, true);
        org.junit.Assert.assertNull(byteSizeValue40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertEquals("'" + boolean49 + "' != '" + true + "'", boolean49, true);
        org.junit.Assert.assertNull(byteSizeValue52);
        org.junit.Assert.assertNotNull(params54);
        org.junit.Assert.assertNull(xContentBuilder55);
        org.junit.Assert.assertNull(xContentBuilder56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(timeValue92);
        org.junit.Assert.assertNotNull(version94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings21.getSettings();
        indexSettings21.maxResultWindow = (short) -1;
        org.elasticsearch.common.logging.ESLogger eSLogger28 = indexSettings21.logger;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting29 = indexSettings21.getQUERY_STRING_ANALYZE_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(eSLogger28);
        org.junit.Assert.assertNotNull(booleanSetting29);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings21.getDEFAULT_REFRESH_INTERVAL();
        indexSettings21.setMaxResultWindow(1);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean26 = indexSettings21.warmerEnabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.flushThresholdSize;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.isPrivateSetting("index.");
        boolean boolean31 = indexScopedSettings27.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray45 = settings33.getAsArray("", strArray43, (java.lang.Boolean) false);
        indexScopedSettings27.validate("index.shadow_replicas", settings33);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings33);
        indexSettings47.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = indexSettings47.flushThresholdSize;
        indexSettings21.flushThresholdSize = byteSizeValue51;
        indexSettings21.TTLPurgeDisabled = false;
        int int55 = indexSettings21.maxRescoreWindow;
        boolean boolean56 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.isPrivateSetting("index.");
        boolean boolean62 = indexScopedSettings58.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings64.getGroups("index.uuid");
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray76 = settings64.getAsArray("", strArray74, (java.lang.Boolean) false);
        indexScopedSettings58.validate("index.shadow_replicas", settings64);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings64);
        indexSettings78.setEnableWarmer(true);
        java.lang.String str81 = indexSettings78.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = indexSettings78.getIndexMetaData();
        indexSettings21.indexMetaData = indexMetaData82;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig84 = indexSettings21.getMergeSchedulerConfig();
        indexSettings21.setEnableWarmer(false);
        org.elasticsearch.common.settings.Settings settings87 = indexSettings21.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap90 = settings87.getGroups("index.creation_date_string", false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(byteSizeValue51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig84);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strMap90);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings0.applySettings(settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean11 = indexScopedSettings9.isPrivateSetting("index.");
        boolean boolean13 = indexScopedSettings9.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getGroups("index.uuid");
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray27 = settings15.getAsArray("", strArray25, (java.lang.Boolean) false);
        indexScopedSettings9.validate("index.shadow_replicas", settings15);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings15);
        org.elasticsearch.index.translog.Translog.Durability durability30 = null;
        indexSettings29.setTranslogDurability(durability30);
        boolean boolean32 = indexSettings29.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting34 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer35 = null;
        indexScopedSettings33.addSettingsUpdateConsumer(settingsSetting34, settingsConsumer35);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting38 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer39 = null;
        indexScopedSettings37.addSettingsUpdateConsumer(settingsSetting38, settingsConsumer39);
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings33.get(settingsSetting38);
        org.elasticsearch.common.settings.Settings settings42 = indexSettings29.getValue(settingsSetting38);
        java.lang.String str43 = indexSettings29.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting44 = indexSettings29.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = indexSettings29.indexMetaData;
        java.util.function.Predicate<java.lang.String> strPredicate46 = indexSettings29.indexNameMatcher;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.isPrivateSetting("index.");
        boolean boolean52 = indexScopedSettings48.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings54.getGroups("index.uuid");
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray66 = settings54.getAsArray("", strArray64, (java.lang.Boolean) false);
        indexScopedSettings48.validate("index.shadow_replicas", settings54);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings54);
        org.elasticsearch.common.settings.Settings settings69 = indexSettings68.getSettings();
        indexSettings68.maxResultWindow = (short) -1;
        boolean boolean72 = indexSettings68.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue73 = indexSettings68.syncInterval;
        java.lang.String str74 = indexSettings68.defaultField;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = indexSettings68.getFlushThresholdSize();
        indexSettings29.flushThresholdSize = byteSizeValue75;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue77 = settings3.getAsBytesSize("state-", byteSizeValue75);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertNotNull(settingsSetting34);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertNotNull(settingsSetting38);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting44);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(strPredicate46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(timeValue73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "_all" + "'", str74, "_all");
        org.junit.Assert.assertNotNull(byteSizeValue75);
        org.junit.Assert.assertNotNull(byteSizeValue77);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        int int26 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.Version version27 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput28 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(version27);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        long long24 = indexSettings21.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings21.getGlobalCheckpointInterval();
        boolean boolean26 = indexSettings21.getisShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings21.getsyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(timeValue27);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction14 = null;
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.putProperties(strMap12, strPredicate13, strFunction14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder3.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder16.replacePropertyPlaceholders();
        java.util.concurrent.TimeUnit timeUnit20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder21 = builder17.put("index.blocks.metadata", (long) (byte) 1, timeUnit20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        boolean boolean23 = indexSettings21.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings21.getALLOW_UNMAPPED();
        boolean boolean25 = indexSettings21.getqueryStringAnalyzeWildcard();
        boolean boolean26 = indexSettings21.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting27 = indexSettings21.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanSetting24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeValueSetting27);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = indexScopedSettings0.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer23 = null;
        indexScopedSettings21.addSettingsUpdateConsumer(settingsSetting22, settingsConsumer23);
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings25.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings25.getAsSettings("");
        java.lang.Boolean boolean32 = settings29.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue34 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue35 = settings29.getAsBytesSize("index.", byteSizeValue34);
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("index.uuid", 0L);
        java.lang.String str41 = builder39.get("");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder39.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings47 = settings45.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = settings47.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate49 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction50 = null;
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder39.putProperties(strMap48, strPredicate49, strFunction50);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder39.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder54.put("index.uuid", 0L);
        java.lang.String str59 = builder57.get("");
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder57.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder57.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings65 = settings63.getAsSettings("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap66 = settings65.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate67 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction68 = null;
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder57.putProperties(strMap66, strPredicate67, strFunction68);
        boolean boolean71 = indexScopedSettings21.updateSettings(settings29, builder39, builder69, "index.uuid");
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings20.validate(builder39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + boolean32 + "' != '" + true + "'", boolean32, true);
        org.junit.Assert.assertNull(byteSizeValue35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.settings;
        boolean boolean27 = indexSettings21.TTLPurgeDisabled;
        boolean boolean28 = indexSettings21.isTTLPurgeDisabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.isPrivateSetting("index.");
        boolean boolean34 = indexScopedSettings30.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.uuid");
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray48 = settings36.getAsArray("", strArray46, (java.lang.Boolean) false);
        indexScopedSettings30.validate("index.shadow_replicas", settings36);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings36);
        boolean boolean52 = indexSettings50.matchesIndexName("");
        long long53 = indexSettings50.getGcDeletesInMillis();
        org.elasticsearch.common.unit.TimeValue timeValue54 = indexSettings50.getGlobalCheckpointInterval();
        org.elasticsearch.index.translog.Translog.Durability durability55 = indexSettings50.getTranslogDurability();
        indexSettings21.setTranslogDurability(durability55);
        int int57 = indexSettings21.getMaxResultWindow();
        org.elasticsearch.common.unit.TimeValue timeValue58 = indexSettings21.refreshInterval;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings21.globalCheckpointInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 60000L + "'", long53 == 60000L);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertTrue("'" + durability55 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability55.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10000 + "'", int57 == 10000);
        org.junit.Assert.assertNotNull(timeValue58);
        org.junit.Assert.assertNotNull(timeValue59);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.index.translog.Translog.Durability durability22 = null;
        indexSettings21.setTranslogDurability(durability22);
        boolean boolean24 = indexSettings21.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer27 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(settingsSetting26, settingsConsumer27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer31 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(settingsSetting30, settingsConsumer31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.get(settingsSetting30);
        org.elasticsearch.common.settings.Settings settings34 = indexSettings21.getValue(settingsSetting30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = indexSettings21.indexMetaData;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap36 = indexMetaData35.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters37 = indexMetaData35.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters38 = indexMetaData35.includeFilters();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput39 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData35.writeTo(streamOutput39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNull(discoveryNodeFilters37);
        org.junit.Assert.assertNull(discoveryNodeFilters38);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String[] strArray4 = new java.lang.String[] { "index.version.minimum_compatible", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.putArray("index.number_of_shards", (java.util.List<java.lang.String>) strList5);
        java.nio.file.Path path8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.loadFromPath(path8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings21.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability23 = indexSettings21.durability;
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        indexSettings21.setGCDeletes(timeValue24);
        boolean boolean26 = indexSettings21.isWarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting28 = indexSettings21.getQUERY_STRING_LENIENT_SETTING();
        int int29 = indexSettings21.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(booleanSetting28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.uuid", 0L);
        java.lang.String str5 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.internalMap();
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put(objDictionary8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("index.");
        boolean boolean4 = indexScopedSettings0.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray18 = settings6.getAsArray("", strArray16, (java.lang.Boolean) false);
        indexScopedSettings0.validate("index.shadow_replicas", settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = indexScopedSettings0.getDEFAULT_SCOPED_SETTINGS();
        java.lang.String str21 = indexScopedSettings20.nodeName();
        boolean boolean23 = indexScopedSettings20.isPrivateSetting("index.data_path");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.creation_date_string");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.creation_date_string]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        java.lang.String str24 = indexSettings21.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings21.getIndexMetaData();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.isPrivateSetting("index.");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings26.applySettings(settings29);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings26.applySettings(settings33);
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.common.unit.SizeValue sizeValue37 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue38 = settings33.getAsSize("index.shadow_replicas", sizeValue37);
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings33);
        java.lang.String str42 = settings33.get("state-");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings33.getGroups("index.number_of_replicas", true);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings33, streamOutput46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(sizeValue38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strMap45);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.isPrivateSetting("index.");
        boolean boolean5 = indexScopedSettings1.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.uuid");
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray19 = settings7.getAsArray("", strArray17, (java.lang.Boolean) false);
        indexScopedSettings1.validate("index.shadow_replicas", settings7);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        indexSettings21.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getsyncInterval();
        boolean boolean25 = indexSettings21.getqueryStringLenient();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig26 = indexSettings21.getmergePolicyConfig();
        indexSettings21.gcDeletesInMillis = '4';
        long long29 = indexSettings21.getGcDeletesInMillis();
        int int30 = indexSettings21.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.isPrivateSetting("index.");
        boolean boolean36 = indexScopedSettings32.isPrivateSetting("");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.uuid");
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray50 = settings38.getAsArray("", strArray48, (java.lang.Boolean) false);
        indexScopedSettings32.validate("index.shadow_replicas", settings38);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings38);
        boolean boolean54 = indexSettings52.matchesIndexName("");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting55 = indexSettings52.getALLOW_UNMAPPED();
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexSettings52.getRefreshInterval();
        org.elasticsearch.index.translog.Translog.Durability durability57 = indexSettings52.getTranslogDurability();
        indexSettings21.setTranslogDurability(durability57);
        org.elasticsearch.common.logging.ESLogger eSLogger59 = indexSettings21.getlogger();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(booleanSetting55);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertTrue("'" + durability57 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability57.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(eSLogger59);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.isPrivateSetting("primary_terms");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(1L);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = settings7.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.uuid");
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "", "hi!", "index.uuid", "index.version.created" };
        java.lang.String[] strArray23 = settings11.getAsArray("", strArray21, (java.lang.Boolean) false);
        java.lang.String[] strArray25 = settings7.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder4.creationDate((long) 10);
        long long29 = builder28.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.removeAllAliases();
        int int31 = builder28.numberOfReplicas();
        int int32 = builder28.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder28.version(1000L);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder28.putAlias(aliasMetaData35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(builder34);
    }
}
