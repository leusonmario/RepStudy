/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 05 13:00:18 GMT 2021
 */

package org.elasticsearch.index;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Hashtable;
import java.util.Map;
import java.util.Set;
import java.util.function.Predicate;
import org.apache.lucene.util.LuceneTestCase;
import org.elasticsearch.Version;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.ParentTaskAssigningClient;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.node.DiscoveryNode;
import org.elasticsearch.common.settings.IndexScopedSettings;
import org.elasticsearch.common.settings.Setting;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.DummyTransportAddress;
import org.elasticsearch.index.IndexSettings;
import org.elasticsearch.tasks.Task;
import org.elasticsearch.tasks.TaskId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IndexSettings_ESTest extends IndexSettings_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      IndexMetaData indexMetaData0 = null;
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      IndexSettings indexSettings0 = null;
      try {
        indexSettings0 = new IndexSettings(indexMetaData0, settings0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.elasticsearch.common.settings.IndexScopedSettings
         //
         verifyException("org.elasticsearch.index.IndexSettings", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertNotNull(indexMetaData0);
      
      Predicate<String> predicate0 = null;
      IndexScopedSettings indexScopedSettings0 = null;
      IndexSettings indexSettings0 = null;
      try {
        indexSettings0 = new IndexSettings(indexMetaData0, settings0, predicate0, indexScopedSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.IndexSettings", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      IndexMetaData indexMetaData0 = null;
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      boolean boolean0 = false;
      Map<String, Settings> map0 = settings0.getAsGroups(boolean0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      IndexSettings indexSettings0 = null;
      try {
        indexSettings0 = new IndexSettings(indexMetaData0, settings0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.elasticsearch.common.settings.IndexScopedSettings
         //
         verifyException("org.elasticsearch.index.IndexSettings", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertNotNull(indexMetaData0);
      
      Predicate<String> predicate0 = null;
      IndexScopedSettings indexScopedSettings0 = null;
      IndexSettings indexSettings0 = null;
      try {
        indexSettings0 = new IndexSettings(indexMetaData0, settings0, predicate0, indexScopedSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.IndexSettings", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertNotNull(indexMetaData0);
      
      Predicate<String> predicate0 = null;
      IndexScopedSettings indexScopedSettings0 = null;
      Setting<String> setting0 = IndexSettings.INDEX_CHECK_ON_STARTUP;
      assertNotNull(setting0);
      
      Client client0 = null;
      DummyTransportAddress dummyTransportAddress0 = DummyTransportAddress.INSTANCE;
      assertEquals(42, dummyTransportAddress0.getPort());
      assertEquals((short)0, dummyTransportAddress0.uniqueAddressTypeId());
      assertEquals("dummy", dummyTransportAddress0.getHost());
      assertEquals("0.0.0.0", dummyTransportAddress0.getAddress());
      assertFalse(dummyTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals("_dummy_addr_", dummyTransportAddress0.toString());
      assertNotNull(dummyTransportAddress0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      DiscoveryNode.Role[] discoveryNode_RoleArray0 = new DiscoveryNode.Role[0];
      Set<DiscoveryNode.Role> set0 = LuceneTestCase.asSet(discoveryNode_RoleArray0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, discoveryNode_RoleArray0.length);
      assertNotNull(set0);
      
      Version version0 = Version.V_5_0_0_alpha3;
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(5000003, version0.id);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals((byte)3, version0.build);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals((byte)0, version0.revision);
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertNotNull(version0);
      
      DiscoveryNode discoveryNode0 = new DiscoveryNode(indexMetaData0.SETTING_VERSION_CREATED, dummyTransportAddress0, hashtable0, set0, version0);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(5000003, version0.id);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals((byte)3, version0.build);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(42, dummyTransportAddress0.getPort());
      assertEquals((short)0, dummyTransportAddress0.uniqueAddressTypeId());
      assertEquals("dummy", dummyTransportAddress0.getHost());
      assertEquals("0.0.0.0", dummyTransportAddress0.getAddress());
      assertFalse(dummyTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals("_dummy_addr_", dummyTransportAddress0.toString());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals("index.version.created", discoveryNode0.getId());
      assertEquals("", discoveryNode0.getName());
      assertEquals("dummy", discoveryNode0.getHostName());
      assertEquals("0.0.0.0", discoveryNode0.getHostAddress());
      assertEquals(0, discoveryNode_RoleArray0.length);
      assertNotNull(discoveryNode0);
      
      long long0 = (-1031L);
      String string0 = "nothing matched";
      String string1 = "n]Y+C";
      TaskId taskId0 = TaskId.EMPTY_TASK_ID;
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      assertNotNull(taskId0);
      
      Task task0 = new Task(long0, string0, string1, indexMetaData0.SETTING_INDEX_UUID, taskId0, long0, version0.V_2_3_0_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(5000003, version0.id);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals((byte)3, version0.build);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      assertEquals("index.uuid", task0.getDescription());
      assertEquals((-1031L), task0.getStartTime());
      assertEquals("n]Y+C", task0.getAction());
      assertEquals((-1031L), task0.getId());
      assertEquals("nothing matched", task0.getType());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(task0);
      
      ParentTaskAssigningClient parentTaskAssigningClient0 = null;
      try {
        parentTaskAssigningClient0 = new ParentTaskAssigningClient(client0, discoveryNode0, task0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.client.FilterClient", e);
      }
  }
}
