import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.putNull("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.loadFromSource("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        org.elasticsearch.common.settings.Settings settings23 = settings20.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = indexMetaData29.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = new org.elasticsearch.common.settings.IndexScopedSettings(settings23, indexScopedSettings24, indexMetaData29);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray38 = settings23.getAsArray("", strArray36, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder14.extendArray("index.creation_date_string", strArray38);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder7.extendArray("index.blocks.read_only", strArray38);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder7.loadFromSource("index.shared_filesystem");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        java.lang.String str17 = null; // flaky: indexSettings16.nodeName;
        org.elasticsearch.Version version18 = null; // flaky: indexSettings16.version;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertNotNull(version18);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        boolean boolean12 = indexSettings2.warmerEnabled;
        org.elasticsearch.common.unit.TimeValue timeValue13 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        indexSettings2.maxRescoreWindow = '4';
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(timeValue13);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue8 = settings4.getAsRatio("", "index.version.upgraded_string");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.version.upgraded_string]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        org.elasticsearch.common.settings.Settings settings23 = settings20.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = indexMetaData29.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = new org.elasticsearch.common.settings.IndexScopedSettings(settings23, indexScopedSettings24, indexMetaData29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings33);
        boolean boolean35 = indexSettings34.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings34.settings = settings36;
        boolean boolean38 = indexSettings34.queryStringLenient;
        boolean boolean39 = indexSettings34.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig40 = indexSettings34.mergePolicyConfig;
        int int41 = indexSettings34.getMaxRescoreWindow();
        int int42 = indexSettings34.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate43 = indexSettings34.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = indexMetaData44.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings47);
        boolean boolean49 = indexSettings48.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings48.settings = settings50;
        org.elasticsearch.common.settings.Settings settings53 = settings50.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings57.archiveUnknownOrBrokenSettings(settings60);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings60.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings66.archiveUnknownOrBrokenSettings(settings69);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60, strPredicate65, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData44, settings50, strPredicate54, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings23, strPredicate43, indexScopedSettings66);
        int int74 = indexSettings73.getMaxResultWindow();
        org.elasticsearch.index.translog.Translog.Durability durability75 = indexSettings73.getTranslogDurability();
        java.lang.String str76 = indexSettings73.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10000 + "'", int41 == 10000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10000 + "'", int42 == 10000);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10000 + "'", int74 == 10000);
        org.junit.Assert.assertTrue("'" + durability75 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability75.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        boolean boolean24 = indexSettings23.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings23.getALLOW_UNMAPPED();
        int int26 = indexSettings23.maxResultWindow;
        boolean boolean27 = indexSettings23.queryStringAllowLeadingWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        boolean boolean9 = indexSettings2.isOnSharedFilesystem();
        org.elasticsearch.common.logging.ESLogger eSLogger10 = indexSettings2.logger;
        boolean boolean11 = indexSettings2.getwarmerEnabled();
        long long12 = indexSettings2.getGcDeletesInMillis();
        indexSettings2.setMaxResultWindow((-1));
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(eSLogger10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 60000L + "'", long12 == 60000L);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings18);
        boolean boolean20 = indexSettings19.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings19.settings = settings21;
        org.elasticsearch.common.settings.Settings settings24 = settings21.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings25);
        org.elasticsearch.common.settings.Settings settings28 = settings25.getAsSettings("index.");
        java.util.Map<java.lang.String, java.lang.Object> strMap29 = settings25.getAsStructuredMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap29);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder0.putNull("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder4.loadFromSource("index.creation_date_string");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder4.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = settings12.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean20 = indexScopedSettings18.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings22);
        boolean boolean24 = indexSettings23.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings23.settings = settings25;
        org.elasticsearch.common.settings.Settings settings28 = settings25.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings18.archiveUnknownOrBrokenSettings(settings28);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings29);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings36);
        boolean boolean38 = indexSettings37.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings37.settings = settings39;
        org.elasticsearch.common.settings.Settings settings42 = settings39.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings42);
        boolean boolean45 = indexScopedSettings32.isPrivateSetting("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state47 = indexMetaData46.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData46);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = new org.elasticsearch.common.settings.IndexScopedSettings(settings29, indexScopedSettings32, indexMetaData46);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData50);
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap55 = settings54.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings54);
        org.elasticsearch.common.settings.Settings.Builder builder57 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder57.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder61.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings65 = builder64.build();
        org.elasticsearch.common.settings.Settings.Builder builder66 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder66.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap68 = builder66.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder64.put(strMap68);
        org.elasticsearch.common.settings.Settings.Builder builder70 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder70.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder71.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder74.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings78 = builder77.build();
        org.elasticsearch.common.settings.Settings.Builder builder79 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder79.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap81 = builder79.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder77.put(strMap81);
        boolean boolean84 = indexScopedSettings49.updateSettings(settings54, builder69, builder82, "state-");
        java.util.Map<java.lang.String, java.lang.String> strMap85 = settings54.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder4.put(strMap85);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertTrue("'" + state47 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state47.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        java.lang.Boolean boolean26 = settings21.getAsBoolean("index.version.created_string", (java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet27 = settings21.names();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings21.getAsGroups();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + boolean26 + "' != '" + false + "'", boolean26, false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strMap28);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        int int11 = indexSettings2.getNumberOfShards();
        boolean boolean12 = indexSettings2.isTTLPurgeDisabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        boolean boolean19 = indexSettings15.queryStringLenient;
        boolean boolean20 = indexSettings15.TTLPurgeDisabled;
        java.lang.String str21 = indexSettings15.customDataPath();
        indexSettings15.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability24 = indexSettings15.durability;
        indexSettings2.setTranslogDurability(durability24);
        org.elasticsearch.common.logging.ESLogger eSLogger26 = indexSettings2.getlogger();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings2.getGlobalCheckpointInterval();
        long long28 = indexSettings2.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + durability24 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability24.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(eSLogger26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 60000L + "'", long28 == 60000L);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.loadFromSource("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder0.put("_all", 10);
        java.util.concurrent.TimeUnit timeUnit8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder9 = builder5.put("index.shared_filesystem.recover_on_any_node", (long) (short) 10, timeUnit8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.settings(settings11);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11);
        org.elasticsearch.index.translog.Translog.Durability durability17 = indexSettings16.durability;
        boolean boolean18 = indexSettings16.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings16.getIndexMetaData();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings22);
        boolean boolean24 = indexSettings23.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings23.settings = settings25;
        org.elasticsearch.common.settings.Settings settings28 = settings25.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder29 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params30 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder31 = settings28.toXContent(xContentBuilder29, params30);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = indexMetaData19.toXContent(xContentBuilder20, params30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + durability17 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability17.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(params30);
        org.junit.Assert.assertNull(xContentBuilder31);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig12 = indexSettings2.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = indexSettings2.indexMetaData;
        java.lang.String str14 = indexSettings2.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings2.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(timeValue15);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder0.putNull("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder4.loadFromSource("index.creation_date_string");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.put("index.number_of_shards", (-1L), byteSizeUnit9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings6.archiveUnknownOrBrokenSettings(settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData11.getState();
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData11.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = new org.elasticsearch.common.settings.IndexScopedSettings(settings4, indexScopedSettings6, indexMetaData11);
        java.lang.String str16 = indexScopedSettings15.nodeName();
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings19);
        boolean boolean21 = indexSettings20.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings20.settings = settings22;
        int int24 = indexSettings20.maxRescoreWindow;
        java.lang.String str25 = indexSettings20.getUUID();
        java.lang.String str26 = indexSettings20.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = indexMetaData27.getState();
        java.util.Set<java.lang.String> strSet30 = null; // flaky: indexMetaData27.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version31 = indexMetaData27.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        long long33 = indexMetaData27.getCreationDate();
        indexSettings20.indexMetaData = indexMetaData27;
        org.elasticsearch.Version version35 = indexMetaData27.getUpgradedVersion();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = indexScopedSettings15.copy(settings17, indexMetaData27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "_na_" + "'", str25, "_na_");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(version35);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.Version version16 = indexSettings15.version;
        indexSettings15.warmerEnabled = false;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings15.indexMetaData;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData20);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings26.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings35.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean43 = indexScopedSettings41.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings41.archiveUnknownOrBrokenSettings(settings44);
        org.elasticsearch.index.IndexSettings indexSettings46 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData30, settings35, strPredicate40, indexScopedSettings41);
        org.elasticsearch.index.IndexSettings indexSettings47 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData20, settings26, strPredicate29, indexScopedSettings41);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings26);
        int int49 = indexMetaData19.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        int int12 = indexSettings8.maxRescoreWindow;
        java.lang.String str13 = indexSettings8.getUUID();
        org.elasticsearch.common.settings.Settings settings14 = indexSettings8.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting15 = indexSettings8.getINDEX_GC_DELETES_SETTING();
        int int16 = indexSettings8.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = indexSettings8.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings19);
        boolean boolean21 = indexSettings20.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings20.settings = settings22;
        org.elasticsearch.common.settings.Settings settings25 = settings22.getAsSettings("");
        java.lang.String str27 = settings25.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder36.replacePropertyPlaceholders();
        boolean boolean39 = indexScopedSettings17.updateDynamicSettings(settings25, builder32, builder37, "_all");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        java.util.Set<java.lang.String> strSet43 = null; // flaky: indexMetaData40.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version44 = indexMetaData40.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        long long46 = indexMetaData40.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData48 = indexMetaData40.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = new org.elasticsearch.common.settings.IndexScopedSettings(settings4, indexScopedSettings17, indexMetaData40);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters50 = indexMetaData40.requireFilters();
        org.elasticsearch.common.settings.Settings settings51 = indexMetaData40.getSettings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData53 = indexMetaData40.mapping("index.uuid");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(timeValueSetting15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(version44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData48);
        org.junit.Assert.assertNull(discoveryNodeFilters50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNull(mappingMetaData53);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.Version version17 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str19 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_na_" + "'", str19, "_na_");
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = null; // flaky: indexSettings16.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting18 = null; // flaky: indexSettings16.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting19 = null; // flaky: indexSettings16.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        boolean boolean20 = false; // flaky: indexSettings16.getdefaultAllowUnmappedFields();
// flaky:         indexSettings16.setEnableWarmer(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting17);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting18);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting19);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings2.nodeSettings;
        indexSettings2.setMaxRescoreWindow(0);
        boolean boolean13 = indexSettings2.isQueryStringLenient();
        int int14 = indexSettings2.getNumberOfShards();
        boolean boolean15 = indexSettings2.defaultAllowUnmappedFields;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData3.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings6);
        boolean boolean8 = indexSettings7.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings7.settings = settings9;
        org.elasticsearch.common.settings.Settings settings12 = settings9.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings16.archiveUnknownOrBrokenSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings19.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings25.archiveUnknownOrBrokenSettings(settings28);
        org.elasticsearch.index.IndexSettings indexSettings30 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData14, settings19, strPredicate24, indexScopedSettings25);
        org.elasticsearch.index.IndexSettings indexSettings31 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData3, settings9, strPredicate13, indexScopedSettings25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap33 = indexMetaData3.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData39);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean43 = indexScopedSettings41.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings41.archiveUnknownOrBrokenSettings(settings44);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder38.settings(settings45);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings45);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings45);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = indexSettings52.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings55);
        boolean boolean57 = indexSettings56.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings56.settings = settings58;
        boolean boolean60 = indexSettings56.queryStringLenient;
        boolean boolean61 = indexSettings56.TTLPurgeDisabled;
        java.lang.String str62 = indexSettings56.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings56.syncInterval;
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings56.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting65 = indexSettings56.getDEFAULT_FIELD_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData66, settings67);
        boolean boolean69 = indexSettings68.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings68.settings = settings70;
        boolean boolean72 = indexSettings68.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting73 = indexSettings68.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings74 = indexSettings68.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue75 = indexSettings68.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData76, settings77);
        boolean boolean79 = indexSettings78.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings78.settings = settings80;
        boolean boolean82 = indexSettings78.queryStringLenient;
        boolean boolean83 = indexSettings78.TTLPurgeDisabled;
        java.lang.String str84 = indexSettings78.customDataPath();
        indexSettings78.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability87 = indexSettings78.durability;
        indexSettings68.durability = durability87;
        indexSettings56.durability = durability87;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting90 = indexSettings56.getQUERY_STRING_ANALYZE_WILDCARD();
        java.util.function.Consumer<java.lang.Boolean> booleanConsumer91 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings53.addSettingsUpdateConsumer(booleanSetting90, booleanConsumer91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Setting is not registered for key [indices.query.query_string.analyze_wildcard]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertNotNull(strSetting65);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(booleanSetting73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(timeValue75);
        org.junit.Assert.assertNotNull(indexMetaData76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + durability87 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability87.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(booleanSetting90);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.index.translog.Translog.Durability durability11 = null;
        indexSettings2.durability = durability11;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        boolean boolean19 = indexSettings15.queryStringLenient;
        boolean boolean20 = indexSettings15.TTLPurgeDisabled;
        java.lang.String str21 = indexSettings15.customDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting22 = indexSettings15.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting23 = indexSettings15.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings15.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean25 = indexSettings2.getValue(booleanSetting24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: settings scope doesn't match the setting scope [IndexScope] not in [[NodeScope]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(intSetting22);
        org.junit.Assert.assertNotNull(byteSizeValueSetting23);
        org.junit.Assert.assertNotNull(booleanSetting24);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.queryStringLenient;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig4 = indexSettings2.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings6);
        boolean boolean8 = indexSettings7.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings7.settings = settings9;
        int int11 = indexSettings7.maxRescoreWindow;
        java.lang.String str12 = indexSettings7.getUUID();
        org.elasticsearch.common.settings.Settings settings13 = indexSettings7.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = indexSettings7.getINDEX_GC_DELETES_SETTING();
        int int15 = indexSettings7.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = indexSettings7.scopedSettings;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig17 = indexSettings7.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexSettings7.indexMetaData;
        boolean boolean19 = indexSettings2.updateIndexMetaData(indexMetaData18);
        boolean boolean20 = indexSettings2.warmerEnabled;
        java.lang.String str21 = indexSettings2.defaultField;
        boolean boolean22 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.unit.TimeValue timeValue23 = indexSettings2.syncInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_na_" + "'", str12, "_na_");
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_all" + "'", str21, "_all");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(timeValue23);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData8.getState();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData8.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version12 = indexMetaData8.getUpgradedVersion();
        org.elasticsearch.Version version13 = settings6.getAsVersion("", version12);
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.index.Index index16 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.xcontent.XContentParser xContentParser18 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = settings23.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings33);
        boolean boolean35 = indexSettings34.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings34.settings = settings36;
        org.elasticsearch.common.settings.Settings settings39 = settings36.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings40 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings39);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings40);
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings40);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher43 = indexSettings42.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = indexMetaData0.fromXContent(xContentParser18, parseFieldMatcher43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNull(index16);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(parseFieldMatcher43);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        int int12 = indexSettings8.maxRescoreWindow;
        java.lang.String str13 = indexSettings8.getUUID();
        org.elasticsearch.common.settings.Settings settings14 = indexSettings8.nodeSettings;
        org.elasticsearch.common.settings.Settings settings15 = indexSettings8.nodeSettings;
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings20);
        boolean boolean22 = indexSettings21.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings21.settings = settings23;
        org.elasticsearch.common.settings.Settings settings26 = settings23.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings30.archiveUnknownOrBrokenSettings(settings33);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings33.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData28, settings33, strPredicate38, indexScopedSettings39);
        org.elasticsearch.index.IndexSettings indexSettings45 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData17, settings23, strPredicate27, indexScopedSettings39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate49 = indexSettings48.indexNameMatcher;
        int int50 = indexSettings48.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig51 = indexSettings48.getmergePolicyConfig();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = indexSettings48.scopedSettings;
        boolean boolean54 = indexScopedSettings52.isPrivateSetting("index.blocks.read");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting55 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting56 = org.elasticsearch.index.IndexSettings.INDEX_TTL_DISABLE_PURGE_SETTING;
        java.util.function.BiConsumer<java.lang.Boolean, java.lang.Boolean> booleanBiConsumer57 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(booleanSetting55, booleanSetting56, booleanBiConsumer57);
        java.lang.Boolean boolean59 = indexScopedSettings39.get(booleanSetting55);
        org.elasticsearch.index.IndexSettings indexSettings60 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15, strPredicate16, indexScopedSettings39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamInput streamInput64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = indexMetaData0.readFrom(streamInput64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strPredicate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(booleanSetting55);
        org.junit.Assert.assertNotNull(booleanSetting56);
        org.junit.Assert.assertEquals("'" + boolean59 + "' != '" + true + "'", boolean59, true);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexSettings2.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings16.archiveUnknownOrBrokenSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings20);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap24 = indexMetaData14.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.Settings settings26 = indexMetaData14.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings32.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32, strPredicate37, indexScopedSettings38);
        java.util.function.Predicate<java.lang.String> strPredicate44 = indexScopedSettings38.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean47 = indexScopedSettings45.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings49 = indexScopedSettings45.archiveUnknownOrBrokenSettings(settings48);
        org.elasticsearch.index.IndexSettings indexSettings50 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData12, settings26, strPredicate44, indexScopedSettings45);
        java.lang.String str51 = indexScopedSettings45.nodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strPredicate44);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.settings(settings11);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11);
        org.elasticsearch.index.translog.Translog.Durability durability17 = indexSettings16.durability;
        java.lang.String str18 = indexSettings16.nodeName;
        int int19 = indexSettings16.getNumberOfShards();
        indexSettings16.warmerEnabled = true;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + durability17 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability17.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        boolean boolean43 = indexSettings42.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings42.settings = settings44;
        org.elasticsearch.common.settings.Settings settings47 = settings44.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings48.archiveUnknownOrBrokenSettings(settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state54 = indexMetaData53.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = new org.elasticsearch.common.settings.IndexScopedSettings(settings47, indexScopedSettings48, indexMetaData53);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray62 = settings47.getAsArray("", strArray60, (java.lang.Boolean) true);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings47);
        boolean boolean64 = indexSettings63.getqueryStringAnalyzeWildcard();
        indexSettings63.setwarmerEnabled(true);
        int int67 = indexSettings63.maxResultWindow;
        boolean boolean68 = indexSettings63.isQueryStringLenient();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue69 = indexSettings63.flushThresholdSize;
        java.lang.String str70 = indexSettings63.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertTrue("'" + state54 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state54.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10000 + "'", int67 == 10000);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteSizeValue69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.creationDate((long) (byte) 0);
        int int4 = builder3.numberOfShards();
        java.lang.String str5 = builder3.index();
        // The following exception was thrown during execution in test generation
        try {
            long long7 = builder3.primaryTerm(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings30);
        boolean boolean32 = indexSettings31.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings31.settings = settings33;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings35.archiveUnknownOrBrokenSettings(settings38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        java.util.Set<java.lang.String> strSet43 = null; // flaky: indexMetaData40.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = new org.elasticsearch.common.settings.IndexScopedSettings(settings33, indexScopedSettings35, indexMetaData40);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings57.archiveUnknownOrBrokenSettings(settings60);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings60.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings66.archiveUnknownOrBrokenSettings(settings69);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60, strPredicate65, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51, strPredicate54, indexScopedSettings66);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue74 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = settings51.getAsBytesSize("index.creation_date_string", byteSizeValue74);
        org.elasticsearch.common.settings.Settings settings76 = indexScopedSettings44.applySettings(settings51);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings76.getGroups("index.blocks.write", false);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings76);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData82 = indexMetaData0.mappingOrDefault("index.version.created_string");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData84 = indexMetaData0.mapping("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData85 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings86 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings87 = new org.elasticsearch.index.IndexSettings(indexMetaData85, settings86);
        org.elasticsearch.index.IndexSettings indexSettings88 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNull(byteSizeValue75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNull(mappingMetaData82);
        org.junit.Assert.assertNull(mappingMetaData84);
        org.junit.Assert.assertNotNull(indexMetaData85);
        org.junit.Assert.assertNotNull(settings86);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("primary_terms", "");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.settings(builder9);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.putNull("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder12.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings12);
        boolean boolean14 = indexSettings13.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings13.settings = settings15;
        int int17 = indexSettings13.maxRescoreWindow;
        boolean boolean18 = indexSettings13.TTLPurgeDisabled;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue19 = indexSettings13.getFlushThresholdSize();
        indexSettings2.setTranslogFlushThresholdSize(byteSizeValue19);
        boolean boolean21 = indexSettings2.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue22 = indexSettings2.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue23 = indexSettings2.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteSizeValue19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteSizeValue22);
        org.junit.Assert.assertNotNull(timeValue23);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings2.nodeSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData11.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings27.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings33.archiveUnknownOrBrokenSettings(settings36);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData22, settings27, strPredicate32, indexScopedSettings33);
        org.elasticsearch.index.IndexSettings indexSettings39 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17, strPredicate21, indexScopedSettings33);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap45 = settings44.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings44);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings48);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean52 = indexScopedSettings50.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings54);
        boolean boolean56 = indexSettings55.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings55.settings = settings57;
        org.elasticsearch.common.settings.Settings settings60 = settings57.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings50.archiveUnknownOrBrokenSettings(settings60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings61);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = new org.elasticsearch.common.settings.IndexScopedSettings(settings10, indexScopedSettings33, indexMetaData40);
        org.elasticsearch.common.settings.Settings.Builder builder65 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder65.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder66.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder66.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder75.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder75.put("index.version.upgraded", (float) (byte) 10);
        java.lang.String str81 = builder75.remove("index.auto_expand_replicas");
        java.lang.String[] strArray85 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.data_path" };
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder75.putArray("index.blocks.metadata", strArray85);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder75.put("10.0", 100L);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings33.validate(builder89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        int int17 = indexMetaData10.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData18);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings20.archiveUnknownOrBrokenSettings(settings23);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings24.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state29 = indexMetaData28.getState();
        java.util.Set<java.lang.String> strSet31 = null; // flaky: indexMetaData28.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap32 = indexMetaData28.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff33 = indexMetaData18.diff(indexMetaData28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings36);
        boolean boolean38 = indexSettings37.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings37.settings = settings39;
        org.elasticsearch.common.settings.Settings settings42 = settings39.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings39);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings43);
        org.elasticsearch.common.settings.Settings settings46 = settings43.getAsSettings("index.");
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings43);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue50 = settings43.getAsMemory("index.blocks.metadata", "index.data_path");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.blocks.metadata] with value [index.data_path] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + state29 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state29.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertNotNull(indexMetaDataDiff33);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings46);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        boolean boolean10 = indexSettings9.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings9.settings = settings11;
        org.elasticsearch.common.settings.Settings settings14 = settings11.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings4.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15);
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder17.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("index.shared_filesystem.recover_on_any_node", (float) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder21.loadFromSource("");
        java.lang.String str25 = builder23.remove("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("primary_terms", (-1L));
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder23.putNull("hi!");
        boolean boolean31 = indexMetaData0.equals((java.lang.Object) "hi!");
        org.elasticsearch.common.settings.Settings settings32 = indexMetaData0.getSettings();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings32, streamOutput33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.getqueryStringLenient();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting7 = indexSettings2.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability8 = indexSettings2.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(intSetting7);
        org.junit.Assert.assertTrue("'" + durability8 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability8.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        int int16 = indexSettings15.maxResultWindow;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getNodeSettings();
        indexSettings15.warmerEnabled = false;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting20 = indexSettings15.getALLOW_UNMAPPED();
        indexSettings15.maxResultWindow = 97;
        indexSettings15.maxResultWindow = 1;
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings15.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(booleanSetting20);
        org.junit.Assert.assertNotNull(timeValue25);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting5 = indexSettings2.getDEFAULT_FIELD_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        java.lang.String str10 = indexSettings8.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting11 = indexSettings8.getDEFAULT_FIELD_SETTING();
        indexSettings8.setEnableWarmer(true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = null;
        indexSettings8.flushThresholdSize = byteSizeValue14;
        boolean boolean16 = indexSettings8.warmerEnabled;
        java.lang.String str17 = indexSettings8.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData18);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings20.archiveUnknownOrBrokenSettings(settings23);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings23.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        org.elasticsearch.index.IndexSettings indexSettings34 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData18, settings23, strPredicate28, indexScopedSettings29);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting35 = null; // flaky: indexSettings34.getINDEX_WARMER_ENABLED_SETTING();
// flaky:         indexSettings34.setTTLPurgeDisabled(false);
        org.elasticsearch.index.translog.Translog.Durability durability38 = null; // flaky: indexSettings34.durability;
        indexSettings8.setdurability(durability38);
        indexSettings2.setTranslogDurability(durability38);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting41 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings42 = indexSettings2.nodeSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSetting5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSetting11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting35);
// flaky:         org.junit.Assert.assertTrue("'" + durability38 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability38.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(booleanSetting41);
        org.junit.Assert.assertNotNull(settings42);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str8 = indexSettings2.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.syncInterval;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting11 = indexSettings2.getDEFAULT_FIELD_SETTING();
        long long12 = indexSettings2.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(strSetting11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 60000L + "'", long12 == 60000L);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        java.util.function.Predicate<java.lang.String> strPredicate4 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = indexSettings2.flushThresholdSize;
        boolean boolean6 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue7 = indexSettings2.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting8 = indexSettings2.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNotNull(timeValueSetting8);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings2.nodeSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData11.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings27.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings33.archiveUnknownOrBrokenSettings(settings36);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData22, settings27, strPredicate32, indexScopedSettings33);
        org.elasticsearch.index.IndexSettings indexSettings39 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17, strPredicate21, indexScopedSettings33);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap45 = settings44.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings44);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings48);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean52 = indexScopedSettings50.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings54);
        boolean boolean56 = indexSettings55.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings55.settings = settings57;
        org.elasticsearch.common.settings.Settings settings60 = settings57.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings50.archiveUnknownOrBrokenSettings(settings60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings61);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = new org.elasticsearch.common.settings.IndexScopedSettings(settings10, indexScopedSettings33, indexMetaData40);
        java.util.Set<java.lang.String> strSet65 = settings10.names();
        java.lang.Boolean boolean68 = settings10.getAsBoolean("index.version.minimum_compatible", (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + boolean68 + "' != '" + true + "'", boolean68, true);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        int int10 = indexSettings2.getMaxRescoreWindow();
        boolean boolean11 = indexSettings2.getqueryStringLenient();
        boolean boolean12 = indexSettings2.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings18);
        boolean boolean20 = indexSettings19.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings19.settings = settings21;
        org.elasticsearch.common.settings.Settings settings24 = settings21.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings25);
        org.elasticsearch.Version version27 = indexMetaData10.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(version27);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17, strPredicate20, indexScopedSettings32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings40);
        boolean boolean42 = indexSettings41.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings41.settings = settings43;
        boolean boolean45 = indexSettings41.queryStringLenient;
        boolean boolean46 = indexSettings41.TTLPurgeDisabled;
        java.lang.String str47 = indexSettings41.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue48 = indexSettings41.syncInterval;
// flaky:         indexSettings38.setRefreshInterval(timeValue48);
        indexSettings2.refreshInterval = timeValue48;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = indexSettings2.getScopedSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting52 = indexSettings2.getALLOW_UNMAPPED();
        org.elasticsearch.common.unit.TimeValue timeValue53 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertNotNull(booleanSetting52);
        org.junit.Assert.assertNotNull(timeValue53);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("index.version.upgraded_string", (float) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder9.put("hi!", (float) 10L);
        java.lang.String str17 = builder9.remove("true");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder21 = builder9.put("index.shadow_replicas", 60000L, byteSizeUnit20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("index.version.upgraded_string", (float) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder12.internalMap();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = builder12.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder12.put("index.shared_filesystem.recover_on_any_node", (float) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder12.put("index.blocks.read_only", (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        boolean boolean30 = indexSettings29.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings29.settings = settings31;
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings34);
        boolean boolean37 = indexScopedSettings24.isPrivateSetting("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = indexMetaData38.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = new org.elasticsearch.common.settings.IndexScopedSettings(settings21, indexScopedSettings24, indexMetaData38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData42);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap47 = settings46.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings57 = builder56.build();
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder58.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap60 = builder58.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder56.put(strMap60);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder62.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings70 = builder69.build();
        org.elasticsearch.common.settings.Settings.Builder builder71 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder71.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = builder71.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder69.put(strMap73);
        boolean boolean76 = indexScopedSettings41.updateSettings(settings46, builder61, builder74, "state-");
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder74.put("index.shared_filesystem.recover_on_any_node", 0.0d);
        org.elasticsearch.common.settings.Settings settings80 = builder74.build();
        java.util.concurrent.TimeUnit timeUnit83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder84 = builder74.put("index.", 1L, timeUnit83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(settings80);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings12);
        boolean boolean14 = indexSettings13.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings13.settings = settings15;
        int int17 = indexSettings13.maxRescoreWindow;
        boolean boolean18 = indexSettings13.TTLPurgeDisabled;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue19 = indexSettings13.getFlushThresholdSize();
        indexSettings2.setTranslogFlushThresholdSize(byteSizeValue19);
        boolean boolean21 = indexSettings2.isIndexUsingShadowReplicas();
        org.elasticsearch.Version version22 = indexSettings2.getversion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteSizeValue19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(version22);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.lang.String str21 = settings19.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder30.replacePropertyPlaceholders();
        boolean boolean33 = indexScopedSettings11.updateDynamicSettings(settings19, builder26, builder31, "_all");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder26.put("hi!", (int) (short) 100);
        java.lang.String str38 = builder26.get("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder26.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder41.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder42.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder42.putNull("");
        java.lang.String[] strArray71 = new java.lang.String[] { "_na_", "index.number_of_shards", "index.auto_expand_replicas", "index.priority", "", "active_allocations", "index.blocks.metadata", "active_allocations", "_all", "index.shadow_replicas", "index.version.upgraded_string", "index.data_path", "active_allocations", "archived.", "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.blocks.read_only", "index.creation_date", "index.number_of_replicas" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder42.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList72);
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder26.putArray("index.blocks.read_only", (java.util.List<java.lang.String>) strList72);
        java.util.concurrent.TimeUnit timeUnit78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder79 = builder75.put("index.priority", (long) 10, timeUnit78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("active_allocations", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.settings(settings11);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11);
        org.elasticsearch.index.translog.Translog.Durability durability17 = indexSettings16.durability;
        boolean boolean18 = indexSettings16.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings16.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting20 = indexSettings16.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + durability17 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability17.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(timeValueSetting20);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters19 = indexMetaData0.excludeFilters();
        long long20 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        boolean boolean43 = indexSettings42.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings42.settings = settings44;
        org.elasticsearch.common.settings.Settings settings47 = settings44.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings48.archiveUnknownOrBrokenSettings(settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state54 = indexMetaData53.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = new org.elasticsearch.common.settings.IndexScopedSettings(settings47, indexScopedSettings48, indexMetaData53);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray62 = settings47.getAsArray("", strArray60, (java.lang.Boolean) true);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings47);
        boolean boolean64 = indexSettings63.getqueryStringAnalyzeWildcard();
        org.elasticsearch.index.translog.Translog.Durability durability65 = indexSettings63.durability;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = indexSettings63.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings68);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData67);
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap72 = settings71.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings71);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData74, settings75);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean79 = indexScopedSettings77.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings81);
        boolean boolean83 = indexSettings82.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings84 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings82.settings = settings84;
        org.elasticsearch.common.settings.Settings settings87 = settings84.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings88 = indexScopedSettings77.archiveUnknownOrBrokenSettings(settings87);
        org.elasticsearch.index.IndexSettings indexSettings89 = new org.elasticsearch.index.IndexSettings(indexMetaData74, settings88);
        org.elasticsearch.index.IndexSettings indexSettings90 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings88);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder91 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params92 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder93 = settings88.toXContent(xContentBuilder91, params92);
        org.elasticsearch.index.IndexSettings indexSettings94 = new org.elasticsearch.index.IndexSettings(indexMetaData66, settings88);
        java.lang.String str95 = indexMetaData66.getIndexUUID();
        org.apache.lucene.util.Version version96 = indexMetaData66.getMinimumCompatibleVersion();
        // The following exception was thrown during execution in test generation
        try {
            long long98 = indexMetaData66.primaryTerm(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertTrue("'" + state54 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state54.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + durability65 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability65.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(params92);
        org.junit.Assert.assertNull(xContentBuilder93);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "_na_" + "'", str95, "_na_");
        org.junit.Assert.assertNull(version96);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        java.lang.String[] strArray19 = new java.lang.String[] { "index.blocks.write", "index.uuid", "index.priority", "index.blocks.read", "index.version.upgraded", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder11.putArray("_na_", (java.util.List<java.lang.String>) strList20);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder11.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = null; // flaky: indexSettings16.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting18 = null; // flaky: indexSettings16.getINDEX_WARMER_ENABLED_SETTING();
        java.lang.String str19 = null; // flaky: indexSettings16.getUUID();
        boolean boolean20 = false; // flaky: indexSettings16.isShadowReplicaIndex();
// flaky:         indexSettings16.setwarmerEnabled(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting17);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_na_" + "'", str19, "_na_");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings12);
        boolean boolean14 = indexSettings13.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings13.settings = settings15;
        int int17 = indexSettings13.maxRescoreWindow;
        boolean boolean18 = indexSettings13.TTLPurgeDisabled;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue19 = indexSettings13.getFlushThresholdSize();
        indexSettings2.setTranslogFlushThresholdSize(byteSizeValue19);
        boolean boolean21 = indexSettings2.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue22 = indexSettings2.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue23 = indexSettings2.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteSizeValue19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteSizeValue22);
        org.junit.Assert.assertNotNull(timeValue23);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData0.getInitialRecoveryFilters();
        java.lang.String str32 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.settings.Settings settings33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "_na_" + "'", str32, "_na_");
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Settings settings9 = indexSettings2.nodeSettings;
        boolean boolean10 = indexSettings2.isDefaultAllowUnmappedFields();
        org.apache.lucene.index.MergePolicy mergePolicy11 = indexSettings2.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean13 = indexSettings2.isTTLPurgeDisabled();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings2.mergeSchedulerConfig;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings2.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(mergePolicy11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertNotNull(timeValue15);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        boolean boolean9 = indexSettings2.isOnSharedFilesystem();
        indexSettings2.setMaxRescoreWindow((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        int int18 = indexSettings14.maxRescoreWindow;
        java.lang.String str19 = indexSettings14.getUUID();
        org.elasticsearch.common.settings.Settings settings20 = indexSettings14.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting21 = indexSettings14.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean22 = indexSettings14.hasCustomDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue23 = indexSettings14.globalCheckpointInterval;
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings14.globalCheckpointInterval;
        indexSettings2.setRefreshInterval(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings2.nodeSettings;
        boolean boolean27 = settings26.isEmpty();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_na_" + "'", str19, "_na_");
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(booleanSetting21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(timeValue23);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) (-1));
        // The following exception was thrown during execution in test generation
        try {
            long long5 = builder1.primaryTerm(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = builder9.primaryTerm((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData8);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        long long29 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder31.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.version.upgraded_string", (float) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = builder41.internalMap();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = builder41.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder30.settings(builder41);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder44.putMapping(mappingMetaData45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        long long10 = indexSettings2.gcDeletesInMillis;
        boolean boolean11 = indexSettings2.isQueryStringAllowLeadingWildcard();
        boolean boolean12 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting13 = indexSettings2.getINDEX_TRANSLOG_DURABILITY_SETTING();
        boolean boolean15 = indexSettings2.matchesIndexName("index.number_of_shards");
        org.elasticsearch.common.logging.ESLogger eSLogger16 = indexSettings2.getlogger();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder17.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder18.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder18.put("", (double) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = indexMetaData29.getState();
        java.util.Set<java.lang.String> strSet32 = null; // flaky: indexMetaData29.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version33 = indexMetaData29.getCreationVersion();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder27.put("index.version.upgraded_string", version33);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder34.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings36 = builder35.build();
        indexSettings2.settings = settings36;
        java.lang.String str39 = settings36.get("_na_");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(durabilitySetting13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(eSLogger16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue40 = indexSettings39.getFlushThresholdSize();
        indexSettings39.maxRescoreWindow = (byte) 0;
        boolean boolean43 = indexSettings39.isTTLPurgeDisabled();
        java.lang.String str44 = indexSettings39.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(byteSizeValue40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        boolean boolean34 = indexSettings30.queryStringLenient;
        boolean boolean35 = indexSettings30.TTLPurgeDisabled;
        java.lang.String str36 = indexSettings30.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings30.syncInterval;
// flaky:         indexSettings27.setRefreshInterval(timeValue37);
        org.elasticsearch.common.unit.TimeValue timeValue39 = null; // flaky: indexSettings27.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        int int42 = indexMetaData40.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData40.getMappings();
// flaky:         indexSettings27.indexMetaData = indexMetaData40;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state56 = indexMetaData55.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings58);
        boolean boolean60 = indexSettings59.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings59.settings = settings61;
        org.elasticsearch.common.settings.Settings settings64 = settings61.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings68.archiveUnknownOrBrokenSettings(settings71);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap75 = settings71.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate76 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean79 = indexScopedSettings77.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings77.archiveUnknownOrBrokenSettings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings82 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData66, settings71, strPredicate76, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings61, strPredicate65, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings61);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings61);
        java.util.function.Predicate<java.lang.String> strPredicate86 = indexSettings85.getindexNameMatcher();
        org.elasticsearch.common.logging.ESLogger eSLogger87 = indexSettings85.logger;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(timeValue37);
// flaky:         org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + state56 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state56.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(strPredicate86);
        org.junit.Assert.assertNotNull(eSLogger87);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexSettings2.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap14 = indexMetaData12.getMappings();
        java.util.Set<java.lang.String> strSet16 = null; // flaky: indexMetaData12.activeAllocationIds((int) (byte) -1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData12.mapping("index.number_of_shards");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(mappingMetaData18);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Settings settings9 = indexSettings2.nodeSettings;
        org.elasticsearch.index.translog.Translog.Durability durability10 = indexSettings2.getTranslogDurability();
        boolean boolean11 = indexSettings2.getwarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + durability10 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability10.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.Version version17 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(version17);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str8 = indexSettings2.customDataPath();
        indexSettings2.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getTranslogDurability();
        java.lang.String str12 = indexSettings2.nodeName;
        boolean boolean13 = indexSettings2.isQueryStringLenient();
        boolean boolean14 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting15 = indexSettings2.getMAX_RESCORE_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intSetting15);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.shared_filesystem.recover_on_any_node", (float) (byte) 1);
        java.lang.String str6 = builder4.remove("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder4.put("active_allocations", (int) (short) 1);
        java.lang.String str11 = builder9.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder9.put("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", 100);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("", 0L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.version.upgraded_string");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.version.upgraded_string]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        long long10 = indexSettings2.gcDeletesInMillis;
        boolean boolean11 = indexSettings2.isQueryStringAllowLeadingWildcard();
        boolean boolean12 = indexSettings2.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting13 = indexSettings2.getMAX_RESULT_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intSetting13);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting11 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue12 = indexSettings2.getFlushThresholdSize();
        java.lang.String str13 = indexSettings2.defaultField;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = indexSettings2.getScopedSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings18);
        boolean boolean20 = indexSettings19.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings19.settings = settings21;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder16.settings(settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData25.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        boolean boolean30 = indexSettings29.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings29.settings = settings31;
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate35 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData36);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings41.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData36, settings41, strPredicate46, indexScopedSettings47);
        org.elasticsearch.index.IndexSettings indexSettings53 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData25, settings31, strPredicate35, indexScopedSettings47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings55);
        java.util.function.Predicate<java.lang.String> strPredicate57 = indexSettings56.indexNameMatcher;
        org.elasticsearch.common.settings.Settings settings58 = settings31.filter(strPredicate57);
        org.elasticsearch.common.settings.Settings settings59 = settings21.filter(strPredicate57);
        indexScopedSettings14.validate(settings59);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(booleanSetting11);
        org.junit.Assert.assertNotNull(byteSizeValue12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_all" + "'", str13, "_all");
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settings59);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        java.lang.String str4 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.creation_date_string]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index.creation_date_string" + "'", str4, "index.creation_date_string");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        boolean boolean34 = indexSettings30.queryStringLenient;
        boolean boolean35 = indexSettings30.TTLPurgeDisabled;
        java.lang.String str36 = indexSettings30.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings30.syncInterval;
// flaky:         indexSettings27.setRefreshInterval(timeValue37);
        org.elasticsearch.common.unit.TimeValue timeValue39 = null; // flaky: indexSettings27.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        int int42 = indexMetaData40.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData40.getMappings();
// flaky:         indexSettings27.indexMetaData = indexMetaData40;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state56 = indexMetaData55.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings58);
        boolean boolean60 = indexSettings59.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings59.settings = settings61;
        org.elasticsearch.common.settings.Settings settings64 = settings61.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings68.archiveUnknownOrBrokenSettings(settings71);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap75 = settings71.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate76 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean79 = indexScopedSettings77.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings77.archiveUnknownOrBrokenSettings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings82 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData66, settings71, strPredicate76, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings61, strPredicate65, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings61);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings61);
        boolean boolean86 = indexSettings85.warmerEnabled;
        boolean boolean88 = indexSettings85.matchesIndexName("5000099");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(timeValue37);
// flaky:         org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + state56 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state56.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.refreshInterval;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting10 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting11 = indexSettings2.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = indexSettings2.updateIndexMetaData(indexMetaData12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(timeValueSetting10);
        org.junit.Assert.assertNotNull(booleanSetting11);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        java.lang.String str16 = indexSettings15.getUUID();
        boolean boolean17 = indexSettings15.TTLPurgeDisabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_na_" + "'", str16, "_na_");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        int int12 = indexSettings8.maxRescoreWindow;
        java.lang.String str13 = indexSettings8.getUUID();
        org.elasticsearch.common.settings.Settings settings14 = indexSettings8.nodeSettings;
        org.elasticsearch.common.settings.Settings settings15 = indexSettings8.nodeSettings;
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings20);
        boolean boolean22 = indexSettings21.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings21.settings = settings23;
        org.elasticsearch.common.settings.Settings settings26 = settings23.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings30.archiveUnknownOrBrokenSettings(settings33);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings33.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData28, settings33, strPredicate38, indexScopedSettings39);
        org.elasticsearch.index.IndexSettings indexSettings45 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData17, settings23, strPredicate27, indexScopedSettings39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate49 = indexSettings48.indexNameMatcher;
        int int50 = indexSettings48.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig51 = indexSettings48.getmergePolicyConfig();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = indexSettings48.scopedSettings;
        boolean boolean54 = indexScopedSettings52.isPrivateSetting("index.blocks.read");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting55 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting56 = org.elasticsearch.index.IndexSettings.INDEX_TTL_DISABLE_PURGE_SETTING;
        java.util.function.BiConsumer<java.lang.Boolean, java.lang.Boolean> booleanBiConsumer57 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(booleanSetting55, booleanSetting56, booleanBiConsumer57);
        java.lang.Boolean boolean59 = indexScopedSettings39.get(booleanSetting55);
        org.elasticsearch.index.IndexSettings indexSettings60 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15, strPredicate16, indexScopedSettings39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput64 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strPredicate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(booleanSetting55);
        org.junit.Assert.assertNotNull(booleanSetting56);
        org.junit.Assert.assertEquals("'" + boolean59 + "' != '" + true + "'", boolean59, true);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        int int4 = indexSettings2.numberOfShards;
        boolean boolean5 = indexSettings2.isQueryStringLenient();
        indexSettings2.setwarmerEnabled(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings9);
        boolean boolean11 = indexSettings10.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings10.settings = settings12;
        boolean boolean14 = indexSettings10.queryStringLenient;
        boolean boolean15 = indexSettings10.TTLPurgeDisabled;
        java.lang.String str16 = indexSettings10.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings10.syncInterval;
        indexSettings2.refreshInterval = timeValue17;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting19 = indexSettings2.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertNotNull(booleanSetting19);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        int int16 = indexMetaData10.getTotalNumberOfShards();
        org.elasticsearch.Version version17 = indexMetaData10.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(version17);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.queryStringLenient;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig4 = indexSettings2.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings6);
        boolean boolean8 = indexSettings7.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings7.settings = settings9;
        int int11 = indexSettings7.maxRescoreWindow;
        java.lang.String str12 = indexSettings7.getUUID();
        org.elasticsearch.common.settings.Settings settings13 = indexSettings7.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = indexSettings7.getINDEX_GC_DELETES_SETTING();
        int int15 = indexSettings7.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = indexSettings7.scopedSettings;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig17 = indexSettings7.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexSettings7.indexMetaData;
        boolean boolean19 = indexSettings2.updateIndexMetaData(indexMetaData18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData18);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = builder20.primaryTerm((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_na_" + "'", str12, "_na_");
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        int int11 = indexSettings2.getNumberOfShards();
        boolean boolean12 = indexSettings2.isTTLPurgeDisabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        boolean boolean19 = indexSettings15.queryStringLenient;
        boolean boolean20 = indexSettings15.TTLPurgeDisabled;
        java.lang.String str21 = indexSettings15.customDataPath();
        indexSettings15.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability24 = indexSettings15.durability;
        indexSettings2.setTranslogDurability(durability24);
        org.elasticsearch.common.logging.ESLogger eSLogger26 = indexSettings2.getlogger();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting27 = indexSettings2.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + durability24 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability24.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(eSLogger26);
        org.junit.Assert.assertNotNull(timeValueSetting27);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.lang.String str21 = settings19.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder30.replacePropertyPlaceholders();
        boolean boolean33 = indexScopedSettings11.updateDynamicSettings(settings19, builder26, builder31, "_all");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder26.put("hi!", (int) (short) 100);
        java.lang.String str38 = builder26.get("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder26.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        boolean boolean43 = indexSettings42.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings42.settings = settings44;
        int int46 = indexSettings42.maxRescoreWindow;
        java.lang.String str47 = indexSettings42.getUUID();
        org.elasticsearch.common.settings.Settings settings48 = indexSettings42.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting49 = indexSettings42.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings50 = indexSettings42.nodeSettings;
        indexSettings42.setMaxRescoreWindow(0);
        boolean boolean53 = indexSettings42.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings54 = indexSettings42.getNodeSettings();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = settings54.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder39.put(strMap55);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("index.blocks.write", (int) (short) 10);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10000 + "'", int46 == 10000);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "_na_" + "'", str47, "_na_");
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(booleanSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.refreshInterval;
        java.lang.String str10 = indexSettings2.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings12);
        boolean boolean14 = indexSettings13.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings13.settings = settings15;
        int int17 = indexSettings13.maxRescoreWindow;
        java.lang.String str18 = indexSettings13.getUUID();
        org.elasticsearch.common.settings.Settings settings19 = indexSettings13.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting20 = indexSettings13.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings21 = indexSettings13.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting22 = indexSettings13.getMAX_RESULT_WINDOW_SETTING();
        java.lang.String str23 = indexSettings13.defaultField;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue24 = indexSettings13.flushThresholdSize;
        indexSettings2.flushThresholdSize = byteSizeValue24;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_na_" + "'", str18, "_na_");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(booleanSetting20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(intSetting22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_all" + "'", str23, "_all");
        org.junit.Assert.assertNotNull(byteSizeValue24);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.getNodeSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings10);
        boolean boolean12 = indexSettings11.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings11.settings = settings13;
        boolean boolean15 = indexSettings11.queryStringLenient;
        boolean boolean16 = indexSettings11.TTLPurgeDisabled;
        java.lang.String str17 = indexSettings11.customDataPath();
        indexSettings11.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability20 = indexSettings11.durability;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings22);
        java.util.function.Predicate<java.lang.String> strPredicate24 = indexSettings23.indexNameMatcher;
        java.util.function.Predicate<java.lang.String> strPredicate25 = indexSettings23.getindexNameMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue26 = indexSettings23.flushThresholdSize;
        indexSettings11.flushThresholdSize = byteSizeValue26;
        indexSettings2.flushThresholdSize = byteSizeValue26;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + durability20 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability20.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(strPredicate25);
        org.junit.Assert.assertNotNull(byteSizeValue26);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17, strPredicate20, indexScopedSettings32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings40);
        boolean boolean42 = indexSettings41.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings41.settings = settings43;
        boolean boolean45 = indexSettings41.queryStringLenient;
        boolean boolean46 = indexSettings41.TTLPurgeDisabled;
        java.lang.String str47 = indexSettings41.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue48 = indexSettings41.syncInterval;
// flaky:         indexSettings38.setRefreshInterval(timeValue48);
        indexSettings2.refreshInterval = timeValue48;
        boolean boolean51 = indexSettings2.getdefaultAllowUnmappedFields();
        int int52 = indexSettings2.numberOfShards;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting53 = indexSettings2.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting54 = indexSettings2.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.unit.TimeValue timeValue55 = indexSettings2.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state57 = indexMetaData56.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings59);
        boolean boolean61 = indexSettings60.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings60.settings = settings62;
        org.elasticsearch.common.settings.Settings settings65 = settings62.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate66 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData67);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean71 = indexScopedSettings69.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings73 = indexScopedSettings69.archiveUnknownOrBrokenSettings(settings72);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap76 = settings72.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate77 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean80 = indexScopedSettings78.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings82 = indexScopedSettings78.archiveUnknownOrBrokenSettings(settings81);
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData67, settings72, strPredicate77, indexScopedSettings78);
        org.elasticsearch.index.IndexSettings indexSettings84 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData56, settings62, strPredicate66, indexScopedSettings78);
        java.lang.String str86 = settings62.get("index.shadow_replicas");
        org.elasticsearch.common.unit.TimeValue timeValue88 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue89 = settings62.getAsTime("index.", timeValue88);
        indexSettings2.refreshInterval = timeValue89;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting91 = indexSettings2.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue92 = indexSettings2.globalCheckpointInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting53);
        org.junit.Assert.assertNotNull(booleanSetting54);
        org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertTrue("'" + state57 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state57.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(timeValue88);
        org.junit.Assert.assertNotNull(timeValue89);
        org.junit.Assert.assertNotNull(timeValueSetting91);
        org.junit.Assert.assertNotNull(timeValue92);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        boolean boolean43 = indexSettings42.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings42.settings = settings44;
        org.elasticsearch.common.settings.Settings settings47 = settings44.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings48.archiveUnknownOrBrokenSettings(settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state54 = indexMetaData53.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = new org.elasticsearch.common.settings.IndexScopedSettings(settings47, indexScopedSettings48, indexMetaData53);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray62 = settings47.getAsArray("", strArray60, (java.lang.Boolean) true);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings47);
        boolean boolean64 = indexSettings63.getqueryStringAnalyzeWildcard();
        org.elasticsearch.index.translog.Translog.Durability durability65 = indexSettings63.durability;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting66 = indexSettings63.getQUERY_STRING_LENIENT_SETTING();
        indexSettings63.setTTLPurgeDisabled(true);
        int int69 = indexSettings63.getMaxResultWindow();
        indexSettings63.setMaxRescoreWindow((-1));
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertTrue("'" + state54 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state54.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + durability65 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability65.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(booleanSetting66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10000 + "'", int69 == 10000);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("primary_terms");
        int int2 = builder1.numberOfShards();
        java.lang.String str3 = builder1.index();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.index("index.data_path");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "primary_terms" + "'", str3, "primary_terms");
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("primary_terms", "");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.settings(builder9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder10.removeAllAliases();
        int int12 = builder10.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder10.numberOfReplicas((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting5 = indexSettings2.getDEFAULT_FIELD_SETTING();
        indexSettings2.setEnableWarmer(true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue8 = null;
        indexSettings2.flushThresholdSize = byteSizeValue8;
        boolean boolean10 = indexSettings2.warmerEnabled;
        indexSettings2.setMaxRescoreWindow(100);
        long long13 = indexSettings2.getGcDeletesInMillis();
        boolean boolean14 = indexSettings2.warmerEnabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSetting5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 60000L + "'", long13 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Settings settings9 = indexSettings2.nodeSettings;
        boolean boolean10 = indexSettings2.isDefaultAllowUnmappedFields();
        org.apache.lucene.index.MergePolicy mergePolicy11 = indexSettings2.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        indexSettings2.setMaxRescoreWindow((int) (byte) 0);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting15 = indexSettings2.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(mergePolicy11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(durabilitySetting15);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings settings21 = settings19.getAsSettings("index.number_of_replicas");
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = indexMetaData24.getState();
        int int26 = indexMetaData24.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap27 = indexMetaData24.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings32);
        boolean boolean34 = indexSettings33.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings33.settings = settings35;
        org.elasticsearch.common.settings.Settings settings38 = settings35.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings28.archiveUnknownOrBrokenSettings(settings38);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings39);
        org.elasticsearch.Version version41 = indexSettings40.getversion();
        org.elasticsearch.common.settings.Settings settings42 = indexSettings40.settings;
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.version.upgraded");
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44);
        int int46 = indexSettings45.maxResultWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(version41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10000 + "'", int46 == 10000);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("primary_terms", "");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.settings(builder9);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.normalizePrefix("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder9.put("index.blocks.write", (long) (short) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings4 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings6);
        boolean boolean8 = indexSettings7.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings7.settings = settings9;
        int int11 = indexSettings7.maxRescoreWindow;
        java.lang.String str12 = indexSettings7.getUUID();
        org.elasticsearch.common.settings.Settings settings13 = indexSettings7.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting14 = indexSettings7.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings7.nodeSettings;
        indexSettings7.setMaxRescoreWindow(0);
        int int18 = indexSettings7.maxResultWindow;
        boolean boolean19 = settings3.equals((java.lang.Object) indexSettings7);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings3.getAsGroups();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_na_" + "'", str12, "_na_");
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(booleanSetting14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        int int4 = indexSettings2.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig5 = indexSettings2.getmergePolicyConfig();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = indexSettings2.scopedSettings;
        boolean boolean8 = indexScopedSettings6.isPrivateSetting("index.blocks.read");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting10 = org.elasticsearch.index.IndexSettings.INDEX_TTL_DISABLE_PURGE_SETTING;
        java.util.function.BiConsumer<java.lang.Boolean, java.lang.Boolean> booleanBiConsumer11 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(booleanSetting9, booleanSetting10, booleanBiConsumer11);
        boolean boolean14 = indexScopedSettings6.isPrivateSetting("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings16);
        boolean boolean18 = indexSettings17.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings17.settings = settings19;
        boolean boolean21 = indexSettings17.queryStringLenient;
        boolean boolean22 = indexSettings17.TTLPurgeDisabled;
        boolean boolean23 = indexSettings17.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version24 = indexSettings17.version;
        org.elasticsearch.index.translog.Translog.Durability durability25 = indexSettings17.durability;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings17.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        java.util.function.BiConsumer<java.lang.Boolean, java.lang.Boolean> booleanBiConsumer28 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(booleanSetting26, booleanSetting27, booleanBiConsumer28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings32);
        boolean boolean34 = indexSettings33.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings33.settings = settings35;
        boolean boolean37 = indexSettings33.queryStringLenient;
        boolean boolean38 = indexSettings33.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig39 = indexSettings33.mergePolicyConfig;
        int int40 = indexSettings33.getMaxRescoreWindow();
        int int41 = indexSettings33.maxRescoreWindow;
        int int42 = indexSettings33.getNumberOfShards();
        indexSettings33.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.Settings settings45 = indexSettings33.settings;
        indexScopedSettings6.validate("index.priority", settings45);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings45, streamOutput47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(booleanSetting10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertTrue("'" + durability25 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability25.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10000 + "'", int40 == 10000);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10000 + "'", int41 == 10000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(settings45);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        int int4 = indexSettings2.numberOfShards;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig5 = indexSettings2.mergeSchedulerConfig;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig6 = indexSettings2.mergePolicyConfig;
        int int7 = indexSettings2.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig5);
        org.junit.Assert.assertNotNull(mergePolicyConfig6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        long long10 = indexSettings2.gcDeletesInMillis;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting11 = indexSettings2.getINDEX_TRANSLOG_DURABILITY_SETTING();
        int int12 = indexSettings2.getMaxResultWindow();
        org.elasticsearch.Version version13 = indexSettings2.getversion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(durabilitySetting11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertNotNull(version13);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData41 = indexMetaData0.mappingOrDefault("index.creation_date_string");
        org.elasticsearch.common.io.stream.StreamInput streamInput42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff43 = indexMetaData0.readDiffFrom(streamInput42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNull(mappingMetaData41);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.settings(builder4);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.creation_date_string", (double) 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings24 = builder23.build();
        org.elasticsearch.common.settings.Settings settings25 = builder23.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings33);
        org.elasticsearch.common.settings.Settings settings37 = indexMetaData27.getSettings();
        java.lang.String[] strArray39 = settings37.getAsArray("hi!");
        java.lang.String[] strArray40 = settings25.getAsArray("index.data_path", strArray39);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder14.putArray("hi!", strArray40);
        java.lang.String[] strArray43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder44 = builder14.putArray("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", strArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read_only");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings4);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings4.getAsGroups();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue10 = settings4.getAsRatio("index.version.minimum_compatible", "index.blocks.metadata");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.blocks.metadata]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17, strPredicate20, indexScopedSettings32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings40);
        boolean boolean42 = indexSettings41.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings41.settings = settings43;
        boolean boolean45 = indexSettings41.queryStringLenient;
        boolean boolean46 = indexSettings41.TTLPurgeDisabled;
        java.lang.String str47 = indexSettings41.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue48 = indexSettings41.syncInterval;
// flaky:         indexSettings38.setRefreshInterval(timeValue48);
        indexSettings2.refreshInterval = timeValue48;
        java.util.function.Predicate<java.lang.String> strPredicate51 = indexSettings2.getindexNameMatcher();
        boolean boolean52 = indexSettings2.isShadowReplicaIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = indexSettings2.getIndexMetaData();
        java.lang.String str54 = indexMetaData53.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings56);
        boolean boolean58 = indexSettings57.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings57.settings = settings59;
        boolean boolean61 = indexSettings57.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting62 = indexSettings57.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.refreshInterval;
        indexSettings57.setMaxRescoreWindow((int) 'a');
        org.elasticsearch.common.logging.ESLogger eSLogger67 = indexSettings57.logger;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = indexSettings57.scopedSettings;
        boolean boolean69 = indexMetaData53.equals((java.lang.Object) indexScopedSettings68);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters70 = indexMetaData53.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(strPredicate51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "_na_" + "'", str54, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(booleanSetting62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertNotNull(eSLogger67);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters70);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings2.getNodeSettings();
        boolean boolean11 = indexSettings2.getwarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings23.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings23.getRefreshInterval();
        org.elasticsearch.index.translog.Translog.Durability durability26 = indexSettings23.durability;
        boolean boolean27 = indexSettings23.isDefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        boolean boolean34 = indexSettings30.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting35 = indexSettings30.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings36 = indexSettings30.nodeSettings;
        boolean boolean37 = indexSettings30.isQueryStringAllowLeadingWildcard();
        long long38 = indexSettings30.gcDeletesInMillis;
        org.elasticsearch.index.translog.Translog.Durability durability39 = indexSettings30.getTranslogDurability();
        indexSettings23.durability = durability39;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + durability26 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability26.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(booleanSetting35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 60000L + "'", long38 == 60000L);
        org.junit.Assert.assertTrue("'" + durability39 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability39.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        boolean boolean10 = indexSettings2.queryStringLenient;
        indexSettings2.TTLPurgeDisabled = true;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData18.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData18);
        boolean boolean22 = indexMetaData18.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings27);
        boolean boolean29 = indexSettings28.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings28.settings = settings30;
        org.elasticsearch.common.settings.Settings settings33 = settings30.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings33);
        org.elasticsearch.common.settings.Settings settings36 = settings33.getAsSettings("hi!");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.hasDynamicSetting("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate40 = indexScopedSettings37.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings42);
        boolean boolean44 = indexSettings43.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings43.settings = settings45;
        boolean boolean47 = indexSettings43.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting48 = indexSettings43.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = indexSettings43.scopedSettings;
        java.lang.String str50 = indexScopedSettings49.nodeName();
        org.elasticsearch.index.IndexSettings indexSettings51 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData18, settings33, strPredicate40, indexScopedSettings49);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean54 = indexScopedSettings52.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings56);
        boolean boolean58 = indexSettings57.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings57.settings = settings59;
        org.elasticsearch.common.settings.Settings settings62 = settings59.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings52.archiveUnknownOrBrokenSettings(settings62);
        boolean boolean65 = indexScopedSettings52.isPrivateSetting("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate66 = indexScopedSettings52.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings68);
        boolean boolean70 = indexSettings69.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings69.settings = settings71;
        boolean boolean73 = indexSettings69.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting74 = indexSettings69.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings75 = indexSettings69.scopedSettings;
        org.elasticsearch.index.IndexSettings indexSettings76 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings33, strPredicate66, indexScopedSettings75);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings79 = new org.elasticsearch.index.IndexSettings(indexMetaData77, settings78);
        boolean boolean80 = indexSettings79.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings79.settings = settings81;
        boolean boolean83 = indexSettings79.queryStringLenient;
        boolean boolean84 = indexSettings79.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig85 = indexSettings79.mergePolicyConfig;
        int int86 = indexSettings79.getMaxRescoreWindow();
        int int87 = indexSettings79.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate88 = indexSettings79.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings89 = settings33.filter(strPredicate88);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue92 = settings89.getAsMemory("10.0", "index.version.created");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [10.0] with value [index.version.created] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strPredicate40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(booleanSetting48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strPredicate66);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(booleanSetting74);
        org.junit.Assert.assertNotNull(indexScopedSettings75);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10000 + "'", int86 == 10000);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10000 + "'", int87 == 10000);
        org.junit.Assert.assertNotNull(strPredicate88);
        org.junit.Assert.assertNotNull(settings89);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        int int29 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("index.version.created_string", (int) (short) -1);
        java.io.InputStream inputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.loadFromStream("index.auto_expand_replicas", inputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        java.lang.String str8 = indexSettings2.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData9.getState();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData9.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version13 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        long long15 = indexMetaData9.getCreationDate();
        indexSettings2.indexMetaData = indexMetaData9;
        java.lang.String str17 = indexMetaData9.getIndexUUID();
        java.lang.Class<?> wildcardClass18 = indexMetaData9.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData3.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings6);
        boolean boolean8 = indexSettings7.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings7.settings = settings9;
        org.elasticsearch.common.settings.Settings settings12 = settings9.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings16.archiveUnknownOrBrokenSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings19.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings25.archiveUnknownOrBrokenSettings(settings28);
        org.elasticsearch.index.IndexSettings indexSettings30 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData14, settings19, strPredicate24, indexScopedSettings25);
        org.elasticsearch.index.IndexSettings indexSettings31 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData3, settings9, strPredicate13, indexScopedSettings25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap33 = indexMetaData3.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData39);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean43 = indexScopedSettings41.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings41.archiveUnknownOrBrokenSettings(settings44);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder38.settings(settings45);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings45);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings45);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = builder53.build();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexMetaData54);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        java.util.function.Predicate<java.lang.String> strPredicate17 = indexScopedSettings11.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.Settings settings18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings11.dryRun(settings18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strPredicate17);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.Version version17 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData19.getState();
        int int21 = indexMetaData19.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap22 = indexMetaData19.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings27);
        boolean boolean29 = indexSettings28.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings28.settings = settings30;
        org.elasticsearch.common.settings.Settings settings33 = settings30.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings33);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings34);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings34.getGroups("_na_", true);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings34);
        boolean boolean40 = indexSettings39.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder10.normalizePrefix("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        java.lang.String str20 = indexSettings18.getNodeName();
        java.lang.Class<?> wildcardClass21 = indexSettings18.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder10.put("hi!", (java.lang.Class) wildcardClass21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder24.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder25.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder33.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder34.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder34.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder43.replacePropertyPlaceholders();
        java.lang.String[] strArray52 = new java.lang.String[] { "index.blocks.write", "index.uuid", "index.priority", "index.blocks.read", "index.version.upgraded", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder44.putArray("_na_", (java.util.List<java.lang.String>) strList53);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder25.putArray("archived.", (java.util.List<java.lang.String>) strList53);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder10.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList53);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting5 = indexSettings2.getDEFAULT_FIELD_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        int int12 = indexSettings8.maxRescoreWindow;
        java.lang.String str13 = indexSettings8.getUUID();
        org.elasticsearch.common.settings.Settings settings14 = indexSettings8.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting15 = indexSettings8.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings16 = indexSettings8.nodeSettings;
        indexSettings2.settings = settings16;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher18 = indexSettings2.parseFieldMatcher;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue19 = indexSettings2.getFlushThresholdSize();
        boolean boolean20 = indexSettings2.getqueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSetting5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(booleanSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(parseFieldMatcher18);
        org.junit.Assert.assertNotNull(byteSizeValue19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting10 = indexSettings2.getINDEX_CHECK_ON_STARTUP();
        boolean boolean11 = indexSettings2.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = settings16.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings16);
        int int19 = indexSettings18.getNumberOfReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue20 = indexSettings18.flushThresholdSize;
        indexSettings2.setTranslogFlushThresholdSize(byteSizeValue20);
        boolean boolean22 = indexSettings2.queryStringAllowLeadingWildcard;
        indexSettings2.setEnableWarmer(false);
        indexSettings2.setTTLPurgeDisabled(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSetting10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteSizeValue20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        boolean boolean30 = indexSettings29.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings29.settings = settings31;
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings34);
        boolean boolean37 = indexScopedSettings24.isPrivateSetting("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = indexMetaData38.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = new org.elasticsearch.common.settings.IndexScopedSettings(settings21, indexScopedSettings24, indexMetaData38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData42);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap47 = settings46.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings57 = builder56.build();
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder58.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap60 = builder58.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder56.put(strMap60);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder62.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings70 = builder69.build();
        org.elasticsearch.common.settings.Settings.Builder builder71 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder71.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = builder71.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder69.put(strMap73);
        boolean boolean76 = indexScopedSettings41.updateSettings(settings46, builder61, builder74, "state-");
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder74.put("index.shared_filesystem.recover_on_any_node", 0.0d);
        org.elasticsearch.common.settings.Settings settings80 = builder74.build();
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder74.put("index.creation_date", (-1L));
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder74.put("index.number_of_replicas", 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        boolean boolean10 = indexSettings2.queryStringLenient;
        boolean boolean11 = indexSettings2.getqueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting12 = indexSettings2.getALLOW_UNMAPPED();
        indexSettings2.setMaxRescoreWindow(10000);
        boolean boolean15 = indexSettings2.getisShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(booleanSetting12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData2.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.state(state3);
        byte byte5 = state3.id();
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 0 + "'", byte5 == (byte) 0);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("index.data_path");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        boolean boolean29 = indexMetaData0.isSameUUID("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state31 = indexMetaData30.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings33);
        boolean boolean35 = indexSettings34.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings34.settings = settings36;
        org.elasticsearch.common.settings.Settings settings39 = settings36.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData41);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings47 = indexScopedSettings43.archiveUnknownOrBrokenSettings(settings46);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings46.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean54 = indexScopedSettings52.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings56 = indexScopedSettings52.archiveUnknownOrBrokenSettings(settings55);
        org.elasticsearch.index.IndexSettings indexSettings57 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData41, settings46, strPredicate51, indexScopedSettings52);
        org.elasticsearch.index.IndexSettings indexSettings58 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData30, settings36, strPredicate40, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData59, settings60);
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings61.indexNameMatcher;
        org.elasticsearch.common.settings.Settings settings63 = settings36.filter(strPredicate62);
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings63);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = indexSettings64.indexMetaData;
        int int66 = indexSettings64.getNumberOfReplicas();
        java.lang.String str67 = indexSettings64.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + state31 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state31.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.common.settings.Settings settings16 = indexSettings15.nodeSettings;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getSettings();
        java.lang.String str18 = indexSettings15.defaultField;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting19 = indexSettings15.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean20 = indexSettings15.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
        org.junit.Assert.assertNotNull(booleanSetting19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = null; // flaky: indexSettings16.getINDEX_WARMER_ENABLED_SETTING();
// flaky:         indexSettings16.setTTLPurgeDisabled(false);
        org.elasticsearch.index.translog.Translog.Durability durability20 = null; // flaky: indexSettings16.durability;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings22);
        boolean boolean24 = indexSettings23.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings23.settings = settings25;
        int int27 = indexSettings23.maxRescoreWindow;
        java.lang.String str28 = indexSettings23.getUUID();
        org.elasticsearch.common.settings.Settings settings29 = indexSettings23.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = indexSettings23.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean31 = indexSettings23.hasCustomDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue32 = indexSettings23.globalCheckpointInterval;
        org.elasticsearch.common.unit.TimeValue timeValue33 = indexSettings23.globalCheckpointInterval;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting34 = indexSettings23.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig35 = indexSettings23.mergeSchedulerConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting36 = indexSettings23.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings38);
        boolean boolean40 = indexSettings39.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings39.settings = settings41;
        boolean boolean43 = indexSettings39.queryStringLenient;
        boolean boolean44 = indexSettings39.TTLPurgeDisabled;
        boolean boolean45 = indexSettings39.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version46 = indexSettings39.version;
        org.elasticsearch.index.translog.Translog.Durability durability47 = indexSettings39.durability;
        boolean boolean48 = indexSettings39.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting49 = indexSettings39.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability50 = indexSettings39.durability;
        indexSettings23.setTranslogDurability(durability50);
        org.elasticsearch.common.settings.Settings settings52 = indexSettings23.settings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData54);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean58 = indexScopedSettings56.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings56.archiveUnknownOrBrokenSettings(settings59);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap63 = settings59.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate64 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean67 = indexScopedSettings65.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings69 = indexScopedSettings65.archiveUnknownOrBrokenSettings(settings68);
        org.elasticsearch.index.IndexSettings indexSettings70 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData54, settings59, strPredicate64, indexScopedSettings65);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting71 = null; // flaky: indexSettings70.getINDEX_WARMER_ENABLED_SETTING();
        boolean boolean72 = false; // flaky: indexSettings70.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue73 = null; // flaky: indexSettings70.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.unit.TimeValue timeValue74 = settings52.getAsTime("index.data_path", timeValue73);
// flaky:         indexSettings16.setGCDeletes(timeValue74);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting17);
// flaky:         org.junit.Assert.assertTrue("'" + durability20 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability20.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_na_" + "'", str28, "_na_");
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(booleanSetting30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(timeValue32);
        org.junit.Assert.assertNotNull(timeValue33);
        org.junit.Assert.assertNotNull(durabilitySetting34);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig35);
        org.junit.Assert.assertNotNull(booleanSetting36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(version46);
        org.junit.Assert.assertTrue("'" + durability47 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability47.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(intSetting49);
        org.junit.Assert.assertTrue("'" + durability50 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability50.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings69);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
// flaky:         org.junit.Assert.assertNotNull(timeValue73);
// flaky:         org.junit.Assert.assertNotNull(timeValue74);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings30);
        boolean boolean32 = indexSettings31.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings31.settings = settings33;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings35.archiveUnknownOrBrokenSettings(settings38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        java.util.Set<java.lang.String> strSet43 = null; // flaky: indexMetaData40.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = new org.elasticsearch.common.settings.IndexScopedSettings(settings33, indexScopedSettings35, indexMetaData40);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings57.archiveUnknownOrBrokenSettings(settings60);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings60.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings66.archiveUnknownOrBrokenSettings(settings69);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60, strPredicate65, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51, strPredicate54, indexScopedSettings66);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue74 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = settings51.getAsBytesSize("index.creation_date_string", byteSizeValue74);
        org.elasticsearch.common.settings.Settings settings76 = indexScopedSettings44.applySettings(settings51);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings76.getGroups("index.blocks.write", false);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings76);
        int int81 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNull(byteSizeValue75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        indexSettings2.setwarmerEnabled(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting5 = indexSettings2.getDEFAULT_FIELD_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings2.getRefreshInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getQUERY_STRING_ANALYZE_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSetting5);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(booleanSetting7);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder0.putNull("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder4.loadFromSource("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.creation_date", (float) ' ');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings4);
        boolean boolean6 = indexSettings5.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings5.settings = settings7;
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings10);
        java.lang.String str12 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting14 = indexScopedSettings0.get("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData20);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings26.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder19.settings(settings26);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings26);
        org.elasticsearch.index.translog.Translog.Durability durability32 = indexSettings31.durability;
        java.lang.String str33 = indexSettings31.nodeName;
        int int34 = indexSettings31.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting35 = indexSettings31.getINDEX_TTL_DISABLE_PURGE_SETTING();
        java.util.function.Consumer<java.lang.Boolean> booleanConsumer36 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(booleanSetting35, booleanConsumer36);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(wildcardSetting14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + durability32 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability32.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(booleanSetting35);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        java.lang.String str8 = indexSettings2.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData9.getState();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData9.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version13 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        long long15 = indexMetaData9.getCreationDate();
        indexSettings2.indexMetaData = indexMetaData9;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings18);
        boolean boolean20 = indexSettings19.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings19.settings = settings21;
        org.elasticsearch.common.settings.Settings settings24 = settings21.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        indexSettings2.settings = settings21;
        boolean boolean27 = indexSettings2.queryStringLenient;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexSettings2.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap14 = indexMetaData12.getMappings();
        java.util.Set<java.lang.String> strSet16 = null; // flaky: indexMetaData12.activeAllocationIds((int) (byte) -1);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput17 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData12.writeTo(streamOutput17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNull(strSet16);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings22);
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings23.getGlobalCheckpointInterval();
        int int25 = indexSettings23.numberOfShards;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.primaryTerm((int) (short) -1, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNull(mappingMetaData3);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        int int4 = indexSettings2.numberOfShards;
        boolean boolean5 = indexSettings2.isQueryStringLenient();
        indexSettings2.setwarmerEnabled(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings9);
        boolean boolean11 = indexSettings10.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings10.settings = settings12;
        boolean boolean14 = indexSettings10.queryStringLenient;
        boolean boolean15 = indexSettings10.TTLPurgeDisabled;
        java.lang.String str16 = indexSettings10.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings10.syncInterval;
        indexSettings2.refreshInterval = timeValue17;
        boolean boolean19 = indexSettings2.warmerEnabled;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting20 = indexSettings2.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeValueSetting20);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int10 = indexSettings9.getNumberOfReplicas();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting11 = indexSettings9.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.apache.lucene.index.MergePolicy mergePolicy12 = indexSettings9.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue13 = indexSettings9.getsyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeValueSetting11);
        org.junit.Assert.assertNotNull(mergePolicy12);
        org.junit.Assert.assertNotNull(timeValue13);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters19 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData22.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings25);
        boolean boolean27 = indexSettings26.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings26.settings = settings28;
        org.elasticsearch.common.settings.Settings settings31 = settings28.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings35.archiveUnknownOrBrokenSettings(settings38);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings38.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate43 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean46 = indexScopedSettings44.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings44.archiveUnknownOrBrokenSettings(settings47);
        org.elasticsearch.index.IndexSettings indexSettings49 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData33, settings38, strPredicate43, indexScopedSettings44);
        org.elasticsearch.index.IndexSettings indexSettings50 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData22, settings28, strPredicate32, indexScopedSettings44);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings53);
        boolean boolean55 = indexSettings54.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings54.settings = settings56;
        boolean boolean58 = indexSettings54.queryStringLenient;
        boolean boolean59 = indexSettings54.TTLPurgeDisabled;
        boolean boolean60 = indexSettings54.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version61 = indexSettings54.version;
        org.elasticsearch.Version version62 = settings28.getAsVersion("archived.", version61);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings65);
        boolean boolean67 = indexSettings66.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings66.settings = settings68;
        org.elasticsearch.common.settings.Settings settings71 = settings68.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder72 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params73 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder74 = settings71.toXContent(xContentBuilder72, params73);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder75 = settings28.toXContent(xContentBuilder63, params73);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder76 = indexMetaData0.toXContent(xContentBuilder21, params73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters19);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(params73);
        org.junit.Assert.assertNull(xContentBuilder74);
        org.junit.Assert.assertNull(xContentBuilder75);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.Version version16 = indexSettings15.version;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = indexSettings15.getINDEX_WARMER_ENABLED_SETTING();
        boolean boolean18 = indexSettings15.isShadowReplicaIndex();
        int int19 = indexSettings15.getNumberOfShards();
        int int20 = indexSettings15.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(booleanSetting17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        boolean boolean11 = indexSettings2.matchesIndexName("index.shared_filesystem.recover_on_any_node");
        int int12 = indexSettings2.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        int int9 = indexSettings2.maxResultWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = settings14.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings14);
        int int17 = indexSettings16.getNumberOfReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = indexSettings16.flushThresholdSize;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting19 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        java.lang.Boolean boolean20 = indexSettings16.getValue(booleanSetting19);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue21 = indexSettings16.flushThresholdSize;
        indexSettings2.setTranslogFlushThresholdSize(byteSizeValue21);
        java.util.function.Predicate<java.lang.String> strPredicate23 = indexSettings2.getindexNameMatcher();
        boolean boolean24 = indexSettings2.warmerEnabled;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings26);
        boolean boolean28 = indexSettings27.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings27.settings = settings29;
        int int31 = indexSettings27.maxRescoreWindow;
        java.lang.String str32 = indexSettings27.getUUID();
        org.elasticsearch.common.settings.Settings settings33 = indexSettings27.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting34 = indexSettings27.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings35 = indexSettings27.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting36 = indexSettings27.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting37 = indexSettings27.getINDEX_WARMER_ENABLED_SETTING();
        java.lang.Boolean boolean38 = indexSettings2.getValue(booleanSetting37);
        org.elasticsearch.index.translog.Translog.Durability durability39 = indexSettings2.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteSizeValue18);
        org.junit.Assert.assertNotNull(booleanSetting19);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + true + "'", boolean20, true);
        org.junit.Assert.assertNotNull(byteSizeValue21);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "_na_" + "'", str32, "_na_");
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(booleanSetting34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(intSetting36);
        org.junit.Assert.assertNotNull(booleanSetting37);
        org.junit.Assert.assertEquals("'" + boolean38 + "' != '" + true + "'", boolean38, true);
        org.junit.Assert.assertTrue("'" + durability39 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability39.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings8 = builder7.build();
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder9.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder9.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder7.put(strMap11);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.version.created_string", true);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder12.put("index.shadow_replicas", false);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder20 = builder18.put(objDictionary19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        int int16 = indexSettings15.maxResultWindow;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getNodeSettings();
        boolean boolean18 = indexSettings15.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = settings32.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings32);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state38 = indexMetaData37.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings40);
        boolean boolean42 = indexSettings41.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings41.settings = settings43;
        org.elasticsearch.common.settings.Settings settings46 = settings43.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean52 = indexScopedSettings50.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings50.archiveUnknownOrBrokenSettings(settings53);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings53.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean61 = indexScopedSettings59.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings59.archiveUnknownOrBrokenSettings(settings62);
        org.elasticsearch.index.IndexSettings indexSettings64 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData48, settings53, strPredicate58, indexScopedSettings59);
        org.elasticsearch.index.IndexSettings indexSettings65 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData37, settings43, strPredicate47, indexScopedSettings59);
        java.lang.String str66 = indexScopedSettings59.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings68);
        boolean boolean70 = indexSettings69.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings69.settings = settings71;
        org.elasticsearch.common.settings.Settings settings74 = settings71.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings75 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean77 = indexScopedSettings75.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings79 = indexScopedSettings75.archiveUnknownOrBrokenSettings(settings78);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state81 = indexMetaData80.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings82 = new org.elasticsearch.common.settings.IndexScopedSettings(settings74, indexScopedSettings75, indexMetaData80);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings83 = new org.elasticsearch.common.settings.IndexScopedSettings(settings35, indexScopedSettings59, indexMetaData80);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff84 = indexMetaData0.diff(indexMetaData80);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder85 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData80);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData86 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData86);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings88 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean90 = indexScopedSettings88.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings91 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings92 = indexScopedSettings88.archiveUnknownOrBrokenSettings(settings91);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap94 = settings92.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings95 = new org.elasticsearch.index.IndexSettings(indexMetaData86, settings92);
        org.elasticsearch.index.IndexSettings indexSettings96 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings92);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters97 = indexMetaData80.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + state38 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state38.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(indexScopedSettings75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertTrue("'" + state81 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state81.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff84);
        org.junit.Assert.assertNotNull(indexMetaData86);
        org.junit.Assert.assertNotNull(indexScopedSettings88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(strMap94);
        org.junit.Assert.assertNull(discoveryNodeFilters97);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue8 = indexSettings2.getFlushThresholdSize();
        boolean boolean9 = indexSettings2.getwarmerEnabled();
        boolean boolean10 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher11 = indexSettings2.parseFieldMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteSizeValue8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher11);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = builder4.build();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData5.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(settings6);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.created");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNull(mappingMetaData7);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str8 = indexSettings2.customDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting9 = indexSettings2.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting10 = indexSettings2.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting11 = indexSettings2.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        boolean boolean12 = indexSettings2.getqueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(intSetting9);
        org.junit.Assert.assertNotNull(byteSizeValueSetting10);
        org.junit.Assert.assertNotNull(timeValueSetting11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.getNodeSettings();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig9 = indexSettings2.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig9);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder1.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder1.put("index.creation_date", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.uuid", (int) (short) -1);
        org.elasticsearch.common.settings.Settings settings18 = builder14.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean4 = indexMetaData0.isSameUUID("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long7 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getTranslogDurability();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings2.getDEFAULT_GC_DELETES();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig13 = indexSettings2.getMergeSchedulerConfig();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting14 = indexSettings2.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings2.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig13);
        org.junit.Assert.assertNotNull(booleanSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        boolean boolean10 = indexSettings9.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings9.settings = settings11;
        org.elasticsearch.common.settings.Settings settings14 = settings11.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings4.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15);
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder17.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("index.shared_filesystem.recover_on_any_node", (float) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder21.loadFromSource("");
        java.lang.String str25 = builder23.remove("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("primary_terms", (-1L));
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder23.putNull("hi!");
        boolean boolean31 = indexMetaData0.equals((java.lang.Object) "hi!");
        org.apache.lucene.util.Version version32 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = indexMetaData0.readFrom(streamInput33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(version32);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        java.util.function.Predicate<java.lang.String> strPredicate4 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = indexSettings2.flushThresholdSize;
        boolean boolean6 = indexSettings2.isOnSharedFilesystem();
        org.elasticsearch.common.settings.Settings settings7 = indexSettings2.getSettings();
        boolean boolean8 = indexSettings2.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData12.getState();
        java.util.Set<java.lang.String> strSet15 = null; // flaky: indexMetaData12.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version16 = indexMetaData12.getCreationVersion();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder10.put("index.version.upgraded_string", version16);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder17.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder18.normalizePrefix("state-");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder24 = builder18.put("5000099", (long) 1, byteSizeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings5);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings6.settings = settings8;
        org.elasticsearch.common.settings.Settings settings11 = settings8.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = new org.elasticsearch.common.settings.IndexScopedSettings(settings11, indexScopedSettings12, indexMetaData17);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray26 = settings11.getAsArray("", strArray24, (java.lang.Boolean) true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        java.util.function.Predicate<java.lang.String> strPredicate30 = indexSettings29.indexNameMatcher;
        java.util.function.Predicate<java.lang.String> strPredicate31 = indexSettings29.getindexNameMatcher();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings49.archiveUnknownOrBrokenSettings(settings52);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings52.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate57 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings62 = indexScopedSettings58.archiveUnknownOrBrokenSettings(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData47, settings52, strPredicate57, indexScopedSettings58);
        org.elasticsearch.index.IndexSettings indexSettings64 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData37, settings43, strPredicate46, indexScopedSettings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData65);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = new org.elasticsearch.common.settings.IndexScopedSettings(settings35, indexScopedSettings58, indexMetaData65);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11, strPredicate31, indexScopedSettings58);
        java.lang.String str71 = settings11.get("", "index.auto_expand_replicas");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertNotNull(strPredicate31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "index.auto_expand_replicas" + "'", str71, "index.auto_expand_replicas");
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap10 = indexMetaData0.getAliases();
        java.lang.String str11 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_na_" + "'", str11, "_na_");
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("index.number_of_shards", true);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.creation_date_string", true);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder10.loadFromSource("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder10.put("index.shared_filesystem.recover_on_any_node", "index.number_of_replicas");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        java.util.function.Predicate<java.lang.String> strPredicate17 = indexScopedSettings11.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.Setting.Property property18 = indexScopedSettings11.getScope();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertTrue("'" + property18 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property18.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting5 = indexSettings2.getDEFAULT_FIELD_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings2.getRefreshInterval();
        boolean boolean7 = indexSettings2.getdefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings9);
        boolean boolean11 = indexSettings10.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings10.settings = settings12;
        int int14 = indexSettings10.maxRescoreWindow;
        java.lang.String str15 = indexSettings10.getUUID();
        org.elasticsearch.common.settings.Settings settings16 = indexSettings10.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting17 = indexSettings10.getINDEX_GC_DELETES_SETTING();
        int int18 = indexSettings10.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = indexSettings10.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings27);
        boolean boolean29 = indexSettings28.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings28.settings = settings30;
        org.elasticsearch.common.settings.Settings settings33 = settings30.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings33);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings34);
        int int36 = indexSettings35.maxResultWindow;
        org.elasticsearch.common.settings.Settings settings37 = indexSettings35.getNodeSettings();
        indexSettings35.warmerEnabled = false;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting40 = indexSettings35.getALLOW_UNMAPPED();
        java.lang.Boolean boolean41 = indexScopedSettings19.get(booleanSetting40);
        java.lang.Boolean boolean42 = indexSettings2.getValue(booleanSetting40);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSetting5);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(timeValueSetting17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(booleanSetting40);
        org.junit.Assert.assertEquals("'" + boolean41 + "' != '" + true + "'", boolean41, true);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + true + "'", boolean42, true);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        boolean boolean40 = indexSettings39.getqueryStringAllowLeadingWildcard();
        indexSettings39.setTTLPurgeDisabled(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings4 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings17.archiveUnknownOrBrokenSettings(settings20);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings20.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings26.archiveUnknownOrBrokenSettings(settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20, strPredicate25, indexScopedSettings26);
        org.elasticsearch.index.IndexSettings indexSettings32 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11, strPredicate14, indexScopedSettings26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = new org.elasticsearch.common.settings.IndexScopedSettings(settings3, indexScopedSettings26, indexMetaData33);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings37);
        boolean boolean39 = indexSettings38.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings38.settings = settings40;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings42.archiveUnknownOrBrokenSettings(settings45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state48 = indexMetaData47.getState();
        java.util.Set<java.lang.String> strSet50 = null; // flaky: indexMetaData47.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = new org.elasticsearch.common.settings.IndexScopedSettings(settings40, indexScopedSettings42, indexMetaData47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData52);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean56 = indexScopedSettings54.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings58 = indexScopedSettings54.archiveUnknownOrBrokenSettings(settings57);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate61 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData62);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean66 = indexScopedSettings64.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings68 = indexScopedSettings64.archiveUnknownOrBrokenSettings(settings67);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap71 = settings67.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate72 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean75 = indexScopedSettings73.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings77 = indexScopedSettings73.archiveUnknownOrBrokenSettings(settings76);
        org.elasticsearch.index.IndexSettings indexSettings78 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData62, settings67, strPredicate72, indexScopedSettings73);
        org.elasticsearch.index.IndexSettings indexSettings79 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData52, settings58, strPredicate61, indexScopedSettings73);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue81 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue82 = settings58.getAsBytesSize("index.creation_date_string", byteSizeValue81);
        org.elasticsearch.common.settings.Settings settings83 = indexScopedSettings51.applySettings(settings58);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings83);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap86 = settings83.getAsGroups(false);
        java.lang.String str89 = settings83.get("index.number_of_replicas", "index.shadow_replicas");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertTrue("'" + state48 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state48.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(indexScopedSettings54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNull(byteSizeValue82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strMap86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "index.shadow_replicas" + "'", str89, "index.shadow_replicas");
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.common.unit.TimeValue timeValue4 = indexSettings2.refreshInterval;
        indexSettings2.setMaxResultWindow(10000);
        org.elasticsearch.index.translog.Translog.Durability durability7 = null;
        indexSettings2.durability = durability7;
        long long9 = indexSettings2.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(timeValue4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 60000L + "'", long9 == 60000L);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap32 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        boolean boolean5 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig6 = indexSettings2.mergePolicyConfig;
        indexSettings2.gcDeletesInMillis = (byte) 100;
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.getTranslogSyncInterval();
        indexSettings2.maxRescoreWindow = '#';
        java.lang.String str12 = indexSettings2.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(mergePolicyConfig6);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings11);
        boolean boolean13 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings12.settings = settings14;
        boolean boolean16 = indexSettings12.queryStringLenient;
        boolean boolean17 = indexSettings12.TTLPurgeDisabled;
        java.lang.String str18 = indexSettings12.customDataPath();
        indexSettings12.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability21 = indexSettings12.durability;
        indexSettings2.durability = durability21;
        int int23 = indexSettings2.getNumberOfShards();
        indexSettings2.setEnableWarmer(false);
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        int int27 = indexSettings2.getMaxRescoreWindow();
        org.elasticsearch.common.settings.Settings settings28 = indexSettings2.settings;
        java.lang.String str30 = settings28.toDelimitedString('a');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + durability21 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability21.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("archived.", (float) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder16.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder16.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings11 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str8 = indexSettings2.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.syncInterval;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue11 = indexSettings2.syncInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(timeValue11);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Settings settings9 = indexSettings2.nodeSettings;
        boolean boolean10 = indexSettings2.isDefaultAllowUnmappedFields();
        org.apache.lucene.index.MergePolicy mergePolicy11 = indexSettings2.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean14 = indexSettings2.matchesIndexName("_all");
        boolean boolean15 = indexSettings2.getqueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Settings settings16 = indexSettings2.getNodeSettings();
        boolean boolean17 = settings16.isEmpty();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(mergePolicy11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("index.version.upgraded_string", (float) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder9.put("hi!", (float) 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = builder9.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17, strPredicate20, indexScopedSettings32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings40);
        boolean boolean42 = indexSettings41.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings41.settings = settings43;
        boolean boolean45 = indexSettings41.queryStringLenient;
        boolean boolean46 = indexSettings41.TTLPurgeDisabled;
        java.lang.String str47 = indexSettings41.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue48 = indexSettings41.syncInterval;
// flaky:         indexSettings38.setRefreshInterval(timeValue48);
        indexSettings2.refreshInterval = timeValue48;
        boolean boolean51 = indexSettings2.getdefaultAllowUnmappedFields();
        int int52 = indexSettings2.numberOfShards;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting53 = indexSettings2.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting54 = indexSettings2.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.unit.TimeValue timeValue55 = indexSettings2.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state57 = indexMetaData56.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings59);
        boolean boolean61 = indexSettings60.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings60.settings = settings62;
        org.elasticsearch.common.settings.Settings settings65 = settings62.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate66 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData67);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean71 = indexScopedSettings69.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings73 = indexScopedSettings69.archiveUnknownOrBrokenSettings(settings72);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap76 = settings72.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate77 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean80 = indexScopedSettings78.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings82 = indexScopedSettings78.archiveUnknownOrBrokenSettings(settings81);
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData67, settings72, strPredicate77, indexScopedSettings78);
        org.elasticsearch.index.IndexSettings indexSettings84 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData56, settings62, strPredicate66, indexScopedSettings78);
        java.lang.String str86 = settings62.get("index.shadow_replicas");
        org.elasticsearch.common.unit.TimeValue timeValue88 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue89 = settings62.getAsTime("index.", timeValue88);
        indexSettings2.refreshInterval = timeValue89;
        org.elasticsearch.common.logging.ESLogger eSLogger91 = indexSettings2.getlogger();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting53);
        org.junit.Assert.assertNotNull(booleanSetting54);
        org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertTrue("'" + state57 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state57.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(timeValue88);
        org.junit.Assert.assertNotNull(timeValue89);
        org.junit.Assert.assertNotNull(eSLogger91);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        boolean boolean10 = indexSettings9.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings9.settings = settings11;
        org.elasticsearch.common.settings.Settings settings14 = settings11.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings4.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = indexSettings16.getQUERY_STRING_ANALYZE_WILDCARD();
        boolean boolean18 = indexSettings16.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting19 = indexSettings16.getMAX_RESCORE_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(booleanSetting17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(intSetting19);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        boolean boolean10 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData12.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings15);
        boolean boolean17 = indexSettings16.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings16.settings = settings18;
        org.elasticsearch.common.settings.Settings settings21 = settings18.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings25.archiveUnknownOrBrokenSettings(settings28);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings28.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean36 = indexScopedSettings34.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings34.archiveUnknownOrBrokenSettings(settings37);
        org.elasticsearch.index.IndexSettings indexSettings39 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData23, settings28, strPredicate33, indexScopedSettings34);
        org.elasticsearch.index.IndexSettings indexSettings40 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData12, settings18, strPredicate22, indexScopedSettings34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings43);
        boolean boolean45 = indexSettings44.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings44.settings = settings46;
        boolean boolean48 = indexSettings44.queryStringLenient;
        boolean boolean49 = indexSettings44.TTLPurgeDisabled;
        boolean boolean50 = indexSettings44.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version51 = indexSettings44.version;
        org.elasticsearch.Version version52 = settings18.getAsVersion("archived.", version51);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings55);
        boolean boolean57 = indexSettings56.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings56.settings = settings58;
        org.elasticsearch.common.settings.Settings settings61 = settings58.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder62 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params63 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = settings61.toXContent(xContentBuilder62, params63);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = settings18.toXContent(xContentBuilder53, params63);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder11, params63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(version51);
        org.junit.Assert.assertNotNull(version52);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(params63);
        org.junit.Assert.assertNull(xContentBuilder64);
        org.junit.Assert.assertNull(xContentBuilder65);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder10.put("index.version.upgraded", (float) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder14.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.state(state19);
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder18.settings(builder21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder21.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder26.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings34 = builder33.build();
        org.elasticsearch.common.settings.Settings settings35 = builder33.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings43);
        org.elasticsearch.common.settings.Settings settings47 = indexMetaData37.getSettings();
        java.lang.String[] strArray49 = settings47.getAsArray("hi!");
        java.lang.String[] strArray50 = settings35.getAsArray("index.data_path", strArray49);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder25.put((java.lang.Object[]) strArray49);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder15.putArray("_all", strArray49);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("active_allocations");
        int int6 = builder3.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("index.version.upgraded_string", (float) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder9.put("hi!", (float) 10L);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder15.normalizePrefix("index.blocks.write");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder19 = builder15.put(objDictionary18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean3 = indexScopedSettings1.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = indexScopedSettings1.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData5.getState();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData5.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version9 = indexMetaData5.getUpgradedVersion();
        org.apache.lucene.util.Version version10 = indexMetaData5.getMinimumCompatibleVersion();
        long long11 = indexMetaData5.getVersion();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = new org.elasticsearch.common.settings.IndexScopedSettings(settings0, indexScopedSettings4, indexMetaData5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNull(version10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        boolean boolean5 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig6 = indexSettings2.mergePolicyConfig;
        indexSettings2.gcDeletesInMillis = (byte) 100;
        org.elasticsearch.common.settings.Settings settings9 = indexSettings2.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(mergePolicyConfig6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(timeValue10);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str10 = indexSettings2.getDefaultField();
        java.lang.String str11 = indexSettings2.getUUID();
        org.elasticsearch.common.logging.ESLogger eSLogger12 = indexSettings2.getlogger();
        boolean boolean14 = indexSettings2.matchesIndexName("index.number_of_shards");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_all" + "'", str10, "_all");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_na_" + "'", str11, "_na_");
        org.junit.Assert.assertNotNull(eSLogger12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        int int9 = indexSettings2.maxResultWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = indexSettings2.getScopedSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting11 = null;
        java.util.function.Consumer<java.lang.Boolean> booleanConsumer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings10.addSettingsUpdateConsumer(booleanSetting11, booleanConsumer12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder10.put("index.version.upgraded", (float) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings24 = builder23.build();
        org.elasticsearch.common.settings.Settings settings25 = builder23.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings33);
        org.elasticsearch.common.settings.Settings settings37 = indexMetaData27.getSettings();
        java.lang.String[] strArray39 = settings37.getAsArray("hi!");
        java.lang.String[] strArray40 = settings25.getAsArray("index.data_path", strArray39);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder10.putArray("index.creation_date", strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("state-", (long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder41.normalizePrefix("index.shared_filesystem");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher10 = indexSettings2.getParseFieldMatcher();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting11 = indexSettings2.getINDEX_TRANSLOG_DURABILITY_SETTING();
        int int12 = indexSettings2.getMaxRescoreWindow();
        int int13 = indexSettings2.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(parseFieldMatcher10);
        org.junit.Assert.assertNotNull(durabilitySetting11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        org.elasticsearch.common.settings.Settings settings23 = settings20.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = indexMetaData29.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = new org.elasticsearch.common.settings.IndexScopedSettings(settings23, indexScopedSettings24, indexMetaData29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings33);
        boolean boolean35 = indexSettings34.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings34.settings = settings36;
        boolean boolean38 = indexSettings34.queryStringLenient;
        boolean boolean39 = indexSettings34.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig40 = indexSettings34.mergePolicyConfig;
        int int41 = indexSettings34.getMaxRescoreWindow();
        int int42 = indexSettings34.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate43 = indexSettings34.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = indexMetaData44.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings47);
        boolean boolean49 = indexSettings48.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings48.settings = settings50;
        org.elasticsearch.common.settings.Settings settings53 = settings50.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings57.archiveUnknownOrBrokenSettings(settings60);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings60.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings66.archiveUnknownOrBrokenSettings(settings69);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60, strPredicate65, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData44, settings50, strPredicate54, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings23, strPredicate43, indexScopedSettings66);
        boolean boolean74 = indexSettings73.warmerEnabled;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting75 = indexSettings73.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10000 + "'", int41 == 10000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10000 + "'", int42 == 10000);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(timeValueSetting75);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getTranslogDurability();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings2.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting13 = indexSettings2.getMAX_RESULT_WINDOW_SETTING();
        boolean boolean14 = indexSettings2.getqueryStringAnalyzeWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        java.lang.String str16 = indexSettings2.nodeName;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(intSetting13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.settings(builder4);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder4.put("", (long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder13.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder14.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder14.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder23.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder29.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder29.putNull("");
        java.lang.String[] strArray58 = new java.lang.String[] { "_na_", "index.number_of_shards", "index.auto_expand_replicas", "index.priority", "", "active_allocations", "index.blocks.metadata", "active_allocations", "_all", "index.shadow_replicas", "index.version.upgraded_string", "index.data_path", "active_allocations", "archived.", "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.blocks.read_only", "index.creation_date", "index.number_of_replicas" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder29.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder24.putArray("index.blocks.read_only", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder11.putArray("state-", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder63.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.put("index.blocks.metadata", (int) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder68.put("index.auto_expand_replicas", "hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData74, settings75);
        boolean boolean77 = indexSettings76.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings76.settings = settings78;
        org.elasticsearch.common.settings.Settings settings81 = settings78.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings82 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean84 = indexScopedSettings82.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings86 = indexScopedSettings82.archiveUnknownOrBrokenSettings(settings85);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData87 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state88 = indexMetaData87.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings89 = new org.elasticsearch.common.settings.IndexScopedSettings(settings81, indexScopedSettings82, indexMetaData87);
        java.lang.String[] strArray94 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray96 = settings81.getAsArray("", strArray94, (java.lang.Boolean) true);
        java.lang.String[] strArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder98 = builder71.put("index.blocks.write", "", strArray96, strArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(indexScopedSettings82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(indexMetaData87);
        org.junit.Assert.assertTrue("'" + state88 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state88.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(strArray96);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        boolean boolean5 = indexSettings2.isQueryStringAllowLeadingWildcard();
        java.lang.String str6 = indexSettings2.nodeName;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting7 = indexSettings2.getINDEX_CHECK_ON_STARTUP();
        boolean boolean8 = indexSettings2.getisShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getALLOW_UNMAPPED();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSetting7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanSetting9);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexSettings2.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings16.archiveUnknownOrBrokenSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings20);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap24 = indexMetaData14.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.Settings settings26 = indexMetaData14.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings32.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32, strPredicate37, indexScopedSettings38);
        java.util.function.Predicate<java.lang.String> strPredicate44 = indexScopedSettings38.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean47 = indexScopedSettings45.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings49 = indexScopedSettings45.archiveUnknownOrBrokenSettings(settings48);
        org.elasticsearch.index.IndexSettings indexSettings50 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData12, settings26, strPredicate44, indexScopedSettings45);
        org.elasticsearch.common.settings.Setting.Property property51 = indexScopedSettings45.getScope();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings53);
        boolean boolean55 = indexSettings54.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings54.settings = settings56;
        boolean boolean58 = indexSettings54.queryStringLenient;
        boolean boolean59 = indexSettings54.TTLPurgeDisabled;
        java.lang.String str60 = indexSettings54.customDataPath();
        org.elasticsearch.common.settings.Settings settings61 = indexSettings54.getNodeSettings();
        org.elasticsearch.common.settings.Settings settings62 = indexScopedSettings45.archiveUnknownOrBrokenSettings(settings61);
        org.elasticsearch.common.settings.Setting.Property property63 = indexScopedSettings45.getScope();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strPredicate44);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertTrue("'" + property51 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property51.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertTrue("'" + property63 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property63.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("primary_terms", "");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.settings(builder9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.putMapping("true", "state-");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        java.util.function.Predicate<java.lang.String> strPredicate4 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = indexSettings2.flushThresholdSize;
        boolean boolean6 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue7 = indexSettings2.getDEFAULT_GC_DELETES();
        indexSettings2.TTLPurgeDisabled = true;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(timeValue7);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        int int9 = indexSettings2.maxResultWindow;
        int int10 = indexSettings2.getMaxRescoreWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = indexSettings2.indexMetaData;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData11);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        boolean boolean34 = indexSettings30.queryStringLenient;
        boolean boolean35 = indexSettings30.TTLPurgeDisabled;
        java.lang.String str36 = indexSettings30.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings30.syncInterval;
// flaky:         indexSettings27.setRefreshInterval(timeValue37);
        org.elasticsearch.common.unit.TimeValue timeValue39 = null; // flaky: indexSettings27.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        int int42 = indexMetaData40.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData40.getMappings();
// flaky:         indexSettings27.indexMetaData = indexMetaData40;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state56 = indexMetaData55.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings58);
        boolean boolean60 = indexSettings59.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings59.settings = settings61;
        org.elasticsearch.common.settings.Settings settings64 = settings61.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings68.archiveUnknownOrBrokenSettings(settings71);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap75 = settings71.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate76 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean79 = indexScopedSettings77.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings77.archiveUnknownOrBrokenSettings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings82 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData66, settings71, strPredicate76, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings61, strPredicate65, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings61);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings61);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings86 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean88 = indexScopedSettings86.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings89 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings90 = indexScopedSettings86.archiveUnknownOrBrokenSettings(settings89);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap93 = settings89.getGroups("index.creation_date_string", false);
        org.elasticsearch.index.IndexSettings indexSettings94 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings89);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue97 = settings89.getAsMemory("active_allocations", "index.shared_filesystem");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [index.shared_filesystem]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(timeValue37);
// flaky:         org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + state56 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state56.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(indexScopedSettings86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(strMap93);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        indexSettings2.setwarmerEnabled(true);
        boolean boolean10 = indexSettings2.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings15);
        boolean boolean17 = indexSettings16.isQueryStringLenient();
        java.lang.String str18 = indexSettings16.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting19 = indexSettings16.getDEFAULT_FIELD_SETTING();
        indexSettings16.setEnableWarmer(true);
        boolean boolean22 = indexSettings16.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting23 = indexSettings16.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting24 = indexSettings16.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean25 = indexScopedSettings11.get(booleanSetting24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: settings scope doesn't match the setting scope [IndexScope] not in [[NodeScope]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSetting19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanSetting23);
        org.junit.Assert.assertNotNull(booleanSetting24);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        int int5 = indexSettings2.getMaxResultWindow();
        long long6 = indexSettings2.gcDeletesInMillis;
        long long7 = indexSettings2.getGcDeletesInMillis();
        java.lang.String str8 = indexSettings2.customDataPath();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder10.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings16.archiveUnknownOrBrokenSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder13.settings(settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder10.settings(settings20);
        indexSettings2.settings = settings20;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings20.getAsGroups();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10000 + "'", int5 == 10000);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 60000L + "'", long6 == 60000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 60000L + "'", long7 == 60000L);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strMap27);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        java.lang.String str8 = indexSettings2.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData9.getState();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData9.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version13 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        long long15 = indexMetaData9.getCreationDate();
        indexSettings2.indexMetaData = indexMetaData9;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings18);
        boolean boolean20 = indexSettings19.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings19.settings = settings21;
        org.elasticsearch.common.settings.Settings settings24 = settings21.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        indexSettings2.settings = settings21;
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings21.getAsMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long5 = builder3.primaryTerm(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("hi!");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.creationDate((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData4.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings17.archiveUnknownOrBrokenSettings(settings20);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings20.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings26.archiveUnknownOrBrokenSettings(settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20, strPredicate25, indexScopedSettings26);
        org.elasticsearch.index.IndexSettings indexSettings32 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData4, settings10, strPredicate14, indexScopedSettings26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings34);
        boolean boolean36 = indexSettings35.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings35.settings = settings37;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = indexMetaData44.getState();
        java.util.Set<java.lang.String> strSet47 = null; // flaky: indexMetaData44.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = new org.elasticsearch.common.settings.IndexScopedSettings(settings37, indexScopedSettings39, indexMetaData44);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData49);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean53 = indexScopedSettings51.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings51.archiveUnknownOrBrokenSettings(settings54);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean63 = indexScopedSettings61.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings61.archiveUnknownOrBrokenSettings(settings64);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings64.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings70 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean72 = indexScopedSettings70.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings70.archiveUnknownOrBrokenSettings(settings73);
        org.elasticsearch.index.IndexSettings indexSettings75 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData59, settings64, strPredicate69, indexScopedSettings70);
        org.elasticsearch.index.IndexSettings indexSettings76 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData49, settings55, strPredicate58, indexScopedSettings70);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue78 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue79 = settings55.getAsBytesSize("index.creation_date_string", byteSizeValue78);
        org.elasticsearch.common.settings.Settings settings80 = indexScopedSettings48.applySettings(settings55);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings80.getGroups("index.blocks.write", false);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings80);
        int int85 = indexMetaData4.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder86 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state88 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder89 = builder86.state(state88);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder90 = builder1.state(state88);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData91 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(indexScopedSettings70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNull(byteSizeValue79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + state88 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state88.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        boolean boolean11 = indexSettings2.isShadowReplicaIndex();
        boolean boolean12 = indexSettings2.defaultAllowUnmappedFields;
        java.lang.String str13 = indexSettings2.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.upgraded_string", (float) 100);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder10.normalizePrefix("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings30);
        boolean boolean32 = indexSettings31.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings31.settings = settings33;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings35.archiveUnknownOrBrokenSettings(settings38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        java.util.Set<java.lang.String> strSet43 = null; // flaky: indexMetaData40.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = new org.elasticsearch.common.settings.IndexScopedSettings(settings33, indexScopedSettings35, indexMetaData40);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings57.archiveUnknownOrBrokenSettings(settings60);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings60.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings66.archiveUnknownOrBrokenSettings(settings69);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60, strPredicate65, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51, strPredicate54, indexScopedSettings66);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue74 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = settings51.getAsBytesSize("index.creation_date_string", byteSizeValue74);
        org.elasticsearch.common.settings.Settings settings76 = indexScopedSettings44.applySettings(settings51);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings76.getGroups("index.blocks.write", false);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings76);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNull(byteSizeValue75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strMap79);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.upgraded_string", (float) 100);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("hi!", (long) 97);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexSettings2.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings16.archiveUnknownOrBrokenSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings20);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap24 = indexMetaData14.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.Settings settings26 = indexMetaData14.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings32.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32, strPredicate37, indexScopedSettings38);
        java.util.function.Predicate<java.lang.String> strPredicate44 = indexScopedSettings38.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean47 = indexScopedSettings45.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings49 = indexScopedSettings45.archiveUnknownOrBrokenSettings(settings48);
        org.elasticsearch.index.IndexSettings indexSettings50 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData12, settings26, strPredicate44, indexScopedSettings45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings52);
        boolean boolean54 = indexSettings53.isQueryStringLenient();
        java.lang.String str55 = indexSettings53.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting56 = indexSettings53.getDEFAULT_FIELD_SETTING();
        indexSettings53.setEnableWarmer(true);
        org.elasticsearch.common.settings.Settings settings59 = indexSettings53.nodeSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings61);
        boolean boolean63 = indexSettings62.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings62.settings = settings64;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings66.archiveUnknownOrBrokenSettings(settings69);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state72 = indexMetaData71.getState();
        java.util.Set<java.lang.String> strSet74 = null; // flaky: indexMetaData71.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings75 = new org.elasticsearch.common.settings.IndexScopedSettings(settings64, indexScopedSettings66, indexMetaData71);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state77 = indexMetaData76.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = new org.elasticsearch.common.settings.IndexScopedSettings(settings59, indexScopedSettings75, indexMetaData76);
        org.elasticsearch.common.settings.Settings settings79 = indexScopedSettings45.archiveUnknownOrBrokenSettings(settings59);
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet80 = indexScopedSettings45.getBUILT_IN_INDEX_SETTINGS();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strPredicate44);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strSetting56);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertTrue("'" + state72 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state72.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet74);
        org.junit.Assert.assertNotNull(indexMetaData76);
        org.junit.Assert.assertTrue("'" + state77 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state77.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(wildcardSettingSet80);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData0.getState();
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version10);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.shared_filesystem.recover_on_any_node", (float) (byte) 1);
        java.lang.String str6 = builder4.remove("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder4.put("active_allocations", (int) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("index.shared_filesystem", "index.data_path");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder16 = builder9.put("primary_terms", (long) 0, byteSizeUnit15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.data_path");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.data_path]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexSettings2.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings16.archiveUnknownOrBrokenSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings20);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap24 = indexMetaData14.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.Settings settings26 = indexMetaData14.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings32.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32, strPredicate37, indexScopedSettings38);
        java.util.function.Predicate<java.lang.String> strPredicate44 = indexScopedSettings38.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean47 = indexScopedSettings45.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings49 = indexScopedSettings45.archiveUnknownOrBrokenSettings(settings48);
        org.elasticsearch.index.IndexSettings indexSettings50 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData12, settings26, strPredicate44, indexScopedSettings45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = indexScopedSettings45.getDEFAULT_SCOPED_SETTINGS();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strPredicate44);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        int int4 = indexSettings2.numberOfShards;
        boolean boolean5 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue6 = indexSettings2.getFlushThresholdSize();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean11 = indexScopedSettings9.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings9.archiveUnknownOrBrokenSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings12.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean20 = indexScopedSettings18.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings18.archiveUnknownOrBrokenSettings(settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12, strPredicate17, indexScopedSettings18);
        org.elasticsearch.Version version24 = indexMetaData7.getUpgradedVersion();
        int int25 = indexMetaData7.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = indexMetaData26.getState();
        java.util.Set<java.lang.String> strSet29 = null; // flaky: indexMetaData26.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version30 = indexMetaData26.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData26);
        java.util.Set<java.lang.String> strSet33 = null; // flaky: indexMetaData26.activeAllocationIds((int) (short) 10);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff34 = indexMetaData7.diff(indexMetaData26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings36);
        java.util.function.Predicate<java.lang.String> strPredicate38 = indexSettings37.indexNameMatcher;
        org.elasticsearch.common.settings.Settings settings39 = indexSettings37.nodeSettings;
        org.elasticsearch.common.settings.Settings settings40 = indexSettings37.settings;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings40);
        org.elasticsearch.common.unit.TimeValue timeValue42 = indexSettings41.globalCheckpointInterval;
        indexSettings2.setRefreshInterval(timeValue42);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteSizeValue6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(version30);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(indexMetaDataDiff34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strPredicate38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(timeValue42);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        boolean boolean5 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig6 = indexSettings2.mergePolicyConfig;
        org.elasticsearch.common.settings.Settings settings7 = indexSettings2.nodeSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(mergePolicyConfig6);
        org.junit.Assert.assertNotNull(settings7);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = indexMetaData0.getSettings();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = settings2.getAsMemory("archived.", "index.version.created_string");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [index.version.created_string]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean11 = indexScopedSettings9.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean16 = indexScopedSettings14.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings14.archiveUnknownOrBrokenSettings(settings17);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings27.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings33.archiveUnknownOrBrokenSettings(settings36);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData22, settings27, strPredicate32, indexScopedSettings33);
        org.elasticsearch.index.IndexSettings indexSettings39 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData12, settings18, strPredicate21, indexScopedSettings33);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue41 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue42 = settings18.getAsBytesSize("index.creation_date_string", byteSizeValue41);
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings9.dryRun(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData44);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean48 = indexScopedSettings46.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings46.archiveUnknownOrBrokenSettings(settings49);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state55 = indexMetaData54.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings57);
        boolean boolean59 = indexSettings58.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings58.settings = settings60;
        org.elasticsearch.common.settings.Settings settings63 = settings60.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate64 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData65);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean69 = indexScopedSettings67.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings67.archiveUnknownOrBrokenSettings(settings70);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings70.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate75 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings76 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean78 = indexScopedSettings76.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings80 = indexScopedSettings76.archiveUnknownOrBrokenSettings(settings79);
        org.elasticsearch.index.IndexSettings indexSettings81 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData65, settings70, strPredicate75, indexScopedSettings76);
        org.elasticsearch.index.IndexSettings indexSettings82 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData54, settings60, strPredicate64, indexScopedSettings76);
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings84 = new org.elasticsearch.common.settings.IndexScopedSettings(settings8, indexScopedSettings9, indexMetaData44);
        org.elasticsearch.common.settings.Settings settings86 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings9.validate("", settings86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNull(byteSizeValue42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertTrue("'" + state55 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state55.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(indexScopedSettings76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(settings80);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.Version version17 = indexMetaData0.getUpgradedVersion();
        int int18 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData19.getState();
        java.util.Set<java.lang.String> strSet22 = null; // flaky: indexMetaData19.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version23 = indexMetaData19.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        java.util.Set<java.lang.String> strSet26 = null; // flaky: indexMetaData19.activeAllocationIds((int) (short) 10);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff27 = indexMetaData0.diff(indexMetaData19);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        java.util.function.Predicate<java.lang.String> strPredicate31 = indexSettings30.indexNameMatcher;
        org.elasticsearch.common.settings.Settings settings32 = indexSettings30.nodeSettings;
        org.elasticsearch.common.settings.Settings settings33 = indexSettings30.settings;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings33);
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings34.globalCheckpointInterval;
        org.elasticsearch.common.logging.ESLogger eSLogger36 = indexSettings34.getlogger();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(version23);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNotNull(indexMetaDataDiff27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strPredicate31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertNotNull(eSLogger36);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.upgraded_string", (float) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder10.put("index.shared_filesystem.recover_on_any_node", (int) '#');
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.normalizePrefix("");
        java.nio.file.Path path17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder18 = builder14.loadFromPath(path17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17, strPredicate20, indexScopedSettings32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings40);
        boolean boolean42 = indexSettings41.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings41.settings = settings43;
        boolean boolean45 = indexSettings41.queryStringLenient;
        boolean boolean46 = indexSettings41.TTLPurgeDisabled;
        java.lang.String str47 = indexSettings41.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue48 = indexSettings41.syncInterval;
// flaky:         indexSettings38.setRefreshInterval(timeValue48);
        indexSettings2.refreshInterval = timeValue48;
        java.util.function.Predicate<java.lang.String> strPredicate51 = indexSettings2.getindexNameMatcher();
        boolean boolean52 = indexSettings2.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue53 = indexSettings2.refreshInterval;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue54 = indexSettings2.getFlushThresholdSize();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(strPredicate51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(timeValue53);
        org.junit.Assert.assertNotNull(byteSizeValue54);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamInput streamInput18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData0.readDiffFrom(streamInput18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData32);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean36 = indexScopedSettings34.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings34.archiveUnknownOrBrokenSettings(settings37);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings37.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings47 = indexScopedSettings43.archiveUnknownOrBrokenSettings(settings46);
        org.elasticsearch.index.IndexSettings indexSettings48 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData32, settings37, strPredicate42, indexScopedSettings43);
        org.elasticsearch.index.IndexSettings indexSettings49 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData22, settings28, strPredicate31, indexScopedSettings43);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue52 = settings28.getAsBytesSize("index.creation_date_string", byteSizeValue51);
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings19.dryRun(settings28);
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings53);
        java.util.function.Predicate<java.lang.String> strPredicate55 = indexSettings54.getindexNameMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNull(byteSizeValue52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strPredicate55);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings8 = builder7.build();
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder9.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder9.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder7.put(strMap11);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.version.created_string", true);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder12.put("index.shadow_replicas", false);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("index.auto_expand_replicas", (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.state(state25);
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder24.settings(builder27);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.creation_date_string", (double) 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder34.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder39.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings47 = builder46.build();
        org.elasticsearch.common.settings.Settings settings48 = builder46.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData50);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean54 = indexScopedSettings52.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings56 = indexScopedSettings52.archiveUnknownOrBrokenSettings(settings55);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings56.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings56);
        org.elasticsearch.common.settings.Settings settings60 = indexMetaData50.getSettings();
        java.lang.String[] strArray62 = settings60.getAsArray("hi!");
        java.lang.String[] strArray63 = settings48.getAsArray("index.data_path", strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder37.putArray("hi!", strArray63);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder21.extendArray("index.", strArray63);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.blocks.read");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.upgraded_string", (float) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder10.put("index.shared_filesystem.recover_on_any_node", (int) '#');
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.normalizePrefix("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings19);
        boolean boolean21 = indexSettings20.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings20.settings = settings22;
        org.elasticsearch.common.settings.Settings settings25 = settings22.getAsSettings("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings27);
        java.util.function.Predicate<java.lang.String> strPredicate29 = indexSettings28.indexNameMatcher;
        org.elasticsearch.common.settings.Settings settings30 = settings25.filter(strPredicate29);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder34.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder35.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder35.put("index.number_of_shards", true);
        java.lang.String str46 = builder35.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder35.put("hi!", "state-");
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder50.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder51.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder60.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder60.put("index.version.upgraded", (float) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder66 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder66.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder67.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder70.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings74 = builder73.build();
        org.elasticsearch.common.settings.Settings settings75 = builder73.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData77);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings79 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean81 = indexScopedSettings79.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings83 = indexScopedSettings79.archiveUnknownOrBrokenSettings(settings82);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap85 = settings83.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData77, settings83);
        org.elasticsearch.common.settings.Settings settings87 = indexMetaData77.getSettings();
        java.lang.String[] strArray89 = settings87.getAsArray("hi!");
        java.lang.String[] strArray90 = settings75.getAsArray("index.data_path", strArray89);
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder60.putArray("index.creation_date", strArray90);
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder35.put((java.lang.Object[]) strArray90);
        java.lang.String[] strArray93 = settings30.getAsArray("index.version.created", strArray90);
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder16.extendArray("index.number_of_shards", strArray93);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNotNull(indexScopedSettings79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings30.archiveUnknownOrBrokenSettings(settings33);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings33.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData28, settings33, strPredicate38, indexScopedSettings39);
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings21.applySettings(settings33);
        org.elasticsearch.common.settings.Settings settings47 = settings33.getByPrefix("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state50 = indexMetaData49.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings52);
        boolean boolean54 = indexSettings53.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings53.settings = settings55;
        org.elasticsearch.common.settings.Settings settings58 = settings55.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate59 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean64 = indexScopedSettings62.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings66 = indexScopedSettings62.archiveUnknownOrBrokenSettings(settings65);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap69 = settings65.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings71 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean73 = indexScopedSettings71.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings75 = indexScopedSettings71.archiveUnknownOrBrokenSettings(settings74);
        org.elasticsearch.index.IndexSettings indexSettings76 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData60, settings65, strPredicate70, indexScopedSettings71);
        org.elasticsearch.index.IndexSettings indexSettings77 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData49, settings55, strPredicate59, indexScopedSettings71);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData49);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings79 = new org.elasticsearch.common.settings.IndexScopedSettings(settings33, indexScopedSettings48, indexMetaData49);
        java.util.Map<java.lang.String, java.lang.Object> strMap80 = settings33.getAsStructuredMap();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings33.getAsGroups(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertTrue("'" + state50 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state50.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(indexScopedSettings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNotNull(strMap82);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.Version version16 = indexSettings15.version;
        java.lang.String str17 = indexSettings15.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings7 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData1, settings7, strPredicate10, indexScopedSettings22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData29);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings31.archiveUnknownOrBrokenSettings(settings34);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings34.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean42 = indexScopedSettings40.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = indexScopedSettings40.archiveUnknownOrBrokenSettings(settings43);
        org.elasticsearch.index.IndexSettings indexSettings45 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData29, settings34, strPredicate39, indexScopedSettings40);
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings22.applySettings(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings48);
        boolean boolean50 = indexSettings49.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings49.settings = settings51;
        org.elasticsearch.common.settings.Settings settings54 = settings51.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean57 = indexScopedSettings55.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings55.archiveUnknownOrBrokenSettings(settings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state61 = indexMetaData60.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = new org.elasticsearch.common.settings.IndexScopedSettings(settings54, indexScopedSettings55, indexMetaData60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = new org.elasticsearch.common.settings.IndexScopedSettings(settings0, indexScopedSettings22, indexMetaData60);
        java.util.function.Predicate<java.lang.String> strPredicate64 = indexScopedSettings63.getINDEX_SETTINGS_KEY_PREDICATE();
        boolean boolean66 = indexScopedSettings63.hasDynamicSetting("_all");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexScopedSettings55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertTrue("'" + state61 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state61.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strPredicate64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        boolean boolean34 = indexSettings30.queryStringLenient;
        boolean boolean35 = indexSettings30.TTLPurgeDisabled;
        java.lang.String str36 = indexSettings30.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings30.syncInterval;
// flaky:         indexSettings27.setRefreshInterval(timeValue37);
        org.elasticsearch.common.unit.TimeValue timeValue39 = null; // flaky: indexSettings27.syncInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(timeValue37);
// flaky:         org.junit.Assert.assertNotNull(timeValue39);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.numberOfReplicas((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.primaryTerm(10000, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Settings settings9 = indexSettings2.nodeSettings;
        boolean boolean11 = indexSettings2.matchesIndexName("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        java.lang.String str16 = indexSettings14.getNodeName();
        int int17 = indexSettings14.getMaxResultWindow();
        boolean boolean18 = indexSettings14.isDefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings14.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting20 = indexSettings14.getQUERY_STRING_LENIENT_SETTING();
        java.lang.Boolean boolean21 = indexSettings2.getValue(booleanSetting20);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(booleanSetting20);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + false + "'", boolean21, false);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.settings(settings11);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.putAlias(aliasMetaData18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData18.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings21);
        boolean boolean23 = indexSettings22.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings22.settings = settings24;
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData29);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings31.archiveUnknownOrBrokenSettings(settings34);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings34.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean42 = indexScopedSettings40.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = indexScopedSettings40.archiveUnknownOrBrokenSettings(settings43);
        org.elasticsearch.index.IndexSettings indexSettings45 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData29, settings34, strPredicate39, indexScopedSettings40);
        org.elasticsearch.index.IndexSettings indexSettings46 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData18, settings24, strPredicate28, indexScopedSettings40);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings49.archiveUnknownOrBrokenSettings(settings52);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings53.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings53);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state58 = indexMetaData57.getState();
        java.util.Set<java.lang.String> strSet60 = null; // flaky: indexMetaData57.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap61 = indexMetaData57.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff62 = indexMetaData47.diff(indexMetaData57);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData57);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings65);
        boolean boolean67 = indexSettings66.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings66.settings = settings68;
        org.elasticsearch.common.settings.Settings settings71 = settings68.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings68);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings72);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings74 = new org.elasticsearch.common.settings.IndexScopedSettings(settings17, indexScopedSettings40, indexMetaData57);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData76, settings77);
        boolean boolean79 = indexSettings78.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings78.settings = settings80;
        boolean boolean82 = indexSettings78.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting83 = indexSettings78.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings84 = indexSettings78.nodeSettings;
        indexScopedSettings74.validate("index.blocks.write", settings84);
        org.elasticsearch.common.settings.Setting.Property property86 = indexScopedSettings74.getScope();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertTrue("'" + state58 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state58.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet60);
        org.junit.Assert.assertNotNull(strImmutableOpenMap61);
        org.junit.Assert.assertNotNull(indexMetaDataDiff62);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(indexMetaData76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(booleanSetting83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertTrue("'" + property86 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property86.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        boolean boolean30 = indexSettings29.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings29.settings = settings31;
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings34);
        boolean boolean37 = indexScopedSettings24.isPrivateSetting("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = indexMetaData38.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = new org.elasticsearch.common.settings.IndexScopedSettings(settings21, indexScopedSettings24, indexMetaData38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData42);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap47 = settings46.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings57 = builder56.build();
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder58.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap60 = builder58.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder56.put(strMap60);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder62.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings70 = builder69.build();
        org.elasticsearch.common.settings.Settings.Builder builder71 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder71.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = builder71.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder69.put(strMap73);
        boolean boolean76 = indexScopedSettings41.updateSettings(settings46, builder61, builder74, "state-");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData78, settings79);
        boolean boolean81 = indexSettings80.isQueryStringLenient();
        java.lang.String str82 = indexSettings80.getNodeName();
        java.lang.Class<?> wildcardClass83 = indexSettings80.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder74.put("", (java.lang.Class) wildcardClass83);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder74.loadFromSource("index.blocks.write");
        java.util.Map<java.lang.String, java.lang.String> strMap87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder88 = builder74.put(strMap87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting5 = indexSettings2.getDEFAULT_FIELD_SETTING();
        indexSettings2.setEnableWarmer(true);
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings10);
        boolean boolean12 = indexSettings11.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings11.settings = settings13;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings15.archiveUnknownOrBrokenSettings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData20.getState();
        java.util.Set<java.lang.String> strSet23 = null; // flaky: indexMetaData20.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = new org.elasticsearch.common.settings.IndexScopedSettings(settings13, indexScopedSettings15, indexMetaData20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData25.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = new org.elasticsearch.common.settings.IndexScopedSettings(settings8, indexScopedSettings24, indexMetaData25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData25);
        java.lang.String str29 = indexMetaData25.getIndexUUID();
        // The following exception was thrown during execution in test generation
        try {
            long long31 = indexMetaData25.primaryTerm(10000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSetting5);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "_na_" + "'", str29, "_na_");
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData5.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        boolean boolean10 = indexSettings9.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings9.settings = settings11;
        org.elasticsearch.common.settings.Settings settings14 = settings11.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean20 = indexScopedSettings18.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings18.archiveUnknownOrBrokenSettings(settings21);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings21.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings27.archiveUnknownOrBrokenSettings(settings30);
        org.elasticsearch.index.IndexSettings indexSettings32 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings21, strPredicate26, indexScopedSettings27);
        org.elasticsearch.index.IndexSettings indexSettings33 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11, strPredicate15, indexScopedSettings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings36);
        boolean boolean38 = indexSettings37.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings37.settings = settings39;
        boolean boolean41 = indexSettings37.queryStringLenient;
        boolean boolean42 = indexSettings37.TTLPurgeDisabled;
        boolean boolean43 = indexSettings37.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version44 = indexSettings37.version;
        org.elasticsearch.Version version45 = settings11.getAsVersion("archived.", version44);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings48);
        boolean boolean50 = indexSettings49.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings49.settings = settings51;
        org.elasticsearch.common.settings.Settings settings54 = settings51.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params56 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings54.toXContent(xContentBuilder55, params56);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder58 = settings11.toXContent(xContentBuilder46, params56);
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11);
        boolean boolean60 = indexSettings59.isDefaultAllowUnmappedFields();
        int int61 = indexSettings59.maxResultWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(version44);
        org.junit.Assert.assertNotNull(version45);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(params56);
        org.junit.Assert.assertNull(xContentBuilder57);
        org.junit.Assert.assertNull(xContentBuilder58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10000 + "'", int61 == 10000);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("_all", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.index.translog.Translog.Durability durability11 = null;
        indexSettings2.durability = durability11;
        boolean boolean13 = indexSettings2.getqueryStringAllowLeadingWildcard();
        boolean boolean14 = indexSettings2.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings17.archiveUnknownOrBrokenSettings(settings20);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings21.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData25.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        boolean boolean30 = indexSettings29.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings29.settings = settings31;
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate35 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData36);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings41.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData36, settings41, strPredicate46, indexScopedSettings47);
        org.elasticsearch.index.IndexSettings indexSettings53 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData25, settings31, strPredicate35, indexScopedSettings47);
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings56);
        boolean boolean58 = indexSettings57.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings57.settings = settings59;
        int int61 = indexSettings57.maxRescoreWindow;
        java.lang.String str62 = indexSettings57.getUUID();
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.nodeSettings;
        boolean boolean64 = indexSettings57.isOnSharedFilesystem();
        indexSettings57.setMaxRescoreWindow((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings68);
        boolean boolean70 = indexSettings69.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings69.settings = settings71;
        boolean boolean73 = indexSettings69.queryStringLenient;
        boolean boolean74 = indexSettings69.TTLPurgeDisabled;
        java.lang.String str75 = indexSettings69.customDataPath();
        indexSettings69.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability78 = indexSettings69.durability;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData79 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings81 = new org.elasticsearch.index.IndexSettings(indexMetaData79, settings80);
        java.util.function.Predicate<java.lang.String> strPredicate82 = indexSettings81.indexNameMatcher;
        java.util.function.Predicate<java.lang.String> strPredicate83 = indexSettings81.getindexNameMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue84 = indexSettings81.flushThresholdSize;
        indexSettings69.flushThresholdSize = byteSizeValue84;
        indexSettings57.setTranslogFlushThresholdSize(byteSizeValue84);
        indexSettings54.flushThresholdSize = byteSizeValue84;
        indexSettings2.setTranslogFlushThresholdSize(byteSizeValue84);
        org.elasticsearch.common.unit.TimeValue timeValue89 = indexSettings2.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10000 + "'", int61 == 10000);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + durability78 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability78.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strPredicate82);
        org.junit.Assert.assertNotNull(strPredicate83);
        org.junit.Assert.assertNotNull(byteSizeValue84);
        org.junit.Assert.assertNotNull(timeValue89);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.loadFromSource("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings12);
        boolean boolean14 = indexSettings13.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings13.settings = settings15;
        int int17 = indexSettings13.maxRescoreWindow;
        java.lang.String str18 = indexSettings13.getUUID();
        org.elasticsearch.common.settings.Settings settings19 = indexSettings13.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting20 = indexSettings13.getINDEX_GC_DELETES_SETTING();
        int int21 = indexSettings13.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = indexSettings13.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings24);
        boolean boolean26 = indexSettings25.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings25.settings = settings27;
        org.elasticsearch.common.settings.Settings settings30 = settings27.getAsSettings("");
        java.lang.String str32 = settings30.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder33.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder41.replacePropertyPlaceholders();
        boolean boolean44 = indexScopedSettings22.updateDynamicSettings(settings30, builder37, builder42, "_all");
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder37.put("hi!", (int) (short) 100);
        java.lang.String str49 = builder37.get("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder37.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder52 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder52.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder53.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder53.putNull("");
        java.lang.String[] strArray82 = new java.lang.String[] { "_na_", "index.number_of_shards", "index.auto_expand_replicas", "index.priority", "", "active_allocations", "index.blocks.metadata", "active_allocations", "_all", "index.shadow_replicas", "index.version.upgraded_string", "index.data_path", "active_allocations", "archived.", "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.blocks.read_only", "index.creation_date", "index.number_of_replicas" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder53.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList83);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder37.putArray("index.blocks.read_only", (java.util.List<java.lang.String>) strList83);
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder9.putArray("index.version.minimum_compatible", (java.util.List<java.lang.String>) strList83);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_na_" + "'", str18, "_na_");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(timeValueSetting20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        int int4 = indexSettings2.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig5 = indexSettings2.getmergePolicyConfig();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = indexSettings2.scopedSettings;
        boolean boolean8 = indexScopedSettings6.isPrivateSetting("index.blocks.read");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting10 = org.elasticsearch.index.IndexSettings.INDEX_TTL_DISABLE_PURGE_SETTING;
        java.util.function.BiConsumer<java.lang.Boolean, java.lang.Boolean> booleanBiConsumer11 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(booleanSetting9, booleanSetting10, booleanBiConsumer11);
        boolean boolean14 = indexScopedSettings6.isPrivateSetting("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings16);
        boolean boolean18 = indexSettings17.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings17.settings = settings19;
        boolean boolean21 = indexSettings17.queryStringLenient;
        boolean boolean22 = indexSettings17.TTLPurgeDisabled;
        boolean boolean23 = indexSettings17.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version24 = indexSettings17.version;
        org.elasticsearch.index.translog.Translog.Durability durability25 = indexSettings17.durability;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings17.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        java.util.function.BiConsumer<java.lang.Boolean, java.lang.Boolean> booleanBiConsumer28 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(booleanSetting26, booleanSetting27, booleanBiConsumer28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings31);
        boolean boolean33 = indexSettings32.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings32.settings = settings34;
        int int36 = indexSettings32.maxRescoreWindow;
        java.lang.String str37 = indexSettings32.getUUID();
        org.elasticsearch.common.settings.Settings settings38 = indexSettings32.nodeSettings;
        org.elasticsearch.common.settings.Settings settings39 = indexSettings32.nodeSettings;
        java.lang.String str42 = settings39.get("archived.", "index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings6.archiveUnknownOrBrokenSettings(settings39);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(booleanSetting10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertTrue("'" + durability25 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability25.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "_na_" + "'", str37, "_na_");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index.shadow_replicas" + "'", str42, "index.shadow_replicas");
        org.junit.Assert.assertNotNull(settings43);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = settings32.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings32);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state38 = indexMetaData37.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings40);
        boolean boolean42 = indexSettings41.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings41.settings = settings43;
        org.elasticsearch.common.settings.Settings settings46 = settings43.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean52 = indexScopedSettings50.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings50.archiveUnknownOrBrokenSettings(settings53);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings53.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean61 = indexScopedSettings59.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings59.archiveUnknownOrBrokenSettings(settings62);
        org.elasticsearch.index.IndexSettings indexSettings64 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData48, settings53, strPredicate58, indexScopedSettings59);
        org.elasticsearch.index.IndexSettings indexSettings65 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData37, settings43, strPredicate47, indexScopedSettings59);
        java.lang.String str66 = indexScopedSettings59.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings68);
        boolean boolean70 = indexSettings69.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings69.settings = settings71;
        org.elasticsearch.common.settings.Settings settings74 = settings71.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings75 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean77 = indexScopedSettings75.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings79 = indexScopedSettings75.archiveUnknownOrBrokenSettings(settings78);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state81 = indexMetaData80.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings82 = new org.elasticsearch.common.settings.IndexScopedSettings(settings74, indexScopedSettings75, indexMetaData80);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings83 = new org.elasticsearch.common.settings.IndexScopedSettings(settings35, indexScopedSettings59, indexMetaData80);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff84 = indexMetaData0.diff(indexMetaData80);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder85 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData80);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData86 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData86);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings88 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean90 = indexScopedSettings88.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings91 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings92 = indexScopedSettings88.archiveUnknownOrBrokenSettings(settings91);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap94 = settings92.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings95 = new org.elasticsearch.index.IndexSettings(indexMetaData86, settings92);
        org.elasticsearch.index.IndexSettings indexSettings96 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings92);
        org.elasticsearch.index.translog.Translog.Durability durability97 = indexSettings96.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + state38 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state38.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(indexScopedSettings75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertTrue("'" + state81 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state81.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff84);
        org.junit.Assert.assertNotNull(indexMetaData86);
        org.junit.Assert.assertNotNull(indexScopedSettings88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(strMap94);
        org.junit.Assert.assertTrue("'" + durability97 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability97.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        long long29 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder31.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.version.upgraded_string", (float) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = builder41.internalMap();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = builder41.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder30.settings(builder41);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData46 = builder30.mapping("_na_");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(mappingMetaData46);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.lang.String str21 = settings19.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder30.replacePropertyPlaceholders();
        boolean boolean33 = indexScopedSettings11.updateDynamicSettings(settings19, builder26, builder31, "_all");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder37 = builder26.put("index.priority", (long) (byte) -1, byteSizeUnit36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        int int4 = indexSettings2.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig5 = indexSettings2.getmergePolicyConfig();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = indexSettings2.scopedSettings;
        boolean boolean8 = indexScopedSettings6.isPrivateSetting("index.blocks.read");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting10 = org.elasticsearch.index.IndexSettings.INDEX_TTL_DISABLE_PURGE_SETTING;
        java.util.function.BiConsumer<java.lang.Boolean, java.lang.Boolean> booleanBiConsumer11 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(booleanSetting9, booleanSetting10, booleanBiConsumer11);
        boolean boolean14 = indexScopedSettings6.isPrivateSetting("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings16);
        boolean boolean18 = indexSettings17.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings17.settings = settings19;
        boolean boolean21 = indexSettings17.queryStringLenient;
        boolean boolean22 = indexSettings17.TTLPurgeDisabled;
        boolean boolean23 = indexSettings17.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version24 = indexSettings17.version;
        org.elasticsearch.index.translog.Translog.Durability durability25 = indexSettings17.durability;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings17.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        java.util.function.BiConsumer<java.lang.Boolean, java.lang.Boolean> booleanBiConsumer28 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(booleanSetting26, booleanSetting27, booleanBiConsumer28);
        java.util.function.Predicate<java.lang.String> strPredicate30 = indexScopedSettings6.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = indexScopedSettings6.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Settings settings32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings31.applySettings(settings32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(booleanSetting10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertTrue("'" + durability25 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability25.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.settings(settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings40);
        java.util.function.Predicate<java.lang.String> strPredicate42 = indexSettings41.indexNameMatcher;
        org.elasticsearch.common.settings.Settings settings43 = settings16.filter(strPredicate42);
        org.elasticsearch.common.settings.Settings settings44 = settings6.filter(strPredicate42);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state46 = indexMetaData45.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings48);
        boolean boolean50 = indexSettings49.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings49.settings = settings51;
        org.elasticsearch.common.settings.Settings settings54 = settings51.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate55 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData56);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings62 = indexScopedSettings58.archiveUnknownOrBrokenSettings(settings61);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings61.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate66 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean69 = indexScopedSettings67.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings67.archiveUnknownOrBrokenSettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData56, settings61, strPredicate66, indexScopedSettings67);
        org.elasticsearch.index.IndexSettings indexSettings73 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51, strPredicate55, indexScopedSettings67);
        java.lang.String str74 = indexScopedSettings67.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData75 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state76 = indexMetaData75.getState();
        java.util.Set<java.lang.String> strSet78 = null; // flaky: indexMetaData75.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version79 = indexMetaData75.getUpgradedVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings80 = new org.elasticsearch.common.settings.IndexScopedSettings(settings6, indexScopedSettings67, indexMetaData75);
        java.lang.String[] strArray82 = settings6.getAsArray("archived.");
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strPredicate42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertTrue("'" + state46 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state46.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(indexMetaData75);
        org.junit.Assert.assertTrue("'" + state76 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state76.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet78);
        org.junit.Assert.assertNotNull(version79);
        org.junit.Assert.assertNotNull(strArray82);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder11.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder12.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder1.put(strMap13);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder18 = builder14.put("index.blocks.metadata", 100L, byteSizeUnit17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        boolean boolean34 = indexSettings30.queryStringLenient;
        boolean boolean35 = indexSettings30.TTLPurgeDisabled;
        java.lang.String str36 = indexSettings30.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings30.syncInterval;
// flaky:         indexSettings27.setRefreshInterval(timeValue37);
        org.elasticsearch.common.unit.TimeValue timeValue39 = null; // flaky: indexSettings27.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        int int42 = indexMetaData40.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData40.getMappings();
// flaky:         indexSettings27.indexMetaData = indexMetaData40;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state56 = indexMetaData55.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings58);
        boolean boolean60 = indexSettings59.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings59.settings = settings61;
        org.elasticsearch.common.settings.Settings settings64 = settings61.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings68.archiveUnknownOrBrokenSettings(settings71);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap75 = settings71.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate76 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean79 = indexScopedSettings77.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings77.archiveUnknownOrBrokenSettings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings82 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData66, settings71, strPredicate76, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings61, strPredicate65, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings61);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder86 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput88 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData40.writeTo(streamOutput88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(timeValue37);
// flaky:         org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + state56 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state56.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings81);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("active_allocations");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder0.putNull("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        java.lang.Class<?> wildcardClass8 = builder7.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder4.put("index.version.upgraded", (java.lang.Class) wildcardClass8);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder4.put("_na_", (double) 100.0f);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("", true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap30 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData36);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings42.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder35.settings(settings42);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings42);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings42);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData0.includeFilters();
        java.util.Set<java.lang.String> strSet51 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap52 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
        org.junit.Assert.assertNull(strSet51);
        org.junit.Assert.assertNotNull(strImmutableOpenMap52);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings30);
        boolean boolean32 = indexSettings31.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings31.settings = settings33;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings35.archiveUnknownOrBrokenSettings(settings38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        java.util.Set<java.lang.String> strSet43 = null; // flaky: indexMetaData40.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = new org.elasticsearch.common.settings.IndexScopedSettings(settings33, indexScopedSettings35, indexMetaData40);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings57.archiveUnknownOrBrokenSettings(settings60);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings60.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings66.archiveUnknownOrBrokenSettings(settings69);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60, strPredicate65, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51, strPredicate54, indexScopedSettings66);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue74 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = settings51.getAsBytesSize("index.creation_date_string", byteSizeValue74);
        org.elasticsearch.common.settings.Settings settings76 = indexScopedSettings44.applySettings(settings51);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings76.getGroups("index.blocks.write", false);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings76);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting81 = indexSettings80.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability82 = indexSettings80.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNull(byteSizeValue75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(timeValueSetting81);
        org.junit.Assert.assertTrue("'" + durability82 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability82.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        boolean boolean43 = indexSettings42.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings42.settings = settings44;
        org.elasticsearch.common.settings.Settings settings47 = settings44.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings48.archiveUnknownOrBrokenSettings(settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state54 = indexMetaData53.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = new org.elasticsearch.common.settings.IndexScopedSettings(settings47, indexScopedSettings48, indexMetaData53);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray62 = settings47.getAsArray("", strArray60, (java.lang.Boolean) true);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings47);
        boolean boolean64 = indexSettings63.getqueryStringAnalyzeWildcard();
        indexSettings63.setwarmerEnabled(true);
        int int67 = indexSettings63.maxResultWindow;
        indexSettings63.setTTLPurgeDisabled(false);
        indexSettings63.maxResultWindow = 1;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertTrue("'" + state54 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state54.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10000 + "'", int67 == 10000);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        org.elasticsearch.index.translog.Translog.Durability durability9 = indexSettings2.durability;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting10 = indexSettings2.getINDEX_CHECK_ON_STARTUP();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + durability9 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability9.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strSetting10);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData8.getState();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData8.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version12 = indexMetaData8.getUpgradedVersion();
        org.elasticsearch.Version version13 = settings6.getAsVersion("", version12);
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.index.Index index16 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version18 = indexMetaData0.getCreationVersion();
        org.elasticsearch.index.Index index19 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNull(index16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNull(index19);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.Version version16 = indexSettings15.version;
        indexSettings15.warmerEnabled = false;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings15.indexMetaData;
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap20 = indexMetaData19.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap20);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.shared_filesystem.recover_on_any_node", (float) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder4.loadFromSource("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings9);
        boolean boolean11 = indexSettings10.queryStringLenient;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig12 = indexSettings10.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        int int19 = indexSettings15.maxRescoreWindow;
        java.lang.String str20 = indexSettings15.getUUID();
        org.elasticsearch.common.settings.Settings settings21 = indexSettings15.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings15.getINDEX_GC_DELETES_SETTING();
        int int23 = indexSettings15.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = indexSettings15.scopedSettings;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig25 = indexSettings15.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = indexSettings15.indexMetaData;
        boolean boolean27 = indexSettings10.updateIndexMetaData(indexMetaData26);
        boolean boolean28 = indexSettings10.warmerEnabled;
        org.elasticsearch.Version version29 = indexSettings10.version;
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder4.put("_all", version29);
        java.util.concurrent.TimeUnit timeUnit33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder34 = builder4.put("index.version.minimum_compatible", (long) 10000, timeUnit33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_na_" + "'", str20, "_na_");
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(version29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.common.unit.TimeValue timeValue7 = indexSettings6.getTranslogSyncInterval();
        java.lang.String str8 = indexSettings6.customDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        java.lang.Boolean boolean10 = indexSettings6.getValue(booleanSetting9);
        org.elasticsearch.common.unit.TimeValue timeValue11 = indexSettings6.getGlobalCheckpointInterval();
        indexSettings6.warmerEnabled = false;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + true + "'", boolean10, true);
        org.junit.Assert.assertNotNull(timeValue11);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        boolean boolean12 = indexSettings2.warmerEnabled;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting13 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        indexSettings2.setTTLPurgeDisabled(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(timeValueSetting13);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("index.shadow_replicas");
        int int4 = builder1.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        org.elasticsearch.common.settings.Settings settings7 = settings4.getAsSettings("");
        java.lang.Boolean boolean10 = settings7.getAsBoolean("_na_", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue12 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue13 = settings7.getAsSize("index.uuid", sizeValue12);
        org.elasticsearch.common.settings.Settings settings15 = settings7.getByPrefix("index.");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + false + "'", boolean10, false);
        org.junit.Assert.assertNull(sizeValue13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean4 = indexMetaData0.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean7 = indexScopedSettings5.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings9);
        boolean boolean11 = indexSettings10.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings10.settings = settings12;
        org.elasticsearch.common.settings.Settings settings15 = settings12.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings5.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.common.settings.Settings settings18 = settings15.getAsSettings("hi!");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.hasDynamicSetting("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate22 = indexScopedSettings19.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings24);
        boolean boolean26 = indexSettings25.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings25.settings = settings27;
        boolean boolean29 = indexSettings25.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = indexSettings25.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = indexSettings25.scopedSettings;
        java.lang.String str32 = indexScopedSettings31.nodeName();
        org.elasticsearch.index.IndexSettings indexSettings33 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15, strPredicate22, indexScopedSettings31);
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder34.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder35.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder35.put("index.number_of_shards", true);
        java.lang.String str46 = builder35.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder35.put("hi!", "state-");
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder50.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder51.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder60.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder60.put("index.version.upgraded", (float) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder66 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder66.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder67.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder70.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings74 = builder73.build();
        org.elasticsearch.common.settings.Settings settings75 = builder73.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData77);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings79 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean81 = indexScopedSettings79.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings83 = indexScopedSettings79.archiveUnknownOrBrokenSettings(settings82);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap85 = settings83.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData77, settings83);
        org.elasticsearch.common.settings.Settings settings87 = indexMetaData77.getSettings();
        java.lang.String[] strArray89 = settings87.getAsArray("hi!");
        java.lang.String[] strArray90 = settings75.getAsArray("index.data_path", strArray89);
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder60.putArray("index.creation_date", strArray90);
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder35.put((java.lang.Object[]) strArray90);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings31.validate(builder92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(booleanSetting30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNotNull(indexScopedSettings79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.index.Index index16 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings19.archiveUnknownOrBrokenSettings(settings22);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings23);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap27 = indexMetaData17.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        org.elasticsearch.common.settings.Settings settings29 = indexMetaData17.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings31);
        boolean boolean33 = indexSettings32.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings32.settings = settings34;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings34);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings34.getAsGroups();
        org.elasticsearch.common.settings.Settings settings39 = settings34.getAsSettings("");
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings34);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings34);
        boolean boolean42 = indexSettings41.queryStringAnalyzeWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNull(index16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.Version version16 = indexSettings15.version;
        indexSettings15.warmerEnabled = false;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings15.indexMetaData;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData20);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings26.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings35.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean43 = indexScopedSettings41.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings41.archiveUnknownOrBrokenSettings(settings44);
        org.elasticsearch.index.IndexSettings indexSettings46 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData30, settings35, strPredicate40, indexScopedSettings41);
        org.elasticsearch.index.IndexSettings indexSettings47 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData20, settings26, strPredicate29, indexScopedSettings41);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings49);
        boolean boolean51 = indexSettings50.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings50.settings = settings52;
        boolean boolean54 = indexSettings50.queryStringLenient;
        boolean boolean55 = indexSettings50.TTLPurgeDisabled;
        java.lang.String str56 = indexSettings50.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings50.syncInterval;
// flaky:         indexSettings47.setRefreshInterval(timeValue57);
        indexSettings15.setGCDeletes(timeValue57);
        boolean boolean60 = indexSettings15.defaultAllowUnmappedFields;
        java.lang.String str61 = indexSettings15.customDataPath();
        java.lang.String str62 = indexSettings15.defaultField;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_all" + "'", str62, "_all");
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean10 = indexSettings2.hasCustomDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue11 = indexSettings2.globalCheckpointInterval;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting12 = indexSettings2.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertNotNull(durabilitySetting12);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.settings(settings11);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings18);
        boolean boolean20 = indexSettings19.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings19.settings = settings21;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state29 = indexMetaData28.getState();
        java.util.Set<java.lang.String> strSet31 = null; // flaky: indexMetaData28.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = new org.elasticsearch.common.settings.IndexScopedSettings(settings21, indexScopedSettings23, indexMetaData28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings35.archiveUnknownOrBrokenSettings(settings38);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state44 = indexMetaData43.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings46);
        boolean boolean48 = indexSettings47.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings47.settings = settings49;
        org.elasticsearch.common.settings.Settings settings52 = settings49.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate53 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData54);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean58 = indexScopedSettings56.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings56.archiveUnknownOrBrokenSettings(settings59);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap63 = settings59.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate64 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean67 = indexScopedSettings65.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings69 = indexScopedSettings65.archiveUnknownOrBrokenSettings(settings68);
        org.elasticsearch.index.IndexSettings indexSettings70 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData54, settings59, strPredicate64, indexScopedSettings65);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData43, settings49, strPredicate53, indexScopedSettings65);
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings49);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = new org.elasticsearch.common.settings.IndexScopedSettings(settings11, indexScopedSettings23, indexMetaData33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings74 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean76 = indexScopedSettings74.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings78 = indexScopedSettings74.archiveUnknownOrBrokenSettings(settings77);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state81 = indexMetaData80.getState();
        java.util.Set<java.lang.String> strSet83 = null; // flaky: indexMetaData80.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version84 = indexMetaData80.getUpgradedVersion();
        org.elasticsearch.Version version85 = settings78.getAsVersion("", version84);
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings78);
        int int87 = indexSettings86.maxRescoreWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + state29 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state29.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertTrue("'" + state44 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state44.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(indexScopedSettings74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertTrue("'" + state81 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state81.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet83);
        org.junit.Assert.assertNotNull(version84);
        org.junit.Assert.assertNotNull(version85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10000 + "'", int87 == 10000);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings settings21 = settings19.getAsSettings("index.number_of_replicas");
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder26.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder27.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder27.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder36.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder36.put("index.version.upgraded", (float) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder40.replacePropertyPlaceholders();
        boolean boolean42 = indexMetaData0.equals((java.lang.Object) builder40);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder46 = builder40.put("index.blocks.read_only", (long) (byte) -1, byteSizeUnit45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.settings(settings11);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting17 = indexSettings16.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(timeValueSetting17);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        int int16 = indexSettings15.maxResultWindow;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getNodeSettings();
        indexSettings15.warmerEnabled = false;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting20 = indexSettings15.getALLOW_UNMAPPED();
        boolean boolean21 = indexSettings15.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings15.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(booleanSetting20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(timeValueSetting22);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.normalizePrefix("index.priority");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
// flaky:         indexSettings27.maxRescoreWindow = 1;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = null; // flaky: indexSettings27.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
// flaky:         indexSettings27.setTTLPurgeDisabled(false);
        org.elasticsearch.Version version33 = null; // flaky: indexSettings27.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting30);
// flaky:         org.junit.Assert.assertNotNull(version33);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        boolean boolean5 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig6 = indexSettings2.mergePolicyConfig;
        indexSettings2.gcDeletesInMillis = (byte) 100;
        indexSettings2.warmerEnabled = true;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting11 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        java.lang.String str12 = indexSettings2.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(mergePolicyConfig6);
        org.junit.Assert.assertNotNull(timeValueSetting11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_all" + "'", str12, "_all");
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.refreshInterval;
        indexSettings2.setMaxRescoreWindow((int) 'a');
        boolean boolean12 = indexSettings2.hasCustomDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue13 = indexSettings2.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue14 = indexSettings2.getDEFAULT_GC_DELETES();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertNotNull(timeValue14);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        long long10 = indexSettings2.gcDeletesInMillis;
        boolean boolean11 = indexSettings2.isQueryStringAllowLeadingWildcard();
        java.lang.String str12 = indexSettings2.getDefaultField();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = indexSettings2.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings15);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings21);
        boolean boolean23 = indexSettings22.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings22.settings = settings24;
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings17.archiveUnknownOrBrokenSettings(settings27);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings28);
        org.elasticsearch.common.settings.Settings settings30 = indexSettings29.nodeSettings;
        org.elasticsearch.common.settings.Settings settings31 = indexSettings29.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings31);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = indexSettings32.scopedSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_all" + "'", str12, "_all");
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.index.translog.Translog.Durability durability11 = null;
        indexSettings2.durability = durability11;
        boolean boolean13 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder2.removeAllAliases();
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder5.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder5.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder5.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder14.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder15.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder17.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder3.settings(builder17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.removeAlias("index.version.created_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("index.number_of_shards", true);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.creation_date_string", true);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder10.loadFromSource("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder17.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder18.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder18.put("index.number_of_shards", true);
        java.lang.String str29 = builder18.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder18.put("hi!", "state-");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder33.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder34.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder34.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder43.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder43.put("index.version.upgraded", (float) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings57 = builder56.build();
        org.elasticsearch.common.settings.Settings settings58 = builder56.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean64 = indexScopedSettings62.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings66 = indexScopedSettings62.archiveUnknownOrBrokenSettings(settings65);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings66.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings66);
        org.elasticsearch.common.settings.Settings settings70 = indexMetaData60.getSettings();
        java.lang.String[] strArray72 = settings70.getAsArray("hi!");
        java.lang.String[] strArray73 = settings58.getAsArray("index.data_path", strArray72);
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder43.putArray("index.creation_date", strArray73);
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder18.put((java.lang.Object[]) strArray73);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder15.putArray("state-", strArray73);
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder76.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder4 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params5 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = indexMetaData0.toXContent(xContentBuilder4, params5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(params5);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings11);
        boolean boolean13 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings12.settings = settings14;
        boolean boolean16 = indexSettings12.queryStringLenient;
        boolean boolean17 = indexSettings12.TTLPurgeDisabled;
        java.lang.String str18 = indexSettings12.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue19 = indexSettings12.syncInterval;
        indexSettings2.setRefreshInterval(timeValue19);
        java.lang.String str21 = indexSettings2.nodeName;
        int int22 = indexSettings2.getMaxRescoreWindow();
        indexSettings2.gcDeletesInMillis = 0L;
        int int25 = indexSettings2.getNumberOfShards();
        boolean boolean27 = indexSettings2.matchesIndexName("index.number_of_replicas");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.");
        java.lang.String str2 = builder1.index();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index." + "'", str2, "index.");
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str8 = indexSettings2.customDataPath();
        boolean boolean9 = indexSettings2.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings2.settings;
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getdurability();
        indexSettings2.TTLPurgeDisabled = true;
        indexSettings2.warmerEnabled = true;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        long long10 = indexSettings2.gcDeletesInMillis;
        boolean boolean11 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        int int18 = indexSettings14.maxRescoreWindow;
        java.lang.String str19 = indexSettings14.getUUID();
        org.elasticsearch.common.settings.Settings settings20 = indexSettings14.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting21 = indexSettings14.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean22 = indexSettings14.hasCustomDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue23 = indexSettings14.globalCheckpointInterval;
        org.elasticsearch.index.translog.Translog.Durability durability24 = indexSettings14.durability;
        indexSettings2.setTranslogDurability(durability24);
        org.elasticsearch.Version version26 = indexSettings2.getversion();
        java.lang.String str27 = indexSettings2.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_na_" + "'", str19, "_na_");
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(booleanSetting21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(timeValue23);
        org.junit.Assert.assertTrue("'" + durability24 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability24.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        long long29 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder31 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData32);
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap37 = settings36.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings36);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings40);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings46);
        boolean boolean48 = indexSettings47.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings47.settings = settings49;
        org.elasticsearch.common.settings.Settings settings52 = settings49.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings42.archiveUnknownOrBrokenSettings(settings52);
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings53);
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings53);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params57 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder58 = settings53.toXContent(xContentBuilder56, params57);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder31, params57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(params57);
        org.junit.Assert.assertNull(xContentBuilder58);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        int int16 = indexSettings15.maxResultWindow;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getNodeSettings();
        indexSettings15.warmerEnabled = false;
        org.elasticsearch.common.settings.Settings settings20 = indexSettings15.getNodeSettings();
        java.lang.String str21 = indexSettings15.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_na_" + "'", str21, "_na_");
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        java.lang.Boolean boolean20 = settings5.getAsBoolean("index.number_of_replicas", (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + true + "'", boolean20, true);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder1.putNull("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        java.lang.String str40 = settings16.get("index.shadow_replicas");
        org.elasticsearch.common.unit.TimeValue timeValue42 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue43 = settings16.getAsTime("index.", timeValue42);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder1.put(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData46);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings48.archiveUnknownOrBrokenSettings(settings51);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings52.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state57 = indexMetaData56.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings59);
        boolean boolean61 = indexSettings60.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings60.settings = settings62;
        org.elasticsearch.common.settings.Settings settings65 = settings62.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate66 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData67);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean71 = indexScopedSettings69.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings73 = indexScopedSettings69.archiveUnknownOrBrokenSettings(settings72);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap76 = settings72.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate77 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean80 = indexScopedSettings78.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings82 = indexScopedSettings78.archiveUnknownOrBrokenSettings(settings81);
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData67, settings72, strPredicate77, indexScopedSettings78);
        org.elasticsearch.index.IndexSettings indexSettings84 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData56, settings62, strPredicate66, indexScopedSettings78);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings62);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue86 = indexSettings85.getFlushThresholdSize();
        java.lang.Class<?> wildcardClass87 = byteSizeValue86.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder44.put("index.creation_date_string", (java.lang.Class) wildcardClass87);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(timeValue42);
        org.junit.Assert.assertNotNull(timeValue43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertTrue("'" + state57 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state57.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(byteSizeValue86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings5);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings6.settings = settings8;
        org.elasticsearch.common.settings.Settings settings11 = settings8.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = new org.elasticsearch.common.settings.IndexScopedSettings(settings11, indexScopedSettings12, indexMetaData17);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray26 = settings11.getAsArray("", strArray24, (java.lang.Boolean) true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        java.util.function.Predicate<java.lang.String> strPredicate30 = indexSettings29.indexNameMatcher;
        java.util.function.Predicate<java.lang.String> strPredicate31 = indexSettings29.getindexNameMatcher();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings49.archiveUnknownOrBrokenSettings(settings52);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings52.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate57 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings62 = indexScopedSettings58.archiveUnknownOrBrokenSettings(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData47, settings52, strPredicate57, indexScopedSettings58);
        org.elasticsearch.index.IndexSettings indexSettings64 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData37, settings43, strPredicate46, indexScopedSettings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData65);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = new org.elasticsearch.common.settings.IndexScopedSettings(settings35, indexScopedSettings58, indexMetaData65);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11, strPredicate31, indexScopedSettings58);
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet69 = indexScopedSettings58.getBUILT_IN_INDEX_SETTINGS();
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet70 = indexScopedSettings58.getBUILT_IN_INDEX_SETTINGS();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertNotNull(strPredicate31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(wildcardSettingSet69);
        org.junit.Assert.assertNotNull(wildcardSettingSet70);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        long long10 = indexSettings2.gcDeletesInMillis;
        boolean boolean11 = indexSettings2.isQueryStringAllowLeadingWildcard();
        boolean boolean12 = indexSettings2.isDefaultAllowUnmappedFields();
        java.lang.String str13 = indexSettings2.getNodeName();
        indexSettings2.maxResultWindow = 10000;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = indexSettings2.indexMetaData;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData16.excludeFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder18 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData19.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings22);
        boolean boolean24 = indexSettings23.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings23.settings = settings25;
        org.elasticsearch.common.settings.Settings settings28 = settings25.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings35.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean43 = indexScopedSettings41.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings41.archiveUnknownOrBrokenSettings(settings44);
        org.elasticsearch.index.IndexSettings indexSettings46 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData30, settings35, strPredicate40, indexScopedSettings41);
        org.elasticsearch.index.IndexSettings indexSettings47 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData19, settings25, strPredicate29, indexScopedSettings41);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings50);
        boolean boolean52 = indexSettings51.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings51.settings = settings53;
        boolean boolean55 = indexSettings51.queryStringLenient;
        boolean boolean56 = indexSettings51.TTLPurgeDisabled;
        boolean boolean57 = indexSettings51.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version58 = indexSettings51.version;
        org.elasticsearch.Version version59 = settings25.getAsVersion("archived.", version58);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder60 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings62);
        boolean boolean64 = indexSettings63.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings63.settings = settings65;
        org.elasticsearch.common.settings.Settings settings68 = settings65.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder69 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params70 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder71 = settings68.toXContent(xContentBuilder69, params70);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder72 = settings25.toXContent(xContentBuilder60, params70);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder73 = indexMetaData16.toXContent(xContentBuilder18, params70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(version58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(params70);
        org.junit.Assert.assertNull(xContentBuilder71);
        org.junit.Assert.assertNull(xContentBuilder72);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        boolean boolean34 = indexSettings30.queryStringLenient;
        boolean boolean35 = indexSettings30.TTLPurgeDisabled;
        java.lang.String str36 = indexSettings30.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings30.syncInterval;
// flaky:         indexSettings27.setRefreshInterval(timeValue37);
        org.elasticsearch.common.unit.TimeValue timeValue39 = null; // flaky: indexSettings27.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        int int42 = indexMetaData40.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData40.getMappings();
// flaky:         indexSettings27.indexMetaData = indexMetaData40;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state56 = indexMetaData55.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings58);
        boolean boolean60 = indexSettings59.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings59.settings = settings61;
        org.elasticsearch.common.settings.Settings settings64 = settings61.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings68.archiveUnknownOrBrokenSettings(settings71);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap75 = settings71.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate76 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean79 = indexScopedSettings77.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings77.archiveUnknownOrBrokenSettings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings82 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData66, settings71, strPredicate76, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings61, strPredicate65, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings61);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings61);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue88 = settings61.getAsRatio("index.number_of_replicas", "active_allocations");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [active_allocations]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(timeValue37);
// flaky:         org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + state56 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state56.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings81);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings8 = builder7.build();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.put("index.blocks.write", true);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder13 = builder7.put(objDictionary12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("primary_terms", "");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.settings(builder9);
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder9.internalMap();
        java.io.InputStream inputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder14 = builder9.loadFromStream("index.version.created", inputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        boolean boolean9 = indexSettings2.isOnSharedFilesystem();
        indexSettings2.setMaxRescoreWindow((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        int int18 = indexSettings14.maxRescoreWindow;
        java.lang.String str19 = indexSettings14.getUUID();
        org.elasticsearch.common.settings.Settings settings20 = indexSettings14.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting21 = indexSettings14.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean22 = indexSettings14.hasCustomDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue23 = indexSettings14.globalCheckpointInterval;
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings14.globalCheckpointInterval;
        indexSettings2.setRefreshInterval(timeValue24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings2.getNodeSettings();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue30 = settings27.getAsMemory("index.blocks.read_only", "index.auto_expand_replicas");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.blocks.read_only] with value [index.auto_expand_replicas] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_na_" + "'", str19, "_na_");
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(booleanSetting21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(timeValue23);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        int int12 = indexSettings8.maxRescoreWindow;
        java.lang.String str13 = indexSettings8.getUUID();
        org.elasticsearch.common.settings.Settings settings14 = indexSettings8.nodeSettings;
        org.elasticsearch.common.settings.Settings settings15 = indexSettings8.nodeSettings;
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings20);
        boolean boolean22 = indexSettings21.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings21.settings = settings23;
        org.elasticsearch.common.settings.Settings settings26 = settings23.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings30.archiveUnknownOrBrokenSettings(settings33);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings33.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData28, settings33, strPredicate38, indexScopedSettings39);
        org.elasticsearch.index.IndexSettings indexSettings45 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData17, settings23, strPredicate27, indexScopedSettings39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate49 = indexSettings48.indexNameMatcher;
        int int50 = indexSettings48.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig51 = indexSettings48.getmergePolicyConfig();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = indexSettings48.scopedSettings;
        boolean boolean54 = indexScopedSettings52.isPrivateSetting("index.blocks.read");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting55 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting56 = org.elasticsearch.index.IndexSettings.INDEX_TTL_DISABLE_PURGE_SETTING;
        java.util.function.BiConsumer<java.lang.Boolean, java.lang.Boolean> booleanBiConsumer57 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(booleanSetting55, booleanSetting56, booleanBiConsumer57);
        java.lang.Boolean boolean59 = indexScopedSettings39.get(booleanSetting55);
        org.elasticsearch.index.IndexSettings indexSettings60 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15, strPredicate16, indexScopedSettings39);
        org.elasticsearch.common.unit.TimeValue timeValue61 = null; // flaky: indexSettings60.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean62 = false; // flaky: indexSettings60.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strPredicate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(booleanSetting55);
        org.junit.Assert.assertNotNull(booleanSetting56);
        org.junit.Assert.assertEquals("'" + boolean59 + "' != '" + true + "'", boolean59, true);
// flaky:         org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        java.lang.String str8 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting9 = indexSettings2.getDEFAULT_FIELD_SETTING();
        boolean boolean10 = indexSettings2.isWarmerEnabled();
        boolean boolean11 = indexSettings2.hasCustomDataPath();
        boolean boolean12 = indexSettings2.getdefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSetting9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings11);
        boolean boolean13 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings12.settings = settings14;
        boolean boolean16 = indexSettings12.queryStringLenient;
        boolean boolean17 = indexSettings12.TTLPurgeDisabled;
        java.lang.String str18 = indexSettings12.customDataPath();
        indexSettings12.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability21 = indexSettings12.durability;
        indexSettings2.durability = durability21;
        int int23 = indexSettings2.getNumberOfShards();
        indexSettings2.setEnableWarmer(false);
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        int int27 = indexSettings2.getMaxRescoreWindow();
        boolean boolean28 = indexSettings2.isOnSharedFilesystem();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher29 = indexSettings2.getParseFieldMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + durability21 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability21.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher29);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData5.getState();
        int int7 = indexMetaData5.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData5.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean11 = indexScopedSettings9.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings9.archiveUnknownOrBrokenSettings(settings19);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData22.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings25);
        boolean boolean27 = indexSettings26.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings26.settings = settings28;
        org.elasticsearch.common.settings.Settings settings31 = settings28.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings35.archiveUnknownOrBrokenSettings(settings38);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings38.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate43 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean46 = indexScopedSettings44.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings44.archiveUnknownOrBrokenSettings(settings47);
        org.elasticsearch.index.IndexSettings indexSettings49 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData33, settings38, strPredicate43, indexScopedSettings44);
        org.elasticsearch.index.IndexSettings indexSettings50 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData22, settings28, strPredicate32, indexScopedSettings44);
        java.lang.String str51 = indexScopedSettings44.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData52);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean56 = indexScopedSettings54.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings58 = indexScopedSettings54.archiveUnknownOrBrokenSettings(settings57);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate61 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData62);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean66 = indexScopedSettings64.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings68 = indexScopedSettings64.archiveUnknownOrBrokenSettings(settings67);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap71 = settings67.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate72 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean75 = indexScopedSettings73.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings77 = indexScopedSettings73.archiveUnknownOrBrokenSettings(settings76);
        org.elasticsearch.index.IndexSettings indexSettings78 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData62, settings67, strPredicate72, indexScopedSettings73);
        org.elasticsearch.index.IndexSettings indexSettings79 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData52, settings58, strPredicate61, indexScopedSettings73);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings81);
        boolean boolean83 = indexSettings82.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings84 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings82.settings = settings84;
        boolean boolean86 = indexSettings82.queryStringLenient;
        boolean boolean87 = indexSettings82.TTLPurgeDisabled;
        java.lang.String str88 = indexSettings82.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue89 = indexSettings82.syncInterval;
// flaky:         indexSettings79.setRefreshInterval(timeValue89);
        org.elasticsearch.common.unit.TimeValue timeValue91 = null; // flaky: indexSettings79.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData92 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state93 = indexMetaData92.getState();
        int int94 = indexMetaData92.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap95 = indexMetaData92.getMappings();
// flaky:         indexSettings79.indexMetaData = indexMetaData92;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings97 = new org.elasticsearch.common.settings.IndexScopedSettings(settings20, indexScopedSettings44, indexMetaData92);
        org.elasticsearch.index.IndexSettings indexSettings98 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings20);
        org.elasticsearch.Version version99 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(indexScopedSettings54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(timeValue89);
// flaky:         org.junit.Assert.assertNotNull(timeValue91);
        org.junit.Assert.assertNotNull(indexMetaData92);
        org.junit.Assert.assertTrue("'" + state93 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state93.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap95);
        org.junit.Assert.assertNotNull(version99);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        long long10 = indexSettings2.gcDeletesInMillis;
        boolean boolean11 = indexSettings2.isQueryStringAllowLeadingWildcard();
        boolean boolean12 = indexSettings2.isDefaultAllowUnmappedFields();
        java.lang.String str13 = indexSettings2.getNodeName();
        indexSettings2.maxResultWindow = 10000;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = indexSettings2.indexMetaData;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap17 = indexMetaData16.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.settings(builder4);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder4.put("", (long) 0);
        org.elasticsearch.common.settings.Settings settings12 = builder4.build();
        java.util.concurrent.TimeUnit timeUnit15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder16 = builder4.put("archived.", (long) ' ', timeUnit15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings12);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        int int9 = indexSettings2.maxResultWindow;
        boolean boolean10 = indexSettings2.getdefaultAllowUnmappedFields();
        boolean boolean11 = indexSettings2.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap10 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings12 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings17);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getAsGroups();
        org.elasticsearch.common.settings.Settings settings22 = settings17.getAsSettings("");
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.elasticsearch.Version version24 = indexSettings23.getversion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings26);
        boolean boolean28 = indexSettings27.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings27.settings = settings29;
        boolean boolean31 = indexSettings27.queryStringLenient;
        boolean boolean32 = indexSettings27.TTLPurgeDisabled;
        java.lang.String str33 = indexSettings27.customDataPath();
        indexSettings27.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability36 = indexSettings27.getTranslogDurability();
        indexSettings23.setTranslogDurability(durability36);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + durability36 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability36.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        int int12 = indexSettings8.maxRescoreWindow;
        java.lang.String str13 = indexSettings8.getUUID();
        org.elasticsearch.common.settings.Settings settings14 = indexSettings8.nodeSettings;
        org.elasticsearch.common.settings.Settings settings15 = indexSettings8.nodeSettings;
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings20);
        boolean boolean22 = indexSettings21.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings21.settings = settings23;
        org.elasticsearch.common.settings.Settings settings26 = settings23.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings30.archiveUnknownOrBrokenSettings(settings33);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings33.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData28, settings33, strPredicate38, indexScopedSettings39);
        org.elasticsearch.index.IndexSettings indexSettings45 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData17, settings23, strPredicate27, indexScopedSettings39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate49 = indexSettings48.indexNameMatcher;
        int int50 = indexSettings48.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig51 = indexSettings48.getmergePolicyConfig();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = indexSettings48.scopedSettings;
        boolean boolean54 = indexScopedSettings52.isPrivateSetting("index.blocks.read");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting55 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting56 = org.elasticsearch.index.IndexSettings.INDEX_TTL_DISABLE_PURGE_SETTING;
        java.util.function.BiConsumer<java.lang.Boolean, java.lang.Boolean> booleanBiConsumer57 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(booleanSetting55, booleanSetting56, booleanBiConsumer57);
        java.lang.Boolean boolean59 = indexScopedSettings39.get(booleanSetting55);
        org.elasticsearch.index.IndexSettings indexSettings60 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15, strPredicate16, indexScopedSettings39);
        org.elasticsearch.common.unit.TimeValue timeValue61 = null; // flaky: indexSettings60.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean62 = false; // flaky: indexSettings60.getqueryStringAnalyzeWildcard();
// flaky:         indexSettings60.gcDeletesInMillis = (-1);
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig65 = null; // flaky: indexSettings60.mergePolicyConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strPredicate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(booleanSetting55);
        org.junit.Assert.assertNotNull(booleanSetting56);
        org.junit.Assert.assertEquals("'" + boolean59 + "' != '" + true + "'", boolean59, true);
// flaky:         org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertNotNull(mergePolicyConfig65);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        int int11 = indexSettings2.getNumberOfShards();
        boolean boolean12 = indexSettings2.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting13 = indexSettings2.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        java.lang.String str14 = indexSettings2.customDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting15 = indexSettings2.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig16 = indexSettings2.mergeSchedulerConfig;
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings2.refreshInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValueSetting13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(booleanSetting15);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig16);
        org.junit.Assert.assertNotNull(timeValue17);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long5 = indexMetaData0.primaryTerm((int) (short) 0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("_all");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17, strPredicate20, indexScopedSettings32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings40);
        boolean boolean42 = indexSettings41.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings41.settings = settings43;
        boolean boolean45 = indexSettings41.queryStringLenient;
        boolean boolean46 = indexSettings41.TTLPurgeDisabled;
        java.lang.String str47 = indexSettings41.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue48 = indexSettings41.syncInterval;
// flaky:         indexSettings38.setRefreshInterval(timeValue48);
        indexSettings2.refreshInterval = timeValue48;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = indexSettings2.getScopedSettings();
        java.lang.String str52 = indexScopedSettings51.nodeName();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting54 = indexScopedSettings51.get("index.priority");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet55 = indexScopedSettings51.getBUILT_IN_INDEX_SETTINGS();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(wildcardSetting54);
        org.junit.Assert.assertNotNull(wildcardSettingSet55);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read_only", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.version(60000L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfShards(10000);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.Version version5 = indexSettings2.getIndexVersionCreated();
        indexSettings2.gcDeletesInMillis = (short) 100;
        boolean boolean8 = indexSettings2.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("", custom4);
        long long6 = builder2.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder2.creationDate((long) (short) 1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData6.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.state(state7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = builder10.mapping("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder10.numberOfShards((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.primaryTerm((int) '4', (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        boolean boolean10 = indexSettings9.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings9.settings = settings11;
        org.elasticsearch.common.settings.Settings settings14 = settings11.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings4.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings18);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings24);
        boolean boolean26 = indexSettings25.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings25.settings = settings27;
        org.elasticsearch.common.settings.Settings settings30 = settings27.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings20.archiveUnknownOrBrokenSettings(settings30);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings31);
        int int33 = indexSettings32.maxResultWindow;
        org.elasticsearch.common.settings.Settings settings34 = indexSettings32.nodeSettings;
        org.elasticsearch.common.settings.Settings settings36 = settings34.getByPrefix("index.blocks.read_only");
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long39 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10000 + "'", int33 == 10000);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        int int11 = indexSettings2.getNumberOfShards();
        boolean boolean12 = indexSettings2.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting13 = indexSettings2.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings15);
        boolean boolean17 = indexSettings16.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings16.settings = settings18;
        int int20 = indexSettings16.maxRescoreWindow;
        java.lang.String str21 = indexSettings16.getUUID();
        org.elasticsearch.common.settings.Settings settings22 = indexSettings16.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting23 = indexSettings16.getINDEX_GC_DELETES_SETTING();
        int int24 = indexSettings16.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings26);
        boolean boolean28 = indexSettings27.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings27.settings = settings29;
        int int31 = indexSettings27.maxRescoreWindow;
        boolean boolean32 = indexSettings27.TTLPurgeDisabled;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue33 = indexSettings27.getFlushThresholdSize();
        indexSettings16.setTranslogFlushThresholdSize(byteSizeValue33);
        indexSettings2.setTranslogFlushThresholdSize(byteSizeValue33);
        java.lang.String str36 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting37 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting38 = indexSettings2.getMAX_RESCORE_WINDOW_SETTING();
        boolean boolean39 = indexSettings2.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValueSetting13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_na_" + "'", str21, "_na_");
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(timeValueSetting23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteSizeValue33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "_na_" + "'", str36, "_na_");
        org.junit.Assert.assertNotNull(booleanSetting37);
        org.junit.Assert.assertNotNull(intSetting38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean4 = indexMetaData0.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean7 = indexScopedSettings5.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings9);
        boolean boolean11 = indexSettings10.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings10.settings = settings12;
        org.elasticsearch.common.settings.Settings settings15 = settings12.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings5.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.common.settings.Settings settings18 = settings15.getAsSettings("hi!");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.hasDynamicSetting("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate22 = indexScopedSettings19.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings24);
        boolean boolean26 = indexSettings25.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings25.settings = settings27;
        boolean boolean29 = indexSettings25.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = indexSettings25.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = indexSettings25.scopedSettings;
        java.lang.String str32 = indexScopedSettings31.nodeName();
        org.elasticsearch.index.IndexSettings indexSettings33 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15, strPredicate22, indexScopedSettings31);
        org.elasticsearch.common.unit.TimeValue timeValue34 = null; // flaky: indexSettings33.getTranslogSyncInterval();
        boolean boolean35 = false; // flaky: indexSettings33.getqueryStringAllowLeadingWildcard();
        boolean boolean36 = false; // flaky: indexSettings33.getisShadowReplicaIndex();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig37 = null; // flaky: indexSettings33.getmergePolicyConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(booleanSetting30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
// flaky:         org.junit.Assert.assertNotNull(timeValue34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertNotNull(mergePolicyConfig37);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        org.elasticsearch.common.settings.Settings settings23 = settings20.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = indexMetaData29.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = new org.elasticsearch.common.settings.IndexScopedSettings(settings23, indexScopedSettings24, indexMetaData29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings33);
        boolean boolean35 = indexSettings34.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings34.settings = settings36;
        boolean boolean38 = indexSettings34.queryStringLenient;
        boolean boolean39 = indexSettings34.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig40 = indexSettings34.mergePolicyConfig;
        int int41 = indexSettings34.getMaxRescoreWindow();
        int int42 = indexSettings34.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate43 = indexSettings34.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = indexMetaData44.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings47);
        boolean boolean49 = indexSettings48.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings48.settings = settings50;
        org.elasticsearch.common.settings.Settings settings53 = settings50.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings57.archiveUnknownOrBrokenSettings(settings60);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings60.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings66.archiveUnknownOrBrokenSettings(settings69);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60, strPredicate65, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData44, settings50, strPredicate54, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings23, strPredicate43, indexScopedSettings66);
        boolean boolean74 = indexSettings73.warmerEnabled;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData75 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData75, settings76);
        boolean boolean78 = indexSettings77.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings77.settings = settings79;
        boolean boolean81 = indexSettings77.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting82 = indexSettings77.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings83 = indexSettings77.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue84 = indexSettings77.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData85 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings86 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings87 = new org.elasticsearch.index.IndexSettings(indexMetaData85, settings86);
        boolean boolean88 = indexSettings87.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings89 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings87.settings = settings89;
        boolean boolean91 = indexSettings87.queryStringLenient;
        boolean boolean92 = indexSettings87.TTLPurgeDisabled;
        java.lang.String str93 = indexSettings87.customDataPath();
        indexSettings87.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability96 = indexSettings87.durability;
        indexSettings77.durability = durability96;
        indexSettings73.setdurability(durability96);
        java.lang.Class<?> wildcardClass99 = indexSettings73.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10000 + "'", int41 == 10000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10000 + "'", int42 == 10000);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(indexMetaData75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(booleanSetting82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(timeValue84);
        org.junit.Assert.assertNotNull(indexMetaData85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertTrue("'" + durability96 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability96.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings2);
        boolean boolean4 = indexSettings3.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings3.settings = settings5;
        boolean boolean7 = indexSettings3.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting8 = indexSettings3.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings9 = indexSettings3.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings3.refreshInterval;
        indexSettings3.setMaxRescoreWindow((int) 'a');
        org.elasticsearch.common.logging.ESLogger eSLogger13 = indexSettings3.logger;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = indexSettings3.scopedSettings;
        java.util.function.Predicate<java.lang.String> strPredicate15 = indexScopedSettings14.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.Settings settings16 = settings0.filter(strPredicate15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings0.getGroups("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings24.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings30.archiveUnknownOrBrokenSettings(settings33);
        org.elasticsearch.index.IndexSettings indexSettings35 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData19, settings24, strPredicate29, indexScopedSettings30);
        org.elasticsearch.common.settings.Setting.Property property36 = indexScopedSettings30.getScope();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state38 = indexMetaData37.getState();
        java.util.Set<java.lang.String> strSet40 = null; // flaky: indexMetaData37.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version41 = indexMetaData37.getUpgradedVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings57.archiveUnknownOrBrokenSettings(settings60);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings60.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings66.archiveUnknownOrBrokenSettings(settings69);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60, strPredicate65, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51, strPredicate54, indexScopedSettings66);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue74 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = settings51.getAsBytesSize("index.creation_date_string", byteSizeValue74);
        org.elasticsearch.common.settings.Settings settings76 = indexScopedSettings42.dryRun(settings51);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings51);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = new org.elasticsearch.common.settings.IndexScopedSettings(settings0, indexScopedSettings30, indexMetaData37);
        org.elasticsearch.common.io.stream.StreamInput streamInput79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = indexMetaData37.readFrom(streamInput79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(booleanSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(eSLogger13);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + property36 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property36.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + state38 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state38.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNotNull(version41);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNull(byteSizeValue75);
        org.junit.Assert.assertNotNull(settings76);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        boolean boolean7 = indexSettings6.queryStringLenient;
        org.elasticsearch.common.unit.TimeValue timeValue8 = indexSettings6.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher9 = indexSettings6.parseFieldMatcher;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting10 = indexSettings6.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertNotNull(parseFieldMatcher9);
        org.junit.Assert.assertNotNull(byteSizeValueSetting10);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        boolean boolean10 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("primary_terms", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.Version version5 = indexSettings2.getIndexVersionCreated();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting6 = indexSettings2.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean11 = indexScopedSettings9.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings9.archiveUnknownOrBrokenSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings13.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings19.archiveUnknownOrBrokenSettings(settings22);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings22.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings28.archiveUnknownOrBrokenSettings(settings31);
        org.elasticsearch.index.IndexSettings indexSettings33 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22, strPredicate27, indexScopedSettings28);
        org.elasticsearch.index.IndexSettings indexSettings34 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData7, settings13, strPredicate16, indexScopedSettings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings36);
        boolean boolean38 = indexSettings37.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings37.settings = settings39;
        boolean boolean41 = indexSettings37.queryStringLenient;
        boolean boolean42 = indexSettings37.TTLPurgeDisabled;
        java.lang.String str43 = indexSettings37.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings37.syncInterval;
// flaky:         indexSettings34.setRefreshInterval(timeValue44);
        org.elasticsearch.common.unit.TimeValue timeValue46 = null; // flaky: indexSettings34.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state48 = indexMetaData47.getState();
        int int49 = indexMetaData47.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap50 = indexMetaData47.getMappings();
// flaky:         indexSettings34.indexMetaData = indexMetaData47;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData52);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean56 = indexScopedSettings54.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings58 = indexScopedSettings54.archiveUnknownOrBrokenSettings(settings57);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state63 = indexMetaData62.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings65);
        boolean boolean67 = indexSettings66.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings66.settings = settings68;
        org.elasticsearch.common.settings.Settings settings71 = settings68.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate72 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData73 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData73);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings75 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean77 = indexScopedSettings75.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings79 = indexScopedSettings75.archiveUnknownOrBrokenSettings(settings78);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate83 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings84 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean86 = indexScopedSettings84.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings87 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings88 = indexScopedSettings84.archiveUnknownOrBrokenSettings(settings87);
        org.elasticsearch.index.IndexSettings indexSettings89 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData73, settings78, strPredicate83, indexScopedSettings84);
        org.elasticsearch.index.IndexSettings indexSettings90 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData62, settings68, strPredicate72, indexScopedSettings84);
        org.elasticsearch.index.IndexSettings indexSettings91 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings68);
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings68);
        indexSettings2.settings = settings68;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData94 = indexSettings2.getIndexMetaData();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNotNull(durabilitySetting6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
// flaky:         org.junit.Assert.assertNotNull(timeValue46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertTrue("'" + state48 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state48.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(indexScopedSettings54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertTrue("'" + state63 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state63.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(indexMetaData73);
        org.junit.Assert.assertNotNull(indexScopedSettings75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(indexScopedSettings84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(indexMetaData94);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.settings(builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.removeAlias("index.version.upgraded");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.putMapping("index.", "index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexSettings2.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings16.archiveUnknownOrBrokenSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings20);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap24 = indexMetaData14.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.Settings settings26 = indexMetaData14.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings32.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32, strPredicate37, indexScopedSettings38);
        java.util.function.Predicate<java.lang.String> strPredicate44 = indexScopedSettings38.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean47 = indexScopedSettings45.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings49 = indexScopedSettings45.archiveUnknownOrBrokenSettings(settings48);
        org.elasticsearch.index.IndexSettings indexSettings50 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData12, settings26, strPredicate44, indexScopedSettings45);
        org.elasticsearch.common.unit.TimeValue timeValue51 = null; // flaky: indexSettings50.refreshInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strPredicate44);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
// flaky:         org.junit.Assert.assertNotNull(timeValue51);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        java.lang.String str17 = null; // flaky: indexSettings16.nodeName;
        int int18 = 0; // flaky: indexSettings16.getMaxRescoreWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings25.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData29);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings31.archiveUnknownOrBrokenSettings(settings34);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings34.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean42 = indexScopedSettings40.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = indexScopedSettings40.archiveUnknownOrBrokenSettings(settings43);
        org.elasticsearch.index.IndexSettings indexSettings45 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData29, settings34, strPredicate39, indexScopedSettings40);
        org.elasticsearch.index.IndexSettings indexSettings46 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData19, settings25, strPredicate28, indexScopedSettings40);
// flaky:         indexSettings46.maxRescoreWindow = 1;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting49 = null; // flaky: indexSettings46.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        int int50 = 0; // flaky: indexSettings46.maxResultWindow;
        org.elasticsearch.index.translog.Translog.Durability durability51 = null; // flaky: indexSettings46.durability;
// flaky:         indexSettings16.durability = durability51;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10000 + "'", int50 == 10000);
// flaky:         org.junit.Assert.assertTrue("'" + durability51 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability51.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder1.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder1.put("index.creation_date", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.uuid", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder14.put("active_allocations", 10L);
        java.lang.Object[] objArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder22 = builder14.put(objArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder10.put("index.version.upgraded", (float) (byte) 10);
        java.lang.String str16 = builder10.remove("index.auto_expand_replicas");
        java.lang.String[] strArray20 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.data_path" };
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder10.putArray("index.blocks.metadata", strArray20);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder10.put("10.0", 100L);
        java.lang.String[] strArray26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.extendArray("active_allocations", strArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean4 = indexMetaData0.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean7 = indexScopedSettings5.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings9);
        boolean boolean11 = indexSettings10.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings10.settings = settings12;
        org.elasticsearch.common.settings.Settings settings15 = settings12.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings5.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.common.settings.Settings settings18 = settings15.getAsSettings("hi!");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.hasDynamicSetting("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate22 = indexScopedSettings19.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings24);
        boolean boolean26 = indexSettings25.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings25.settings = settings27;
        boolean boolean29 = indexSettings25.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = indexSettings25.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = indexSettings25.scopedSettings;
        java.lang.String str32 = indexScopedSettings31.nodeName();
        org.elasticsearch.index.IndexSettings indexSettings33 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15, strPredicate22, indexScopedSettings31);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting34 = null; // flaky: indexSettings33.getINDEX_TTL_DISABLE_PURGE_SETTING();
        int int35 = 0; // flaky: indexSettings33.maxResultWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(booleanSetting30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
// flaky:         org.junit.Assert.assertNotNull(booleanSetting34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10000 + "'", int35 == 10000);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        int int7 = indexSettings6.getNumberOfReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue8 = indexSettings6.flushThresholdSize;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        java.lang.Boolean boolean10 = indexSettings6.getValue(booleanSetting9);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig11 = indexSettings6.mergeSchedulerConfig;
        indexSettings6.setMaxRescoreWindow((int) '#');
        indexSettings6.warmerEnabled = true;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteSizeValue8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + true + "'", boolean10, true);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig11);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Settings settings9 = indexSettings2.nodeSettings;
        boolean boolean10 = indexSettings2.isDefaultAllowUnmappedFields();
        org.apache.lucene.index.MergePolicy mergePolicy11 = indexSettings2.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean14 = indexSettings2.matchesIndexName("_all");
        long long15 = indexSettings2.getGcDeletesInMillis();
        indexSettings2.setEnableWarmer(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData18);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings20.archiveUnknownOrBrokenSettings(settings23);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings24.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state29 = indexMetaData28.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings31);
        boolean boolean33 = indexSettings32.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings32.settings = settings34;
        org.elasticsearch.common.settings.Settings settings37 = settings34.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData39);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean43 = indexScopedSettings41.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings41.archiveUnknownOrBrokenSettings(settings44);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings44.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate49 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean52 = indexScopedSettings50.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings50.archiveUnknownOrBrokenSettings(settings53);
        org.elasticsearch.index.IndexSettings indexSettings55 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData39, settings44, strPredicate49, indexScopedSettings50);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData28, settings34, strPredicate38, indexScopedSettings50);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings34);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue58 = indexSettings57.getFlushThresholdSize();
        indexSettings2.flushThresholdSize = byteSizeValue58;
        boolean boolean60 = indexSettings2.warmerEnabled;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings62);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean66 = indexScopedSettings64.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings68);
        boolean boolean70 = indexSettings69.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings69.settings = settings71;
        org.elasticsearch.common.settings.Settings settings74 = settings71.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings75 = indexScopedSettings64.archiveUnknownOrBrokenSettings(settings74);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings75);
        int int77 = indexSettings76.maxResultWindow;
        org.elasticsearch.index.translog.Translog.Durability durability78 = indexSettings76.getdurability();
        indexSettings2.durability = durability78;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(mergePolicy11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 60000L + "'", long15 == 60000L);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + state29 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state29.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(byteSizeValue58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10000 + "'", int77 == 10000);
        org.junit.Assert.assertTrue("'" + durability78 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability78.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher10 = indexSettings2.getParseFieldMatcher();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting11 = indexSettings2.getDEFAULT_FIELD_SETTING();
        org.apache.lucene.index.MergePolicy mergePolicy12 = indexSettings2.getMergePolicy();
        boolean boolean13 = indexSettings2.isOnSharedFilesystem();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = indexSettings2.getScopedSettings();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings2.syncInterval;
        indexSettings2.TTLPurgeDisabled = false;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean19 = indexSettings2.getValue(booleanSetting18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(parseFieldMatcher10);
        org.junit.Assert.assertNotNull(strSetting11);
        org.junit.Assert.assertNotNull(mergePolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(timeValue15);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        int int11 = indexSettings2.getNumberOfShards();
        boolean boolean12 = indexSettings2.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting13 = indexSettings2.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        int int14 = indexSettings2.numberOfShards;
        boolean boolean15 = indexSettings2.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValueSetting13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.queryStringLenient;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig4 = indexSettings2.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings6);
        boolean boolean8 = indexSettings7.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings7.settings = settings9;
        int int11 = indexSettings7.maxRescoreWindow;
        java.lang.String str12 = indexSettings7.getUUID();
        org.elasticsearch.common.settings.Settings settings13 = indexSettings7.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = indexSettings7.getINDEX_GC_DELETES_SETTING();
        int int15 = indexSettings7.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = indexSettings7.scopedSettings;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig17 = indexSettings7.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexSettings7.indexMetaData;
        boolean boolean19 = indexSettings2.updateIndexMetaData(indexMetaData18);
        boolean boolean20 = indexSettings2.warmerEnabled;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings22);
        boolean boolean24 = indexSettings23.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings23.settings = settings25;
        boolean boolean27 = indexSettings23.queryStringLenient;
        boolean boolean28 = indexSettings23.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig29 = indexSettings23.mergePolicyConfig;
        int int30 = indexSettings23.getMaxRescoreWindow();
        int int31 = indexSettings23.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate32 = indexSettings23.getindexNameMatcher();
        boolean boolean33 = indexSettings23.defaultAllowUnmappedFields;
        org.elasticsearch.common.unit.TimeValue timeValue34 = indexSettings23.refreshInterval;
        indexSettings2.refreshInterval = timeValue34;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_na_" + "'", str12, "_na_");
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(timeValue34);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.loadFromSource("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings5);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings6.settings = settings8;
        org.elasticsearch.common.settings.Settings settings11 = settings8.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = new org.elasticsearch.common.settings.IndexScopedSettings(settings11, indexScopedSettings12, indexMetaData17);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray26 = settings11.getAsArray("", strArray24, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder2.extendArray("index.creation_date_string", strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder2.put("index.blocks.read", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.normalizePrefix("index.");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.putNull("index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.normalizePrefix("state-");
        java.util.concurrent.TimeUnit timeUnit39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder40 = builder34.put("index.version.created", 60000L, timeUnit39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        boolean boolean34 = indexSettings30.queryStringLenient;
        boolean boolean35 = indexSettings30.TTLPurgeDisabled;
        java.lang.String str36 = indexSettings30.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings30.syncInterval;
// flaky:         indexSettings27.setRefreshInterval(timeValue37);
        org.elasticsearch.common.unit.TimeValue timeValue39 = null; // flaky: indexSettings27.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        int int42 = indexMetaData40.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData40.getMappings();
// flaky:         indexSettings27.indexMetaData = indexMetaData40;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state56 = indexMetaData55.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings58);
        boolean boolean60 = indexSettings59.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings59.settings = settings61;
        org.elasticsearch.common.settings.Settings settings64 = settings61.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings68.archiveUnknownOrBrokenSettings(settings71);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap75 = settings71.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate76 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean79 = indexScopedSettings77.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings77.archiveUnknownOrBrokenSettings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings82 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData66, settings71, strPredicate76, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings61, strPredicate65, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings61);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings61);
        boolean boolean87 = indexSettings85.matchesIndexName("index.creation_date");
        org.elasticsearch.common.settings.Settings settings88 = indexSettings85.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(timeValue37);
// flaky:         org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + state56 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state56.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(settings88);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings30);
        boolean boolean32 = indexSettings31.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings31.settings = settings33;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings35.archiveUnknownOrBrokenSettings(settings38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        java.util.Set<java.lang.String> strSet43 = null; // flaky: indexMetaData40.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = new org.elasticsearch.common.settings.IndexScopedSettings(settings33, indexScopedSettings35, indexMetaData40);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings57.archiveUnknownOrBrokenSettings(settings60);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings60.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings66.archiveUnknownOrBrokenSettings(settings69);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60, strPredicate65, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51, strPredicate54, indexScopedSettings66);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue74 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = settings51.getAsBytesSize("index.creation_date_string", byteSizeValue74);
        org.elasticsearch.common.settings.Settings settings76 = indexScopedSettings44.applySettings(settings51);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings76.getGroups("index.blocks.write", false);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings76);
        org.elasticsearch.Version version81 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index83 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNull(byteSizeValue75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(version81);
        org.junit.Assert.assertNull(index83);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        int int4 = indexSettings2.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig5 = indexSettings2.getmergePolicyConfig();
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings2.refreshInterval;
        java.lang.String str7 = indexSettings2.customDataPath();
        indexSettings2.setMaxResultWindow((int) ' ');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig5);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.settings(settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder1.settings(settings11);
        boolean boolean17 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings11);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        int int4 = indexSettings2.numberOfShards;
        boolean boolean5 = indexSettings2.isQueryStringLenient();
        indexSettings2.setwarmerEnabled(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings9);
        boolean boolean11 = indexSettings10.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings10.settings = settings12;
        boolean boolean14 = indexSettings10.queryStringLenient;
        boolean boolean15 = indexSettings10.TTLPurgeDisabled;
        java.lang.String str16 = indexSettings10.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings10.syncInterval;
        indexSettings2.refreshInterval = timeValue17;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig19 = indexSettings2.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig19);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("hi!");
        java.lang.String str6 = builder5.index();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        int int5 = indexSettings2.getMaxResultWindow();
        long long6 = indexSettings2.gcDeletesInMillis;
        long long7 = indexSettings2.getGcDeletesInMillis();
        java.lang.String str8 = indexSettings2.customDataPath();
        int int9 = indexSettings2.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10000 + "'", int5 == 10000);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 60000L + "'", long6 == 60000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 60000L + "'", long7 == 60000L);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getTranslogDurability();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings2.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting13 = indexSettings2.getMAX_RESULT_WINDOW_SETTING();
        boolean boolean14 = indexSettings2.getqueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig15 = indexSettings2.mergePolicyConfig;
        indexSettings2.setTTLPurgeDisabled(false);
        boolean boolean18 = indexSettings2.getdefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(intSetting13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        long long29 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.putAlias(builder31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        boolean boolean5 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig6 = indexSettings2.mergePolicyConfig;
        org.elasticsearch.common.unit.TimeValue timeValue7 = indexSettings2.getDEFAULT_GC_DELETES();
        indexSettings2.maxResultWindow = 10000;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(mergePolicyConfig6);
        org.junit.Assert.assertNotNull(timeValue7);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        java.lang.String str16 = indexSettings15.getUUID();
        boolean boolean17 = indexSettings15.getisShadowReplicaIndex();
        boolean boolean18 = indexSettings15.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_na_" + "'", str16, "_na_");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.number_of_shards");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.number_of_shards]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder0.put("index.version.upgraded_string", "index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.put("index.version.created_string", 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = settings13.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings23);
        boolean boolean25 = indexSettings24.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings24.settings = settings26;
        org.elasticsearch.common.settings.Settings settings29 = settings26.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings19.archiveUnknownOrBrokenSettings(settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings30);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings37);
        boolean boolean39 = indexSettings38.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings38.settings = settings40;
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings44 = indexScopedSettings33.archiveUnknownOrBrokenSettings(settings43);
        boolean boolean46 = indexScopedSettings33.isPrivateSetting("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state48 = indexMetaData47.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = new org.elasticsearch.common.settings.IndexScopedSettings(settings30, indexScopedSettings33, indexMetaData47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings52);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData51);
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap56 = settings55.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings55);
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder58.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder59.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings66 = builder65.build();
        org.elasticsearch.common.settings.Settings.Builder builder67 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder67.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap69 = builder67.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder65.put(strMap69);
        org.elasticsearch.common.settings.Settings.Builder builder71 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder71.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder72.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder75.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings79 = builder78.build();
        org.elasticsearch.common.settings.Settings.Builder builder80 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder80.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap82 = builder80.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder78.put(strMap82);
        boolean boolean85 = indexScopedSettings50.updateSettings(settings55, builder70, builder83, "state-");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData87 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings88 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings89 = new org.elasticsearch.index.IndexSettings(indexMetaData87, settings88);
        boolean boolean90 = indexSettings89.isQueryStringLenient();
        java.lang.String str91 = indexSettings89.getNodeName();
        java.lang.Class<?> wildcardClass92 = indexSettings89.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder93 = builder83.put("", (java.lang.Class) wildcardClass92);
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder7.put("archived.", (java.lang.Class) wildcardClass92);
        java.lang.String str96 = builder7.get("index.shared_filesystem");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertTrue("'" + state48 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state48.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(indexMetaData87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNull(str96);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData3.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings6);
        boolean boolean8 = indexSettings7.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings7.settings = settings9;
        org.elasticsearch.common.settings.Settings settings12 = settings9.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings16.archiveUnknownOrBrokenSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings19.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings25.archiveUnknownOrBrokenSettings(settings28);
        org.elasticsearch.index.IndexSettings indexSettings30 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData14, settings19, strPredicate24, indexScopedSettings25);
        org.elasticsearch.index.IndexSettings indexSettings31 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData3, settings9, strPredicate13, indexScopedSettings25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap33 = indexMetaData3.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData39);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean43 = indexScopedSettings41.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings41.archiveUnknownOrBrokenSettings(settings44);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder38.settings(settings45);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings45);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings45);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamInput streamInput54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = indexMetaData0.readFrom(streamInput54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.settings(settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder1.settings(settings11);
        java.lang.String str17 = builder1.index();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder1.putAlias(builder18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        boolean boolean24 = indexSettings23.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings23.getALLOW_UNMAPPED();
        boolean boolean26 = indexSettings23.isQueryStringLenient();
        boolean boolean27 = indexSettings23.queryStringLenient;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.upgraded_string", (float) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder10.internalMap();
        java.lang.String str14 = builder10.get("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.number_of_shards", "index.version.minimum_compatible");
        java.lang.Class class20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("index.creation_date", class20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        java.lang.String str29 = null; // flaky: indexSettings28.nodeName;
        org.elasticsearch.common.unit.TimeValue timeValue30 = null; // flaky: indexSettings28.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting31 = null; // flaky: indexSettings28.getINDEX_WARMER_ENABLED_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
// flaky:         org.junit.Assert.assertNotNull(timeValue30);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting31);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        boolean boolean12 = indexSettings2.warmerEnabled;
        org.elasticsearch.Version version13 = indexSettings2.getversion();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting14 = indexSettings2.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings2.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(intSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings6.archiveUnknownOrBrokenSettings(settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData11.getState();
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData11.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = new org.elasticsearch.common.settings.IndexScopedSettings(settings4, indexScopedSettings6, indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = indexMetaData16.getState();
        java.util.Set<java.lang.String> strSet19 = null; // flaky: indexMetaData16.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData16.getCustoms();
        int int21 = indexMetaData16.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData11.diff(indexMetaData16);
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder24.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder25.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder25.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings settings35 = builder34.build();
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings35);
        indexSettings36.setMaxResultWindow((int) (byte) -1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.number_of_replicas]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        boolean boolean30 = indexSettings29.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings29.settings = settings31;
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings34);
        boolean boolean37 = indexScopedSettings24.isPrivateSetting("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = indexMetaData38.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = new org.elasticsearch.common.settings.IndexScopedSettings(settings21, indexScopedSettings24, indexMetaData38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData42);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap47 = settings46.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings57 = builder56.build();
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder58.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap60 = builder58.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder56.put(strMap60);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder62.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings70 = builder69.build();
        org.elasticsearch.common.settings.Settings.Builder builder71 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder71.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = builder71.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder69.put(strMap73);
        boolean boolean76 = indexScopedSettings41.updateSettings(settings46, builder61, builder74, "state-");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData78, settings79);
        boolean boolean81 = indexSettings80.isQueryStringLenient();
        java.lang.String str82 = indexSettings80.getNodeName();
        java.lang.Class<?> wildcardClass83 = indexSettings80.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder74.put("", (java.lang.Class) wildcardClass83);
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder84.put("index.creation_date_string", (int) '4');
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder87.put("index.shadow_replicas", (double) '4');
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder92 = builder87.put(objDictionary91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        boolean boolean34 = indexSettings30.queryStringLenient;
        boolean boolean35 = indexSettings30.TTLPurgeDisabled;
        java.lang.String str36 = indexSettings30.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings30.syncInterval;
// flaky:         indexSettings27.setRefreshInterval(timeValue37);
        org.elasticsearch.common.unit.TimeValue timeValue39 = null; // flaky: indexSettings27.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        int int42 = indexMetaData40.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData40.getMappings();
// flaky:         indexSettings27.indexMetaData = indexMetaData40;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state56 = indexMetaData55.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings58);
        boolean boolean60 = indexSettings59.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings59.settings = settings61;
        org.elasticsearch.common.settings.Settings settings64 = settings61.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings68.archiveUnknownOrBrokenSettings(settings71);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap75 = settings71.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate76 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean79 = indexScopedSettings77.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings77.archiveUnknownOrBrokenSettings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings82 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData66, settings71, strPredicate76, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings61, strPredicate65, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings61);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings61);
        org.elasticsearch.common.settings.Settings settings87 = settings61.getAsSettings("_all");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap90 = settings87.getGroups("state-", false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(timeValue37);
// flaky:         org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + state56 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state56.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strMap90);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        java.lang.String str4 = builder1.index();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = builder1.mapping("index.auto_expand_replicas");
        // The following exception was thrown during execution in test generation
        try {
            long long8 = builder1.primaryTerm((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index.creation_date_string" + "'", str4, "index.creation_date_string");
        org.junit.Assert.assertNull(mappingMetaData6);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings8 = builder7.build();
        org.elasticsearch.common.settings.Settings settings9 = builder7.build();
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder12.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder12.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder12.put("index.creation_date", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder23.loadFromSource("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder25.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder29.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder37.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder38.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder38.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder47.replacePropertyPlaceholders();
        java.lang.String[] strArray56 = new java.lang.String[] { "index.blocks.write", "index.uuid", "index.priority", "index.blocks.read", "index.version.upgraded", "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder48.putArray("_na_", (java.util.List<java.lang.String>) strList57);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder29.putArray("archived.", (java.util.List<java.lang.String>) strList57);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder25.putArray("index.priority", (java.util.List<java.lang.String>) strList57);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder7.putArray("", (java.util.List<java.lang.String>) strList57);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        boolean boolean5 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig6 = indexSettings2.mergePolicyConfig;
        indexSettings2.gcDeletesInMillis = (byte) 100;
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.getTranslogSyncInterval();
        indexSettings2.maxRescoreWindow = '#';
        boolean boolean12 = indexSettings2.isShadowReplicaIndex;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = indexSettings2.scopedSettings;
        java.util.function.Predicate<java.lang.String> strPredicate14 = indexSettings2.getindexNameMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(mergePolicyConfig6);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(strPredicate14);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.Version version17 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long19 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mappingOrDefault("hi!");
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.xcontent.XContentParser xContentParser10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings12);
        boolean boolean14 = indexSettings13.isQueryStringLenient();
        java.lang.String str15 = indexSettings13.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting16 = indexSettings13.getDEFAULT_FIELD_SETTING();
        indexSettings13.setEnableWarmer(true);
        org.elasticsearch.common.settings.Settings settings19 = indexSettings13.nodeSettings;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher20 = indexSettings13.parseFieldMatcher;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = indexMetaData0.fromXContent(xContentParser10, parseFieldMatcher20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSetting16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(parseFieldMatcher20);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.put("index.number_of_shards", (long) 100);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.priority", "index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        org.elasticsearch.common.settings.Settings settings17 = indexMetaData15.getSettings();
        org.elasticsearch.common.unit.SizeValue sizeValue19 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue20 = settings17.getAsSize("index.creation_date", sizeValue19);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder11.put(settings17);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNull(sizeValue20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings19);
        boolean boolean21 = indexSettings20.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings20.settings = settings22;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings22.getAsGroups(true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings22.getGroups("index.auto_expand_replicas", true);
        java.lang.String str30 = settings22.get("index.blocks.metadata");
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings22);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings22);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(settings32);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getTranslogDurability();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting12 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        boolean boolean14 = indexSettings2.matchesIndexName("index.blocks.write");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(booleanSetting12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.common.unit.TimeValue timeValue7 = indexSettings6.getTranslogSyncInterval();
        boolean boolean8 = indexSettings6.hasCustomDataPath();
        indexSettings6.gcDeletesInMillis = 1L;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting5 = indexSettings2.getDEFAULT_FIELD_SETTING();
        indexSettings2.setEnableWarmer(true);
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings10);
        boolean boolean12 = indexSettings11.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings11.settings = settings13;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings15.archiveUnknownOrBrokenSettings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData20.getState();
        java.util.Set<java.lang.String> strSet23 = null; // flaky: indexMetaData20.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = new org.elasticsearch.common.settings.IndexScopedSettings(settings13, indexScopedSettings15, indexMetaData20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData25.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = new org.elasticsearch.common.settings.IndexScopedSettings(settings8, indexScopedSettings24, indexMetaData25);
        org.elasticsearch.common.settings.Setting.Property property28 = indexScopedSettings27.getScope();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSetting5);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + property28 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property28.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData0.includeFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = indexMetaData0.readFrom(streamInput31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.index.translog.Translog.Durability durability10 = indexSettings2.durability;
        boolean boolean11 = indexSettings2.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting12 = indexSettings2.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher13 = indexSettings2.parseFieldMatcher;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig14 = indexSettings2.getmergePolicyConfig();
        boolean boolean15 = indexSettings2.queryStringLenient;
        boolean boolean16 = indexSettings2.TTLPurgeDisabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + durability10 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability10.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(intSetting12);
        org.junit.Assert.assertNotNull(parseFieldMatcher13);
        org.junit.Assert.assertNotNull(mergePolicyConfig14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.number_of_replicas");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.number_of_replicas]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        boolean boolean7 = indexSettings6.getqueryStringAnalyzeWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue8 = indexSettings6.syncInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings10);
        boolean boolean12 = indexSettings11.isQueryStringLenient();
        java.lang.String str13 = indexSettings11.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting14 = indexSettings11.getDEFAULT_FIELD_SETTING();
        indexSettings11.setEnableWarmer(true);
        boolean boolean17 = indexSettings11.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting18 = indexSettings11.getINDEX_TTL_DISABLE_PURGE_SETTING();
        java.lang.Boolean boolean19 = indexSettings6.getValue(booleanSetting18);
        int int20 = indexSettings6.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSetting14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(booleanSetting18);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + false + "'", boolean19, false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version10 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(version10);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        indexSettings2.TTLPurgeDisabled = true;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig10 = indexSettings2.getmergePolicyConfig();
        boolean boolean11 = indexSettings2.getqueryStringLenient();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting12 = indexSettings2.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(mergePolicyConfig10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(timeValueSetting12);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting8 = indexSettings2.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.getDEFAULT_GC_DELETES();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version14 = indexMetaData10.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        long long16 = indexMetaData10.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData10.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        boolean boolean20 = indexMetaData10.isSameUUID("state-");
        boolean boolean22 = indexMetaData10.isSameUUID("index.creation_date");
        boolean boolean23 = indexSettings2.updateIndexMetaData(indexMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(strSetting8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.upgraded_string", (float) 100);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder10.normalizePrefix("_na_");
        java.lang.String str14 = builder10.get("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings18);
        boolean boolean20 = indexSettings19.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings19.settings = settings21;
        org.elasticsearch.common.settings.Settings settings24 = settings21.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings25.archiveUnknownOrBrokenSettings(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state31 = indexMetaData30.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = new org.elasticsearch.common.settings.IndexScopedSettings(settings24, indexScopedSettings25, indexMetaData30);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray39 = settings24.getAsArray("", strArray37, (java.lang.Boolean) true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        boolean boolean43 = indexSettings42.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings42.settings = settings44;
        boolean boolean46 = indexSettings42.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting47 = indexSettings42.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = indexSettings42.scopedSettings;
        indexSettings42.maxRescoreWindow = ' ';
        indexSettings42.gcDeletesInMillis = (short) 1;
        org.elasticsearch.common.settings.Settings settings53 = indexSettings42.nodeSettings;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings53.getAsGroups(false);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings58);
        boolean boolean60 = indexSettings59.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings59.settings = settings61;
        org.elasticsearch.common.settings.Settings settings64 = settings61.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean67 = indexScopedSettings65.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings69 = indexScopedSettings65.archiveUnknownOrBrokenSettings(settings68);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state71 = indexMetaData70.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings72 = new org.elasticsearch.common.settings.IndexScopedSettings(settings64, indexScopedSettings65, indexMetaData70);
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray79 = settings64.getAsArray("", strArray77, (java.lang.Boolean) true);
        java.lang.String[] strArray81 = settings53.getAsArray("index.shared_filesystem.recover_on_any_node", strArray77, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder10.put("index.version.minimum_compatible", "hi!", strArray37, strArray77);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + state31 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state31.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(booleanSetting47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertTrue("'" + state71 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state71.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        boolean boolean10 = indexSettings2.queryStringLenient;
        java.lang.String str11 = indexSettings2.getNodeName();
        org.elasticsearch.Version version12 = indexSettings2.getIndexVersionCreated();
        boolean boolean13 = indexSettings2.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.index.translog.Translog.Durability durability14 = indexSettings2.getdurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings17.archiveUnknownOrBrokenSettings(settings20);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings21.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings21);
        org.elasticsearch.common.settings.Settings settings25 = indexMetaData15.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap26 = indexMetaData15.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = indexMetaData15.getState();
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings36 = builder35.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings38);
        boolean boolean40 = indexSettings39.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings39.settings = settings41;
        boolean boolean43 = indexSettings39.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting44 = indexSettings39.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings45 = indexSettings39.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue46 = indexSettings39.refreshInterval;
        java.lang.String str47 = indexSettings39.defaultField;
        indexSettings39.setMaxRescoreWindow((int) (byte) 0);
        boolean boolean50 = indexSettings39.isShadowReplicaIndex;
        boolean boolean51 = indexSettings39.isWarmerEnabled();
        int int52 = indexSettings39.maxResultWindow;
        java.util.function.Predicate<java.lang.String> strPredicate53 = indexSettings39.indexNameMatcher;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings55);
        boolean boolean57 = indexSettings56.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings56.settings = settings58;
        int int60 = indexSettings56.maxRescoreWindow;
        java.lang.String str61 = indexSettings56.getUUID();
        org.elasticsearch.common.settings.Settings settings62 = indexSettings56.nodeSettings;
        boolean boolean63 = indexSettings56.isOnSharedFilesystem();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting64 = indexSettings56.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = indexSettings56.scopedSettings;
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings36, strPredicate53, indexScopedSettings65);
        indexSettings2.settings = settings36;
        indexSettings2.setMaxRescoreWindow((int) 'a');
        int int70 = indexSettings2.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + durability14 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability14.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap26);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(booleanSetting44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(timeValue46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "_all" + "'", str47, "_all");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10000 + "'", int52 == 10000);
        org.junit.Assert.assertNotNull(strPredicate53);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10000 + "'", int60 == 10000);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "_na_" + "'", str61, "_na_");
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intSetting64);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 97 + "'", int70 == 97);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings2.nodeSettings;
        boolean boolean11 = indexSettings2.warmerEnabled;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting12 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(booleanSetting12);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        boolean boolean10 = indexSettings2.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Settings settings11 = indexSettings2.nodeSettings;
        boolean boolean12 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.Version version13 = indexSettings2.version;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(version13);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap10 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            long long14 = builder12.primaryTerm(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int9 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings11);
        boolean boolean13 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings12.settings = settings14;
        boolean boolean16 = indexSettings12.queryStringLenient;
        boolean boolean17 = indexSettings12.TTLPurgeDisabled;
        long long18 = indexSettings12.getGcDeletesInMillis();
        boolean boolean19 = indexSettings12.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting20 = indexSettings12.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.settings.Settings settings21 = indexSettings12.getNodeSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings23);
        boolean boolean25 = indexSettings24.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings24.settings = settings26;
        int int28 = indexSettings24.maxRescoreWindow;
        java.lang.String str29 = indexSettings24.getUUID();
        org.elasticsearch.common.settings.Settings settings30 = indexSettings24.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting31 = indexSettings24.getINDEX_GC_DELETES_SETTING();
        int int32 = indexSettings24.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = indexSettings24.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings35);
        boolean boolean37 = indexSettings36.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings36.settings = settings38;
        org.elasticsearch.common.settings.Settings settings41 = settings38.getAsSettings("");
        java.lang.String str43 = settings41.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder44 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder44.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder52 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder52.replacePropertyPlaceholders();
        boolean boolean55 = indexScopedSettings33.updateDynamicSettings(settings41, builder48, builder53, "_all");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = indexScopedSettings33.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData57);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean61 = indexScopedSettings59.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings59.archiveUnknownOrBrokenSettings(settings62);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate67 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings68.archiveUnknownOrBrokenSettings(settings71);
        org.elasticsearch.index.IndexSettings indexSettings73 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData57, settings62, strPredicate67, indexScopedSettings68);
        org.elasticsearch.index.Index index74 = indexMetaData57.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state75 = indexMetaData57.getState();
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = settings76.getAsSettings("index.number_of_replicas");
        org.elasticsearch.index.IndexSettings indexSettings79 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings78);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state80 = indexMetaData57.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings81 = new org.elasticsearch.common.settings.IndexScopedSettings(settings21, indexScopedSettings56, indexMetaData57);
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 60000L + "'", long18 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSetting20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "_na_" + "'", str29, "_na_");
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(timeValueSetting31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10000 + "'", int32 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNull(index74);
        org.junit.Assert.assertTrue("'" + state75 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state75.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertTrue("'" + state80 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state80.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings4 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData6.getState();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData6.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version10 = indexMetaData6.getUpgradedVersion();
        org.elasticsearch.Version version11 = settings4.getAsVersion("", version10);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings16.archiveUnknownOrBrokenSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = indexMetaData24.getState();
        java.util.Set<java.lang.String> strSet27 = null; // flaky: indexMetaData24.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData24.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff29 = indexMetaData14.diff(indexMetaData24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.Version version31 = indexMetaData14.getCreationVersion();
        org.elasticsearch.Version version32 = settings12.getAsVersion("index.auto_expand_replicas", version31);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(indexMetaDataDiff29);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(version32);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher8 = indexSettings2.parseFieldMatcher;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings15);
        int int19 = indexSettings18.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData20);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings26.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state31 = indexMetaData30.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings33);
        boolean boolean35 = indexSettings34.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings34.settings = settings36;
        org.elasticsearch.common.settings.Settings settings39 = settings36.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData41);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings47 = indexScopedSettings43.archiveUnknownOrBrokenSettings(settings46);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings46.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean54 = indexScopedSettings52.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings56 = indexScopedSettings52.archiveUnknownOrBrokenSettings(settings55);
        org.elasticsearch.index.IndexSettings indexSettings57 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData41, settings46, strPredicate51, indexScopedSettings52);
        org.elasticsearch.index.IndexSettings indexSettings58 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData30, settings36, strPredicate40, indexScopedSettings52);
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings36);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings61);
        boolean boolean63 = indexSettings62.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings62.settings = settings64;
        org.elasticsearch.common.settings.Settings settings67 = settings64.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings68.archiveUnknownOrBrokenSettings(settings71);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData73 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state74 = indexMetaData73.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings75 = new org.elasticsearch.common.settings.IndexScopedSettings(settings67, indexScopedSettings68, indexMetaData73);
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray82 = settings67.getAsArray("", strArray80, (java.lang.Boolean) true);
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings67);
        boolean boolean84 = indexSettings83.getqueryStringAnalyzeWildcard();
        org.elasticsearch.index.translog.Translog.Durability durability85 = indexSettings83.durability;
        indexSettings18.durability = durability85;
        indexSettings2.setdurability(durability85);
        java.lang.String str88 = indexSettings2.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + state31 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state31.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(indexMetaData73);
        org.junit.Assert.assertTrue("'" + state74 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state74.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + durability85 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability85.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "_all" + "'", str88, "_all");
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexSettings2.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings16.archiveUnknownOrBrokenSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings20);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap24 = indexMetaData14.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.Settings settings26 = indexMetaData14.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings32.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32, strPredicate37, indexScopedSettings38);
        java.util.function.Predicate<java.lang.String> strPredicate44 = indexScopedSettings38.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean47 = indexScopedSettings45.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings49 = indexScopedSettings45.archiveUnknownOrBrokenSettings(settings48);
        org.elasticsearch.index.IndexSettings indexSettings50 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData12, settings26, strPredicate44, indexScopedSettings45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom53 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder51.putCustom("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", custom53);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strPredicate44);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.upgraded_string", (float) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder10.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder10.put("index.shared_filesystem.recover_on_any_node", (float) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("hi!", false);
        java.lang.String str20 = builder15.remove("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher24 = indexSettings23.getParseFieldMatcher();
        java.lang.String str25 = indexSettings23.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings23.getDEFAULT_GC_DELETES();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(parseFieldMatcher24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(timeValue26);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        int int16 = indexSettings15.maxResultWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings18);
        boolean boolean20 = indexSettings19.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings19.settings = settings21;
        int int23 = indexSettings19.maxRescoreWindow;
        java.lang.String str24 = indexSettings19.getUUID();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings19.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings19.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        boolean boolean30 = indexSettings29.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings29.settings = settings31;
        boolean boolean33 = indexSettings29.queryStringLenient;
        boolean boolean34 = indexSettings29.TTLPurgeDisabled;
        java.lang.String str35 = indexSettings29.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue36 = indexSettings29.syncInterval;
        indexSettings19.setRefreshInterval(timeValue36);
        indexSettings15.setGCDeletes(timeValue36);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig39 = indexSettings15.getMergeSchedulerConfig();
        java.lang.String str40 = indexSettings15.nodeName;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "_na_" + "'", str24, "_na_");
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings4 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData6.getState();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData6.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version10 = indexMetaData6.getUpgradedVersion();
        org.elasticsearch.Version version11 = settings4.getAsVersion("", version10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        int int19 = indexSettings15.maxRescoreWindow;
        java.lang.String str20 = indexSettings15.getUUID();
        org.elasticsearch.common.settings.Settings settings21 = indexSettings15.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings15.getINDEX_GC_DELETES_SETTING();
        int int23 = indexSettings15.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = indexSettings15.scopedSettings;
        boolean boolean25 = indexSettings15.warmerEnabled;
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings15.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue27 = settings4.getAsTime("index.auto_expand_replicas", timeValue26);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_na_" + "'", str20, "_na_");
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(timeValue27);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap18 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long20 = builder19.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData4.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings17.archiveUnknownOrBrokenSettings(settings20);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings20.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings26.archiveUnknownOrBrokenSettings(settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20, strPredicate25, indexScopedSettings26);
        org.elasticsearch.index.IndexSettings indexSettings32 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData4, settings10, strPredicate14, indexScopedSettings26);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff33 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaDataDiff33);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings4 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings3);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.shadow_replicas");
        java.lang.Boolean boolean9 = settings4.getAsBoolean("index.number_of_replicas", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings4);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings4.getGroups("active_allocations", false);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + false + "'", boolean9, false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
// flaky:         indexSettings27.maxRescoreWindow = 1;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting30 = null; // flaky: indexSettings27.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
// flaky:         indexSettings27.setEnableWarmer(false);
        boolean boolean33 = false; // flaky: indexSettings27.queryStringLenient;
        long long34 = 0L; // flaky: indexSettings27.gcDeletesInMillis;
        boolean boolean35 = false; // flaky: indexSettings27.isShadowReplicaIndex;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 60000L + "'", long34 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        org.apache.lucene.index.MergePolicy mergePolicy9 = indexSettings2.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue10 = null;
        indexSettings2.refreshInterval = timeValue10;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertNotNull(mergePolicy9);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings8 = builder7.build();
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder9.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder9.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder7.put(strMap11);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.version.created_string", true);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder15.loadFromSource("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexSettings2.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap14 = indexMetaData12.getMappings();
        int int15 = indexMetaData12.getNumberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = indexMetaData12.primaryTerm((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        int int4 = indexSettings2.numberOfShards;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig5 = indexSettings2.mergeSchedulerConfig;
        org.elasticsearch.common.settings.Settings settings6 = indexSettings2.getNodeSettings();
        java.lang.String[] strArray8 = settings6.getAsArray("index.creation_date");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray8);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder10.put("index.version.upgraded", (float) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder14.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData19.getState();
        byte byte21 = state20.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder18.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom24 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder18.putCustom("index.auto_expand_replicas", custom24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = indexMetaData29.getState();
        byte byte31 = state30.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder28.state(state30);
        java.lang.String[] strArray60 = new java.lang.String[] { "index.version.minimum_compatible", "index.priority", "index.version.created", "index.version.minimum_compatible", "index.blocks.write", "index.blocks.read", "index.version.upgraded", "hi!", "index.", "primary_terms", "index.version.created_string", "", "", "archived.", "index.blocks.write", "hi!", "archived.", "index.version.created_string", "index.priority", "index.blocks.read", "archived.", "index.shared_filesystem.recover_on_any_node", "index.uuid", "index.uuid", "active_allocations", "index.priority" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder28.putActiveAllocationIds((int) (short) -1, (java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder18.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet61);
        java.lang.Class<?> wildcardClass65 = strSet61.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder15.put("true", (java.lang.Class) wildcardClass65);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder15.put("primary_terms", false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte21 + "' != '" + (byte) 0 + "'", byte21 == (byte) 0);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte31 + "' != '" + (byte) 0 + "'", byte31 == (byte) 0);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.TTLPurgeDisabled;
        int int4 = indexSettings2.getMaxRescoreWindow();
        indexSettings2.gcDeletesInMillis = '#';
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting7 = indexSettings2.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(timeValueSetting7);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.queryStringLenient;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig4 = indexSettings2.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings6);
        boolean boolean8 = indexSettings7.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings7.settings = settings9;
        int int11 = indexSettings7.maxRescoreWindow;
        java.lang.String str12 = indexSettings7.getUUID();
        org.elasticsearch.common.settings.Settings settings13 = indexSettings7.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = indexSettings7.getINDEX_GC_DELETES_SETTING();
        int int15 = indexSettings7.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = indexSettings7.scopedSettings;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig17 = indexSettings7.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexSettings7.indexMetaData;
        boolean boolean19 = indexSettings2.updateIndexMetaData(indexMetaData18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData18);
        org.elasticsearch.common.io.stream.StreamInput streamInput21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = indexMetaData18.readFrom(streamInput21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_na_" + "'", str12, "_na_");
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.index.translog.Translog.Durability durability11 = null;
        indexSettings2.durability = durability11;
        boolean boolean13 = indexSettings2.getqueryStringAllowLeadingWildcard();
        boolean boolean14 = indexSettings2.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting15 = indexSettings2.getQUERY_STRING_ANALYZE_WILDCARD();
        boolean boolean16 = indexSettings2.hasCustomDataPath();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = indexSettings2.flushThresholdSize;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(booleanSetting15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteSizeValue17);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("index.version.upgraded_string", (float) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder9.put("hi!", (float) 10L);
        java.lang.String str17 = builder9.remove("true");
        java.io.InputStream inputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder20 = builder9.loadFromStream("index.", inputStream19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings6.archiveUnknownOrBrokenSettings(settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData11.getState();
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData11.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = new org.elasticsearch.common.settings.IndexScopedSettings(settings4, indexScopedSettings6, indexMetaData11);
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet16 = indexScopedSettings6.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = indexScopedSettings6.getDEFAULT_SCOPED_SETTINGS();
        java.util.function.Predicate<java.lang.String> strPredicate18 = indexScopedSettings6.getINDEX_SETTINGS_KEY_PREDICATE();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(wildcardSettingSet16);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertNotNull(strPredicate18);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        org.elasticsearch.common.settings.Settings settings23 = settings20.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = indexMetaData29.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = new org.elasticsearch.common.settings.IndexScopedSettings(settings23, indexScopedSettings24, indexMetaData29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings33);
        boolean boolean35 = indexSettings34.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings34.settings = settings36;
        boolean boolean38 = indexSettings34.queryStringLenient;
        boolean boolean39 = indexSettings34.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig40 = indexSettings34.mergePolicyConfig;
        int int41 = indexSettings34.getMaxRescoreWindow();
        int int42 = indexSettings34.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate43 = indexSettings34.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = indexMetaData44.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings47);
        boolean boolean49 = indexSettings48.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings48.settings = settings50;
        org.elasticsearch.common.settings.Settings settings53 = settings50.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings57.archiveUnknownOrBrokenSettings(settings60);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings60.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings66.archiveUnknownOrBrokenSettings(settings69);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60, strPredicate65, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData44, settings50, strPredicate54, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings23, strPredicate43, indexScopedSettings66);
        boolean boolean74 = indexSettings73.warmerEnabled;
        java.lang.String str75 = indexSettings73.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue76 = indexSettings73.getRefreshInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting77 = indexSettings73.getMAX_RESCORE_WINDOW_SETTING();
        long long78 = indexSettings73.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10000 + "'", int41 == 10000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10000 + "'", int42 == 10000);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(timeValue76);
        org.junit.Assert.assertNotNull(intSetting77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 60000L + "'", long78 == 60000L);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean4 = indexMetaData0.isSameUUID("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = settings10.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings20);
        boolean boolean22 = indexSettings21.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings21.settings = settings23;
        org.elasticsearch.common.settings.Settings settings26 = settings23.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings16.archiveUnknownOrBrokenSettings(settings26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings27);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings34);
        boolean boolean36 = indexSettings35.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings35.settings = settings37;
        org.elasticsearch.common.settings.Settings settings40 = settings37.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings30.archiveUnknownOrBrokenSettings(settings40);
        boolean boolean43 = indexScopedSettings30.isPrivateSetting("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = indexMetaData44.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData44);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = new org.elasticsearch.common.settings.IndexScopedSettings(settings27, indexScopedSettings30, indexMetaData44);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap53 = settings52.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings52);
        org.elasticsearch.common.settings.Settings.Builder builder55 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder55.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder59.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings63 = builder62.build();
        org.elasticsearch.common.settings.Settings.Builder builder64 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder64.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap66 = builder64.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder62.put(strMap66);
        org.elasticsearch.common.settings.Settings.Builder builder68 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder68.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder69.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder72.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings76 = builder75.build();
        org.elasticsearch.common.settings.Settings.Builder builder77 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder77.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap79 = builder77.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder75.put(strMap79);
        boolean boolean82 = indexScopedSettings47.updateSettings(settings52, builder67, builder80, "state-");
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder80.put("index.shared_filesystem.recover_on_any_node", 0.0d);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder85.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder85.putNull("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder88.putNull("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder91 = builder5.settings(builder88);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting5 = indexSettings2.getDEFAULT_FIELD_SETTING();
        indexSettings2.setEnableWarmer(true);
        boolean boolean8 = indexSettings2.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexSettings2.indexMetaData;
        boolean boolean11 = indexSettings2.getdefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSetting5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        long long4 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.creationDate(10L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder3.creationDate((long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = builder10.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfReplicas for index [index.creation_date_string]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexSettings2.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap14 = indexMetaData12.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = settings20.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings24);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings30);
        boolean boolean32 = indexSettings31.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings31.settings = settings33;
        org.elasticsearch.common.settings.Settings settings36 = settings33.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings26.archiveUnknownOrBrokenSettings(settings36);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings37);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings37);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder40 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params41 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder42 = settings37.toXContent(xContentBuilder40, params41);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings44);
        boolean boolean46 = indexSettings45.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings45.settings = settings47;
        boolean boolean49 = indexSettings45.queryStringLenient;
        boolean boolean50 = indexSettings45.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig51 = indexSettings45.mergePolicyConfig;
        int int52 = indexSettings45.getMaxRescoreWindow();
        int int53 = indexSettings45.maxRescoreWindow;
        int int54 = indexSettings45.getNumberOfShards();
        boolean boolean55 = indexSettings45.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting56 = indexSettings45.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        java.lang.String str57 = indexSettings45.customDataPath();
        java.lang.String str58 = indexSettings45.defaultField;
        java.lang.String str59 = indexSettings45.defaultField;
        java.util.function.Predicate<java.lang.String> strPredicate60 = indexSettings45.indexNameMatcher;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean63 = indexScopedSettings61.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = indexScopedSettings61.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings37, strPredicate60, indexScopedSettings61);
        java.lang.Class<?> wildcardClass66 = indexSettings65.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(params41);
        org.junit.Assert.assertNull(xContentBuilder42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10000 + "'", int52 == 10000);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10000 + "'", int53 == 10000);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(timeValueSetting56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "_all" + "'", str58, "_all");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "_all" + "'", str59, "_all");
        org.junit.Assert.assertNotNull(strPredicate60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        indexSettings2.TTLPurgeDisabled = true;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting10 = indexSettings2.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(booleanSetting10);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        boolean boolean10 = indexSettings9.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings9.settings = settings11;
        org.elasticsearch.common.settings.Settings settings14 = settings11.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings4.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings20);
        boolean boolean22 = indexSettings21.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings21.settings = settings23;
        org.elasticsearch.common.settings.Settings settings26 = settings23.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings30.archiveUnknownOrBrokenSettings(settings33);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings33.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData28, settings33, strPredicate38, indexScopedSettings39);
        org.elasticsearch.index.IndexSettings indexSettings45 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData17, settings23, strPredicate27, indexScopedSettings39);
        java.lang.String str46 = indexScopedSettings39.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings49.archiveUnknownOrBrokenSettings(settings52);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings53.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate56 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData57);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean61 = indexScopedSettings59.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings59.archiveUnknownOrBrokenSettings(settings62);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate67 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings68.archiveUnknownOrBrokenSettings(settings71);
        org.elasticsearch.index.IndexSettings indexSettings73 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData57, settings62, strPredicate67, indexScopedSettings68);
        org.elasticsearch.index.IndexSettings indexSettings74 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData47, settings53, strPredicate56, indexScopedSettings68);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData75 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData75, settings76);
        boolean boolean78 = indexSettings77.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings77.settings = settings79;
        boolean boolean81 = indexSettings77.queryStringLenient;
        boolean boolean82 = indexSettings77.TTLPurgeDisabled;
        java.lang.String str83 = indexSettings77.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue84 = indexSettings77.syncInterval;
// flaky:         indexSettings74.setRefreshInterval(timeValue84);
        org.elasticsearch.common.unit.TimeValue timeValue86 = null; // flaky: indexSettings74.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData87 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state88 = indexMetaData87.getState();
        int int89 = indexMetaData87.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap90 = indexMetaData87.getMappings();
// flaky:         indexSettings74.indexMetaData = indexMetaData87;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings92 = new org.elasticsearch.common.settings.IndexScopedSettings(settings15, indexScopedSettings39, indexMetaData87);
        java.lang.String str93 = indexScopedSettings92.nodeName();
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet94 = indexScopedSettings92.getBUILT_IN_INDEX_SETTINGS();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(indexMetaData75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(timeValue84);
// flaky:         org.junit.Assert.assertNotNull(timeValue86);
        org.junit.Assert.assertNotNull(indexMetaData87);
        org.junit.Assert.assertTrue("'" + state88 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state88.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap90);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(wildcardSettingSet94);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher24 = indexSettings23.getParseFieldMatcher();
        java.lang.String str25 = indexSettings23.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings33);
        boolean boolean35 = indexSettings34.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings34.settings = settings36;
        org.elasticsearch.common.settings.Settings settings39 = settings36.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings40 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings39);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings40);
        org.elasticsearch.Version version42 = indexSettings41.version;
        indexSettings41.warmerEnabled = false;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = indexSettings41.indexMetaData;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData46);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings48.archiveUnknownOrBrokenSettings(settings51);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings52.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate55 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData56);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings62 = indexScopedSettings58.archiveUnknownOrBrokenSettings(settings61);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings61.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate66 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean69 = indexScopedSettings67.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings67.archiveUnknownOrBrokenSettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData56, settings61, strPredicate66, indexScopedSettings67);
        org.elasticsearch.index.IndexSettings indexSettings73 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData46, settings52, strPredicate55, indexScopedSettings67);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData74, settings75);
        boolean boolean77 = indexSettings76.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings76.settings = settings78;
        boolean boolean80 = indexSettings76.queryStringLenient;
        boolean boolean81 = indexSettings76.TTLPurgeDisabled;
        java.lang.String str82 = indexSettings76.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue83 = indexSettings76.syncInterval;
// flaky:         indexSettings73.setRefreshInterval(timeValue83);
        indexSettings41.setGCDeletes(timeValue83);
        boolean boolean86 = indexSettings41.defaultAllowUnmappedFields;
        java.lang.String str87 = indexSettings41.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue88 = indexSettings41.getsyncInterval();
        indexSettings23.setGCDeletes(timeValue88);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(parseFieldMatcher24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(timeValue83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(timeValue88);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        boolean boolean30 = indexSettings29.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings29.settings = settings31;
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings34);
        boolean boolean37 = indexScopedSettings24.isPrivateSetting("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = indexMetaData38.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = new org.elasticsearch.common.settings.IndexScopedSettings(settings21, indexScopedSettings24, indexMetaData38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData42);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap47 = settings46.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings57 = builder56.build();
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder58.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap60 = builder58.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder56.put(strMap60);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder62.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings70 = builder69.build();
        org.elasticsearch.common.settings.Settings.Builder builder71 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder71.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = builder71.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder69.put(strMap73);
        boolean boolean76 = indexScopedSettings41.updateSettings(settings46, builder61, builder74, "state-");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData78, settings79);
        boolean boolean81 = indexSettings80.isQueryStringLenient();
        java.lang.String str82 = indexSettings80.getNodeName();
        java.lang.Class<?> wildcardClass83 = indexSettings80.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder74.put("", (java.lang.Class) wildcardClass83);
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder84.put("index.creation_date_string", (int) '4');
        java.lang.Class class89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder90 = builder84.put("state-", class89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        int int7 = indexSettings6.getNumberOfReplicas();
        boolean boolean9 = indexSettings6.matchesIndexName("index.data_path");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting10 = indexSettings6.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting11 = indexSettings6.getDEFAULT_FIELD_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanSetting10);
        org.junit.Assert.assertNotNull(strSetting11);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        boolean boolean9 = indexSettings2.queryStringAnalyzeWildcard;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting10 = indexSettings2.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.elasticsearch.Version version11 = indexSettings2.version;
        org.elasticsearch.Version version12 = indexSettings2.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeValueSetting10);
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertNotNull(version12);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings4 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings17.archiveUnknownOrBrokenSettings(settings20);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings20.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings26.archiveUnknownOrBrokenSettings(settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20, strPredicate25, indexScopedSettings26);
        org.elasticsearch.index.IndexSettings indexSettings32 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11, strPredicate14, indexScopedSettings26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = new org.elasticsearch.common.settings.IndexScopedSettings(settings3, indexScopedSettings26, indexMetaData33);
        long long36 = indexMetaData33.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state38 = indexMetaData37.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean41 = indexMetaData37.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings46);
        boolean boolean48 = indexSettings47.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings47.settings = settings49;
        org.elasticsearch.common.settings.Settings settings52 = settings49.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings42.archiveUnknownOrBrokenSettings(settings52);
        org.elasticsearch.common.settings.Settings settings55 = settings52.getAsSettings("hi!");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean58 = indexScopedSettings56.hasDynamicSetting("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate59 = indexScopedSettings56.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings61);
        boolean boolean63 = indexSettings62.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings62.settings = settings64;
        boolean boolean66 = indexSettings62.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting67 = indexSettings62.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = indexSettings62.scopedSettings;
        java.lang.String str69 = indexScopedSettings68.nodeName();
        org.elasticsearch.index.IndexSettings indexSettings70 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData37, settings52, strPredicate59, indexScopedSettings68);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings72);
        boolean boolean74 = indexSettings73.isQueryStringLenient();
        java.lang.String str75 = indexSettings73.getNodeName();
        boolean boolean76 = indexSettings73.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig77 = indexSettings73.mergePolicyConfig;
        indexSettings73.gcDeletesInMillis = (byte) 100;
        org.elasticsearch.common.unit.TimeValue timeValue80 = indexSettings73.getTranslogSyncInterval();
// flaky:         indexSettings70.setRefreshInterval(timeValue80);
        org.elasticsearch.common.settings.Settings settings82 = null; // flaky: indexSettings70.getNodeSettings();
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData33, settings82);
// flaky:         indexSettings83.maxRescoreWindow = (byte) 1;
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + state38 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state38.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strPredicate59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(booleanSetting67);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(mergePolicyConfig77);
        org.junit.Assert.assertNotNull(timeValue80);
// flaky:         org.junit.Assert.assertNotNull(settings82);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.refreshInterval;
        indexSettings2.setMaxRescoreWindow((int) 'a');
        boolean boolean12 = indexSettings2.hasCustomDataPath();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData13);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings15.archiveUnknownOrBrokenSettings(settings18);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings19.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings19);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = indexMetaData23.getState();
        java.util.Set<java.lang.String> strSet26 = null; // flaky: indexMetaData23.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap27 = indexMetaData23.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff28 = indexMetaData13.diff(indexMetaData23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings30);
        boolean boolean32 = indexSettings31.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings31.settings = settings33;
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings33);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings35);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters37 = indexMetaData13.getInitialRecoveryFilters();
        org.apache.lucene.util.Version version38 = indexMetaData13.getMinimumCompatibleVersion();
        org.elasticsearch.Version version39 = indexMetaData13.getCreationVersion();
        boolean boolean40 = indexSettings2.updateIndexMetaData(indexMetaData13);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap41 = indexMetaData13.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertNotNull(indexMetaDataDiff28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNull(discoveryNodeFilters37);
        org.junit.Assert.assertNull(version38);
        org.junit.Assert.assertNotNull(version39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap41);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("index.shadow_replicas");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.putMapping("index.version.minimum_compatible", "");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData12.getState();
        java.util.Set<java.lang.String> strSet15 = null; // flaky: indexMetaData12.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version16 = indexMetaData12.getCreationVersion();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder10.put("index.version.upgraded_string", version16);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder17.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder18.normalizePrefix("state-");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder20.normalizePrefix("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder20.put("hi!", true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = indexMetaData26.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings42.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings48.archiveUnknownOrBrokenSettings(settings51);
        org.elasticsearch.index.IndexSettings indexSettings53 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42, strPredicate47, indexScopedSettings48);
        org.elasticsearch.index.IndexSettings indexSettings54 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData26, settings32, strPredicate36, indexScopedSettings48);
        java.lang.String str56 = settings32.get("index.shadow_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap57 = settings32.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder25.put(strMap57);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.put("index.", (long) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.shared_filesystem");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        int int5 = indexSettings2.getMaxResultWindow();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting6 = indexSettings2.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10000 + "'", int5 == 10000);
        org.junit.Assert.assertNotNull(booleanSetting6);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings12 = indexSettings2.settings;
        org.elasticsearch.common.unit.TimeValue timeValue13 = indexSettings2.getDEFAULT_GC_DELETES();
        boolean boolean14 = indexSettings2.warmerEnabled;
        boolean boolean15 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting16 = indexSettings2.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        int int17 = indexSettings2.maxResultWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeValueSetting16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        long long10 = indexSettings2.gcDeletesInMillis;
        boolean boolean11 = indexSettings2.isQueryStringAllowLeadingWildcard();
        long long12 = indexSettings2.gcDeletesInMillis;
        boolean boolean13 = indexSettings2.getwarmerEnabled();
        int int14 = indexSettings2.getMaxRescoreWindow();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting15 = indexSettings2.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 60000L + "'", long12 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertNotNull(durabilitySetting15);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher10 = indexSettings2.getParseFieldMatcher();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting11 = indexSettings2.getDEFAULT_FIELD_SETTING();
        org.apache.lucene.index.MergePolicy mergePolicy12 = indexSettings2.getMergePolicy();
        boolean boolean13 = indexSettings2.isOnSharedFilesystem();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = indexSettings2.getScopedSettings();
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet15 = indexScopedSettings14.getBUILT_IN_INDEX_SETTINGS();
        boolean boolean17 = indexScopedSettings14.isPrivateSetting("index.number_of_replicas");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(parseFieldMatcher10);
        org.junit.Assert.assertNotNull(strSetting11);
        org.junit.Assert.assertNotNull(mergePolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(wildcardSettingSet15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting10 = indexSettings2.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.settings.Settings settings11 = indexSettings2.getNodeSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        int int18 = indexSettings14.maxRescoreWindow;
        java.lang.String str19 = indexSettings14.getUUID();
        org.elasticsearch.common.settings.Settings settings20 = indexSettings14.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting21 = indexSettings14.getINDEX_GC_DELETES_SETTING();
        int int22 = indexSettings14.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = indexSettings14.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings25);
        boolean boolean27 = indexSettings26.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings26.settings = settings28;
        org.elasticsearch.common.settings.Settings settings31 = settings28.getAsSettings("");
        java.lang.String str33 = settings31.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder34.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder42.replacePropertyPlaceholders();
        boolean boolean45 = indexScopedSettings23.updateDynamicSettings(settings31, builder38, builder43, "_all");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = indexScopedSettings23.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings49.archiveUnknownOrBrokenSettings(settings52);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings52.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate57 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings62 = indexScopedSettings58.archiveUnknownOrBrokenSettings(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData47, settings52, strPredicate57, indexScopedSettings58);
        org.elasticsearch.index.Index index64 = indexMetaData47.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state65 = indexMetaData47.getState();
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings settings68 = settings66.getAsSettings("index.number_of_replicas");
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings68);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state70 = indexMetaData47.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings71 = new org.elasticsearch.common.settings.IndexScopedSettings(settings11, indexScopedSettings46, indexMetaData47);
        java.lang.String str72 = indexScopedSettings71.nodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSetting10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_na_" + "'", str19, "_na_");
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(timeValueSetting21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNull(index64);
        org.junit.Assert.assertTrue("'" + state65 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state65.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + state70 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state70.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData4.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings17.archiveUnknownOrBrokenSettings(settings20);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings20.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings26.archiveUnknownOrBrokenSettings(settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20, strPredicate25, indexScopedSettings26);
        org.elasticsearch.index.IndexSettings indexSettings32 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData4, settings10, strPredicate14, indexScopedSettings26);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff33 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.common.settings.Settings settings34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaDataDiff33);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.queryStringAllowLeadingWildcard;
        java.lang.String str10 = indexSettings2.nodeName;
        org.elasticsearch.common.logging.ESLogger eSLogger11 = indexSettings2.logger;
        boolean boolean12 = indexSettings2.queryStringLenient;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(eSLogger11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("true");
        long long8 = builder7.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = null; // flaky: indexSettings16.getINDEX_WARMER_ENABLED_SETTING();
        boolean boolean18 = false; // flaky: indexSettings16.isShadowReplicaIndex();
        int int19 = 0; // flaky: indexSettings16.maxRescoreWindow;
        boolean boolean20 = false; // flaky: indexSettings16.warmerEnabled;
        boolean boolean21 = false; // flaky: indexSettings16.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("archived.", (float) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings20);
        boolean boolean22 = indexSettings21.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings21.settings = settings23;
        boolean boolean25 = indexSettings21.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting26 = indexSettings21.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings21.nodeSettings;
        boolean boolean28 = indexSettings21.queryStringAnalyzeWildcard;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting29 = indexSettings21.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.elasticsearch.Version version30 = indexSettings21.version;
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder17.put("index.shared_filesystem", version30);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(booleanSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeValueSetting29);
        org.junit.Assert.assertNotNull(version30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings4 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings17.archiveUnknownOrBrokenSettings(settings20);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings20.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings26.archiveUnknownOrBrokenSettings(settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20, strPredicate25, indexScopedSettings26);
        org.elasticsearch.index.IndexSettings indexSettings32 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11, strPredicate14, indexScopedSettings26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = new org.elasticsearch.common.settings.IndexScopedSettings(settings3, indexScopedSettings26, indexMetaData33);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue37 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue38 = settings3.getAsBytesSize("state-", byteSizeValue37);
        java.lang.Boolean boolean41 = settings3.getAsBoolean("index.", (java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNull(byteSizeValue38);
        org.junit.Assert.assertEquals("'" + boolean41 + "' != '" + false + "'", boolean41, false);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.put("index.number_of_shards", (long) 100);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.priority", "index.creation_date_string");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(objDictionary15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.settings(settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings40);
        java.util.function.Predicate<java.lang.String> strPredicate42 = indexSettings41.indexNameMatcher;
        org.elasticsearch.common.settings.Settings settings43 = settings16.filter(strPredicate42);
        org.elasticsearch.common.settings.Settings settings44 = settings6.filter(strPredicate42);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings6.getGroups("index.", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap49 = settings6.getAsGroups(true);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strPredicate42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(strMap49);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        int int9 = indexSettings2.maxResultWindow;
        boolean boolean10 = indexSettings2.getdefaultAllowUnmappedFields();
        long long11 = indexSettings2.getGcDeletesInMillis();
        java.util.function.Predicate<java.lang.String> strPredicate12 = indexSettings2.getindexNameMatcher();
        java.lang.String str13 = indexSettings2.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 60000L + "'", long11 == 60000L);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings18);
        boolean boolean20 = indexSettings19.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings19.settings = settings21;
        org.elasticsearch.common.settings.Settings settings24 = settings21.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        long long28 = builder27.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.upgraded_string", (float) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder10.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder10.put("index.shared_filesystem.recover_on_any_node", (float) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("hi!", false);
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.loadFromSource("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings24);
        boolean boolean26 = indexSettings25.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings25.settings = settings27;
        org.elasticsearch.common.settings.Settings settings30 = settings27.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings31.archiveUnknownOrBrokenSettings(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = indexMetaData36.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = new org.elasticsearch.common.settings.IndexScopedSettings(settings30, indexScopedSettings31, indexMetaData36);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray45 = settings30.getAsArray("", strArray43, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder21.extendArray("index.creation_date_string", strArray45);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder47 = builder18.put((java.lang.Object[]) strArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: array settings of key + value order doesn't hold correct number of arguments (3)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings8 = builder7.build();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.put("primary_terms", (int) (byte) 0);
        java.lang.String str13 = builder7.get("index.blocks.read");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "false" + "'", str13, "false");
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        org.elasticsearch.common.settings.Settings settings23 = settings20.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = indexMetaData29.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = new org.elasticsearch.common.settings.IndexScopedSettings(settings23, indexScopedSettings24, indexMetaData29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings33);
        boolean boolean35 = indexSettings34.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings34.settings = settings36;
        boolean boolean38 = indexSettings34.queryStringLenient;
        boolean boolean39 = indexSettings34.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig40 = indexSettings34.mergePolicyConfig;
        int int41 = indexSettings34.getMaxRescoreWindow();
        int int42 = indexSettings34.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate43 = indexSettings34.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = indexMetaData44.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings47);
        boolean boolean49 = indexSettings48.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings48.settings = settings50;
        org.elasticsearch.common.settings.Settings settings53 = settings50.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings57.archiveUnknownOrBrokenSettings(settings60);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings60.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings66.archiveUnknownOrBrokenSettings(settings69);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60, strPredicate65, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData44, settings50, strPredicate54, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings23, strPredicate43, indexScopedSettings66);
        org.elasticsearch.common.unit.TimeValue timeValue74 = indexSettings73.getGlobalCheckpointInterval();
        boolean boolean75 = indexSettings73.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue76 = indexSettings73.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10000 + "'", int41 == 10000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10000 + "'", int42 == 10000);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(timeValue74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(timeValue76);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.settings(settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder1.settings(settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder1.numberOfShards(97);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.removeAlias("index.version.upgraded_string");
        // The following exception was thrown during execution in test generation
        try {
            long long22 = builder18.primaryTerm((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean10 = indexSettings2.hasCustomDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue11 = indexSettings2.globalCheckpointInterval;
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings2.globalCheckpointInterval;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting13 = indexSettings2.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings2.mergeSchedulerConfig;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig15 = indexSettings2.mergeSchedulerConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(durabilitySetting13);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig15);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings5);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings6.settings = settings8;
        org.elasticsearch.common.settings.Settings settings11 = settings8.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = new org.elasticsearch.common.settings.IndexScopedSettings(settings11, indexScopedSettings12, indexMetaData17);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray26 = settings11.getAsArray("", strArray24, (java.lang.Boolean) true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        java.util.function.Predicate<java.lang.String> strPredicate30 = indexSettings29.indexNameMatcher;
        java.util.function.Predicate<java.lang.String> strPredicate31 = indexSettings29.getindexNameMatcher();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings49.archiveUnknownOrBrokenSettings(settings52);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings52.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate57 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings62 = indexScopedSettings58.archiveUnknownOrBrokenSettings(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData47, settings52, strPredicate57, indexScopedSettings58);
        org.elasticsearch.index.IndexSettings indexSettings64 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData37, settings43, strPredicate46, indexScopedSettings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData65);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = new org.elasticsearch.common.settings.IndexScopedSettings(settings35, indexScopedSettings58, indexMetaData65);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11, strPredicate31, indexScopedSettings58);
        org.elasticsearch.common.settings.Settings settings69 = indexMetaData0.getSettings();
        int int70 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertNotNull(strPredicate31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        long long10 = indexSettings2.gcDeletesInMillis;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.indexNameMatcher;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = indexSettings2.getScopedSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        indexSettings2.TTLPurgeDisabled = true;
        boolean boolean10 = indexSettings2.getdefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = settings15.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings15);
        boolean boolean18 = indexSettings17.getqueryStringAnalyzeWildcard();
        boolean boolean19 = indexSettings17.queryStringAnalyzeWildcard;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting20 = indexSettings17.getINDEX_WARMER_ENABLED_SETTING();
        java.lang.Boolean boolean21 = indexSettings2.getValue(booleanSetting20);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(booleanSetting20);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + true + "'", boolean21, true);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings2.nodeSettings;
        indexSettings2.setMaxRescoreWindow(0);
        boolean boolean13 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting14 = indexSettings2.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings16);
        boolean boolean18 = indexSettings17.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings17.settings = settings19;
        boolean boolean21 = indexSettings17.queryStringLenient;
        boolean boolean22 = indexSettings17.TTLPurgeDisabled;
        long long23 = indexSettings17.getGcDeletesInMillis();
        boolean boolean24 = indexSettings17.TTLPurgeDisabled;
        long long25 = indexSettings17.gcDeletesInMillis;
        java.util.function.Predicate<java.lang.String> strPredicate26 = indexSettings17.indexNameMatcher;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        boolean boolean30 = indexSettings29.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings29.settings = settings31;
        int int33 = indexSettings29.maxRescoreWindow;
        java.lang.String str34 = indexSettings29.getUUID();
        org.elasticsearch.common.settings.Settings settings35 = indexSettings29.nodeSettings;
        org.elasticsearch.common.settings.Settings settings36 = indexSettings29.nodeSettings;
        boolean boolean37 = indexSettings29.isDefaultAllowUnmappedFields();
        org.apache.lucene.index.MergePolicy mergePolicy38 = indexSettings29.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue39 = indexSettings29.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean41 = indexSettings29.matchesIndexName("_all");
        long long42 = indexSettings29.getGcDeletesInMillis();
        org.elasticsearch.index.translog.Translog.Durability durability43 = indexSettings29.getdurability();
        indexSettings17.setdurability(durability43);
        indexSettings2.durability = durability43;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(durabilitySetting14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 60000L + "'", long23 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 60000L + "'", long25 == 60000L);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10000 + "'", int33 == 10000);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "_na_" + "'", str34, "_na_");
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(mergePolicy38);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 60000L + "'", long42 == 60000L);
        org.junit.Assert.assertTrue("'" + durability43 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability43.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str8 = indexSettings2.customDataPath();
        boolean boolean9 = indexSettings2.hasCustomDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.refreshInterval;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting11 = indexSettings2.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting12 = indexSettings2.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger13 = indexSettings2.logger;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(intSetting11);
        org.junit.Assert.assertNotNull(durabilitySetting12);
        org.junit.Assert.assertNotNull(eSLogger13);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData3.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings6);
        boolean boolean8 = indexSettings7.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings7.settings = settings9;
        org.elasticsearch.common.settings.Settings settings12 = settings9.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings16.archiveUnknownOrBrokenSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings19.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings25.archiveUnknownOrBrokenSettings(settings28);
        org.elasticsearch.index.IndexSettings indexSettings30 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData14, settings19, strPredicate24, indexScopedSettings25);
        org.elasticsearch.index.IndexSettings indexSettings31 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData3, settings9, strPredicate13, indexScopedSettings25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap33 = indexMetaData3.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData39);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean43 = indexScopedSettings41.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings41.archiveUnknownOrBrokenSettings(settings44);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder38.settings(settings45);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings45);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings45);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings45);
        indexSettings52.setMaxRescoreWindow(0);
        indexSettings52.setwarmerEnabled(false);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting57 = indexSettings52.getQUERY_STRING_LENIENT_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(booleanSetting57);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        long long10 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_GC_DELETES();
        boolean boolean11 = indexSettings2.isDefaultAllowUnmappedFields();
        boolean boolean12 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.unit.TimeValue timeValue13 = indexSettings2.globalCheckpointInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValue13);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        long long10 = indexSettings2.gcDeletesInMillis;
        boolean boolean11 = indexSettings2.isQueryStringAllowLeadingWildcard();
        boolean boolean12 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting13 = indexSettings2.getINDEX_TRANSLOG_DURABILITY_SETTING();
        boolean boolean15 = indexSettings2.matchesIndexName("index.number_of_shards");
        int int16 = indexSettings2.numberOfShards;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(durabilitySetting13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        boolean boolean6 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.Version version7 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(version7);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String[] strArray24 = new java.lang.String[] { "index.data_path", "index.blocks.read_only", "index.blocks.read", "state-", "active_allocations", "index.version.minimum_compatible", "active_allocations", "index.priority", "index.blocks.write", "index.", "active_allocations", "hi!", "_na_", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.version.minimum_compatible", "active_allocations", "_na_", "active_allocations", "active_allocations" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder2.putActiveAllocationIds((int) 'a', (java.util.Set<java.lang.String>) strSet25);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData29 = builder2.mapping("index.number_of_replicas");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(mappingMetaData29);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("primary_terms", "");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.settings(builder9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.index("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData13);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = settings17.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings27);
        boolean boolean29 = indexSettings28.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings28.settings = settings30;
        org.elasticsearch.common.settings.Settings settings33 = settings30.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings33);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings34);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings34);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        boolean boolean43 = indexSettings42.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings42.settings = settings44;
        org.elasticsearch.common.settings.Settings settings47 = settings44.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings37.archiveUnknownOrBrokenSettings(settings47);
        boolean boolean50 = indexScopedSettings37.isPrivateSetting("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state52 = indexMetaData51.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData51);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = new org.elasticsearch.common.settings.IndexScopedSettings(settings34, indexScopedSettings37, indexMetaData51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings56);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap60 = settings59.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder62.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings70 = builder69.build();
        org.elasticsearch.common.settings.Settings.Builder builder71 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder71.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = builder71.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder69.put(strMap73);
        org.elasticsearch.common.settings.Settings.Builder builder75 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder75.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder76.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder79.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings83 = builder82.build();
        org.elasticsearch.common.settings.Settings.Builder builder84 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder84.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap86 = builder84.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder82.put(strMap86);
        boolean boolean89 = indexScopedSettings54.updateSettings(settings59, builder74, builder87, "state-");
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder74.putNull("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder92 = builder12.settings(builder91);
        long long93 = builder92.version();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertTrue("'" + state52 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state52.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(strMap86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings22);
        boolean boolean24 = indexSettings23.isQueryStringLenient();
        indexSettings23.setEnableWarmer(true);
        int int27 = indexSettings23.getNumberOfShards();
        long long28 = indexSettings23.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 60000L + "'", long28 == 60000L);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        int int11 = indexSettings2.maxResultWindow;
        org.elasticsearch.common.logging.ESLogger eSLogger12 = indexSettings2.getlogger();
        long long13 = indexSettings2.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertNotNull(eSLogger12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 60000L + "'", long13 == 60000L);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder6.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.putNull("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        java.lang.Class<?> wildcardClass14 = builder13.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder10.put("index.version.upgraded", (java.lang.Class) wildcardClass14);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder10.put("_na_", (double) 100.0f);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder5.settings(builder18);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.numberOfReplicas((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.primaryTerm((int) (byte) -1, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str10 = indexSettings2.getDefaultField();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting11 = indexSettings2.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting12 = indexSettings2.getALLOW_UNMAPPED();
        org.elasticsearch.common.unit.TimeValue timeValue13 = indexSettings2.globalCheckpointInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_all" + "'", str10, "_all");
        org.junit.Assert.assertNotNull(strSetting11);
        org.junit.Assert.assertNotNull(booleanSetting12);
        org.junit.Assert.assertNotNull(timeValue13);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig9 = indexSettings2.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig9);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        boolean boolean9 = indexSettings2.isQueryStringAllowLeadingWildcard();
        long long10 = indexSettings2.gcDeletesInMillis;
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getTranslogDurability();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = indexSettings2.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        boolean boolean19 = indexSettings15.queryStringLenient;
        boolean boolean20 = indexSettings15.TTLPurgeDisabled;
        boolean boolean21 = indexSettings15.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version22 = indexSettings15.version;
        org.elasticsearch.common.unit.TimeValue timeValue23 = indexSettings15.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability24 = indexSettings15.getTranslogDurability();
        indexSettings2.setdurability(durability24);
        indexSettings2.maxRescoreWindow = (short) 100;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(version22);
        org.junit.Assert.assertNotNull(timeValue23);
        org.junit.Assert.assertTrue("'" + durability24 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability24.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        long long6 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mapping("");
        org.elasticsearch.common.xcontent.XContentParser xContentParser10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings12);
        boolean boolean14 = indexSettings13.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings13.settings = settings15;
        int int17 = indexSettings13.maxRescoreWindow;
        java.lang.String str18 = indexSettings13.getUUID();
        org.elasticsearch.common.settings.Settings settings19 = indexSettings13.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting20 = indexSettings13.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings21 = indexSettings13.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting22 = indexSettings13.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher23 = indexSettings13.parseFieldMatcher;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = indexMetaData0.fromXContent(xContentParser10, parseFieldMatcher23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_na_" + "'", str18, "_na_");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(booleanSetting20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strSetting22);
        org.junit.Assert.assertNotNull(parseFieldMatcher23);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        int int9 = indexSettings2.maxResultWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = settings14.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings14);
        int int17 = indexSettings16.getNumberOfReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = indexSettings16.flushThresholdSize;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting19 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        java.lang.Boolean boolean20 = indexSettings16.getValue(booleanSetting19);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue21 = indexSettings16.flushThresholdSize;
        indexSettings2.setTranslogFlushThresholdSize(byteSizeValue21);
        boolean boolean23 = indexSettings2.warmerEnabled;
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings2.refreshInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteSizeValue18);
        org.junit.Assert.assertNotNull(booleanSetting19);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + true + "'", boolean20, true);
        org.junit.Assert.assertNotNull(byteSizeValue21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(timeValue24);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        java.lang.String str16 = indexSettings15.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability17 = indexSettings15.durability;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexSettings15.getIndexMetaData();
        org.elasticsearch.common.unit.TimeValue timeValue19 = indexSettings15.getRefreshInterval();
        indexSettings15.setMaxResultWindow((int) (short) 100);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings15.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        java.lang.String str23 = indexSettings15.defaultField;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_na_" + "'", str16, "_na_");
        org.junit.Assert.assertTrue("'" + durability17 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability17.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_all" + "'", str23, "_all");
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getAsGroups(false);
        java.util.Set<java.lang.String> strSet20 = settings17.names();
        java.lang.String str22 = settings17.get("index.version.created_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str8 = indexSettings2.customDataPath();
        indexSettings2.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.durability;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue12 = indexSettings2.flushThresholdSize;
        boolean boolean13 = indexSettings2.getisShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting14 = indexSettings2.getDEFAULT_FIELD_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings16);
        boolean boolean18 = indexSettings17.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings17.settings = settings19;
        boolean boolean21 = indexSettings17.queryStringLenient;
        boolean boolean22 = indexSettings17.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig23 = indexSettings17.mergePolicyConfig;
        int int24 = indexSettings17.getMaxRescoreWindow();
        int int25 = indexSettings17.maxRescoreWindow;
        int int26 = indexSettings17.getNumberOfShards();
        boolean boolean27 = indexSettings17.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting28 = indexSettings17.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        boolean boolean29 = indexSettings17.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = indexSettings17.getALLOW_UNMAPPED();
        java.lang.Boolean boolean31 = indexSettings2.getValue(booleanSetting30);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(byteSizeValue12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSetting14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeValueSetting28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(booleanSetting30);
        org.junit.Assert.assertEquals("'" + boolean31 + "' != '" + true + "'", boolean31, true);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.primaryTerm((int) '#', (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        org.elasticsearch.common.settings.Settings settings23 = settings20.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = indexMetaData29.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = new org.elasticsearch.common.settings.IndexScopedSettings(settings23, indexScopedSettings24, indexMetaData29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings33);
        boolean boolean35 = indexSettings34.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings34.settings = settings36;
        boolean boolean38 = indexSettings34.queryStringLenient;
        boolean boolean39 = indexSettings34.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig40 = indexSettings34.mergePolicyConfig;
        int int41 = indexSettings34.getMaxRescoreWindow();
        int int42 = indexSettings34.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate43 = indexSettings34.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = indexMetaData44.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings47);
        boolean boolean49 = indexSettings48.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings48.settings = settings50;
        org.elasticsearch.common.settings.Settings settings53 = settings50.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings57.archiveUnknownOrBrokenSettings(settings60);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings60.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings66.archiveUnknownOrBrokenSettings(settings69);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60, strPredicate65, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData44, settings50, strPredicate54, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings23, strPredicate43, indexScopedSettings66);
        int int74 = indexSettings73.getMaxResultWindow();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig75 = indexSettings73.mergeSchedulerConfig;
        org.elasticsearch.Version version76 = indexSettings73.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10000 + "'", int41 == 10000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10000 + "'", int42 == 10000);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10000 + "'", int74 == 10000);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig75);
        org.junit.Assert.assertNotNull(version76);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        boolean boolean30 = indexSettings29.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings29.settings = settings31;
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings34);
        boolean boolean37 = indexScopedSettings24.isPrivateSetting("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = indexMetaData38.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = new org.elasticsearch.common.settings.IndexScopedSettings(settings21, indexScopedSettings24, indexMetaData38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData42);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap47 = settings46.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings57 = builder56.build();
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder58.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap60 = builder58.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder56.put(strMap60);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder62.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings70 = builder69.build();
        org.elasticsearch.common.settings.Settings.Builder builder71 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder71.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = builder71.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder69.put(strMap73);
        boolean boolean76 = indexScopedSettings41.updateSettings(settings46, builder61, builder74, "state-");
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder74.put("index.shared_filesystem.recover_on_any_node", 0.0d);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder79.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder79.putNull("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder79.loadFromSource("archived.");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder0.putNull("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        java.lang.Class<?> wildcardClass8 = builder7.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder4.put("index.version.upgraded", (java.lang.Class) wildcardClass8);
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder10.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder10.putNull("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder15.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("index.", (long) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap23 = builder22.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder14.put(strMap23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = indexMetaData26.getState();
        java.util.Set<java.lang.String> strSet29 = null; // flaky: indexMetaData26.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version30 = indexMetaData26.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.index("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings35);
        boolean boolean37 = indexSettings36.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings36.settings = settings38;
        int int40 = indexSettings36.maxRescoreWindow;
        java.lang.String str41 = indexSettings36.getUUID();
        org.elasticsearch.common.settings.Settings settings42 = indexSettings36.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting43 = indexSettings36.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings44 = indexSettings36.nodeSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder33.settings(settings44);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings44.getAsGroups();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings44.getGroups("index.");
        java.lang.String[] strArray50 = settings44.getAsArray("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder14.extendArray("", strArray50);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder9.put((java.lang.Object[]) strArray50);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder9.normalizePrefix("archived.");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(version30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10000 + "'", int40 == 10000);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "_na_" + "'", str41, "_na_");
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(booleanSetting43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.queryStringLenient;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig4 = indexSettings2.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings6);
        boolean boolean8 = indexSettings7.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings7.settings = settings9;
        int int11 = indexSettings7.maxRescoreWindow;
        java.lang.String str12 = indexSettings7.getUUID();
        org.elasticsearch.common.settings.Settings settings13 = indexSettings7.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = indexSettings7.getINDEX_GC_DELETES_SETTING();
        int int15 = indexSettings7.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = indexSettings7.scopedSettings;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig17 = indexSettings7.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexSettings7.indexMetaData;
        boolean boolean19 = indexSettings2.updateIndexMetaData(indexMetaData18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData18);
        long long21 = builder20.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_na_" + "'", str12, "_na_");
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        org.elasticsearch.common.settings.Settings settings7 = settings4.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params9 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = settings7.toXContent(xContentBuilder8, params9);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData12.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings15);
        boolean boolean17 = indexSettings16.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings16.settings = settings18;
        org.elasticsearch.common.settings.Settings settings21 = settings18.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings25.archiveUnknownOrBrokenSettings(settings28);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings28.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean36 = indexScopedSettings34.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings34.archiveUnknownOrBrokenSettings(settings37);
        org.elasticsearch.index.IndexSettings indexSettings39 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData23, settings28, strPredicate33, indexScopedSettings34);
        org.elasticsearch.index.IndexSettings indexSettings40 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData12, settings18, strPredicate22, indexScopedSettings34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings43);
        boolean boolean45 = indexSettings44.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings44.settings = settings46;
        boolean boolean48 = indexSettings44.queryStringLenient;
        boolean boolean49 = indexSettings44.TTLPurgeDisabled;
        boolean boolean50 = indexSettings44.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version51 = indexSettings44.version;
        org.elasticsearch.Version version52 = settings18.getAsVersion("archived.", version51);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings55);
        boolean boolean57 = indexSettings56.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings56.settings = settings58;
        org.elasticsearch.common.settings.Settings settings61 = settings58.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder62 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params63 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = settings61.toXContent(xContentBuilder62, params63);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = settings18.toXContent(xContentBuilder53, params63);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder66 = settings7.toXContent(xContentBuilder11, params63);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings7.getAsGroups(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(params9);
        org.junit.Assert.assertNull(xContentBuilder10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(version51);
        org.junit.Assert.assertNotNull(version52);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(params63);
        org.junit.Assert.assertNull(xContentBuilder64);
        org.junit.Assert.assertNull(xContentBuilder65);
        org.junit.Assert.assertNull(xContentBuilder66);
        org.junit.Assert.assertNotNull(strMap68);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder10.put("index.version.upgraded", (float) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder14.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder14.put("index.uuid", "");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder14.replacePropertyPlaceholders();
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder21 = builder14.put(objDictionary20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        boolean boolean30 = indexSettings29.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings29.settings = settings31;
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings34);
        boolean boolean37 = indexScopedSettings24.isPrivateSetting("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = indexMetaData38.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = new org.elasticsearch.common.settings.IndexScopedSettings(settings21, indexScopedSettings24, indexMetaData38);
        java.lang.String str44 = settings21.get("index.uuid", "index.uuid");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "index.uuid" + "'", str44, "index.uuid");
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.settings(builder4);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.creation_date_string", (double) 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings24 = builder23.build();
        org.elasticsearch.common.settings.Settings settings25 = builder23.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings33);
        org.elasticsearch.common.settings.Settings settings37 = indexMetaData27.getSettings();
        java.lang.String[] strArray39 = settings37.getAsArray("hi!");
        java.lang.String[] strArray40 = settings25.getAsArray("index.data_path", strArray39);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder14.putArray("hi!", strArray40);
        org.elasticsearch.common.settings.Settings settings42 = builder14.build();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder14.put("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", (double) 100L);
        org.elasticsearch.common.settings.Settings settings46 = builder14.build();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder14.put("", (int) (short) 10);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder53 = builder49.put("index.blocks.metadata", 0L, byteSizeUnit52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        boolean boolean7 = indexSettings6.queryStringLenient;
        java.lang.String str8 = indexSettings6.getUUID();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting9 = indexSettings6.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(byteSizeValueSetting9);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getTranslogDurability();
        java.lang.String str12 = indexSettings2.customDataPath();
        indexSettings2.maxResultWindow = 10;
        org.elasticsearch.common.settings.Settings settings15 = indexSettings2.getSettings();
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings2.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(mergePolicy16);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.settings(settings11);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11);
        int int17 = indexMetaData0.getNumberOfShards();
        java.lang.Class<?> wildcardClass18 = indexMetaData0.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap10 = indexMetaData0.getAliases();
        org.elasticsearch.index.Index index11 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNull(index11);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getAsGroups(false);
        boolean boolean20 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings17);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData2.getState();
        byte byte4 = state3.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.state(state3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfShards((int) (short) 10);
        int int12 = builder9.numberOfReplicas();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder9.putMapping("index.blocks.read_only", "archived.");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 0 + "'", byte4 == (byte) 0);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        boolean boolean9 = indexSettings2.isQueryStringAllowLeadingWildcard();
        long long10 = indexSettings2.gcDeletesInMillis;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings12);
        boolean boolean14 = indexSettings13.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings13.settings = settings15;
        int int17 = indexSettings13.maxRescoreWindow;
        boolean boolean18 = indexSettings13.TTLPurgeDisabled;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher19 = indexSettings13.parseFieldMatcher;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData20);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings26.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings26);
        int int30 = indexSettings29.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData31);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings33.archiveUnknownOrBrokenSettings(settings36);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings37.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state42 = indexMetaData41.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings44);
        boolean boolean46 = indexSettings45.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings45.settings = settings47;
        org.elasticsearch.common.settings.Settings settings50 = settings47.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData52);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean56 = indexScopedSettings54.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings58 = indexScopedSettings54.archiveUnknownOrBrokenSettings(settings57);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings57.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate62 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean65 = indexScopedSettings63.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings67 = indexScopedSettings63.archiveUnknownOrBrokenSettings(settings66);
        org.elasticsearch.index.IndexSettings indexSettings68 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData52, settings57, strPredicate62, indexScopedSettings63);
        org.elasticsearch.index.IndexSettings indexSettings69 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData41, settings47, strPredicate51, indexScopedSettings63);
        org.elasticsearch.index.IndexSettings indexSettings70 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings72);
        boolean boolean74 = indexSettings73.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings73.settings = settings75;
        org.elasticsearch.common.settings.Settings settings78 = settings75.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings79 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean81 = indexScopedSettings79.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings83 = indexScopedSettings79.archiveUnknownOrBrokenSettings(settings82);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData84 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state85 = indexMetaData84.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings86 = new org.elasticsearch.common.settings.IndexScopedSettings(settings78, indexScopedSettings79, indexMetaData84);
        java.lang.String[] strArray91 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray93 = settings78.getAsArray("", strArray91, (java.lang.Boolean) true);
        org.elasticsearch.index.IndexSettings indexSettings94 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings78);
        boolean boolean95 = indexSettings94.getqueryStringAnalyzeWildcard();
        org.elasticsearch.index.translog.Translog.Durability durability96 = indexSettings94.durability;
        indexSettings29.durability = durability96;
        indexSettings13.setdurability(durability96);
        indexSettings2.durability = durability96;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertTrue("'" + state42 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state42.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(indexScopedSettings54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(indexScopedSettings79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(indexMetaData84);
        org.junit.Assert.assertTrue("'" + state85 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state85.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + durability96 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability96.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        int int11 = indexSettings2.getNumberOfShards();
        boolean boolean12 = indexSettings2.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting13 = indexSettings2.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        java.lang.String str14 = indexSettings2.customDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting15 = indexSettings2.getINDEX_TTL_DISABLE_PURGE_SETTING();
        boolean boolean16 = indexSettings2.getqueryStringAllowLeadingWildcard();
        boolean boolean17 = indexSettings2.getqueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValueSetting13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(booleanSetting15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.queryStringLenient;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig4 = indexSettings2.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings6);
        boolean boolean8 = indexSettings7.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings7.settings = settings9;
        int int11 = indexSettings7.maxRescoreWindow;
        java.lang.String str12 = indexSettings7.getUUID();
        org.elasticsearch.common.settings.Settings settings13 = indexSettings7.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = indexSettings7.getINDEX_GC_DELETES_SETTING();
        int int15 = indexSettings7.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = indexSettings7.scopedSettings;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig17 = indexSettings7.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexSettings7.indexMetaData;
        boolean boolean19 = indexSettings2.updateIndexMetaData(indexMetaData18);
        org.apache.lucene.util.Version version20 = indexMetaData18.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_na_" + "'", str12, "_na_");
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(version20);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str8 = indexSettings2.customDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting9 = indexSettings2.getMAX_RESCORE_WINDOW_SETTING();
        indexSettings2.setTTLPurgeDisabled(false);
        int int12 = indexSettings2.numberOfShards;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(intSetting9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings8 = builder7.build();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.put("index.blocks.write", true);
        java.io.InputStream inputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder14 = builder7.loadFromStream("index.creation_date_string", inputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean11 = indexScopedSettings9.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean16 = indexScopedSettings14.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings14.archiveUnknownOrBrokenSettings(settings17);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings27.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings33.archiveUnknownOrBrokenSettings(settings36);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData22, settings27, strPredicate32, indexScopedSettings33);
        org.elasticsearch.index.IndexSettings indexSettings39 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData12, settings18, strPredicate21, indexScopedSettings33);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue41 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue42 = settings18.getAsBytesSize("index.creation_date_string", byteSizeValue41);
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings9.dryRun(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData44);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean48 = indexScopedSettings46.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings46.archiveUnknownOrBrokenSettings(settings49);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state55 = indexMetaData54.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings57);
        boolean boolean59 = indexSettings58.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings58.settings = settings60;
        org.elasticsearch.common.settings.Settings settings63 = settings60.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate64 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData65);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean69 = indexScopedSettings67.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings67.archiveUnknownOrBrokenSettings(settings70);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings70.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate75 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings76 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean78 = indexScopedSettings76.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings80 = indexScopedSettings76.archiveUnknownOrBrokenSettings(settings79);
        org.elasticsearch.index.IndexSettings indexSettings81 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData65, settings70, strPredicate75, indexScopedSettings76);
        org.elasticsearch.index.IndexSettings indexSettings82 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData54, settings60, strPredicate64, indexScopedSettings76);
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings84 = new org.elasticsearch.common.settings.IndexScopedSettings(settings8, indexScopedSettings9, indexMetaData44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder85 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData44);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput86 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData44.writeTo(streamOutput86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNull(byteSizeValue42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertTrue("'" + state55 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state55.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(indexScopedSettings76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(settings80);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings4);
        org.elasticsearch.common.settings.Settings settings8 = settings4.getByPrefix("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings16.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData20);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings25.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings31.archiveUnknownOrBrokenSettings(settings34);
        org.elasticsearch.index.IndexSettings indexSettings36 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData20, settings25, strPredicate30, indexScopedSettings31);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate19, indexScopedSettings31);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings9.archiveUnknownOrBrokenSettings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings40);
        boolean boolean42 = indexSettings41.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings41.settings = settings43;
        int int45 = indexSettings41.maxRescoreWindow;
        java.lang.String str46 = indexSettings41.getUUID();
        java.lang.String str47 = indexSettings41.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state49 = indexMetaData48.getState();
        java.util.Set<java.lang.String> strSet51 = null; // flaky: indexMetaData48.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version52 = indexMetaData48.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        long long54 = indexMetaData48.getCreationDate();
        indexSettings41.indexMetaData = indexMetaData48;
        org.elasticsearch.Version version56 = indexMetaData48.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData58 = indexMetaData48.mappingOrDefault("hi!");
        org.elasticsearch.Version version59 = indexMetaData48.getCreationVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData61 = indexMetaData48.mappingOrDefault("index.shared_filesystem");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = new org.elasticsearch.common.settings.IndexScopedSettings(settings8, indexScopedSettings9, indexMetaData48);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings64);
        boolean boolean66 = indexSettings65.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings65.settings = settings67;
        boolean boolean69 = indexSettings65.queryStringLenient;
        boolean boolean70 = indexSettings65.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig71 = indexSettings65.mergePolicyConfig;
        org.elasticsearch.index.translog.Translog.Durability durability72 = indexSettings65.durability;
        org.elasticsearch.common.settings.Settings settings73 = indexSettings65.getSettings();
        boolean boolean74 = indexSettings65.queryStringAllowLeadingWildcard;
        int int75 = indexSettings65.numberOfShards;
        org.elasticsearch.common.unit.TimeValue timeValue76 = indexSettings65.getTranslogSyncInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting77 = indexSettings65.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData78, settings79);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData78);
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap83 = settings82.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData78, settings82);
        boolean boolean85 = indexSettings84.getqueryStringAnalyzeWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue86 = indexSettings84.syncInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData87 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings88 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings89 = new org.elasticsearch.index.IndexSettings(indexMetaData87, settings88);
        boolean boolean90 = indexSettings89.isQueryStringLenient();
        java.lang.String str91 = indexSettings89.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting92 = indexSettings89.getDEFAULT_FIELD_SETTING();
        indexSettings89.setEnableWarmer(true);
        boolean boolean95 = indexSettings89.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting96 = indexSettings89.getINDEX_TTL_DISABLE_PURGE_SETTING();
        java.lang.Boolean boolean97 = indexSettings84.getValue(booleanSetting96);
        java.util.function.BiConsumer<java.lang.Boolean, java.lang.Boolean> booleanBiConsumer98 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings9.addSettingsUpdateConsumer(booleanSetting77, booleanSetting96, booleanBiConsumer98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Setting is not registered for key [indices.query.query_string.analyze_wildcard]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10000 + "'", int45 == 10000);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "_na_" + "'", str46, "_na_");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + state49 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state49.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet51);
        org.junit.Assert.assertNotNull(version52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertNotNull(version56);
        org.junit.Assert.assertNull(mappingMetaData58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNull(mappingMetaData61);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig71);
        org.junit.Assert.assertTrue("'" + durability72 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability72.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(timeValue76);
        org.junit.Assert.assertNotNull(booleanSetting77);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(timeValue86);
        org.junit.Assert.assertNotNull(indexMetaData87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(strSetting92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(booleanSetting96);
        org.junit.Assert.assertEquals("'" + boolean97 + "' != '" + false + "'", boolean97, false);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean4 = indexMetaData0.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean7 = indexScopedSettings5.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings9);
        boolean boolean11 = indexSettings10.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings10.settings = settings12;
        org.elasticsearch.common.settings.Settings settings15 = settings12.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings5.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.common.settings.Settings settings18 = settings15.getAsSettings("hi!");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.hasDynamicSetting("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate22 = indexScopedSettings19.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings24);
        boolean boolean26 = indexSettings25.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings25.settings = settings27;
        boolean boolean29 = indexSettings25.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = indexSettings25.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = indexSettings25.scopedSettings;
        java.lang.String str32 = indexScopedSettings31.nodeName();
        org.elasticsearch.index.IndexSettings indexSettings33 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15, strPredicate22, indexScopedSettings31);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting34 = null; // flaky: indexSettings33.getINDEX_TTL_DISABLE_PURGE_SETTING();
        boolean boolean35 = false; // flaky: indexSettings33.getqueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(booleanSetting30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
// flaky:         org.junit.Assert.assertNotNull(booleanSetting34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        boolean boolean10 = indexSettings2.queryStringLenient;
        boolean boolean11 = indexSettings2.getqueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting12 = indexSettings2.getALLOW_UNMAPPED();
        org.elasticsearch.common.logging.ESLogger eSLogger13 = indexSettings2.getlogger();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(booleanSetting12);
        org.junit.Assert.assertNotNull(eSLogger13);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        boolean boolean9 = indexSettings2.isOnSharedFilesystem();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting10 = indexSettings2.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings15);
        boolean boolean17 = indexSettings16.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings16.settings = settings18;
        int int20 = indexSettings16.maxRescoreWindow;
        java.lang.String str21 = indexSettings16.getUUID();
        org.elasticsearch.common.settings.Settings settings22 = indexSettings16.nodeSettings;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings16.nodeSettings;
        boolean boolean24 = indexSettings16.isDefaultAllowUnmappedFields();
        org.apache.lucene.index.MergePolicy mergePolicy25 = indexSettings16.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings16.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean28 = indexSettings16.matchesIndexName("_all");
        long long29 = indexSettings16.getGcDeletesInMillis();
        indexSettings16.setEnableWarmer(true);
        org.elasticsearch.common.settings.Settings settings32 = indexSettings16.settings;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings32);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intSetting10);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_na_" + "'", str21, "_na_");
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(mergePolicy25);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 60000L + "'", long29 == 60000L);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexSettings2.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings16.archiveUnknownOrBrokenSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings20);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap24 = indexMetaData14.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.Settings settings26 = indexMetaData14.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings32.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32, strPredicate37, indexScopedSettings38);
        java.util.function.Predicate<java.lang.String> strPredicate44 = indexScopedSettings38.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean47 = indexScopedSettings45.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings49 = indexScopedSettings45.archiveUnknownOrBrokenSettings(settings48);
        org.elasticsearch.index.IndexSettings indexSettings50 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData12, settings26, strPredicate44, indexScopedSettings45);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput51 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData12.writeTo(streamOutput51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strPredicate44);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        int int17 = indexMetaData10.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData18);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings20.archiveUnknownOrBrokenSettings(settings23);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings24.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state29 = indexMetaData28.getState();
        java.util.Set<java.lang.String> strSet31 = null; // flaky: indexMetaData28.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap32 = indexMetaData28.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff33 = indexMetaData18.diff(indexMetaData28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings36);
        boolean boolean38 = indexSettings37.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings37.settings = settings39;
        org.elasticsearch.common.settings.Settings settings42 = settings39.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings39);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings43);
        org.elasticsearch.common.settings.Settings settings46 = settings43.getAsSettings("index.");
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = indexSettings47.getIndexMetaData();
        boolean boolean49 = indexSettings47.isShadowReplicaIndex;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting50 = indexSettings47.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + state29 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state29.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertNotNull(indexMetaDataDiff33);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(durabilitySetting50);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings6.archiveUnknownOrBrokenSettings(settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData11.getState();
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData11.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = new org.elasticsearch.common.settings.IndexScopedSettings(settings4, indexScopedSettings6, indexMetaData11);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = settings4.getAsMemory("", "_na_");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [] with value [_na_] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet14);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings30.archiveUnknownOrBrokenSettings(settings33);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings34.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean42 = indexScopedSettings40.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = indexScopedSettings40.archiveUnknownOrBrokenSettings(settings43);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings43.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate48 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings49.archiveUnknownOrBrokenSettings(settings52);
        org.elasticsearch.index.IndexSettings indexSettings54 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData38, settings43, strPredicate48, indexScopedSettings49);
        org.elasticsearch.index.IndexSettings indexSettings55 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData28, settings34, strPredicate37, indexScopedSettings49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData56);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings62 = indexScopedSettings58.archiveUnknownOrBrokenSettings(settings61);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings61.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate66 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean69 = indexScopedSettings67.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings67.archiveUnknownOrBrokenSettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData56, settings61, strPredicate66, indexScopedSettings67);
        org.elasticsearch.common.settings.Settings settings73 = indexScopedSettings49.applySettings(settings61);
        org.elasticsearch.common.settings.Settings settings75 = settings61.getByPrefix("");
        indexScopedSettings21.validate(settings61);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap78 = settings61.getAsGroups(true);
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings61);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings79, streamOutput80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(settings79);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings8 = builder7.build();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.put("primary_terms", (int) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder12.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder13.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder13.putNull("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData22.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings25);
        boolean boolean27 = indexSettings26.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings26.settings = settings28;
        org.elasticsearch.common.settings.Settings settings31 = settings28.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings35.archiveUnknownOrBrokenSettings(settings38);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings38.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate43 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean46 = indexScopedSettings44.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings44.archiveUnknownOrBrokenSettings(settings47);
        org.elasticsearch.index.IndexSettings indexSettings49 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData33, settings38, strPredicate43, indexScopedSettings44);
        org.elasticsearch.index.IndexSettings indexSettings50 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData22, settings28, strPredicate32, indexScopedSettings44);
        java.lang.String str52 = settings28.get("index.shadow_replicas");
        org.elasticsearch.common.unit.TimeValue timeValue54 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue55 = settings28.getAsTime("index.", timeValue54);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder13.put(settings28);
        java.util.Map<java.lang.String, java.lang.String> strMap57 = builder13.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings59);
        boolean boolean61 = indexSettings60.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings60.settings = settings62;
        boolean boolean64 = indexSettings60.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting65 = indexSettings60.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings66 = indexSettings60.nodeSettings;
        int int67 = indexSettings60.maxResultWindow;
        boolean boolean68 = indexSettings60.isIndexUsingShadowReplicas();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher69 = indexSettings60.getParseFieldMatcher();
        java.util.function.Predicate<java.lang.String> strPredicate70 = indexSettings60.getindexNameMatcher();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder72 = builder7.putProperties(strMap57, strPredicate70, strFunction71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(booleanSetting65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10000 + "'", int67 == 10000);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher69);
        org.junit.Assert.assertNotNull(strPredicate70);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        long long6 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mapping("");
        org.elasticsearch.common.xcontent.XContentParser xContentParser10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings12);
        boolean boolean14 = indexSettings13.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings13.settings = settings15;
        int int17 = indexSettings13.maxRescoreWindow;
        boolean boolean18 = indexSettings13.TTLPurgeDisabled;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher19 = indexSettings13.parseFieldMatcher;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = indexMetaData0.fromXContent(xContentParser10, parseFieldMatcher19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher19);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        int int7 = indexSettings6.getNumberOfReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue8 = indexSettings6.flushThresholdSize;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        java.lang.Boolean boolean10 = indexSettings6.getValue(booleanSetting9);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = indexSettings6.flushThresholdSize;
        org.elasticsearch.common.logging.ESLogger eSLogger12 = indexSettings6.logger;
        org.elasticsearch.common.unit.TimeValue timeValue13 = indexSettings6.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting14 = indexSettings6.getINDEX_CHECK_ON_STARTUP();
        boolean boolean15 = indexSettings6.TTLPurgeDisabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteSizeValue8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + true + "'", boolean10, true);
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertNotNull(eSLogger12);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertNotNull(strSetting14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.Version version17 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData19.getState();
        int int21 = indexMetaData19.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap22 = indexMetaData19.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings27);
        boolean boolean29 = indexSettings28.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings28.settings = settings30;
        org.elasticsearch.common.settings.Settings settings33 = settings30.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings33);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings34);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings34.getGroups("_na_", true);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings34);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher40 = indexSettings39.parseFieldMatcher;
        boolean boolean41 = indexSettings39.getdefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(parseFieldMatcher40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean11 = indexScopedSettings9.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings9.archiveUnknownOrBrokenSettings(settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = indexMetaData15.getState();
        java.util.Set<java.lang.String> strSet18 = null; // flaky: indexMetaData15.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version19 = indexMetaData15.getUpgradedVersion();
        org.elasticsearch.Version version20 = settings13.getAsVersion("", version19);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder7.put("", version19);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings24);
        boolean boolean26 = indexSettings25.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings25.settings = settings27;
        boolean boolean29 = indexSettings25.queryStringLenient;
        boolean boolean30 = indexSettings25.TTLPurgeDisabled;
        boolean boolean31 = indexSettings25.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version32 = indexSettings25.version;
        org.elasticsearch.common.unit.TimeValue timeValue33 = indexSettings25.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability34 = indexSettings25.getTranslogDurability();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting35 = indexSettings25.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.elasticsearch.Version version36 = indexSettings25.version;
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder21.put("index.shared_filesystem", version36);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder39 = builder21.put(objDictionary38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(version19);
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(version32);
        org.junit.Assert.assertNotNull(timeValue33);
        org.junit.Assert.assertTrue("'" + durability34 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability34.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValueSetting35);
        org.junit.Assert.assertNotNull(version36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mapping("index.blocks.read_only");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNull(mappingMetaData10);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str8 = indexSettings2.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.syncInterval;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting11 = indexSettings2.getDEFAULT_FIELD_SETTING();
        java.util.function.Predicate<java.lang.String> strPredicate12 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings13 = indexSettings2.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(strSetting11);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(settings13);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.index.translog.Translog.Durability durability10 = indexSettings2.durability;
        boolean boolean11 = indexSettings2.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting12 = indexSettings2.getMAX_RESCORE_WINDOW_SETTING();
        boolean boolean13 = indexSettings2.TTLPurgeDisabled;
        java.lang.Class<?> wildcardClass14 = indexSettings2.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + durability10 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability10.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(intSetting12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.index.translog.Translog.Durability durability10 = indexSettings2.durability;
        boolean boolean11 = indexSettings2.queryStringAnalyzeWildcard;
        boolean boolean12 = indexSettings2.isOnSharedFilesystem();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = indexSettings2.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings15);
        boolean boolean17 = indexSettings16.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings16.settings = settings18;
        int int20 = indexSettings16.maxRescoreWindow;
        java.lang.String str21 = indexSettings16.getUUID();
        org.elasticsearch.common.settings.Settings settings22 = indexSettings16.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting23 = indexSettings16.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher24 = indexSettings16.getParseFieldMatcher();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting25 = indexSettings16.getDEFAULT_FIELD_SETTING();
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings16.getMergePolicy();
        boolean boolean27 = indexSettings16.isOnSharedFilesystem();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = indexSettings16.getScopedSettings();
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet29 = indexScopedSettings28.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state31 = indexMetaData30.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings33);
        boolean boolean35 = indexSettings34.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings34.settings = settings36;
        org.elasticsearch.common.settings.Settings settings39 = settings36.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData41);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings47 = indexScopedSettings43.archiveUnknownOrBrokenSettings(settings46);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings46.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean54 = indexScopedSettings52.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings56 = indexScopedSettings52.archiveUnknownOrBrokenSettings(settings55);
        org.elasticsearch.index.IndexSettings indexSettings57 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData41, settings46, strPredicate51, indexScopedSettings52);
        org.elasticsearch.index.IndexSettings indexSettings58 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData30, settings36, strPredicate40, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings61);
        boolean boolean63 = indexSettings62.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings62.settings = settings64;
        boolean boolean66 = indexSettings62.queryStringLenient;
        boolean boolean67 = indexSettings62.TTLPurgeDisabled;
        long long68 = indexSettings62.getGcDeletesInMillis();
        boolean boolean69 = indexSettings62.TTLPurgeDisabled;
        boolean boolean70 = indexSettings62.queryStringLenient;
        java.lang.String str71 = indexSettings62.getNodeName();
        org.elasticsearch.Version version72 = indexSettings62.getIndexVersionCreated();
        org.elasticsearch.Version version73 = settings36.getAsVersion("index.shadow_replicas", version72);
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings28.applySettings(settings36);
        org.elasticsearch.common.settings.Settings settings75 = indexScopedSettings13.dryRun(settings74);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + durability10 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability10.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_na_" + "'", str21, "_na_");
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(booleanSetting23);
        org.junit.Assert.assertNotNull(parseFieldMatcher24);
        org.junit.Assert.assertNotNull(strSetting25);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(wildcardSettingSet29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + state31 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state31.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 60000L + "'", long68 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(version72);
        org.junit.Assert.assertNotNull(version73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings75);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.refreshInterval;
        indexSettings2.setMaxRescoreWindow((int) 'a');
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings2.globalCheckpointInterval;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = indexSettings2.flushThresholdSize;
        indexSettings2.setMaxResultWindow(100);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(byteSizeValue13);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.lang.String str21 = settings19.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder30.replacePropertyPlaceholders();
        boolean boolean33 = indexScopedSettings11.updateDynamicSettings(settings19, builder26, builder31, "_all");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = indexScopedSettings11.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings36);
        boolean boolean38 = indexSettings37.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings37.settings = settings39;
        boolean boolean41 = indexSettings37.queryStringLenient;
        boolean boolean42 = indexSettings37.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig43 = indexSettings37.mergePolicyConfig;
        int int44 = indexSettings37.getMaxRescoreWindow();
        int int45 = indexSettings37.maxRescoreWindow;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting46 = indexSettings37.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue47 = indexSettings37.getFlushThresholdSize();
        java.lang.String str48 = indexSettings37.defaultField;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = indexSettings37.getScopedSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings51);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean55 = indexScopedSettings53.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings57);
        boolean boolean59 = indexSettings58.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings58.settings = settings60;
        org.elasticsearch.common.settings.Settings settings63 = settings60.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings64 = indexScopedSettings53.archiveUnknownOrBrokenSettings(settings63);
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings64);
        org.elasticsearch.Version version66 = indexSettings65.version;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting67 = indexSettings65.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting68 = indexSettings65.getINDEX_WARMER_ENABLED_SETTING();
        java.lang.Boolean boolean69 = indexScopedSettings49.get(booleanSetting68);
        java.util.function.Consumer<java.lang.Boolean> booleanConsumer70 = null;
        indexScopedSettings11.addSettingsUpdateConsumer(booleanSetting68, booleanConsumer70);
        org.elasticsearch.common.settings.Setting.Property property72 = indexScopedSettings11.getScope();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10000 + "'", int44 == 10000);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10000 + "'", int45 == 10000);
        org.junit.Assert.assertNotNull(booleanSetting46);
        org.junit.Assert.assertNotNull(byteSizeValue47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "_all" + "'", str48, "_all");
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(version66);
        org.junit.Assert.assertNotNull(booleanSetting67);
        org.junit.Assert.assertNotNull(booleanSetting68);
        org.junit.Assert.assertEquals("'" + boolean69 + "' != '" + true + "'", boolean69, true);
        org.junit.Assert.assertTrue("'" + property72 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property72.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.Version version16 = indexSettings15.version;
        indexSettings15.warmerEnabled = false;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings15.indexMetaData;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData20);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings26.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings35.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean43 = indexScopedSettings41.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings41.archiveUnknownOrBrokenSettings(settings44);
        org.elasticsearch.index.IndexSettings indexSettings46 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData30, settings35, strPredicate40, indexScopedSettings41);
        org.elasticsearch.index.IndexSettings indexSettings47 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData20, settings26, strPredicate29, indexScopedSettings41);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings49);
        boolean boolean51 = indexSettings50.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings50.settings = settings52;
        boolean boolean54 = indexSettings50.queryStringLenient;
        boolean boolean55 = indexSettings50.TTLPurgeDisabled;
        java.lang.String str56 = indexSettings50.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings50.syncInterval;
// flaky:         indexSettings47.setRefreshInterval(timeValue57);
        indexSettings15.setGCDeletes(timeValue57);
        boolean boolean60 = indexSettings15.defaultAllowUnmappedFields;
        java.lang.String str61 = indexSettings15.customDataPath();
        java.lang.String str62 = indexSettings15.nodeName;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting63 = indexSettings15.getALLOW_UNMAPPED();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(booleanSetting63);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.loadFromSource("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings5);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings6.settings = settings8;
        org.elasticsearch.common.settings.Settings settings11 = settings8.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = new org.elasticsearch.common.settings.IndexScopedSettings(settings11, indexScopedSettings12, indexMetaData17);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray26 = settings11.getAsArray("", strArray24, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder2.extendArray("index.creation_date_string", strArray26);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = builder2.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strMap28);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = null; // flaky: indexSettings16.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting18 = null; // flaky: indexSettings16.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting19 = null; // flaky: indexSettings16.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        boolean boolean20 = false; // flaky: indexSettings16.queryStringAnalyzeWildcard;
        boolean boolean21 = false; // flaky: indexSettings16.getwarmerEnabled();
        org.apache.lucene.index.MergePolicy mergePolicy22 = null; // flaky: indexSettings16.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting17);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting18);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy22);
    }
}
